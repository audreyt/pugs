{

    package Array;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }

    BEGIN {
        $_ =
          ::DISPATCH( $::Scalar, "new",
            { modified => $_MODIFIED, name => "$_" } );
    }
    do {
        if (
            ::DISPATCH(
                ::DISPATCH(
                    ::DISPATCH( $GLOBAL::Code_defined, 'APPLY', $::Array ),
                    "true"
                ),
                "p5landish"
            )
          )
        {
        }
        else {
            $::Array = ::DISPATCH(
                ::DISPATCH(
                    $::Class, 'new', ::DISPATCH( $::Str, 'new', 'Array' )
                ),
                'PROTOTYPE',
            );
        }
    };
    ::DISPATCH(
        ::DISPATCH( $::Array, 'HOW', ),
        'add_parent',
        ::DISPATCH( $::Str, 'new', 'Container' )
    );
    ::DISPATCH(
        ::DISPATCH( $::Array, 'HOW', ),
        'add_method',
        ::DISPATCH( $::Str, 'new', 'perl' ),
        ::DISPATCH(
            $::Method,
            'new',
            sub {
                my $self   = shift;
                my $List__ = \@_;
                my $v;
                $v =
                  ::DISPATCH( $::Scalar, 'new',
                    { modified => $_MODIFIED, name => '$v' } )
                  unless defined $v;

                BEGIN {
                    $v =
                      ::DISPATCH( $::Scalar, 'new',
                        { modified => $_MODIFIED, name => '$v' } );
                }
                my $s;
                $s =
                  ::DISPATCH( $::Scalar, 'new',
                    { modified => $_MODIFIED, name => '$s' } )
                  unless defined $s;

                BEGIN {
                    $s =
                      ::DISPATCH( $::Scalar, 'new',
                        { modified => $_MODIFIED, name => '$s' } );
                }
                $v;
                ::DISPATCH_VAR( $s, 'STORE',
                    ::DISPATCH( $::Str, 'new', '[ ' ) );
                do {
                    for my $v (
                        ::DISPATCH(
                            $GLOBAL::Code_prefix_58__60__64__62_,
                            'APPLY',
                            ::DISPATCH( $GLOBAL::Code_self, 'APPLY', )
                        )
                      )
                    {
                        ::DISPATCH_VAR(
                            $s, 'STORE',
                            ::DISPATCH(
                                $GLOBAL::Code_infix_58__60__126__62_,
                                'APPLY', $s,
                                ::DISPATCH(
                                    $GLOBAL::Code_infix_58__60__126__62_,
                                    'APPLY',
                                    $v,
                                    ::DISPATCH( $::Str, 'new', ', ' )
                                )
                            )
                        );
                    }
                };
                return (
                    ::DISPATCH(
                        $GLOBAL::Code_infix_58__60__126__62_,
                        'APPLY', $s, ::DISPATCH( $::Str, 'new', ' ]' )
                    )
                );
            }
        )
    );
    ::DISPATCH(
        ::DISPATCH( $::Array, 'HOW', ),
        'add_method',
        ::DISPATCH( $::Str, 'new', 'str' ),
        ::DISPATCH(
            $::Method,
            'new',
            sub {
                my $self   = shift;
                my $List__ = \@_;
                my $v;
                $v =
                  ::DISPATCH( $::Scalar, 'new',
                    { modified => $_MODIFIED, name => '$v' } )
                  unless defined $v;

                BEGIN {
                    $v =
                      ::DISPATCH( $::Scalar, 'new',
                        { modified => $_MODIFIED, name => '$v' } );
                }
                my $s;
                $s =
                  ::DISPATCH( $::Scalar, 'new',
                    { modified => $_MODIFIED, name => '$s' } )
                  unless defined $s;

                BEGIN {
                    $s =
                      ::DISPATCH( $::Scalar, 'new',
                        { modified => $_MODIFIED, name => '$s' } );
                }
                $v;
                ::DISPATCH_VAR( $s, 'STORE', ::DISPATCH( $::Str, 'new', '' ) );
                do {
                    for my $v (
                        ::DISPATCH(
                            $GLOBAL::Code_prefix_58__60__64__62_,
                            'APPLY',
                            ::DISPATCH( $GLOBAL::Code_self, 'APPLY', )
                        )
                      )
                    {
                        ::DISPATCH_VAR(
                            $s, 'STORE',
                            ::DISPATCH(
                                $GLOBAL::Code_infix_58__60__126__62_,
                                'APPLY', $s,
                                ::DISPATCH(
                                    $GLOBAL::Code_infix_58__60__126__62_,
                                    'APPLY',
                                    $v,
                                    ::DISPATCH( $::Str, 'new', ', ' )
                                )
                            )
                        );
                    }
                };
                return ($s);
            }
        )
    );
    ::DISPATCH(
        ::DISPATCH( $::Array, 'HOW', ),
        'add_method',
        ::DISPATCH( $::Str, 'new', 'true' ),
        ::DISPATCH(
            $::Method,
            'new',
            sub {
                my $self   = shift;
                my $List__ = \@_;
                ::DISPATCH(
                    $GLOBAL::Code_infix_58__60__33__61__62_,
                    'APPLY',
                    ::DISPATCH( $self, 'elems', ),
                    ::DISPATCH( $::Int, 'new', 0 )
                );
            }
        )
    );
    ::DISPATCH(
        ::DISPATCH( $::Array, 'HOW', ),
        'add_method',
        ::DISPATCH( $::Str, 'new', 'int' ),
        ::DISPATCH(
            $::Method,
            'new',
            sub {
                my $self   = shift;
                my $List__ = \@_;
                ::DISPATCH( $self, 'elems', );
            }
        )
    );
    1
}

