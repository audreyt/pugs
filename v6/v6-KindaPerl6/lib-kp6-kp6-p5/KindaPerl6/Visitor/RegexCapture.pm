{

    package KindaPerl6::Visitor::RegexCapture;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::KP6Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }
    BEGIN { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::KindaPerl6::Visitor::RegexCapture ), "true" ), "p5landish" ) ) { }
            else {
                {
                    do {
                        ::MODIFIED($::KindaPerl6::Visitor::RegexCapture);
                        $::KindaPerl6::Visitor::RegexCapture = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'KindaPerl6::Visitor::RegexCapture' ) ), 'PROTOTYPE', );
                        }
                }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::KindaPerl6::Visitor::RegexCapture, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'visit' ),
            ::DISPATCH(
                $::Method,
                'new',
                sub {
                    my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                    my $node;
                    $node = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$node' } ) unless defined $node;
                    BEGIN { $node = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$node' } ) }
                    my $node_name;
                    $node_name = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$node_name' } ) unless defined $node_name;
                    BEGIN { $node_name = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$node_name' } ) }
                    $self = shift;
                    my $CAPTURE;
                    $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                    BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                    ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                    do {
                        ::MODIFIED($List__);
                        $List__ = ::DISPATCH( $CAPTURE, 'array', );
                    };
                    do {
                        ::MODIFIED($Hash__);
                        $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                    };
                    do {
                        ::MODIFIED($node);
                        $node = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 ) );
                    };
                    do {
                        ::MODIFIED($node_name);
                        $node_name = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 ) );
                    };
                    do {
                        if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', $node_name, ::DISPATCH( $::Str, 'new', 'Token' ) ), "true" ), "p5landish" ) ) {
                            {
                                ::DISPATCH( ::DISPATCH( $node, 'regex', ), 'capture_count', ::DISPATCH( $::Int, 'new', 0 ), ::DISPATCH( $::Int, 'new', 0 ), ::DISPATCH( $::Hash, "new", { _hash => {} } ) );
                                return ($node)
                            }
                        }
                    };
                    return ($::Undef);
                }
            )
            )
    };
    1
}
{

    package Rule::Quantifier;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::KP6Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }
    BEGIN { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::Rule::Quantifier ), "true" ), "p5landish" ) ) { }
            else {
                {
                    do {
                        ::MODIFIED($::Rule::Quantifier);
                        $::Rule::Quantifier = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'Rule::Quantifier' ) ), 'PROTOTYPE', );
                        }
                }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::Quantifier, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'capture_count' ),
            ::DISPATCH(
                $::Method,
                'new',
                sub {
                    my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                    my $count;
                    $count = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$count' } ) unless defined $count;
                    BEGIN { $count = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$count' } ) }
                    my $quantified;
                    $quantified = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$quantified' } ) unless defined $quantified;
                    BEGIN { $quantified = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$quantified' } ) }
                    my $seen;
                    $seen = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$seen' } ) unless defined $seen;
                    BEGIN { $seen = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$seen' } ) }
                    $self = shift;
                    my $CAPTURE;
                    $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                    BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                    ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                    do {
                        ::MODIFIED($List__);
                        $List__ = ::DISPATCH( $CAPTURE, 'array', );
                    };
                    do {
                        ::MODIFIED($Hash__);
                        $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                    };
                    do {
                        ::MODIFIED($count);
                        $count = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 ) );
                    };
                    do {
                        ::MODIFIED($quantified);
                        $quantified = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 ) );
                    };
                    do {
                        ::MODIFIED($seen);
                        $seen = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 2 ) );
                    };
                    ::DISPATCH( ::DISPATCH( $self, "term" ), 'capture_count', $count, ::DISPATCH( $::Int, 'new', 1 ), $seen );
                    $count;
                }
            )
            )
    };
    1
}
{

    package Rule::Or;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::KP6Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }
    BEGIN { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::Rule::Or ), "true" ), "p5landish" ) ) { }
            else {
                {
                    do {
                        ::MODIFIED($::Rule::Or);
                        $::Rule::Or = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'Rule::Or' ) ), 'PROTOTYPE', );
                        }
                }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::Or, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'capture_count' ),
            ::DISPATCH(
                $::Method,
                'new',
                sub {
                    my $max;
                    $max = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$max' } ) unless defined $max;
                    BEGIN { $max = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$max' } ) }
                    my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                    my $count;
                    $count = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$count' } ) unless defined $count;
                    BEGIN { $count = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$count' } ) }
                    my $quantified;
                    $quantified = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$quantified' } ) unless defined $quantified;
                    BEGIN { $quantified = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$quantified' } ) }
                    my $seen;
                    $seen = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$seen' } ) unless defined $seen;
                    BEGIN { $seen = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$seen' } ) }
                    $self = shift;
                    my $CAPTURE;
                    $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                    BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                    ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                    do {
                        ::MODIFIED($List__);
                        $List__ = ::DISPATCH( $CAPTURE, 'array', );
                    };
                    do {
                        ::MODIFIED($Hash__);
                        $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                    };
                    do {
                        ::MODIFIED($count);
                        $count = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 ) );
                    };
                    do {
                        ::MODIFIED($quantified);
                        $quantified = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 ) );
                    };
                    do {
                        ::MODIFIED($seen);
                        $seen = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 2 ) );
                    };
                    do {
                        ::MODIFIED($max);
                        $max = $count;
                    };
                    {
                        my $regex;
                        $regex = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$regex' } ) unless defined $regex;
                        BEGIN { $regex = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$regex' } ) }
                        for $regex ( @{ ::DISPATCH( $self, "or" )->{_value}{_array} } ) {
                            {
                                my $last;
                                $last = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$last' } ) unless defined $last;
                                BEGIN { $last = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$last' } ) }
                                do {
                                    ::MODIFIED($last);
                                    $last = ::DISPATCH( $regex, 'capture_count', $count, $quantified, $seen );
                                };
                                do {
                                    if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_infix_58__60__62__62_, 'APPLY', $last, $max ), "true" ), "p5landish" ) ) {
                                        {
                                            do {
                                                ::MODIFIED($max);
                                                $max = $last;
                                                }
                                        }
                                    }
                                    }
                            }
                        }
                    };
                    $max;
                }
            )
            )
    };
    1
}
{

    package Rule::Concat;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::KP6Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }
    BEGIN { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::Rule::Concat ), "true" ), "p5landish" ) ) { }
            else {
                {
                    do {
                        ::MODIFIED($::Rule::Concat);
                        $::Rule::Concat = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'Rule::Concat' ) ), 'PROTOTYPE', );
                        }
                }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::Concat, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'capture_count' ),
            ::DISPATCH(
                $::Method,
                'new',
                sub {
                    my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                    my $count;
                    $count = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$count' } ) unless defined $count;
                    BEGIN { $count = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$count' } ) }
                    my $quantified;
                    $quantified = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$quantified' } ) unless defined $quantified;
                    BEGIN { $quantified = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$quantified' } ) }
                    my $seen;
                    $seen = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$seen' } ) unless defined $seen;
                    BEGIN { $seen = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$seen' } ) }
                    $self = shift;
                    my $CAPTURE;
                    $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                    BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                    ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                    do {
                        ::MODIFIED($List__);
                        $List__ = ::DISPATCH( $CAPTURE, 'array', );
                    };
                    do {
                        ::MODIFIED($Hash__);
                        $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                    };
                    do {
                        ::MODIFIED($count);
                        $count = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 ) );
                    };
                    do {
                        ::MODIFIED($quantified);
                        $quantified = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 ) );
                    };
                    do {
                        ::MODIFIED($seen);
                        $seen = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 2 ) );
                    };
                    {
                        my $regex;
                        $regex = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$regex' } ) unless defined $regex;
                        BEGIN { $regex = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$regex' } ) }
                        for $regex ( @{ ::DISPATCH( $self, "concat" )->{_value}{_array} } ) {
                            {
                                do {
                                    ::MODIFIED($count);
                                    $count = ::DISPATCH( $regex, 'capture_count', $count, $quantified, $seen );
                                    }
                            }
                        }
                    };
                    $count;
                }
            )
            )
    };
    1
}
{

    package Rule::SubruleNoCapture;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::KP6Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }
    BEGIN { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::Rule::SubruleNoCapture ), "true" ), "p5landish" ) ) { }
            else {
                {
                    do {
                        ::MODIFIED($::Rule::SubruleNoCapture);
                        $::Rule::SubruleNoCapture = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'Rule::SubruleNoCapture' ) ), 'PROTOTYPE', );
                        }
                }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::SubruleNoCapture, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'capture_count' ),
            ::DISPATCH(
                $::Method,
                'new',
                sub {
                    my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                    my $count;
                    $count = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$count' } ) unless defined $count;
                    BEGIN { $count = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$count' } ) }
                    my $quantified;
                    $quantified = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$quantified' } ) unless defined $quantified;
                    BEGIN { $quantified = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$quantified' } ) }
                    my $seen;
                    $seen = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$seen' } ) unless defined $seen;
                    BEGIN { $seen = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$seen' } ) }
                    $self = shift;
                    my $CAPTURE;
                    $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                    BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                    ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                    do {
                        ::MODIFIED($List__);
                        $List__ = ::DISPATCH( $CAPTURE, 'array', );
                    };
                    do {
                        ::MODIFIED($Hash__);
                        $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                    };
                    do {
                        ::MODIFIED($count);
                        $count = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 ) );
                    };
                    do {
                        ::MODIFIED($quantified);
                        $quantified = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 ) );
                    };
                    do {
                        ::MODIFIED($seen);
                        $seen = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 2 ) );
                    };
                    $count;
                }
            )
            )
    };
    1
}
{

    package Rule::Var;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::KP6Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }
    BEGIN { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::Rule::Var ), "true" ), "p5landish" ) ) { }
            else {
                {
                    do {
                        ::MODIFIED($::Rule::Var);
                        $::Rule::Var = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'Rule::Var' ) ), 'PROTOTYPE', );
                        }
                }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::Var, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'capture_count' ),
            ::DISPATCH(
                $::Method,
                'new',
                sub {
                    my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                    my $count;
                    $count = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$count' } ) unless defined $count;
                    BEGIN { $count = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$count' } ) }
                    my $quantified;
                    $quantified = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$quantified' } ) unless defined $quantified;
                    BEGIN { $quantified = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$quantified' } ) }
                    my $seen;
                    $seen = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$seen' } ) unless defined $seen;
                    BEGIN { $seen = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$seen' } ) }
                    $self = shift;
                    my $CAPTURE;
                    $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                    BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                    ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                    do {
                        ::MODIFIED($List__);
                        $List__ = ::DISPATCH( $CAPTURE, 'array', );
                    };
                    do {
                        ::MODIFIED($Hash__);
                        $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                    };
                    do {
                        ::MODIFIED($count);
                        $count = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 ) );
                    };
                    do {
                        ::MODIFIED($quantified);
                        $quantified = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 ) );
                    };
                    do {
                        ::MODIFIED($seen);
                        $seen = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 2 ) );
                    };
                    $count;
                }
            )
            )
    };
    1
}
{

    package Rule::Constant;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::KP6Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }
    BEGIN { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::Rule::Constant ), "true" ), "p5landish" ) ) { }
            else {
                {
                    do {
                        ::MODIFIED($::Rule::Constant);
                        $::Rule::Constant = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'Rule::Constant' ) ), 'PROTOTYPE', );
                        }
                }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::Constant, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'capture_count' ),
            ::DISPATCH(
                $::Method,
                'new',
                sub {
                    my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                    my $count;
                    $count = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$count' } ) unless defined $count;
                    BEGIN { $count = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$count' } ) }
                    my $quantified;
                    $quantified = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$quantified' } ) unless defined $quantified;
                    BEGIN { $quantified = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$quantified' } ) }
                    my $seen;
                    $seen = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$seen' } ) unless defined $seen;
                    BEGIN { $seen = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$seen' } ) }
                    $self = shift;
                    my $CAPTURE;
                    $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                    BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                    ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                    do {
                        ::MODIFIED($List__);
                        $List__ = ::DISPATCH( $CAPTURE, 'array', );
                    };
                    do {
                        ::MODIFIED($Hash__);
                        $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                    };
                    do {
                        ::MODIFIED($count);
                        $count = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 ) );
                    };
                    do {
                        ::MODIFIED($quantified);
                        $quantified = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 ) );
                    };
                    do {
                        ::MODIFIED($seen);
                        $seen = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 2 ) );
                    };
                    $count;
                }
            )
            )
    };
    1
}
{

    package Rule::Dot;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::KP6Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }
    BEGIN { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::Rule::Dot ), "true" ), "p5landish" ) ) { }
            else {
                {
                    do {
                        ::MODIFIED($::Rule::Dot);
                        $::Rule::Dot = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'Rule::Dot' ) ), 'PROTOTYPE', );
                        }
                }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::Dot, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'capture_count' ),
            ::DISPATCH(
                $::Method,
                'new',
                sub {
                    my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                    my $count;
                    $count = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$count' } ) unless defined $count;
                    BEGIN { $count = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$count' } ) }
                    my $quantified;
                    $quantified = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$quantified' } ) unless defined $quantified;
                    BEGIN { $quantified = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$quantified' } ) }
                    my $seen;
                    $seen = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$seen' } ) unless defined $seen;
                    BEGIN { $seen = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$seen' } ) }
                    $self = shift;
                    my $CAPTURE;
                    $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                    BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                    ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                    do {
                        ::MODIFIED($List__);
                        $List__ = ::DISPATCH( $CAPTURE, 'array', );
                    };
                    do {
                        ::MODIFIED($Hash__);
                        $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                    };
                    do {
                        ::MODIFIED($count);
                        $count = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 ) );
                    };
                    do {
                        ::MODIFIED($quantified);
                        $quantified = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 ) );
                    };
                    do {
                        ::MODIFIED($seen);
                        $seen = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 2 ) );
                    };
                    $count;
                }
            )
            )
    };
    1
}
{

    package Rule::SpecialChar;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::KP6Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }
    BEGIN { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::Rule::SpecialChar ), "true" ), "p5landish" ) ) { }
            else {
                {
                    do {
                        ::MODIFIED($::Rule::SpecialChar);
                        $::Rule::SpecialChar = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'Rule::SpecialChar' ) ), 'PROTOTYPE', );
                        }
                }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::SpecialChar, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'capture_count' ),
            ::DISPATCH(
                $::Method,
                'new',
                sub {
                    my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                    my $count;
                    $count = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$count' } ) unless defined $count;
                    BEGIN { $count = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$count' } ) }
                    my $quantified;
                    $quantified = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$quantified' } ) unless defined $quantified;
                    BEGIN { $quantified = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$quantified' } ) }
                    my $seen;
                    $seen = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$seen' } ) unless defined $seen;
                    BEGIN { $seen = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$seen' } ) }
                    $self = shift;
                    my $CAPTURE;
                    $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                    BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                    ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                    do {
                        ::MODIFIED($List__);
                        $List__ = ::DISPATCH( $CAPTURE, 'array', );
                    };
                    do {
                        ::MODIFIED($Hash__);
                        $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                    };
                    do {
                        ::MODIFIED($count);
                        $count = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 ) );
                    };
                    do {
                        ::MODIFIED($quantified);
                        $quantified = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 ) );
                    };
                    do {
                        ::MODIFIED($seen);
                        $seen = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 2 ) );
                    };
                    $count;
                }
            )
            )
    };
    1
}
{

    package Rule::Block;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::KP6Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }
    BEGIN { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::Rule::Block ), "true" ), "p5landish" ) ) { }
            else {
                {
                    do {
                        ::MODIFIED($::Rule::Block);
                        $::Rule::Block = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'Rule::Block' ) ), 'PROTOTYPE', );
                        }
                }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::Block, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'capture_count' ),
            ::DISPATCH(
                $::Method,
                'new',
                sub {
                    my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                    my $count;
                    $count = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$count' } ) unless defined $count;
                    BEGIN { $count = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$count' } ) }
                    my $quantified;
                    $quantified = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$quantified' } ) unless defined $quantified;
                    BEGIN { $quantified = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$quantified' } ) }
                    my $seen;
                    $seen = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$seen' } ) unless defined $seen;
                    BEGIN { $seen = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$seen' } ) }
                    $self = shift;
                    my $CAPTURE;
                    $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                    BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                    ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                    do {
                        ::MODIFIED($List__);
                        $List__ = ::DISPATCH( $CAPTURE, 'array', );
                    };
                    do {
                        ::MODIFIED($Hash__);
                        $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                    };
                    do {
                        ::MODIFIED($count);
                        $count = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 ) );
                    };
                    do {
                        ::MODIFIED($quantified);
                        $quantified = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 ) );
                    };
                    do {
                        ::MODIFIED($seen);
                        $seen = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 2 ) );
                    };
                    $count;
                }
            )
            )
    };
    1
}
{

    package Rule::InterpolateVar;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::KP6Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }
    BEGIN { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::Rule::InterpolateVar ), "true" ), "p5landish" ) ) { }
            else {
                {
                    do {
                        ::MODIFIED($::Rule::InterpolateVar);
                        $::Rule::InterpolateVar = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'Rule::InterpolateVar' ) ), 'PROTOTYPE', );
                        }
                }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::InterpolateVar, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'capture_count' ),
            ::DISPATCH(
                $::Method,
                'new',
                sub {
                    my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                    my $count;
                    $count = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$count' } ) unless defined $count;
                    BEGIN { $count = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$count' } ) }
                    my $quantified;
                    $quantified = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$quantified' } ) unless defined $quantified;
                    BEGIN { $quantified = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$quantified' } ) }
                    my $seen;
                    $seen = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$seen' } ) unless defined $seen;
                    BEGIN { $seen = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$seen' } ) }
                    $self = shift;
                    my $CAPTURE;
                    $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                    BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                    ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                    do {
                        ::MODIFIED($List__);
                        $List__ = ::DISPATCH( $CAPTURE, 'array', );
                    };
                    do {
                        ::MODIFIED($Hash__);
                        $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                    };
                    do {
                        ::MODIFIED($count);
                        $count = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 ) );
                    };
                    do {
                        ::MODIFIED($quantified);
                        $quantified = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 ) );
                    };
                    do {
                        ::MODIFIED($seen);
                        $seen = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 2 ) );
                    };
                    $count;
                }
            )
            )
    };
    1
}
{

    package Rule::Before;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::KP6Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }
    BEGIN { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::Rule::Before ), "true" ), "p5landish" ) ) { }
            else {
                {
                    do {
                        ::MODIFIED($::Rule::Before);
                        $::Rule::Before = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'Rule::Before' ) ), 'PROTOTYPE', );
                        }
                }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::Before, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'capture_count' ),
            ::DISPATCH(
                $::Method,
                'new',
                sub {
                    my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                    my $count;
                    $count = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$count' } ) unless defined $count;
                    BEGIN { $count = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$count' } ) }
                    my $quantified;
                    $quantified = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$quantified' } ) unless defined $quantified;
                    BEGIN { $quantified = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$quantified' } ) }
                    my $seen;
                    $seen = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$seen' } ) unless defined $seen;
                    BEGIN { $seen = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$seen' } ) }
                    $self = shift;
                    my $CAPTURE;
                    $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                    BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                    ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                    do {
                        ::MODIFIED($List__);
                        $List__ = ::DISPATCH( $CAPTURE, 'array', );
                    };
                    do {
                        ::MODIFIED($Hash__);
                        $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                    };
                    do {
                        ::MODIFIED($count);
                        $count = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 ) );
                    };
                    do {
                        ::MODIFIED($quantified);
                        $quantified = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 ) );
                    };
                    do {
                        ::MODIFIED($seen);
                        $seen = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 2 ) );
                    };
                    do {
                        if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_infix_58__60_ne_62_, 'APPLY', ::DISPATCH( $self, "assertion_modifier" ), ::DISPATCH( $::Str, 'new', '' ) ), "true" ), "p5landish" ) ) {
                            {
                                return ($count)
                            }
                        }
                    };
                    do {
                        ::MODIFIED( ::DISPATCH( $self, "capture_to_array" ) );
                        ::DISPATCH( $self, "capture_to_array" ) = do {
                            do        { my $____some__weird___var____ = $quantified; ::DISPATCH( $____some__weird___var____, "true" )->{_value} && $____some__weird___var____ }
                                || do { my $____some__weird___var____ = $quantified; ::DISPATCH( $____some__weird___var____, "true" )->{_value} && $____some__weird___var____ }
                                || ::DISPATCH( $::Bit, "new", 0 );
                            }
                    };
                    do {
                        if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $seen, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'before' ) ), "true" ), "p5landish" ) ) {
                            {
                                ::DISPATCH( ::DISPATCH( $seen, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'before' ) ), 'capture_to_array', ::DISPATCH( $::Int, 'new', 1 ) )
                            }
                        }
                    };
                    ::DISPATCH_VAR( ::DISPATCH( $seen, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'before' ) ), 'STORE', $self );
                    ::DISPATCH( ::DISPATCH( $self, "rule" ), 'capture_count', ::DISPATCH( $::Int, 'new', 0 ), ::DISPATCH( $::Int, 'new', 0 ), ::DISPATCH( $::Hash, "new", { _hash => {} } ) );
                    $count;
                }
            )
            )
    };
    1
}
{

    package Rule::After;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::KP6Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }
    BEGIN { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::Rule::After ), "true" ), "p5landish" ) ) { }
            else {
                {
                    do {
                        ::MODIFIED($::Rule::After);
                        $::Rule::After = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'Rule::After' ) ), 'PROTOTYPE', );
                        }
                }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::After, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'capture_count' ),
            ::DISPATCH(
                $::Method,
                'new',
                sub {
                    my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                    my $count;
                    $count = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$count' } ) unless defined $count;
                    BEGIN { $count = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$count' } ) }
                    my $quantified;
                    $quantified = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$quantified' } ) unless defined $quantified;
                    BEGIN { $quantified = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$quantified' } ) }
                    my $seen;
                    $seen = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$seen' } ) unless defined $seen;
                    BEGIN { $seen = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$seen' } ) }
                    $self = shift;
                    my $CAPTURE;
                    $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                    BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                    ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                    do {
                        ::MODIFIED($List__);
                        $List__ = ::DISPATCH( $CAPTURE, 'array', );
                    };
                    do {
                        ::MODIFIED($Hash__);
                        $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                    };
                    do {
                        ::MODIFIED($count);
                        $count = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 ) );
                    };
                    do {
                        ::MODIFIED($quantified);
                        $quantified = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 ) );
                    };
                    do {
                        ::MODIFIED($seen);
                        $seen = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 2 ) );
                    };
                    do {
                        if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_infix_58__60_ne_62_, 'APPLY', ::DISPATCH( $self, "assertion_modifier" ), ::DISPATCH( $::Str, 'new', '' ) ), "true" ), "p5landish" ) ) {
                            {
                                return ($count)
                            }
                        }
                    };
                    do {
                        ::MODIFIED( ::DISPATCH( $self, "capture_to_array" ) );
                        ::DISPATCH( $self, "capture_to_array" ) = do {
                            do        { my $____some__weird___var____ = $quantified; ::DISPATCH( $____some__weird___var____, "true" )->{_value} && $____some__weird___var____ }
                                || do { my $____some__weird___var____ = $quantified; ::DISPATCH( $____some__weird___var____, "true" )->{_value} && $____some__weird___var____ }
                                || ::DISPATCH( $::Bit, "new", 0 );
                            }
                    };
                    do {
                        if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $seen, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'after' ) ), "true" ), "p5landish" ) ) {
                            {
                                ::DISPATCH( ::DISPATCH( $seen, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'after' ) ), 'capture_to_array', ::DISPATCH( $::Int, 'new', 1 ) )
                            }
                        }
                    };
                    ::DISPATCH_VAR( ::DISPATCH( $seen, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'after' ) ), 'STORE', $self );
                    ::DISPATCH( ::DISPATCH( $self, "rule" ), 'capture_count', ::DISPATCH( $::Int, 'new', 0 ), ::DISPATCH( $::Int, 'new', 0 ), ::DISPATCH( $::Hash, "new", { _hash => {} } ) );
                    $count;
                }
            )
            )
    };
    1
}
{

    package Rule::NegateCharClass;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::KP6Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }
    BEGIN { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::Rule::NegateCharClass ), "true" ), "p5landish" ) ) { }
            else {
                {
                    do {
                        ::MODIFIED($::Rule::NegateCharClass);
                        $::Rule::NegateCharClass = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'Rule::NegateCharClass' ) ), 'PROTOTYPE', );
                        }
                }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::NegateCharClass, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'capture_count' ),
            ::DISPATCH(
                $::Method,
                'new',
                sub {
                    my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                    my $count;
                    $count = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$count' } ) unless defined $count;
                    BEGIN { $count = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$count' } ) }
                    my $quantified;
                    $quantified = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$quantified' } ) unless defined $quantified;
                    BEGIN { $quantified = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$quantified' } ) }
                    my $seen;
                    $seen = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$seen' } ) unless defined $seen;
                    BEGIN { $seen = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$seen' } ) }
                    $self = shift;
                    my $CAPTURE;
                    $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                    BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                    ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                    do {
                        ::MODIFIED($List__);
                        $List__ = ::DISPATCH( $CAPTURE, 'array', );
                    };
                    do {
                        ::MODIFIED($Hash__);
                        $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                    };
                    do {
                        ::MODIFIED($count);
                        $count = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 ) );
                    };
                    do {
                        ::MODIFIED($quantified);
                        $quantified = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 ) );
                    };
                    do {
                        ::MODIFIED($seen);
                        $seen = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 2 ) );
                    };
                    $count;
                }
            )
            )
    };
    1
}
{

    package Rule::CharClass;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::KP6Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }
    BEGIN { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::Rule::CharClass ), "true" ), "p5landish" ) ) { }
            else {
                {
                    do {
                        ::MODIFIED($::Rule::CharClass);
                        $::Rule::CharClass = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'Rule::CharClass' ) ), 'PROTOTYPE', );
                        }
                }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::CharClass, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'capture_count' ),
            ::DISPATCH(
                $::Method,
                'new',
                sub {
                    my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                    my $count;
                    $count = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$count' } ) unless defined $count;
                    BEGIN { $count = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$count' } ) }
                    my $quantified;
                    $quantified = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$quantified' } ) unless defined $quantified;
                    BEGIN { $quantified = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$quantified' } ) }
                    my $seen;
                    $seen = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$seen' } ) unless defined $seen;
                    BEGIN { $seen = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$seen' } ) }
                    $self = shift;
                    my $CAPTURE;
                    $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                    BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                    ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                    do {
                        ::MODIFIED($List__);
                        $List__ = ::DISPATCH( $CAPTURE, 'array', );
                    };
                    do {
                        ::MODIFIED($Hash__);
                        $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                    };
                    do {
                        ::MODIFIED($count);
                        $count = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 ) );
                    };
                    do {
                        ::MODIFIED($quantified);
                        $quantified = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 ) );
                    };
                    do {
                        ::MODIFIED($seen);
                        $seen = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 2 ) );
                    };
                    $count;
                }
            )
            )
    };
    1
}
{

    package Rule::Subrule;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::KP6Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }
    BEGIN { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::Rule::Subrule ), "true" ), "p5landish" ) ) { }
            else {
                {
                    do {
                        ::MODIFIED($::Rule::Subrule);
                        $::Rule::Subrule = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'Rule::Subrule' ) ), 'PROTOTYPE', );
                        }
                }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::Subrule, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'capture_count' ),
            ::DISPATCH(
                $::Method,
                'new',
                sub {
                    my $meth;
                    $meth = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$meth' } ) unless defined $meth;
                    BEGIN { $meth = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$meth' } ) }
                    my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                    my $count;
                    $count = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$count' } ) unless defined $count;
                    BEGIN { $count = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$count' } ) }
                    my $quantified;
                    $quantified = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$quantified' } ) unless defined $quantified;
                    BEGIN { $quantified = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$quantified' } ) }
                    my $seen;
                    $seen = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$seen' } ) unless defined $seen;
                    BEGIN { $seen = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$seen' } ) }
                    $self = shift;
                    my $CAPTURE;
                    $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                    BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                    ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                    do {
                        ::MODIFIED($List__);
                        $List__ = ::DISPATCH( $CAPTURE, 'array', );
                    };
                    do {
                        ::MODIFIED($Hash__);
                        $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                    };
                    do {
                        ::MODIFIED($count);
                        $count = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 ) );
                    };
                    do {
                        ::MODIFIED($quantified);
                        $quantified = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 ) );
                    };
                    do {
                        ::MODIFIED($seen);
                        $seen = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 2 ) );
                    };
                    do {
                        ::MODIFIED($meth);
                        $meth = ::DISPATCH(
                            $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_,
                            'APPLY',
                            ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 ), ::DISPATCH( $GLOBAL::Code_index, 'APPLY', ::DISPATCH( $self, "metasyntax" ), ::DISPATCH( $::Str, 'new', '.' ) ) ),
                            ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( $self, "metasyntax" ), ::DISPATCH( $::Str, 'new', ' ... TODO ' ) ),
                            ::DISPATCH(
                                $GLOBAL::Code_infix_58__60__126__62_, 'APPLY',
                                ::DISPATCH( $::Str, 'new', '\\\'$\\\'.$GLOBAL::_Class.\\\'::_regex_' ), ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( $self, "metasyntax" ), ::DISPATCH( $::Str, 'new', '\\\'' ) )
                            )
                        );
                    };
                    do {
                        ::MODIFIED( ::DISPATCH( $self, "ident" ) );
                        ::DISPATCH( $self, "ident" ) = ::DISPATCH( $self, "metasyntax" );
                    };
                    do {
                        ::MODIFIED( ::DISPATCH( $self, "capture_to_array" ) );
                        ::DISPATCH( $self, "capture_to_array" ) = do {
                            do        { my $____some__weird___var____ = $quantified; ::DISPATCH( $____some__weird___var____, "true" )->{_value} && $____some__weird___var____ }
                                || do { my $____some__weird___var____ = $quantified; ::DISPATCH( $____some__weird___var____, "true" )->{_value} && $____some__weird___var____ }
                                || ::DISPATCH( $::Bit, "new", 0 );
                            }
                    };
                    do {
                        if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $seen, 'LOOKUP', ::DISPATCH( $self, "ident" ) ), "true" ), "p5landish" ) ) {
                            {
                                ::DISPATCH( ::DISPATCH( $seen, 'LOOKUP', ::DISPATCH( $self, "ident" ) ), 'capture_to_array', ::DISPATCH( $::Int, 'new', 1 ) )
                            }
                        }
                    };
                    ::DISPATCH_VAR( ::DISPATCH( $seen, 'LOOKUP', ::DISPATCH( $self, "ident" ) ), 'STORE', $self );
                    $count;
                }
            )
            )
    };
    1
}
{

    package Rule::NamedCapture;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::KP6Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }
    BEGIN { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::Rule::NamedCapture ), "true" ), "p5landish" ) ) { }
            else {
                {
                    do {
                        ::MODIFIED($::Rule::NamedCapture);
                        $::Rule::NamedCapture = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'Rule::NamedCapture' ) ), 'PROTOTYPE', );
                        }
                }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::NamedCapture, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'capture_count' ),
            ::DISPATCH(
                $::Method,
                'new',
                sub {
                    my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                    my $count;
                    $count = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$count' } ) unless defined $count;
                    BEGIN { $count = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$count' } ) }
                    my $quantified;
                    $quantified = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$quantified' } ) unless defined $quantified;
                    BEGIN { $quantified = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$quantified' } ) }
                    my $seen;
                    $seen = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$seen' } ) unless defined $seen;
                    BEGIN { $seen = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$seen' } ) }
                    $self = shift;
                    my $CAPTURE;
                    $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                    BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                    ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                    do {
                        ::MODIFIED($List__);
                        $List__ = ::DISPATCH( $CAPTURE, 'array', );
                    };
                    do {
                        ::MODIFIED($Hash__);
                        $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                    };
                    do {
                        ::MODIFIED($count);
                        $count = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 ) );
                    };
                    do {
                        ::MODIFIED($quantified);
                        $quantified = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 ) );
                    };
                    do {
                        ::MODIFIED($seen);
                        $seen = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 2 ) );
                    };
                    do {
                        ::MODIFIED( ::DISPATCH( $self, "capture_to_array" ) );
                        ::DISPATCH( $self, "capture_to_array" ) = do {
                            do        { my $____some__weird___var____ = $quantified; ::DISPATCH( $____some__weird___var____, "true" )->{_value} && $____some__weird___var____ }
                                || do { my $____some__weird___var____ = $quantified; ::DISPATCH( $____some__weird___var____, "true" )->{_value} && $____some__weird___var____ }
                                || ::DISPATCH( $::Bit, "new", 0 );
                            }
                    };
                    ::DISPATCH( ::DISPATCH( $self, "rule" ), 'capture_count', ::DISPATCH( $::Int, 'new', 0 ), ::DISPATCH( $::Int, 'new', 0 ), ::DISPATCH( $::Hash, "new", { _hash => {} } ) );
                    do {
                        if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $seen, 'LOOKUP', ::DISPATCH( $self, "ident" ) ), "true" ), "p5landish" ) ) {
                            {
                                ::DISPATCH( ::DISPATCH( $seen, 'LOOKUP', ::DISPATCH( $self, "ident" ) ), 'capture_to_array', ::DISPATCH( $::Int, 'new', 1 ) )
                            }
                        }
                    };
                    ::DISPATCH_VAR( ::DISPATCH( $seen, 'LOOKUP', ::DISPATCH( $self, "ident" ) ), 'STORE', $self );
                    $count;
                }
            )
            )
    };
    1
}
{

    package Rule::Capture;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::KP6Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }
    BEGIN { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::Rule::Capture ), "true" ), "p5landish" ) ) { }
            else {
                {
                    do {
                        ::MODIFIED($::Rule::Capture);
                        $::Rule::Capture = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'Rule::Capture' ) ), 'PROTOTYPE', );
                        }
                }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::Capture, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'capture_count' ),
            ::DISPATCH(
                $::Method,
                'new',
                sub {
                    my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                    my $count;
                    $count = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$count' } ) unless defined $count;
                    BEGIN { $count = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$count' } ) }
                    my $quantified;
                    $quantified = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$quantified' } ) unless defined $quantified;
                    BEGIN { $quantified = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$quantified' } ) }
                    my $seen;
                    $seen = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$seen' } ) unless defined $seen;
                    BEGIN { $seen = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$seen' } ) }
                    $self = shift;
                    my $CAPTURE;
                    $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                    BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                    ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                    do {
                        ::MODIFIED($List__);
                        $List__ = ::DISPATCH( $CAPTURE, 'array', );
                    };
                    do {
                        ::MODIFIED($Hash__);
                        $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                    };
                    do {
                        ::MODIFIED($count);
                        $count = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 ) );
                    };
                    do {
                        ::MODIFIED($quantified);
                        $quantified = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 ) );
                    };
                    do {
                        ::MODIFIED($seen);
                        $seen = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 2 ) );
                    };
                    do {
                        ::MODIFIED( ::DISPATCH( $self, "position" ) );
                        ::DISPATCH( $self, "position" ) = $count;
                    };
                    do {
                        ::MODIFIED( ::DISPATCH( $self, "capture_to_array" ) );
                        ::DISPATCH( $self, "capture_to_array" ) = do {
                            do        { my $____some__weird___var____ = $quantified; ::DISPATCH( $____some__weird___var____, "true" )->{_value} && $____some__weird___var____ }
                                || do { my $____some__weird___var____ = $quantified; ::DISPATCH( $____some__weird___var____, "true" )->{_value} && $____some__weird___var____ }
                                || ::DISPATCH( $::Bit, "new", 0 );
                            }
                    };
                    do {
                        if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $seen, 'LOOKUP', ::DISPATCH( $self, "ident" ) ), "true" ), "p5landish" ) ) {
                            {
                                ::DISPATCH( ::DISPATCH( $seen, 'LOOKUP', ::DISPATCH( $self, "ident" ) ), 'capture_to_array', ::DISPATCH( $::Int, 'new', 1 ) )
                            }
                        }
                    };
                    ::DISPATCH_VAR( ::DISPATCH( $seen, 'LOOKUP', $count ), 'STORE', $self );
                    ::DISPATCH( ::DISPATCH( $self, "rule" ), 'capture_count', ::DISPATCH( $::Int, 'new', 0 ), ::DISPATCH( $::Int, 'new', 0 ), ::DISPATCH( $::Hash, "new", { _hash => {} } ) );
                    ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', $count, ::DISPATCH( $::Int, 'new', 1 ) );
                }
            )
            )
    };
    1
}
