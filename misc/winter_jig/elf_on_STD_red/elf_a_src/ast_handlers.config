comp_unit
CompUnit.new($m<statementlist>)

statement
*1*

expect_term
local $blackboard::expect_term_base = $m<noun>;
my $post = $m->{'hash'}{'post'} || [];
for (@{(($post))}) {
  $blackboard::expect_term_base = ir($_)
}
$blackboard::expect_term_base

post
$m<dotty> or $m<postop>

dotty:methodop
Call.new($blackboard::expect_term_base,undef,$m<ident>,$m<semilist>)

dotty:postcircumfix
my $s = *text*;
my $name = substr($s,0,1).' '.substr($s,-1,1); # XXX :(
my $ident = "postcircumfix:".$name;
Call.new($blackboard::expect_term_base,undef,$ident,$m<kludge_name>)

postcircumfix
my $s = *text*;
my $name = substr($s,0,1).' '.substr($s,-1,1); # XXX :(
my $ident = "postcircumfix:".$name;
Call.new($blackboard::expect_term_base,undef,$ident,$m<kludge_name>)

term:expect_term
$m<noun>

term
if(*text* eq 'self') {
  Apply.new('self',[])
} else {
  die "AST term partially unimplemented.\n";
}

integer
Val_Int.new(*text*)

subcall
Apply.new($m<subshortname>,$m<semilist>)

name
*text* # $m<ident>

statement_control:use
Use.new($m<module_name>)

module_name:depreciated
*text*

module_name:normal
*text*

term:listop
my $not_really_an_arglist = $m<arglist>;
if($m<arglist>) {
  Apply.new($m<ident>,[$not_really_an_arglist]) #XXX
} else {
  Apply.new($m<ident>,[])
}

quote:q
Val_Buf.new($m<text>)

quote:qq
my $s = $m<text>;
$s =~ s/(?<!\\)\\n/\n/g;
$s =~ s/(?<!\\)\\t/\t/g;
Val_Buf.new($s)

quote:regex
my $s = $m<text>;
Val_Rx.new($s)

infix
#XXX Work around YAML::Syck::Load bug.
# str: "="  is becoming str: "str". :/
my $op = *text*;
if($op eq 'str') { $op = '=' };
Apply.new("infix:".$op,[$m<left>,$m<right>])

scope_declarator:my
my $vd = $m<scoped>;
Decl.new('my',undef,$vd->[0],$vd->[1])

scope_declarator:has
my $vd = $m<scoped>;
Decl.new('has',undef,$vd->[0],$vd->[1])

scope_declarator:our
my $vd = $m<scoped>;
Decl.new('our',undef,$vd->[0],$vd->[1])

scoped
*1*

variable_decl
[$m<variable>,$m<default_value>]

variable
Var.new($m<sigil>,$m<twigil>,$m<desigilname>)

sigil
*text*

twigil
*text*

circumfix
my $s = *text*;
my $name = substr($s,0,1).' '.substr($s,-1,1); # XXX :(
Apply.new("circumfix:".$name,$m<kludge_name>)

statement_control:for
For.new($m<expr>,$m<block>)

statement_control:while
While.new($m<expr>,$m<block>)

statement_control:if
If.new($m<if_expr>,$m<if_block>,$m<elsif>,$m<else>)

elsif
[$m<elsif_expr>,$m<elsif_block>]

if__else
*1*

pblock
*1*

block
Block.new($m<statementlist>)

routine_declarator:routine_def
my $ident = "";
if($m<ident>) { $ident = $m<ident>->[0] };
my $sig = Sig.new(undef,[]);
if($m<multisig>) { $sig = $m<multisig>->[0] };
Sub.new($ident,$sig,$m<block>)

routine_declarator:method_def
Method.new($m<ident>,$m<multisig>->[0],$m<block>)

signature
Sig.new(undef,$m<parsep>)

parameter
Lit_SigArgument.new($m<param_var>)

param_var
Var.new($m<sigil>,$m<twigil>,$m<ident>)

package_declarator:class
local $blackboard::package_declarator = 'class';
$m<package_def>

package_declarator:module
local $blackboard::package_declarator = 'module';
$m<package_def>

package_declarator:package
local $blackboard::package_declarator = 'package';
$m<package_def>

package_def
PackageDeclarator.new($blackboard::package_declarator,$m<module_name>->[0],$m<traits>,$m<block>)

fulltypename
join("::",@{(($m<typename>))})

typename
*text* # $m<name>

trait_verb:is
Trait.new('is',$m<ident>)

circumfix:pblock
if(not $m<lambda> and not $m<signature>) {
  Lit_Hash.new($m<block><statementlist>)
} else {
  die "AST handler circumfix:pblock partially unimplemented";
}
