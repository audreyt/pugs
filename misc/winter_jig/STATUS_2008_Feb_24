# Please rename the file when you update it.
# So it's eventual obsolescence will be easily visible.

*Please feel free* to add additional backends, etc, and otherwise bang
on this file.  It is *not* intended as a personal-for-me work space.
If it ends up being that, this project will quickly be killed.

And please do add comments/questions/etc.  The Wikipedia convention of 
 - This is a comment. mncharity 2008-Feb-24
is a nice one.


============================================================
Ast's
----------------------------------------
KP6 AST:

(done) script/kp6 -Cast-yaml

(done) An ast node-and-field spec file which properly recreates the
original KindaPerl6/Ast.pm.  This does *not* include a field value
schema (which was not present in the original).

[QUESTION] Is there a schema doc somewhere?

(WORK) A schema validator for the ast.

Turns out there is at least one extra node, Pad.

The field value spec is incomplete.  Current game is to run the
validator against ast-yaml files, and fill in field specs based on
their actual values.

(TODO) Figure out what Pad is, and add it to the schema.

(TODO) A very simple transparent p5 wrapper module for ast trees.

I'm thinking accessor functions (write too?), plus node_children() and
all_fields() methods.

(MILESTONE) It's as easy to access the kp6 ast as it ever will be.
Non-local and semantic work is *not* on the agenda.


----------------------------------------
RAKUDO AST:

(WAIT) [particle] is working on doing a yaml dump of it.

(TODO) Infrastructure to keep in sync.

(TODO) Create validator.  Perhaps use XML this time, rather than
custom perl?

(TODO) Simple wrapper library.


----------------------------------------
REDSIX AST:

(TODO) Determine if this is needed.  While rakudo can't *run* very
much, if it can *parse* everything, or almost everything, redsix can,
and as fast, then we can punt this.


============================================================
Match trees
----------------------------------------
MATCH TREE ABSTRACTION:

(TODO) Write a Match-tree schema and validator.

kqalify should be sufficiently powerful.  Look to src/perl6/Cursor5.pm.

----------------------------------------
STD5.pm SUPPORT

(WAIT) for abstraction.

(TODO) Add yaml dump to Cursor5.


----------------------------------------
ACCESSIBLE REGEX ENGINE (PGE):

(TODO) Sound out parrot folks.

----------------------------------------
ACCESSIBLE REGEX ENGINE (Pugs::Compiler::Rule):

(TODO) Create a script.

(TODO) Get a conformant search result Match-tree yaml dump.

----------------------------------------
ACCESSIBLE REGEX ENGINE (yet_another_regexp_engine):

(TODO) Determine need.  Does it have any advantages in speed or
coverage over PGE?  Or of tested-ness?  Or value in being p5?  Then
again, it may be trivially easy.


============================================================
Frontends
----------------------------------------
STD5

(TODO) Get match tree support.  See elsewhere.

(TODO) Write match-tree to whatever-ast converter.


============================================================
Backends
----------------------------------------
BARE PERL5 BACKEND:

(done) Sketched emit_from_kp6.  *Not* runnable or run.

(WAIT) for kp6 ast wrapper library.

(TODO) Get it runnable.

[QUESTION] Can the kp6 test files be used, or do they have too many
runtime dependencies?

[QUESTION] What is a target milestone for this?  "I would be happy
rewriting yet_another_regex_engine from p5 to this dialect of p6"???
Does the non-obviousness indicate a project management thinko?

