#include <stdio.h>
#include <smop.h>
#include <smop_s1p.h>
#include <smop_lowlevel.h>

/* This test will have a set of methods in an object called by the
 * stack.
 */


int main(int argc, char** argv) {

  smop_init();

  SMOP__Object* interpreter = SMOP_DISPATCH(SMOP__INTPTR__InterpreterInstance, SMOP_RI(SMOP__INTPTR__InterpreterInstance),
                                            SMOP__ID__new, 
                                            SMOP__NATIVE__capture_create(SMOP__INTPTR__InterpreterInstance,
                                                                         SMOP__INTPTR__InterpreterInstance,NULL,NULL));
  SMOP__Object* node = NULL;

  SMOP__Object* io   = SMOP__S1P__IO_create();
  SMOP__Object* hash = SMOP__S1P__Hash_create();
  node = q:sm0p {
    ;
    $io.print("1..2\n");
    invocant: $hash.$SMOP__ID__postcircumfix_curly(foo);             
    $io.print("copying\n");
    invocant_copy: $SMOP__SLIME__CurrentFrame.copy(`invocant);
    identifier: FETCH;
    $SMOP__SLIME__CurrentFrame.move_responder(`invocant_copy,3);
    $SMOP__SLIME__CurrentFrame.move_identifier(`identifier,2);
    $SMOP__SLIME__CurrentFrame.move_capturize(SMOP__SLIME__Capturize.new(`invocant,(),(),1));
    ;
    $io.print("ok 1 # sm0p lives after postcircumfix:<{ }>\n");
    $hash.$SMOP__ID__postcircumfix_curly(foo);             
    $io.print("ok 2 # sm0p lives after second postcircumfix:<{ }>\n");
  }

   
  SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
                SMOP__ID__goto,
                node);


  SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
                SMOP__ID__loop, SMOP__NATIVE__capture_create(interpreter,
                                                             SMOP_REFERENCE(interpreter,interpreter),
                                                             NULL, NULL));


  SMOP_RELEASE(interpreter,io);
  SMOP_RELEASE(interpreter,hash);
  SMOP_RELEASE(SMOP__INTPTR__InterpreterInstance,interpreter);

  smop_destr();

  return 0;
}
