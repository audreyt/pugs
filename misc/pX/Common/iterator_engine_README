pX/Common/iterator_engine_p6regex.pl - fglock

Experimental implementation of:
- a parser engine (iterator_engine.pl)
- a rule parser and perl5 emitter (iterator_engine_p6rule.pl)
- a grammar parser and perl5 emitter (iterator_engine_p6grammar.pl)

Some existing grammars:
../../Grammars/rx_grammar.pm
http://svn.perl.org/parrot/trunk/compilers/pge/P6Rule.grammar

Rules:

implemented:

 . ? * + *? +? 
 \char <ws> <word> literal
 [] 
 {} (with perl5 code)
 () (but doesn't capture yet)
 <subrule>
 |

implemented but untested:
 <'literal'>
 <other::rule>

not implemented:
 $var $1
 <"literal">
 ^ ^^ $ $$
 <!term>
 <unicode-class> <+unicode-class> <+unicode-class+unicode-class>
 <?var> <@var> <&var> <%var>
 {n..m} 
 : :: :::   (commit)
 :=         (alias)
 <(closure-assertion)> <{code-returns-rule}>
 <'literal'>
 <<character-class>> <[character-class]>
 :flag :flag() :flag[]
 lookahead lookbehind
 #comment\n
 \x0a \0123 ...
 <?ws>  -- optional whitespace ???

not sure if specified:
 &
 'literal' "literal"
 <!n,m>  -- <!{n..m}> ???

