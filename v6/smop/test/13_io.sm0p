#include <stdio.h>
#include <smop.h>
#include <smop_s1p.h>
#include <smop_lowlevel.h>

/* This test will have a set of methods in an object called by the
 * stack.
 */


int main(int argc, char** argv) {
  printf("1..1\n");

  smop_init();

  SMOP__Object* interpreter = SMOP_DISPATCH(SMOP__INTPTR__InterpreterInstance, SMOP_RI(SMOP__INTPTR__InterpreterInstance),
                                            SMOP__ID__new, 
                                            SMOP__NATIVE__capture_create(SMOP__INTPTR__InterpreterInstance,
                                                                         SMOP__INTPTR__InterpreterInstance,NULL,NULL));
  SMOP__Object* node = NULL;
  SMOP__Object* ID_print = SMOP__NATIVE__idconst_create("print");


  SMOP__Object* io = SMOP__S1P__IO_create();
  SMOP__Object* ok1 = SMOP__S1P__Str_create("ok 1\n");
  node = q:sm0p {
    ;
    $io.$ID_print($ok1);
  };

   
  SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
                SMOP__ID__goto,
                node);


  SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
                SMOP__ID__loop, SMOP__NATIVE__capture_create(interpreter,
                                                             SMOP_REFERENCE(interpreter,interpreter),
                                                             NULL, NULL));


  SMOP_RELEASE(interpreter,io);
  SMOP_RELEASE(interpreter,ok1);
  SMOP_RELEASE(SMOP__INTPTR__InterpreterInstance,interpreter);

  smop_destr();

  return 0;
}
