#include <stdlib.h>
#include <assert.h>
#include <stdio.h>
#include <string.h>
#include <smop.h>
#include <smop_s1p.h>
#include <smop_oo.h>
#include <smop_mold.h>
#include <smop_lowlevel.h>

/*

    # see http://www.perlfoundation.org/perl6/index.cgi?smop_p6opaque_implementation

    repr p6opaque {
        has $.^!instanceof is rw; # direct delegation of a single prototype, used by most object instances.
        has $.^!is_container is rw; # if it is not a container, intercept FETCH calls.
        has $.^!WHENCE is rw; # autovivication closure, used by autovivification
        has p6opaque_proto $!^!proto_storage handles *;
        has Hash of Hash %.^!instance_storage is rw;
        default ($ri, $identifier, $capture) {
            $capture.invocant.^!how.dispatch($ri, $identifier, $capture);
        }
        bool method ^!defined {
            self.^!instance_storage
        }
    }
    repr p6opaque_proto {
        has $.^!how is rw; # the metaclass instance in use
        has $.^!who is rw; # the package implementing this prototype
        has @.^!isa is rw; # an array of other protoypes
        has @.^!does is rw; # an array of other prototypes
        has %.^!class_storage is rw; # prototype storage (class variables)
        has %.^!attributes is rw; # attribute definitions
        has %.^!methods is rw; # methods by name
        has %.^!submethods is rw; # submethods by name
        has %.^!multimethods is rw; # hash of hash of method by name,capture
        has %.^!multisubmethods is rw; # hash of hash of submethod by name,capture
    }

*/

SMOP__Object* SMOP__p6opaque__RI;
static SMOP__Object* SMOP__p6opaque_proto_storage__RI;
static SMOP__Object* SMOP__p6opaque_default_how__RI;
static SMOP__Object* dispatch_mold;
static SMOP__Object* destroyall_mold;

typedef struct smop_p6opaque {
  SMOP__Object__BASE
  SMOP__Object* instanceof;
  SMOP__Object* is_container;
  SMOP__Object* WHENCE;
  SMOP__Object* proto_storage;
  SMOP__Object* instance_storage;
} smop_p6opaque;

typedef struct smop_p6opaque_proto_storage {
  SMOP__Object__BASE
  SMOP__Object* how;
  SMOP__Object* who;
  SMOP__Object* isa;
  SMOP__Object* does;
  SMOP__Object* class_storage;
  SMOP__Object* attributes;
  SMOP__Object* methods;
  SMOP__Object* submethods;
  SMOP__Object* multimethods;
  SMOP__Object* multisubmethods;
} smop_p6opaque_proto_storage;

static SMOP__Object* p6opaque_message_REPR_CREATE(SMOP__Object* interpreter,
                                                  SMOP__ResponderInterface* self,
                                                  SMOP__Object* identifier,
                                                  SMOP__Object* capture) {
  SMOP__Object* ret = smop_lowlevel_alloc(sizeof(smop_p6opaque));
  ret->RI = (SMOP__ResponderInterface*)SMOP__p6opaque__RI;
  return ret;
}

static SMOP__Object* p6opaque_message_DISPATCH(SMOP__Object* interpreter,
                                               SMOP__ResponderInterface* self,
                                               SMOP__Object* identifier,
                                               SMOP__Object* capture) {
  SMOP__Object* ret = SMOP__NATIVE__bool_true;
  SMOP__Object* continuation = SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
                                             SMOP__ID__continuation, 
                                             SMOP_REFERENCE(interpreter,interpreter));

  /*
    my $intepreter;
    my $responder;
    my $identifier;
    my $capture;
    my $back;
  */
  SMOP__Object* frame = SMOP__Mold__Frame_create(interpreter,SMOP_REFERENCE(interpreter,dispatch_mold));
  mold_reg_set(interpreter,frame,0,SMOP_REFERENCE(interpreter,interpreter));
  mold_reg_set(interpreter,frame,2,SMOP_REFERENCE(interpreter,self));
  mold_reg_set(interpreter,frame,3,SMOP_REFERENCE(interpreter,identifier));
  mold_reg_set(interpreter,frame,4,SMOP_REFERENCE(interpreter,capture));
  mold_reg_set(interpreter,frame,5,continuation);

  SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
                SMOP__ID__goto,
                frame);

  return ret;
}

static SMOP__Object* p6opaque_message_REPR_DESTROY(SMOP__Object* interpreter,
                                                   SMOP__ResponderInterface* self,
                                                   SMOP__Object* identifier,
                                                   SMOP__Object* capture) {
  SMOP__Object* ret = SMOP__NATIVE__bool_false;

  if (SMOP_RI(capture) == (SMOP__ResponderInterface*)SMOP__NATIVE__capture) {
    SMOP__Object* invocant = SMOP__NATIVE__capture_invocant(interpreter,capture);

    if (invocant == SMOP__p6opaque__RI) {
      ret = SMOP__NATIVE__bool_false;

    } else if (SMOP_RI(invocant) != (SMOP__ResponderInterface*)SMOP__p6opaque__RI) {
      fprintf(stderr, "[SMOP p6opaque] call .^!DESTROY method with non p6opaque invocant\n");
      ret = SMOP__NATIVE__bool_false;

    } else {
      smop_lowlevel_wrlock(invocant);

      SMOP__Object* is_container = ((smop_p6opaque*)invocant)->is_container;
      ((smop_p6opaque*)invocant)->is_container = NULL;

      SMOP__Object* proto_storage = ((smop_p6opaque*)invocant)->proto_storage;
      ((smop_p6opaque*)invocant)->proto_storage = NULL;

      SMOP__Object* instance_storage = ((smop_p6opaque*)invocant)->instance_storage;
      ((smop_p6opaque*)invocant)->instance_storage = NULL;

      SMOP__Object* instanceof = ((smop_p6opaque*)invocant)->instanceof;
      ((smop_p6opaque*)invocant)->instanceof = NULL;

      SMOP__Object* WHENCE = ((smop_p6opaque*)invocant)->WHENCE;
      ((smop_p6opaque*)invocant)->WHENCE = NULL;

      smop_lowlevel_unlock(invocant);

      if (is_container) SMOP_RELEASE(interpreter, is_container);
      if (instanceof) SMOP_RELEASE(interpreter, instanceof);
      if (WHENCE) SMOP_RELEASE(interpreter, WHENCE);
      if (proto_storage) SMOP_RELEASE(interpreter,proto_storage);
      if (instance_storage) SMOP_RELEASE(interpreter,instance_storage);
    }

    SMOP_RELEASE(interpreter,invocant);
  } else {
    fprintf(stderr, "[SMOP p6opaque] TODO: non-native captures\n");
  }
  return ret;
}


static SMOP__Object* p6opaque_message_DESTROYALL(SMOP__Object* interpreter,
                                                 SMOP__ResponderInterface* self,
                                                 SMOP__Object* identifier,
                                                 SMOP__Object* capture) {
  SMOP__Object* ret = SMOP__NATIVE__bool_true;
  SMOP__Object* continuation = SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
                                             SMOP__ID__continuation, 
                                             SMOP_REFERENCE(interpreter,interpreter));

  /*
    my $intepreter;
    my $responder;
    my $identifier;
    my $capture;
    my $back;
  */
  SMOP__Object* frame = SMOP__Mold__Frame_create(interpreter,SMOP_REFERENCE(interpreter,destroyall_mold));
  mold_reg_set(interpreter,frame,0,SMOP_REFERENCE(interpreter,interpreter));
  mold_reg_set(interpreter,frame,2,SMOP_REFERENCE(interpreter,self));
  mold_reg_set(interpreter,frame,3,SMOP_REFERENCE(interpreter,identifier));
  mold_reg_set(interpreter,frame,4,SMOP_REFERENCE(interpreter,capture));
  mold_reg_set(interpreter,frame,5,continuation);

  SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
                SMOP__ID__goto,
                frame);
  return ret;
}

static SMOP__Object* p6opaque_proto_create(SMOP__Object* interpreter) {
  SMOP__Object* proto = smop_lowlevel_alloc(sizeof(smop_p6opaque_proto_storage));
  proto->RI = (SMOP__ResponderInterface*)SMOP__p6opaque_proto_storage__RI;
  return proto;
}

static int is_p6opaque_container(SMOP__Object* interpreter,
                                 SMOP__Object* invocant) {

  if (invocant == SMOP__p6opaque__RI) {
    return 0;
  }
  smop_lowlevel_rdlock(invocant);
  SMOP__Object* is_container = ((smop_p6opaque*)invocant)->is_container;
  smop_lowlevel_unlock(invocant);
  if (!is_container ||
      SMOP__S1P__Scalar_FETCH(is_container) == SMOP__NATIVE__bool_false) {
    return 0;
  } else {
    return 1;
  }
}

static SMOP__Object* p6opaque_message(SMOP__Object* interpreter,
                                      SMOP__ResponderInterface* self,
                                      SMOP__Object* identifier,
                                      SMOP__Object* capture) {
  ___NATIVE_CAPTURE_ONLY___;
  ___CONST_IDENTIFIER_ONLY___;
  ___INVOCANT_RI_SHOULD_MATCH___;
  

  SMOP__Object* ret = SMOP__NATIVE__bool_false;


  if (identifier == SMOP__ID__FETCH && 
      !is_p6opaque_container(interpreter,invocant)) {
    ___VALUE_FETCH___;

  } else if (identifier == SMOP__ID__REPR_CREATE) {
    ret = p6opaque_message_REPR_CREATE(interpreter, self, identifier, capture);

  } else if (identifier == SMOP__ID__REPR_whence) {

    smop_lowlevel_rdlock(invocant);
    SMOP__Object* whence = ((smop_p6opaque*)invocant)->WHENCE;
    smop_lowlevel_unlock(invocant);

    if (!whence) {
      smop_lowlevel_wrlock(invocant);
      ((smop_p6opaque*)invocant)->WHENCE = SMOP__S1P__Scalar_create(SMOP__NATIVE__bool_false);
      whence = ((smop_p6opaque*)invocant)->WHENCE;
      smop_lowlevel_unlock(invocant);
    }

    ret = SMOP_REFERENCE(interpreter, whence);

  } else if (identifier == SMOP__ID__REPR_instanceof) {

    smop_lowlevel_rdlock(invocant);
    SMOP__Object* instanceof = ((smop_p6opaque*)invocant)->instanceof;
    smop_lowlevel_unlock(invocant);

    if (!instanceof) {
      smop_lowlevel_wrlock(invocant);
      ((smop_p6opaque*)invocant)->instanceof = SMOP__S1P__Scalar_create(SMOP__NATIVE__bool_false);
      instanceof = ((smop_p6opaque*)invocant)->instanceof;
      smop_lowlevel_unlock(invocant);
    }

    ret = SMOP_REFERENCE(interpreter, instanceof);

  } else if (identifier == SMOP__ID__REPR_is_container) {

    smop_lowlevel_rdlock(invocant);
    SMOP__Object* is_container = ((smop_p6opaque*)invocant)->is_container;
    smop_lowlevel_unlock(invocant);

    if (!is_container) {
      smop_lowlevel_wrlock(invocant);
      ((smop_p6opaque*)invocant)->is_container = SMOP__S1P__Scalar_create(SMOP__NATIVE__bool_false);
      is_container = ((smop_p6opaque*)invocant)->is_container;
      smop_lowlevel_unlock(invocant);
    }

    ret = SMOP_REFERENCE(interpreter, is_container);

  } else if (identifier == SMOP__ID__REPR_private_storage) {

    smop_lowlevel_rdlock(invocant);
    SMOP__Object* instance_storage = ((smop_p6opaque*)invocant)->instance_storage;
    smop_lowlevel_unlock(invocant);

    if (!instance_storage) {
      smop_lowlevel_wrlock(invocant);
      ((smop_p6opaque*)invocant)->instance_storage = SMOP__S1P__Hash_create();
      instance_storage = ((smop_p6opaque*)invocant)->instance_storage;
      smop_lowlevel_unlock(invocant);
    }

    ret = SMOP_REFERENCE(interpreter, instance_storage);

  } else if (identifier == SMOP__ID__REPR_how ||
             identifier == SMOP__ID__REPR_who ||
             identifier == SMOP__ID__REPR_isa ||
             identifier == SMOP__ID__REPR_does ||
             identifier == SMOP__ID__REPR_class_storage ||
             identifier == SMOP__ID__REPR_attributes ||
             identifier == SMOP__ID__REPR_methods ||
             identifier == SMOP__ID__REPR_submethods ||
             identifier == SMOP__ID__REPR_multimethods ||
             identifier == SMOP__ID__REPR_multisubmethods) {

    if (! invocant) {
      fprintf(stderr,"[smop p6opaque] REPR method called without invocant\n");
    } else if (SMOP_RI(invocant) != (SMOP__ResponderInterface*)SMOP__p6opaque__RI) {
      fprintf(stderr,"[smop p6opaque] REPR method called with non p6opaque invocant\n");
    } else if (invocant == SMOP__p6opaque__RI) {
      fprintf(stderr,"[smop p6opaque] REPR method called with p6opaque RI (%s)\n",(char*)(identifier->data + sizeof(int)));
      abort();
    } else {

      smop_lowlevel_rdlock(invocant);
      SMOP__Object* proto_storage = ((smop_p6opaque*)invocant)->proto_storage;
      smop_lowlevel_unlock(invocant);

      if (!proto_storage) {
        smop_lowlevel_wrlock(invocant);
        ((smop_p6opaque*)invocant)->proto_storage = p6opaque_proto_create(interpreter);
        proto_storage = ((smop_p6opaque*)invocant)->proto_storage;
        smop_lowlevel_unlock(invocant);
      }

      ret = SMOP_DISPATCH(interpreter,SMOP_RI(proto_storage),identifier,
                          SMOP__NATIVE__capture_create(interpreter,
                                                       SMOP_REFERENCE(interpreter,proto_storage),
                                                       NULL,NULL));
    }

  } else if (identifier == SMOP__ID__REPR_DESTROY) {
    ret = p6opaque_message_REPR_DESTROY(interpreter, self, identifier, capture);
    
  } else if (identifier == SMOP__ID__DESTROYALL) {
    ret = p6opaque_message_DESTROYALL(interpreter, self, identifier, capture);

  } else {
    if (! invocant) {
      fprintf(stderr,"[smop p6opaque] dispatching called without invocant\n");
    } else if (SMOP_RI(invocant) != (SMOP__ResponderInterface*)SMOP__p6opaque__RI) {
      fprintf(stderr,"[smop p6opaque] dispatching with non p6opaque invocant\n");
    } else if (invocant == SMOP__p6opaque__RI && identifier == SMOP__ID__FETCH) {
       ___VALUE_FETCH___;
    } else if (invocant == SMOP__p6opaque__RI) {
      fprintf(stderr,"[smop p6opaque] dispatching with p6opaque RI (%s)\n",(char*)(identifier->data + sizeof(int)));
      abort();
    } else {
      ret = p6opaque_message_DISPATCH(interpreter, self, identifier, capture);
    }
  }
 
  SMOP_RELEASE(interpreter,capture);
  SMOP_RELEASE(interpreter,invocant);
  return ret;
}

static SMOP__Object* p6opaque_proto_message_handle_hash(SMOP__Object* interpreter,
                                                        SMOP__Object* invocant,
                                                        SMOP__Object* identifier) {
  SMOP__Object** pointer = NULL;

  smop_lowlevel_rdlock(invocant);
  if (identifier == SMOP__ID__REPR_class_storage) {
    pointer = &(((smop_p6opaque_proto_storage*)invocant)->class_storage);
  } else if (identifier == SMOP__ID__REPR_attributes) {
    pointer = &(((smop_p6opaque_proto_storage*)invocant)->attributes);
  } else if (identifier == SMOP__ID__REPR_methods) {
    pointer = &(((smop_p6opaque_proto_storage*)invocant)->methods);
  } else if (identifier == SMOP__ID__REPR_submethods) {
    pointer = &(((smop_p6opaque_proto_storage*)invocant)->submethods);
  } else if (identifier == SMOP__ID__REPR_multimethods) {
    pointer = &(((smop_p6opaque_proto_storage*)invocant)->multimethods);
  } else if (identifier == SMOP__ID__REPR_multisubmethods) {
    pointer = &(((smop_p6opaque_proto_storage*)invocant)->multisubmethods);
  }
  if (pointer) {
    if (*pointer) {
      SMOP__Object* ret = *pointer;
      smop_lowlevel_unlock(invocant);
      return SMOP_REFERENCE(interpreter, ret);
    } else {
      smop_lowlevel_unlock(invocant);

      SMOP__Object* hash = SMOP__S1P__Hash_create();

      smop_lowlevel_wrlock(invocant);
      *pointer = hash;
      smop_lowlevel_unlock(invocant);


      return SMOP_REFERENCE(interpreter, hash);
    }
  } else {
    smop_lowlevel_unlock(invocant);
    return NULL;
  }
}

static SMOP__Object* p6opaque_proto_message_handle_array(SMOP__Object* interpreter,
                                                         SMOP__Object* invocant,
                                                         SMOP__Object* identifier) {
  SMOP__Object** pointer = NULL;

  smop_lowlevel_rdlock(invocant);
  if (identifier == SMOP__ID__REPR_isa) {
    pointer = &(((smop_p6opaque_proto_storage*)invocant)->isa);
  } else if (identifier == SMOP__ID__REPR_does) {
    pointer = &(((smop_p6opaque_proto_storage*)invocant)->does);
  }
  if (pointer) {
    if (*pointer) {
      SMOP__Object* ret = *pointer;
      smop_lowlevel_unlock(invocant);
      return SMOP_REFERENCE(interpreter, ret);
    } else {
      smop_lowlevel_unlock(invocant);

      SMOP__Object* array = SMOP__S1P__Array_create();

      smop_lowlevel_wrlock(invocant);
      *pointer = array;
      smop_lowlevel_unlock(invocant);


      return SMOP_REFERENCE(interpreter, array);
    }
  } else {
    smop_lowlevel_unlock(invocant);
    return NULL;
  }
}

static SMOP__Object* p6opaque_proto_message_handle_scalar(SMOP__Object* interpreter,
                                                          SMOP__Object* invocant,
                                                          SMOP__Object* identifier) {
  SMOP__Object** pointer = NULL;

  SMOP__Object* defaultval = SMOP__NATIVE__bool_false;

  smop_lowlevel_rdlock(invocant);
  if (identifier == SMOP__ID__REPR_how) {
    pointer = &(((smop_p6opaque_proto_storage*)invocant)->how);
    defaultval = SMOP__p6opaque_default_how__RI;
  } else if (identifier == SMOP__ID__REPR_who) {
    pointer = &(((smop_p6opaque_proto_storage*)invocant)->who);
  }
  if (pointer) {
    if (*pointer) {
      SMOP__Object* ret = *pointer;
      smop_lowlevel_unlock(invocant);
      return SMOP_REFERENCE(interpreter, ret);
    } else {
      smop_lowlevel_unlock(invocant);

      SMOP__Object* scalar = SMOP__S1P__Scalar_create(defaultval);

      smop_lowlevel_wrlock(invocant);
      *pointer = scalar;
      smop_lowlevel_unlock(invocant);


      return SMOP_REFERENCE(interpreter, scalar);
    }
  } else {
    smop_lowlevel_unlock(invocant);
    return NULL;
  }
}

static SMOP__Object* p6opaque_default_how_message(SMOP__Object* interpreter,
                                                  SMOP__ResponderInterface* self,
                                                  SMOP__Object* identifier,
                                                  SMOP__Object* capture) {
  SMOP__Object* ret = SMOP__NATIVE__bool_false;
  ___NATIVE_CAPTURE_ONLY___;
  ___CONST_IDENTIFIER_ONLY___;
  ___INVOCANT_RI_SHOULD_MATCH___;


  if (identifier == SMOP__ID__FETCH) {
    ___VALUE_FETCH___;
  } else if (identifier == SMOP__ID__STORE) {
    ___VALUE_STORE___;
  } else if (identifier == SMOP__ID__dispatch) {
    SMOP__Object* actualidentifier = SMOP__NATIVE__capture_positional(interpreter,capture,1);
    SMOP__Object* actualcapture = SMOP__NATIVE__capture_positional(interpreter,capture,2);
    SMOP__Object* actualinvocant = SMOP__NATIVE__capture_invocant(interpreter,actualcapture);
    if (actualidentifier == SMOP__ID__FETCH) {
      ret = SMOP_REFERENCE(interpreter, actualinvocant);
    } else if (actualidentifier == SMOP__ID__STORE) {
      ___VALUE_STORE___;
    } else if (actualidentifier == SMOP__ID__DESTROYALL) {
      
    } else {
      identifier = actualidentifier;
      ___UNKNOWN_METHOD___;
    }
  } else {
    ___UNKNOWN_METHOD___;
  }

  SMOP_RELEASE(interpreter,invocant);
  SMOP_RELEASE(interpreter,capture);
  return ret;
}

static SMOP__Object* p6opaque_proto_message(SMOP__Object* interpreter,
                                            SMOP__ResponderInterface* self,
                                            SMOP__Object* identifier,
                                            SMOP__Object* capture) {
  // the proto storage is made of a set of containers. No actual value
  // is handled by this object. It simply returns the containers.
  SMOP__Object* ret = SMOP__NATIVE__bool_false;
  ___NATIVE_CAPTURE_ONLY___;
  ___CONST_IDENTIFIER_ONLY___;
  ___INVOCANT_RI_SHOULD_MATCH___;

  SMOP__Object* handled = p6opaque_proto_message_handle_scalar(interpreter, invocant, identifier);
  if (!handled) handled = p6opaque_proto_message_handle_array(interpreter, invocant, identifier);
  if (!handled) handled = p6opaque_proto_message_handle_hash(interpreter, invocant, identifier);
  

  if (handled) {
    ret = handled;

  } else if (identifier == SMOP__ID__DESTROYALL) {

    smop_lowlevel_wrlock(invocant);
    SMOP__Object* how = ((smop_p6opaque_proto_storage*)invocant)->how;
    (((smop_p6opaque_proto_storage*)invocant)->how) = NULL;

    SMOP__Object* who = ((smop_p6opaque_proto_storage*)invocant)->who;
    (((smop_p6opaque_proto_storage*)invocant)->who) = NULL;

    SMOP__Object* isa = ((smop_p6opaque_proto_storage*)invocant)->isa;
    ((smop_p6opaque_proto_storage*)invocant)->isa = NULL;

    SMOP__Object* does = ((smop_p6opaque_proto_storage*)invocant)->does;
    ((smop_p6opaque_proto_storage*)invocant)->does = NULL;

    SMOP__Object* class_storage = ((smop_p6opaque_proto_storage*)invocant)->class_storage;
    ((smop_p6opaque_proto_storage*)invocant)->class_storage = NULL;

    SMOP__Object* attributes = ((smop_p6opaque_proto_storage*)invocant)->attributes;
    ((smop_p6opaque_proto_storage*)invocant)->attributes = NULL;

    SMOP__Object* methods = ((smop_p6opaque_proto_storage*)invocant)->methods;
    ((smop_p6opaque_proto_storage*)invocant)->methods = NULL;

    SMOP__Object* submethods = ((smop_p6opaque_proto_storage*)invocant)->submethods;
    ((smop_p6opaque_proto_storage*)invocant)->submethods = NULL;

    SMOP__Object* multimethods = ((smop_p6opaque_proto_storage*)invocant)->multimethods;
    ((smop_p6opaque_proto_storage*)invocant)->multimethods = NULL;

    SMOP__Object* multisubmethods = ((smop_p6opaque_proto_storage*)invocant)->multisubmethods;
    ((smop_p6opaque_proto_storage*)invocant)->multisubmethods = NULL;

    smop_lowlevel_unlock(invocant);

    if (how) SMOP_RELEASE(interpreter,how);
    if (who) SMOP_RELEASE(interpreter,who);
    if (isa) SMOP_RELEASE(interpreter,isa);
    if (does) SMOP_RELEASE(interpreter,does);
    if (class_storage) SMOP_RELEASE(interpreter,class_storage);
    if (attributes) SMOP_RELEASE(interpreter,attributes);
    if (methods) SMOP_RELEASE(interpreter,methods);
    if (submethods) SMOP_RELEASE(interpreter,submethods);
    if (multimethods) SMOP_RELEASE(interpreter,multimethods);
    if (multisubmethods) SMOP_RELEASE(interpreter,multisubmethods);
    
  } else {
    //todo
    if (SMOP_RI(identifier) == SMOP_RI(SMOP__ID__new)) {
      int u;
      char* external = SMOP__NATIVE__idconst_fetch(identifier, &u);
      char* local = malloc(u+1);
      memcpy(local, external, u);
      local[u] = 0;
      fprintf(stderr, "[p6opaque proto] \"%s\" is not implemented.\n", local);
      free(local);
    } else {
      fprintf(stderr, "[p6opaque proto] unknown method called.\n");
    }
  }
 

  SMOP_RELEASE(interpreter,invocant);
  SMOP_RELEASE(interpreter,capture);
  return ret;
}

void smop_p6opaque_init() {

  SMOP__p6opaque__RI = calloc(1,sizeof(SMOP__ResponderInterface));
  ((SMOP__ResponderInterface*)SMOP__p6opaque__RI)->MESSAGE = p6opaque_message;
  ((SMOP__ResponderInterface*)SMOP__p6opaque__RI)->REFERENCE = smop_lowlevel_generic_reference;
  ((SMOP__ResponderInterface*)SMOP__p6opaque__RI)->RELEASE = smop_lowlevel_generic_release;
  ((SMOP__ResponderInterface*)SMOP__p6opaque__RI)->id = "p6opaque";

  SMOP__p6opaque_proto_storage__RI = calloc(1,sizeof(SMOP__ResponderInterface));
  ((SMOP__ResponderInterface*)SMOP__p6opaque_proto_storage__RI)->MESSAGE = p6opaque_proto_message;
  ((SMOP__ResponderInterface*)SMOP__p6opaque_proto_storage__RI)->REFERENCE = smop_lowlevel_generic_reference;
  ((SMOP__ResponderInterface*)SMOP__p6opaque_proto_storage__RI)->RELEASE = smop_lowlevel_generic_release;
  ((SMOP__ResponderInterface*)SMOP__p6opaque_proto_storage__RI)->id = "p6opaque proto storage";

  SMOP__p6opaque_default_how__RI = calloc(1,sizeof(SMOP__ResponderInterface));
  ((SMOP__ResponderInterface*)SMOP__p6opaque_default_how__RI)->MESSAGE = p6opaque_default_how_message;
  ((SMOP__ResponderInterface*)SMOP__p6opaque_default_how__RI)->REFERENCE = smop_lowlevel_generic_reference;
  ((SMOP__ResponderInterface*)SMOP__p6opaque_default_how__RI)->RELEASE = smop_lowlevel_generic_release;
  ((SMOP__ResponderInterface*)SMOP__p6opaque_default_how__RI)->id = "p6opaque default how";
}

void smop_p6opaque_destr() {
  free(SMOP__p6opaque__RI);
  free(SMOP__p6opaque_proto_storage__RI);
  free(SMOP__p6opaque_default_how__RI);
}


void smop_p6opaque_mold_init() {

  // return $invocant.^!how.FETCH.dispatch($self, $identifier, $capture);
  dispatch_mold = q:m0ld {
    my $interpreter;
    my $invocant;
    my $responder;
    my $identifier;
    my $capture;
    my $back;
    $invocant = $capture."invocant"();
    my $how_s = $invocant."^!how"();
    my $how = $how_s."FETCH"();
    my $result = $how."dispatch"($responder, $identifier, $capture);
    my $void = $back."setr"($result);
    $void = $interpreter."goto"($back);
  };

  // $invocant.^!how.FETCH.dispatch($self, $identifier, $capture);
  // $invocant.^!DESTROY();
  destroyall_mold = q:m0ld {
    my $interpreter;
    my $invocant;
    my $responder;
    my $identifier;
    my $capture;
    my $back;
    $invocant = $capture."invocant"();
    my $how_s = $invocant."^!how"();
    my $how = $how_s."FETCH"();
    my $void = $how."dispatch"($responder, $identifier, $capture);
    $void = $invocant."^!DESTROY"();
    $void = $interpreter."goto"($back);
  };

}


void smop_p6opaque_mold_destr() {
  SMOP_RELEASE(SMOP__GlobalInterpreter, dispatch_mold);
  SMOP_RELEASE(SMOP__GlobalInterpreter, destroyall_mold);
}

