{

    package KindaPerl6::Visitor::ExtractRuleBlock;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::KP6Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }
    BEGIN { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    {
        my $count;
        $count = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$count' } ) unless defined $count;
        BEGIN { $count = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$count' } ) }
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::KindaPerl6::Visitor::ExtractRuleBlock ), "true" ), "p5landish" ) ) { }
            else {
                {
                    my $count;
                    $count = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$count' } ) unless defined $count;
                    BEGIN { $count = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$count' } ) }
                    do {
                        ::MODIFIED($::KindaPerl6::Visitor::ExtractRuleBlock);
                        $::KindaPerl6::Visitor::ExtractRuleBlock = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'KindaPerl6::Visitor::ExtractRuleBlock' ) ), 'PROTOTYPE', );
                        }
                }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::KindaPerl6::Visitor::ExtractRuleBlock, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'visit' ),
            ::DISPATCH(
                $::Code, 'new',
                {   code => sub {
                        my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        my $node;
                        $node = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$node' } ) unless defined $node;
                        BEGIN { $node = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$node' } ) }
                        my $node_name;
                        $node_name = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$node_name' } ) unless defined $node_name;
                        BEGIN { $node_name = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$node_name' } ) }
                        my $path;
                        $path = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$path' } ) unless defined $path;
                        BEGIN { $path = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$path' } ) }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                        BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        do {
                            ::MODIFIED($node);
                            $node = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 ) );
                        };
                        do {
                            ::MODIFIED($node_name);
                            $node_name = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 ) );
                        };
                        do {
                            ::MODIFIED($path);
                            $path = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 2 ) );
                        };
                        do {
                            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', $node_name, ::DISPATCH( $::Str, 'new', 'Rule::Block' ) ), "true" ), "p5landish" ) ) {
                                {
                                    my $comp_unit;
                                    $comp_unit = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$comp_unit' } ) unless defined $comp_unit;
                                    BEGIN { $comp_unit = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$comp_unit' } ) }
                                    my $name;
                                    $name = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$name' } ) unless defined $name;
                                    BEGIN { $name = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$name' } ) }
                                    use Data::Dumper;
                                    do {
                                        ::MODIFIED($comp_unit);
                                        $comp_unit = ::DISPATCH( $path, 'INDEX', ::DISPATCH( $GLOBAL::Code_infix_58__60__45__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 0 ), ::DISPATCH( $::Int, 'new', 1 ) ) );
                                    };
                                    do {
                                        ::MODIFIED($count);
                                        $count = ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', $count, ::DISPATCH( $::Int, 'new', 1 ) );
                                    };
                                    do {
                                        ::MODIFIED($name);
                                        $name = ::DISPATCH(
                                            $GLOBAL::Code_infix_58__60__126__62_,
                                            'APPLY',
                                            ::DISPATCH( $::Str, 'new', '__rule_block' ),
                                            ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', $count, ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( $::Str, 'new', '_' ), $COMPILER::source_md5 ) )
                                        );
                                    };
                                    ::DISPATCH(
                                        $GLOBAL::Code_push,
                                        'APPLY',
                                        ::DISPATCH( $GLOBAL::Code_prefix_58__60__64__62_, 'APPLY', ::DISPATCH( ::DISPATCH( $comp_unit, 'body', ), 'body', ) ),
                                        ::DISPATCH(
                                            $::Method,
                                            'new',
                                            ::DISPATCH( $::Str, 'new', 'block' ) => ::DISPATCH(
                                                $::Lit::Code,
                                                'new',
                                                ::DISPATCH( $::Str, 'new', 'body' ) => ::DISPATCH( ::DISPATCH( $node, 'closure', ), 'body', ),
                                                ::DISPATCH( $::Str, 'new', 'sig' )  => ::DISPATCH(
                                                    $::Sig, 'new',
                                                    ::DISPATCH( $::Str, 'new', 'named' )      => ::DISPATCH( $::Hash, "new", { _hash => {} } ),
                                                    ::DISPATCH( $::Str, 'new', 'invocant' )   => ::DISPATCH( $::Str,  'new', '' ),
                                                    ::DISPATCH( $::Str, 'new', 'positional' ) => ::DISPATCH(
                                                        $::Array, "new",
                                                        {   _array => [
                                                                ::DISPATCH(
                                                                    $::Var, 'new', ::DISPATCH( $::Str, 'new', 'namespace' ) => ::DISPATCH( $::Array, "new", { _array => [] } ),
                                                                    ::DISPATCH( $::Str, 'new', 'name' )   => ::DISPATCH( $::Str, 'new', 'MATCH' ),
                                                                    ::DISPATCH( $::Str, 'new', 'twigil' ) => ::DISPATCH( $::Str, 'new', '' ),
                                                                    ::DISPATCH( $::Str, 'new', 'sigil' )  => ::DISPATCH( $::Str, 'new', '$' ),
                                                                )
                                                            ]
                                                        }
                                                    ),
                                                ),
                                                ::DISPATCH( $::Str, 'new', 'pad' ) => ::DISPATCH(
                                                    $::Pad, 'new',
                                                    ::DISPATCH( $::Str, 'new', 'lexicals' ) => ::DISPATCH(
                                                        $::Array, "new",
                                                        {   _array => [
                                                                ::DISPATCH(
                                                                    $::Decl, 'new',
                                                                    ::DISPATCH( $::Str, 'new', 'decl' ) => ::DISPATCH( $::Str, 'new', 'my' ),
                                                                    ::DISPATCH( $::Str, 'new', 'var' )  => ::DISPATCH(
                                                                        $::Var, 'new', ::DISPATCH( $::Str, 'new', 'namespace' ) => ::DISPATCH( $::Array, "new", { _array => [] } ),
                                                                        ::DISPATCH( $::Str, 'new', 'name' )   => ::DISPATCH( $::Str, 'new', '_' ),
                                                                        ::DISPATCH( $::Str, 'new', 'twigil' ) => ::DISPATCH( $::Str, 'new', '' ),
                                                                        ::DISPATCH( $::Str, 'new', 'sigil' )  => ::DISPATCH( $::Str, 'new', '@' ),
                                                                    ),
                                                                    ::DISPATCH( $::Str, 'new', 'type' ) => ::DISPATCH( $::Str, 'new', '' ),
                                                                ),
                                                                ::DISPATCH(
                                                                    $::Decl, 'new',
                                                                    ::DISPATCH( $::Str, 'new', 'decl' ) => ::DISPATCH( $::Str, 'new', 'my' ),
                                                                    ::DISPATCH( $::Str, 'new', 'var' )  => ::DISPATCH(
                                                                        $::Var, 'new', ::DISPATCH( $::Str, 'new', 'namespace' ) => ::DISPATCH( $::Array, "new", { _array => [] } ),
                                                                        ::DISPATCH( $::Str, 'new', 'name' )   => ::DISPATCH( $::Str, 'new', 'MATCH' ),
                                                                        ::DISPATCH( $::Str, 'new', 'twigil' ) => ::DISPATCH( $::Str, 'new', '' ),
                                                                        ::DISPATCH( $::Str, 'new', 'sigil' )  => ::DISPATCH( $::Str, 'new', '$' ),
                                                                    ),
                                                                    ::DISPATCH( $::Str, 'new', 'type' ) => ::DISPATCH( $::Str, 'new', '' ),
                                                                )
                                                            ]
                                                        }
                                                    ),
                                                ),
                                                ::DISPATCH( $::Str, 'new', 'state' ) => ::DISPATCH( $::Hash, "new", { _hash => {} } ),
                                            ),
                                            ::DISPATCH( $::Str, 'new', 'name' ) => $name,
                                        )
                                    );
                                    ::DISPATCH(
                                        $GLOBAL::Code_push, 'APPLY',
                                        ::DISPATCH( $GLOBAL::Code_prefix_58__60__64__62_, 'APPLY', ::DISPATCH( ::DISPATCH( $node, 'closure', ), 'body', ) ),
                                        ::DISPATCH( $::Return, 'new', ::DISPATCH( $::Str, 'new', 'result' ) => ::DISPATCH( $::Val::Buf, 'new', ::DISPATCH( $::Str, 'new', 'buf' ) => ::DISPATCH( $::Str, 'new', 'sTrNgE V4l' ), ), )
                                    );
                                    ::DISPATCH( $node, 'closure', $name );
                                    return ($node)
                                }
                            }
                        };
                        ::DISPATCH( $::Int, 'new', 0 );
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {   invocant => $::Undef,
                            array    => ::DISPATCH(
                                $::Array, "new",
                                {   _array => [
                                        ::DISPATCH( $::Signature::Item, "new", { sigil => '$', twigil => '', name => 'node',      namespace => [], } ),
                                        ::DISPATCH( $::Signature::Item, "new", { sigil => '$', twigil => '', name => 'node_name', namespace => [], } ),
                                        ::DISPATCH( $::Signature::Item, "new", { sigil => '$', twigil => '', name => 'path',      namespace => [], } ),
                                    ]
                                }
                            ),
                            hash   => ::DISPATCH( $::Hash, "new", { _hash => {} } ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
        $count
    };
    1
}
