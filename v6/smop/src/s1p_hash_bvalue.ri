%prefix smop_s1p_hash_bvalue
%RI.id bvalue
%RI SMOP__S1P__Hash_BValue
%attr SMOP__Object* owner
%attr SMOP__Object* key
%getter owner
%getter key
%{
    SMOP__Object* SMOP__S1P__Hash_BValue_create(SMOP__Object* interpreter, SMOP__Object* owner, SMOP__Object* key) {
        smop_s1p_hash_bvalue_struct* bvalue = (smop_s1p_hash_bvalue_struct*) smop_lowlevel_alloc(sizeof(smop_s1p_hash_bvalue_struct));
        bvalue->RI = (SMOP__ResponderInterface*)(SMOP_REFERENCE(interpreter,SMOP__S1P__Hash_BValue));
        bvalue->key = key;
        bvalue->owner = owner;
        return (SMOP__Object*) bvalue;
    }
%}

%method DESTROYALL
    smop_lowlevel_wrlock(invocant);
    SMOP__Object* owner = ((smop_s1p_hash_bvalue_struct*)invocant)->owner;
    ((smop_s1p_hash_bvalue_struct*)invocant)->owner = NULL;
    SMOP__Object* key = ((smop_s1p_hash_bvalue_struct*)invocant)->key;
    ((smop_s1p_hash_bvalue_struct*)invocant)->key = NULL;
    smop_lowlevel_unlock(invocant);
    if (owner) SMOP_RELEASE(interpreter,owner);
    if (key) SMOP_RELEASE(interpreter,key);
    SMOP_RELEASE(interpreter,SMOP__S1P__Hash_BValue);

%method BIND
    SMOP__Object* continuation = SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
                                               SMOP__ID__continuation,
                                               SMOP__NATIVE__capture_create(interpreter,
                                                                            SMOP_REFERENCE(interpreter,interpreter),
                                                                            NULL,NULL));
    SMOP__Object* frame = SMOP__Mold__Frame_create(interpreter,SMOP_REFERENCE(interpreter,bind_mold));
    mold_reg_set(interpreter,frame,0,SMOP_REFERENCE(interpreter,interpreter));
    mold_reg_set(interpreter,frame,1,SMOP_REFERENCE(interpreter,capture));
    mold_reg_set(interpreter,frame,2,continuation);
    SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
                  SMOP__ID__goto,
                  frame);


%method FETCH
    SMOP__Object* continuation = SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
                                               SMOP__ID__continuation,
                                               SMOP__NATIVE__capture_create(interpreter,
                                                                            SMOP_REFERENCE(interpreter,interpreter),
                                                                            NULL,NULL));
    SMOP__Object* frame = SMOP__Mold__Frame_create(interpreter,SMOP_REFERENCE(interpreter,fetch_mold));
    mold_reg_set(interpreter,frame,0,SMOP_REFERENCE(interpreter,interpreter));
    mold_reg_set(interpreter,frame,1,SMOP_REFERENCE(interpreter,capture));
    mold_reg_set(interpreter,frame,2,continuation);
    SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
                  SMOP__ID__goto,
                  frame);

%method STORE
    SMOP__Object* continuation = SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
                                               SMOP__ID__continuation,
                                               SMOP__NATIVE__capture_create(interpreter,
                                                                            SMOP_REFERENCE(interpreter,interpreter),
                                                                            NULL,NULL));
    SMOP__Object* frame = SMOP__Mold__Frame_create(interpreter,SMOP_REFERENCE(interpreter,store_mold));
    mold_reg_set(interpreter,frame,0,SMOP_REFERENCE(interpreter,interpreter));
    mold_reg_set(interpreter,frame,1,SMOP_REFERENCE(interpreter,capture));
    mold_reg_set(interpreter,frame,2,continuation);
    SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
                  SMOP__ID__goto,
                  frame);

%mold bind_mold
    my $interpreter;
    my $capture;
    my $back;
    my $invocant = $capture."invocant"();
    my $owner = $invocant."owner"();
    my $key = $invocant."key"();
    my $val = $capture."positional"(0);
    my $void = $owner."bind_key"($key, $val);
    $void = $interpreter."goto"($back);

%mold store_mold
    my $interpreter;
    my $capture;
    my $back;
    my $invocant = $capture."invocant"();
    my $owner = $invocant."owner"();
    my $key = $invocant."key"();
    my $val = $capture."positional"(0);
    my $container = $owner."lookup_key"($key);
    my $void = $container."STORE"($val);
    $void = $interpreter."goto"($back);

%mold fetch_mold
    my $interpreter;
    my $capture;
    my $back;
    my $invocant = $capture."invocant"();
    my $owner = $invocant."owner"();
    my $key = $invocant."key"();
    my $val = $capture."positional"(0);
    my $container = $owner."lookup_key"($key);
    my $res = $container."FETCH"();
    my $void = $back."setr"($res);
    $void = $interpreter."goto"($back);
