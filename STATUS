This document contains terse status information on major portions of Pugs.
Because development is rapid and anarchistic, details are omitted.  If you
would like current details, please ask on irc.freenode.net #perl6.


= Backends

- Haskell-Old  Working (delta general pugs bugs)
- Haskell-PIL  Started 2005-08-09
- Java         Nonexistant; metamodel implementation in progress nonetheless
- JavaScript   Passes about 2/3 of test suite; currently converting to use
               -CPerl5 instead of manually parsing the output of -CPIL
- Perl 5       Restarted; currently implementing OO and built-in types
- PIR          Stalled; waiting for Parrot leo-ctx5 branch to merge


= PIL Transition

* autrijus redesigned PIL format (now 'PIL2') in late 2005-07 / early 2005-08
* PIL2 infrastructure code in progress as of 2005-08-09
* iblech using old PIL format for JavaScript backend until PIL2 is ready


= Perl 6 Object Metamodel

* Completion level varies by backend -- each requires its own variant of
  the metamodel implemented in the backend language:
-- Java        In early stages
-- JavaScript  Integrated into JS backend, but not bootstrapped like P5 version
-- Perl 5      Most complete, but not used yet; lacking some role functionality
-- Perl 6      Requires complete rewrite


= Embedding

- Perl 5   Works, except that it leaks heavily (refcounts inc but never dec),
           and exports don't happen -- workaround for latter is to use
           our &method1 := Perl5::Module::Name.can('method1')
               or
           our &method2 := eval('\&Perl5::Module::Name::method', :lang<perl5>)
- Parrot   Works with Parrot 0.2.3, but may break with head / leo-ctx5 merge,
           which is needed for progress on PIR backend


= Laziness

* Laziness doesn't currently work, but is in rapid implementation as of
  2005-08-10
* Some lazy functions do exist (e.g. gather/take), but are actually non-lazy


= Rules

+ Perl 5 rules, handled by PCRE, work well.  Eg, rx:perl5/\Afoo/;
+ Perl 6 rules, handled by parrot's PGE, are under development.

- Modifiers: Most modifiers are unimplemented.  The working ones are
  :g (mostly), :i :m :s :x (yes? p5-only), :w (p6-only).

- Perl 6 rules are still being implemented.  Much works, but rule names
  must be globals; no support for aliases and embedded closures yet.

= Test Suite

* Currently over 8100 tests, including module tests
* This is known to be only a small percentage of the total needed to cover
  the currently available Perl 6 design.

