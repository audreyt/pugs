Here is a first-draft description of the new MMD algorithm for S06.


Multi(sub/method) Dispatch

A multi is a set of variants.  Each variant is a Code, with its own
Signature.  A normal call to a multi is handled by the variant whose
signature most closely matches the call's arguments.  If no variant is
unambiguously closer, an error is raised.

Variants incompatible with the call's capture are ignored.  Among the
rest, closeness is determined by examining individual positional
parameters, left to right, and comparing the type distances between
the argument, and the parameter of each candidate variant.  A variant
remains a contender for "unambiguously closer", only if it is at least
as close as any other candidate variant is.  If, after all parameters
are examined, exactly one contender remains, that contender handles
the call.  Otherwise, an error is raised.

By default, the set of candidates remains constant, while the set if
contenders is incrementally narrowed.  Candidates which are no longer
contenders act as spoilers - they only affect dispatch if they
establish ambigity.  That is, by having some parameter whose type
distance is either smaller than, or incomparable with, that of a
contender.  However, if all contenders have a semi-colon before a
parameter, then the set of candidates is first reduced to just those
contenders.  A semi-colon appearing in a multi signature is thus a
hint that "if there is a single contender at this point, then I don't
require further checks for ambiguity against other candidates".

The distance between two types is the number of steps in the type
compatibility path connecting them.  Distances along unrelated paths
cannot be compared; only when one path is an extension of the other.
A path's distance is a hierarchical quantity.  Most significant is the
total number of implicit conversions required.  Next, the number of
upcasts done (the inheritance distance).  Finally, the number of
subsets encountered.  A junction of types is treated as whichever type
results in the smallest distance.  The same for a conjunction of
types.

------------------------------------------------------------
Backstory and discussion:
