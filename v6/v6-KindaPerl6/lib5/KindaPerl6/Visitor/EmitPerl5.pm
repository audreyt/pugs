# Do not edit this file - Generated by MiniPerl6
use v5;
use strict;
use MiniPerl6::Perl5::Runtime;
use MiniPerl6::Perl5::Match;
package KindaPerl6::Visitor::EmitPerl5; sub new { shift; bless { @_ }, "KindaPerl6::Visitor::EmitPerl5" } sub visit { my $self = shift; my $List__ = \@_; my $node; do {  $node = $List__->[0]; [$node] }; $node->emit_perl5() }
;
package CompUnit; sub new { shift; bless { @_ }, "CompUnit" } sub emit_perl5 { my $self = shift; my $List__ = \@_; do { [] }; ('{ package ' . ($self->{name} . ('; ' . (Main::newline() . ('# Do not edit this file - Perl 5 generated by ' . ($Main::_V6_COMPILER_NAME . (Main::newline() . ('use v5; ' . ('use strict; ' . ('no strict \'vars\'; ' . ('use KindaPerl6::Runtime::Perl5::Runtime; ' . ('my $_MODIFIED; BEGIN { $_MODIFIED = {} } ' . ('BEGIN { ' . ('$_ = ::DISPATCH($::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); ' . ('} ' . ($self->{body}->emit_perl5() . ('; 1 }' . Main::newline()))))))))))))))))) }
;
package Val::Int; sub new { shift; bless { @_ }, "Val::Int" } sub emit_perl5 { my $self = shift; my $List__ = \@_; do { [] }; ('::DISPATCH( $::Int, \'new\', ' . ($self->{int} . ' )')) }
;
package Val::Bit; sub new { shift; bless { @_ }, "Val::Bit" } sub emit_perl5 { my $self = shift; my $List__ = \@_; do { [] }; ('::DISPATCH( $::Bit, \'new\', ' . ($self->{bit} . ' )')) }
;
package Val::Num; sub new { shift; bless { @_ }, "Val::Num" } sub emit_perl5 { my $self = shift; my $List__ = \@_; do { [] }; ('::DISPATCH( $::Num, \'new\', ' . ($self->{num} . ' )')) }
;
package Val::Buf; sub new { shift; bless { @_ }, "Val::Buf" } sub emit_perl5 { my $self = shift; my $List__ = \@_; do { [] }; ('::DISPATCH( $::Str, \'new\', ' . ('\'' . (Main::mangle_string($self->{buf}) . ('\'' . ' )')))) }
;
package Val::Undef; sub new { shift; bless { @_ }, "Val::Undef" } sub emit_perl5 { my $self = shift; my $List__ = \@_; do { [] }; '$::Undef' }
;
package Val::Object; sub new { shift; bless { @_ }, "Val::Object" } sub emit_perl5 { my $self = shift; my $List__ = \@_; do { [] }; die('not implemented') }
;
package Native::Buf; sub new { shift; bless { @_ }, "Native::Buf" } sub emit_perl5 { my $self = shift; my $List__ = \@_; do { [] }; die('not implemented') }
;
package Lit::Seq; sub new { shift; bless { @_ }, "Lit::Seq" } sub emit_perl5 { my $self = shift; my $List__ = \@_; do { [] }; ('(' . (Main::join([ map { $_->emit_perl5() } @{ $self->{seq} } ], ', ') . ')')) }
;
package Lit::Array; sub new { shift; bless { @_ }, "Lit::Array" } sub emit_perl5 { my $self = shift; my $List__ = \@_; do { [] }; ('[' . (Main::join([ map { $_->emit_perl5() } @{ $self->{array} } ], ', ') . ']')) }
;
package Lit::Hash; sub new { shift; bless { @_ }, "Lit::Hash" } sub emit_perl5 { my $self = shift; my $List__ = \@_; do { [] }; my  $fields = $self->{hash}; my  $str = ''; do { for my $field ( @{$fields} ) { $str = ($str . ($field->[0]->emit_perl5() . (' => ' . ($field->[1]->emit_perl5() . ',')))) } }; ('{ ' . ($str . ' }')) }
;
package Lit::Code; sub new { shift; bless { @_ }, "Lit::Code" } sub emit_perl5 { my $self = shift; my $List__ = \@_; do { [] }; my  $s; do { for my $name ( @{$self->{pad}->variable_names()} ) { my  $decl = Decl->new( 'decl' => 'my','type' => '','var' => Var->new( 'sigil' => '','twigil' => '','name' => $name, ), );$s = ($s . ($name->emit_perl5() . '; ')) } }; return(($s . Main::join([ map { $_->emit_perl5() } @{ $self->{body} } ], '; '))) }
;
package Lit::Object; sub new { shift; bless { @_ }, "Lit::Object" } sub emit_perl5 { my $self = shift; my $List__ = \@_; do { [] }; my  $fields = $self->{fields}; my  $str = ''; do { for my $field ( @{$fields} ) { $str = ($str . ($field->[0]->emit_perl5() . (' => ' . ($field->[1]->emit_perl5() . ',')))) } }; ('::DISPATCH( $::' . ($self->{class} . (', \'new\', ' . ($str . ' )')))) }
;
package Index; sub new { shift; bless { @_ }, "Index" } sub emit_perl5 { my $self = shift; my $List__ = \@_; do { [] }; ('::DISPATCH( ' . ($self->{obj}->emit_perl5() . (', \'INDEX\', ' . ($self->{index}->emit_perl5() . ' )')))) }
;
package Lookup; sub new { shift; bless { @_ }, "Lookup" } sub emit_perl5 { my $self = shift; my $List__ = \@_; do { [] }; ('::DISPATCH( ' . ($self->{obj}->emit_perl5() . (', \'LOOKUP\', ' . ($self->{index}->emit_perl5() . ' )')))) }
;
package Assign; sub new { shift; bless { @_ }, "Assign" } sub emit_perl5 { my $self = shift; my $List__ = \@_; do { [] }; ('::DISPATCH_VAR( ' . ($self->{parameters}->emit_perl5() . (', \'STORE\', ' . ($self->{arguments}->emit_perl5() . ' )')))) }
;
package Var; sub new { shift; bless { @_ }, "Var" } sub emit_perl5 { my $self = shift; my $List__ = \@_; do { [] }; my  $table = { '$' => '$','@' => '$List_','%' => '$Hash_','&' => '$Code_', }; do { if (($self->{twigil} eq '.')) { return(('$self->{' . ($self->{name} . '}'))) } else {  } }; do { if (($self->{name} eq '/')) { return(($table->{$self->{sigil}} . 'MATCH')) } else {  } }; return(Main::mangle_name($self->{sigil}, $self->{twigil}, $self->{name})) }
;
package Bind; sub new { shift; bless { @_ }, "Bind" } sub emit_perl5 { my $self = shift; my $List__ = \@_; do { [] }; do { if (Main::isa($self->{parameters}, 'Var')) { return(('::DISPATCH_VAR( ' . ($self->{parameters}->emit_perl5() . (', \'BIND\', ' . ($self->{arguments}->emit_perl5() . ' )'))))) } else {  } }; do { if (Main::isa($self->{parameters}, 'Proto')) { return(($self->{parameters}->emit_perl5() . (' = ' . $self->{arguments}->emit_perl5()))) } else {  } } }
;
package Proto; sub new { shift; bless { @_ }, "Proto" } sub emit_perl5 { my $self = shift; my $List__ = \@_; do { [] }; return(('$::' . $self->{name})) }
;
package Call; sub new { shift; bless { @_ }, "Call" } sub emit_perl5 { my $self = shift; my $List__ = \@_; do { [] }; my  $invocant; do { if (Main::isa($self->{invocant}, 'Proto')) { do { if (($self->{invocant}->name() eq 'self')) { $invocant = '$self' } else { $invocant = $self->{invocant}->emit_perl5() } } } else { $invocant = $self->{invocant}->emit_perl5() } }; do { if (($invocant eq 'self')) { $invocant = '$self' } else {  } }; do { if ((($self->{method} eq 'yaml') || (($self->{method} eq 'join') || ($self->{method} eq 'chars')))) { do { if ($self->{hyper}) { return(('[ map { Main::' . ($self->{method} . ('( $_, ' . (', ' . (Main::join([ map { $_->emit_perl5() } @{ $self->{arguments} } ], ', ') . (')' . (' } @{ ' . ($invocant . ' } ]'))))))))) } else { return(('Main::' . ($self->{method} . ('(' . ($invocant . (', ' . (Main::join([ map { $_->emit_perl5() } @{ $self->{arguments} } ], ', ') . ')'))))))) } } } else {  } }; my  $meth = $self->{method}; do { if (($meth eq 'postcircumfix:<( )>')) { $meth = '' } else {  } }; my  $call = Main::join([ map { $_->emit_perl5() } @{ $self->{arguments} } ], ', '); do { if ($self->{hyper}) { ('[ map { $_' . ('->' . ($meth . ('(' . ($call . (') } @{ ' . ($invocant . ' } ]'))))))) } else { do { if (($meth eq '')) { ('::DISPATCH( ' . ($invocant . (', \'APPLY\', ' . ($call . ' )')))) } else { ('::DISPATCH( ' . ($invocant . (', ' . ('\'' . ($meth . ('\', ' . ($call . ' )'))))))) } } } } }
;
package Apply; sub new { shift; bless { @_ }, "Apply" } sub emit_perl5 { my $self = shift; my $List__ = \@_; do { [] }; return(('::DISPATCH( ' . ($self->{code}->emit_perl5() . (', \'APPLY\', ' . (Main::join([ map { $_->emit_perl5() } @{ $self->{arguments} } ], ', ') . ' )'))))) }
;
package Return; sub new { shift; bless { @_ }, "Return" } sub emit_perl5 { my $self = shift; my $List__ = \@_; do { [] }; return(('return(' . ($self->{result}->emit_perl5() . ')'))) }
;
package If; sub new { shift; bless { @_ }, "If" } sub emit_perl5 { my $self = shift; my $List__ = \@_; do { [] }; ('do { if ( ' . ($self->{cond}->emit_perl5() . ('->true->p5landish ) ' . (($self->{body} ? ('{ ' . ($self->{body}->emit_perl5() . ' } ')) : '{ } ') . (($self->{otherwise} ? (' else { ' . ($self->{otherwise}->emit_perl5() . ' }')) : '') . ' }'))))) }
;
package For; sub new { shift; bless { @_ }, "For" } sub emit_perl5 { my $self = shift; my $List__ = \@_; do { [] }; my  $cond = $self->{cond}; do { if ((Main::isa($cond, 'Var') && ($cond->sigil() eq '@'))) { $cond = Apply->new( 'code' => 'prefix:<@>','arguments' => [$cond], ) } else {  } }; ('do { for my ' . ($self->{topic}->emit_perl5() . (' ( ' . ($cond->emit_perl5() . (' ) { ' . ($self->{body}->emit_perl5() . ' } }')))))) }
;
package Decl; sub new { shift; bless { @_ }, "Decl" } sub emit_perl5 { my $self = shift; my $List__ = \@_; do { [] }; my  $decl = $self->{decl}; my  $name = $self->{var}->name(); do { if (($decl eq 'has')) { return(('sub ' . ($name . (' { ' . ('@_ == 1 ' . ('? ( $_[0]->{' . ($name . ('} ) ' . (': ( $_[0]->{' . ($name . ('} = $_[1] ) ' . '}'))))))))))) } else {  } }; my  $create = (', \'new\', { modified => $_MODIFIED, name => \'' . ($self->{var}->emit_perl5() . '\' } ) ')); do { if (($decl eq 'our')) { my  $s;$s = 'our ';do { if (($self->{var}->sigil() eq '$')) { return(($s . ($self->{var}->emit_perl5() . (' = ::DISPATCH( $::Scalar' . ($create . (' unless defined ' . ($self->{var}->emit_perl5() . ('; ' . ('BEGIN { ' . ($self->{var}->emit_perl5() . (' = ::DISPATCH( $::Scalar' . ($create . (' unless defined ' . ($self->{var}->emit_perl5() . ('; ' . '}'))))))))))))))) } else {  } };do { if (($self->{var}->sigil() eq '&')) { return(($s . ($self->{var}->emit_perl5() . (' = ::DISPATCH( $::Routine' . $create)))) } else {  } };do { if (($self->{var}->sigil() eq '%')) { return(($s . ($self->{var}->emit_perl5() . (' = ::DISPATCH( $::Hash' . $create)))) } else {  } };do { if (($self->{var}->sigil() eq '@')) { return(($s . ($self->{var}->emit_perl5() . (' = ::DISPATCH( $::Array' . $create)))) } else {  } };return(($s . ($self->{var}->emit_perl5() . ' '))) } else {  } }; do { if (($self->{var}->sigil() eq '$')) { return(($self->{decl} . (' ' . ($self->{var}->emit_perl5() . ('; ' . ($self->{var}->emit_perl5() . (' = ::DISPATCH( $::Scalar' . ($create . (' unless defined ' . ($self->{var}->emit_perl5() . ('; ' . ('BEGIN { ' . ($self->{var}->emit_perl5() . (' = ::DISPATCH( $::Scalar' . ($create . '}'))))))))))))))) } else {  } }; do { if (($self->{var}->sigil() eq '&')) { return(($self->{decl} . (' ' . ($self->{var}->emit_perl5() . ('; ' . ($self->{var}->emit_perl5() . (' = ::DISPATCH( $::Routine' . ($create . (' unless defined ' . ($self->{var}->emit_perl5() . ('; ' . ('BEGIN { ' . ($self->{var}->emit_perl5() . (' = ::DISPATCH( $::Routine' . ($create . '}'))))))))))))))) } else {  } }; do { if (($self->{var}->sigil() eq '%')) { return(($self->{decl} . (' ' . (' ' . ($self->{var}->emit_perl5() . (' = ::DISPATCH( $::Hash' . $create)))))) } else {  } }; do { if (($self->{var}->sigil() eq '@')) { return(($self->{decl} . (' ' . (' ' . ($self->{var}->emit_perl5() . (' = ::DISPATCH( $::Array' . $create)))))) } else {  } }; return(($self->{decl} . (' ' . $self->{var}->emit_perl5()))) }
;
package Sig; sub new { shift; bless { @_ }, "Sig" } sub emit_perl5 { my $self = shift; my $List__ = \@_; do { [] }; ' print \'Signature - TODO\'; die \'Signature - TODO\'; ' }
;
package Subset; sub new { shift; bless { @_ }, "Subset" } sub emit_perl5 { my $self = shift; my $List__ = \@_; do { [] }; ('::DISPATCH( $::Subset, "new", { ' . ('base_class => ' . ($self->{base_class}->emit_perl5() . (', ' . ('block => ' . ('sub { local $_ = shift; ' . ($self->{block}->block()->emit_perl5() . (' } ' . ' } )')))))))) }
;
package Method; sub new { shift; bless { @_ }, "Method" } sub emit_perl5 { my $self = shift; my $List__ = \@_; do { [] }; my  $sig = $self->{block}->sig(); my  $invocant = $sig->invocant(); my  $pos = $sig->positional(); my  $str = 'my $List__ = \@_; '; my  $pos = $sig->positional(); do { for my $field ( @{$pos} ) { $str = ($str . ('my ' . ($field->emit_perl5() . '; '))) } }; my  $bind = Bind->new( 'parameters' => Lit::Array->new( 'array' => $sig->positional(), ),'arguments' => Var->new( 'sigil' => '@','twigil' => '','name' => '_', ), ); $str = ($str . ($bind->emit_perl5() . '; ')); ('sub ' . ($self->{name} . (' { ' . ('my ' . ($invocant->emit_perl5() . (' = shift; ' . ($str . ($self->{block}->emit_perl5() . ' }')))))))) }
;
package Sub; sub new { shift; bless { @_ }, "Sub" } sub emit_perl5 { my $self = shift; my $List__ = \@_; do { [] }; my  $sig = $self->{block}->sig(); my  $pos = $sig->positional(); my  $str = 'my $List__ = \@_; '; my  $pos = $sig->positional(); do { if (@{$pos}) { do { for my $field ( @{$pos} ) { $str = ($str . ('my ' . ($field->emit_perl5() . '; '))) } };my  $bind = Bind->new( 'parameters' => Lit::Array->new( 'array' => $sig->positional(), ),'arguments' => Var->new( 'sigil' => '@','twigil' => '','name' => '_', ), );$str = ($str . ($bind->emit_perl5() . '; ')) } else {  } }; my  $code = ('::DISPATCH( $::Code, \'new\', { ' . ('code => sub { ' . ($str . ($self->{block}->emit_perl5() . (' }' . (', src => q#sub { ' . (COMPILER::emit_perl6($self->{block}) . (' }#' . ' } )')))))))); do { if ($self->{name}) { return(('$Code_' . ($self->{name} . ('->BIND( ' . ($code . ')'))))) } else {  } }; return($code) }
;
package Do; sub new { shift; bless { @_ }, "Do" } sub emit_perl5 { my $self = shift; my $List__ = \@_; do { [] }; ('do { ' . ($self->{block}->emit_perl5() . ' }')) }
;
package BEGIN; sub new { shift; bless { @_ }, "BEGIN" } sub emit_perl5 { my $self = shift; my $List__ = \@_; do { [] }; ('BEGIN { ' . ($self->{block}->emit_perl5() . ' }')) }
;
package Use; sub new { shift; bless { @_ }, "Use" } sub emit_perl5 { my $self = shift; my $List__ = \@_; do { [] }; do { if (($self->{mod} eq 'v6')) { return((Main::newline() . ('#use v6' . Main::newline()))) } else {  } }; do { if ($self->{perl5}) { return(('use ' . ($self->{mod} . (';$::' . ($self->{mod} . ('= KindaPerl6::Runtime::Perl5::Wrap::use5(\'' . ($self->{mod} . '\')'))))))) } else { return(('use ' . $self->{mod})) } } }
;
1;
