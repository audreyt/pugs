A SBCL Common-Lisp backend for elf

QUICKSTART

$ make libraries
$ make elfx
$ ./elfx -xr PrimitivesSBCL.pm -v -e 'say 3'

STATUS

Can self-compile.

VISION

Become a second, faster-than-p5 backend for elf.

This will permit elf to be declared bootstrapped, and provide a high
performance p6 implementation.  And thus provide an environment for
bootstrapped p6 compiler development where correctness is not
inherently incompatible with tolerable performance.

TODO

Issues:
- Can't correctly compile the p5 backend, so bootstrapping isn't finished.
- Pragmatics, the primary motivation for this subproject, currently suck.
-- noisy (warning and cruft messages)
-- slow (almost 2 minutes to self emit and compile)

Work:

* Try clisp in place of sbcl.  Faster (though weaker) compiler.
  We just need a CL backend with good pragmatics.  Doesn't have to be SBCL.
  And having a second target will help when MOP efforts start.
  If clisp looks promising, the objective will be to support both.
  Ie, +clisp Primitives, and dup the libraries.
  Other CL implementations are *not* near-term goals.

* Become able to correctly compile the p5 backend.

* Improve emitted code - increase compilability and decrease warning messages.

* Address noise - given existent warnings, silence them.
  Avoid other spew - sbcl is famous for making this difficult/impossible?
  Milestone is -e 'say 3' printing nothing other than 3.
  Self compilation can be noisier.

* Address performance - try without debug; profile; explore where the "oops,
  lost 2x while not watching" went; tweak dispatch.  Document both positive
  and negative results.
  Do *not* work on special case or unboxing solutions - we're still looking
  at whole-system improvements.  Start-times are not yet the pressing
  issue, so images and native executable schemes aren't yet interesting.

There are also many non-critical path things which might be worked on.
Some random examples:
- fleshing out the prelude.  File, etc.
- start work on a CL runtime which it completely true to the p6 oo model.
- design a better IR, with multimethod-based analysis and emitting.
- permit calling cl libraries from p6.
- setup embedded p5 and permit calling p5 libraries from p6.
- think about porting Garnet to p6. or simply using it.
- does contraint propagation (Cell) permit any nice new approaches to
   compiler design?
- ...

NOTES

  You can leave questions/comments on http://perl.net.au/wiki/Elf .

  SBCL is a verbose beast.  Anything which compiles should be run
  from a fast terminal.  Like xterm, not gnome terminal.  Otherwise,
  terminal scrolling will determine compile time.

  Compiling the CL elf requires about 2GB of ram.

  Warnings are sometimes muffled before check in, to improve the
  experience of causal users.  For real development, comment out
  the muffle-conditions lines in EmitSBCL.pm.

  As usual with elf, you probably want to define a STD_RED_CACHEDIR.

  
  ../../elf/elf_h EmitSBCL.pm -xr PrimitivesSBCL.pm -v -e 'say 3'
  ../../elf/elf_h EmitSBCL.pm -xr PrimitivesSBCL.pm -e 'sub f($x){say $x+3}; f(4)'

  make libraries
  make elfx
  export ELF_STD_RED_RUN=../../STD_red/STD_red_run
  ./elfx -xr PrimitivesSBCL.pm -e 'say 3'


  # A note on performance...
  ../../elf/elf_h EmitSBCL.pm -xr PrimitivesSBCL.pm -e 'sub fib($n){if $n==0 {0} elsif $n==1 {1} else {fib($n-1)+fib($n-2)}}; say fib(37)'
  time ./deleteme_exe
  time perl -e 'sub fib{my($n)=@_;if($n==0){0}elsif($n==1){1}else{fib($n-1)+fib($n-2)}};print fib(37),"\n";'
  # elf was previously 10x faster than p5, using native + on native integers.
  # This dropped to 3x with non-multi infix:<+>, etc, on native integers.
  # This dropped to 1/5x with multi infix:<+>, etc, on native integers.
  # This increased to 1x with improved multi dispatch, still on native integers.
  # This remained 1x with general rw-ability added, still native integers.
  # This dropped to 1/2x with Int's.
  # This dropped to 1/4x while not being watched, for causes unknown.
  # This dropped to 1/5x with boxed undef and booleans.
