{-# OPTIONS_GHC -fglasgow-exts -fno-full-laziness -fno-cse #-}

import qualified Data.FastPackedString as Str
import DrIFT.YAML
import Data.Yaml.Syck
import Pugs.Prim.Eval
import Data.Generics.Schemes

type Str = Str.FastString

{-

Prelude bootstap. Contains a loader that attempts to fetch a precompiled
version of the Prelude from a file; if one isn't found, it evaluates
an inlined Perl 6 source version.

-}

{-# NOINLINE _BypassPreludePC #-}
_BypassPreludePC :: IORef Bool
_BypassPreludePC = unsafePerformIO $ newIORef False

initPreludePC :: Env -> IO Env
initPreludePC env = do
    bypass <- readIORef _BypassPreludePC
    if bypass then return env else do
        let dispProgress = (posName . envPos $ env) == "<interactive>"
        when dispProgress $ putStr "Loading Prelude... "
        catch loadPreludePC $ \e -> do
            --print "moose"
            --print e
            evalPrelude
        when dispProgress $ putStrLn "done."
        return env
    where
    style = MkEvalStyle
        { evalResult = EvalResultModule
        , evalError  = EvalErrorFatal
        }
    evalPrelude = runEvalIO env{ envDebug = Nothing } $ opEval style "<prelude>" preludeStr
    loadPreludePC = do -- XXX: search path
        -- print "Parsing yaml..."
        p <- parseYamlFS =<< Str.readFile "src/Pugs/PreludePC.yml"
        -- print "Parsing done!"
        case p of
            Right (Just yml) -> do
                -- print "Loading yaml..."
                (glob, ast) <- fromYAML yml
                -- print "Loading done!"
                globRef <- liftSTM $ do
                    glob' <- readTVar $ envGlobal env
                    newTVar (glob `unionPads` glob')
                runEnv env{ envBody = ast, envGlobal = globRef, envDebug = Nothing }
            x                -> fail $ "error loading precompiled Prelude" ++ show x

-- This is filled in by the null() procedure in util/gen_prelude.pl
preludeStr :: String
