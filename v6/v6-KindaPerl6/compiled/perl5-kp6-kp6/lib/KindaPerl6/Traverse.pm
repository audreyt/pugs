{

    package KindaPerl6::Traverse;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    # AUTHORS, COPYRIGHT: Please look at the source file.
    use v5;
    use strict;
    no strict "vars";
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    INIT { $_MODIFIED = {} }
    INIT {
        $_ =
          ::DISPATCH( $::Scalar, "new",
            { modified => $_MODIFIED, name => "$_" } );
    }
    do {
        our $Code_visit =
          ::DISPATCH( $::Routine, 'new',
            { modified => $_MODIFIED, name => '$Code_visit' } );
        our $Code_visit_subnode =
          ::DISPATCH( $::Routine, 'new',
            { modified => $_MODIFIED, name => '$Code_visit_subnode' } );
        do {
            if (
                ::DISPATCH(
                    ::DISPATCH(
                        ::DISPATCH(
                            (
                                $GLOBAL::Code_VAR_defined =
                                  $GLOBAL::Code_VAR_defined
                                  || ::DISPATCH( $::Routine, "new", )
                            ),
                            'APPLY',
                            $::KindaPerl6::Traverse
                        ),
                        "true"
                    ),
                    "p5landish"
                )
              )
            {
            }
            else {
                do {
                    our $Code_visit =
                      ::DISPATCH( $::Routine, 'new',
                        { modified => $_MODIFIED, name => '$Code_visit' } );
                    our $Code_visit_subnode = ::DISPATCH(
                        $::Routine,
                        'new',
                        {
                            modified => $_MODIFIED,
                            name     => '$Code_visit_subnode'
                        }
                    );
                    do {
                        ::MODIFIED($::KindaPerl6::Traverse);
                        $::KindaPerl6::Traverse = ::DISPATCH(
                            ::DISPATCH(
                                $::Class, 'new',
                                ::DISPATCH(
                                    $::Str, 'new', 'KindaPerl6::Traverse'
                                )
                            ),
                            'PROTOTYPE',
                        );
                      }
                  }
            }
        };
        do {
            ::MODIFIED($Code_visit);
            $Code_visit = ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {
                        my $result;
                        $result =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$result' } )
                          unless defined $result;
                        INIT {
                            $result =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$result' } );
                        }
                        my $data;
                        $data =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$data' } )
                          unless defined $data;
                        INIT {
                            $data =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$data' } );
                        }
                        my $item;
                        $item =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$item' } )
                          unless defined $item;
                        INIT {
                            $item =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$item' } );
                        }
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $visitor;
                        $visitor =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$visitor' } )
                          unless defined $visitor;
                        INIT {
                            $visitor = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$visitor' }
                            );
                        }
                        my $node;
                        $node =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$node' } )
                          unless defined $node;
                        INIT {
                            $node =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$node' } );
                        }
                        my $node_name;
                        $node_name =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$node_name' } )
                          unless defined $node_name;
                        INIT {
                            $node_name = ::DISPATCH(
                                $::Scalar,
                                'new',
                                {
                                    modified => $_MODIFIED,
                                    name     => '$node_name'
                                }
                            );
                        }
                        my $path;
                        $path =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$path' } )
                          unless defined $path;
                        INIT {
                            $path =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$path' } );
                        }
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;
                        INIT {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        ::DISPATCH_VAR( $List__, 'STORE',
                            ::DISPATCH( $CAPTURE, 'array', ) );
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        {
                            my $_param_index = 0;
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__,
                                        'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'visitor' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($visitor);
                                    $visitor = ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'visitor' )
                                    );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $visitor = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'node' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($node);
                                    $node =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'node' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $node = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'node_name'
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($node_name);
                                    $node_name = ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'node_name'
                                        )
                                    );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $node_name = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'path' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($path);
                                    $path =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'path' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $path = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                        }
                        do {
                            if (
                                ::DISPATCH(
                                    ::DISPATCH(
                                        ::DISPATCH(
                                            (
                                                $GLOBAL::Code_prefix_58__60__33__62_
                                                  = $GLOBAL::Code_prefix_58__60__33__62_
                                                  || ::DISPATCH(
                                                    $::Routine, "new",
                                                  )
                                            ),
                                            'APPLY',
                                            ::DISPATCH(
                                                (
                                                    $GLOBAL::Code_defined =
                                                      $GLOBAL::Code_defined
                                                      || ::DISPATCH(
                                                        $::Routine, "new",
                                                      )
                                                ),
                                                'APPLY', $path
                                            )
                                        ),
                                        "true"
                                    ),
                                    "p5landish"
                                )
                              )
                            {
                                do {
                                    do {
                                        ::MODIFIED($path);
                                        $path =
                                          ::DISPATCH( $::Array, 'new',
                                            { _array => [] } );
                                      }
                                  }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        do {
                            if (
                                ::DISPATCH(
                                    ::DISPATCH(
                                        do {
                                            my $_tmp1 = ::DISPATCH(
                                                $node, 'isa',
                                                ::DISPATCH(
                                                    $::Str, 'new', 'Array'
                                                )
                                            );
                                            ::DISPATCH( $_tmp1, "true" )
                                              ->{_value} ? $_tmp1 : ::DISPATCH(
                                                $node, 'isa',
                                                ::DISPATCH(
                                                    $::Str, 'new', 'List'
                                                )
                                              );
                                        },
                                        "true"
                                    ),
                                    "p5landish"
                                )
                              )
                            {
                                do {
                                    my $result;
                                    $result = ::DISPATCH(
                                        $::Scalar,
                                        'new',
                                        {
                                            modified => $_MODIFIED,
                                            name     => '$result'
                                        }
                                    ) unless defined $result;
                                    INIT {
                                        $result = ::DISPATCH(
                                            $::Scalar,
                                            'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$result'
                                            }
                                        );
                                    }
                                    my $subitem;
                                    $subitem = ::DISPATCH(
                                        $::Scalar,
                                        'new',
                                        {
                                            modified => $_MODIFIED,
                                            name     => '$subitem'
                                        }
                                    ) unless defined $subitem;
                                    INIT {
                                        $subitem = ::DISPATCH(
                                            $::Scalar,
                                            'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$subitem'
                                            }
                                        );
                                    }
                                    do {
                                        ::MODIFIED($result);
                                        $result =
                                          ::DISPATCH( $::Array, 'new',
                                            { _array => [] } );
                                    };
                                    $subitem;
                                    ::DISPATCH(
                                        ::DISPATCH(
                                            (
                                                $GLOBAL::Code_prefix_58__60__64__62_
                                                  = $GLOBAL::Code_prefix_58__60__64__62_
                                                  || ::DISPATCH(
                                                    $::Routine, "new",
                                                  )
                                            ),
                                            'APPLY', $node
                                        ),
                                        'map',
                                        ::DISPATCH(
                                            $::Code, 'new',
                                            {
                                                code => sub {
                                                    my $List__ = ::DISPATCH(
                                                        $::ArrayContainer,
                                                        'new',
                                                        {
                                                            modified =>
                                                              $_MODIFIED,
                                                            name => '$List__'
                                                        }
                                                    );
                                                    my $subitem;
                                                    $subitem = ::DISPATCH(
                                                        $::Scalar,
                                                        'new',
                                                        {
                                                            modified =>
                                                              $_MODIFIED,
                                                            name => '$subitem'
                                                        }
                                                    ) unless defined $subitem;
                                                    INIT {
                                                        $subitem = ::DISPATCH(
                                                            $::Scalar,
                                                            'new',
                                                            {
                                                                modified =>
                                                                  $_MODIFIED,
                                                                name =>
                                                                  '$subitem'
                                                            }
                                                        );
                                                    }
                                                    my $CAPTURE;
                                                    $CAPTURE = ::DISPATCH(
                                                        $::Scalar,
                                                        'new',
                                                        {
                                                            modified =>
                                                              $_MODIFIED,
                                                            name => '$CAPTURE'
                                                        }
                                                    ) unless defined $CAPTURE;
                                                    INIT {
                                                        $CAPTURE = ::DISPATCH(
                                                            $::Scalar,
                                                            'new',
                                                            {
                                                                modified =>
                                                                  $_MODIFIED,
                                                                name =>
                                                                  '$CAPTURE'
                                                            }
                                                        );
                                                    }
                                                    my $List__ = ::DISPATCH(
                                                        $::ArrayContainer,
                                                        'new',
                                                        {
                                                            modified =>
                                                              $_MODIFIED,
                                                            name => '$List__'
                                                        }
                                                    );
                                                    ::DISPATCH_VAR( $CAPTURE,
                                                        "STORE",
                                                        ::CAPTURIZE( \@_ ) );
                                                    ::DISPATCH_VAR(
                                                        $List__, 'STORE',
                                                        ::DISPATCH(
                                                            $CAPTURE, 'array',
                                                        )
                                                    );
                                                    do {
                                                        ::MODIFIED($Hash__);
                                                        $Hash__ =
                                                          ::DISPATCH( $CAPTURE,
                                                            'hash', );
                                                    };
                                                    {
                                                        my $_param_index = 0;
                                                        if (
                                                            ::DISPATCH(
                                                                $GLOBAL::Code_exists,
                                                                'APPLY',
                                                                ::DISPATCH(
                                                                    $Hash__,
                                                                    'LOOKUP',
                                                                    ::DISPATCH(
                                                                        $::Str,
                                                                        'new',
'subitem'
                                                                    )
                                                                )
                                                            )->{_value}
                                                          )
                                                        {
                                                            do {
                                                                ::MODIFIED(
                                                                    $subitem);
                                                                $subitem =
                                                                  ::DISPATCH(
                                                                    $Hash__,
                                                                    'LOOKUP',
                                                                    ::DISPATCH(
                                                                        $::Str,
                                                                        'new',
'subitem'
                                                                    )
                                                                  );
                                                              }
                                                        }
                                                        elsif (
                                                            ::DISPATCH(
                                                                $GLOBAL::Code_exists,
                                                                'APPLY',
                                                                ::DISPATCH(
                                                                    $List__,
                                                                    'INDEX',
                                                                    ::DISPATCH(
                                                                        $::Int,
                                                                        'new',
                                                                        $_param_index
                                                                    )
                                                                )
                                                            )->{_value}
                                                          )
                                                        {
                                                            $subitem =
                                                              ::DISPATCH(
                                                                $List__,
                                                                'INDEX',
                                                                ::DISPATCH(
                                                                    $::Int,
                                                                    'new',
                                                                    $_param_index++
                                                                )
                                                              );
                                                        }
                                                    }
                                                    ::DISPATCH(
                                                        (
                                                            $GLOBAL::Code_push =
                                                              $GLOBAL::Code_push
                                                              || ::DISPATCH(
                                                                $::Routine,
                                                                "new",
                                                              )
                                                        ),
                                                        'APPLY',
                                                        ::DISPATCH(
                                                            (
                                                                $GLOBAL::Code_prefix_58__60__64__62_
                                                                  = $GLOBAL::Code_prefix_58__60__64__62_
                                                                  || ::DISPATCH(
                                                                    $::Routine,
                                                                    "new",
                                                                  )
                                                            ),
                                                            'APPLY',
                                                            $result
                                                        ),
                                                        ::DISPATCH(
                                                            $Code_visit_subnode,
                                                            'APPLY',
                                                            $visitor,
                                                            $subitem,
                                                            $path
                                                        )
                                                    );
                                                },
                                                signature => ::DISPATCH(
                                                    $::Signature,
                                                    "new",
                                                    {
                                                        invocant => $::Undef,
                                                        array    => ::DISPATCH(
                                                            $::List,
                                                            "new",
                                                            {
                                                                _array => [
                                                                    ::DISPATCH(
                                                                        $::Signature::Item,
                                                                        'new',
                                                                        {
                                                                            sigil =>
'$',
                                                                            twigil =>
'',
                                                                            name =>
'subitem',
                                                                            value =>
                                                                              $::Undef,
                                                                            has_default =>
                                                                              ::DISPATCH(
                                                                                $::Bit,
'new',
                                                                                0
                                                                              ),
                                                                            is_named_only =>
                                                                              ::DISPATCH(
                                                                                $::Bit,
'new',
                                                                                0
                                                                              ),
                                                                            is_optional =>
                                                                              ::DISPATCH(
                                                                                $::Bit,
'new',
                                                                                0
                                                                              ),
                                                                            is_slurpy =>
                                                                              ::DISPATCH(
                                                                                $::Bit,
'new',
                                                                                0
                                                                              ),
                                                                            is_multidimensional =>
                                                                              ::DISPATCH(
                                                                                $::Bit,
'new',
                                                                                0
                                                                              ),
                                                                            is_rw =>
                                                                              ::DISPATCH(
                                                                                $::Bit,
'new',
                                                                                0
                                                                              ),
                                                                            is_copy =>
                                                                              ::DISPATCH(
                                                                                $::Bit,
'new',
                                                                                0
                                                                              ),
                                                                        }
                                                                    ),
                                                                ]
                                                            }
                                                        ),
                                                        return => $::Undef,
                                                    }
                                                ),
                                            }
                                        )
                                    );
                                    return ($result);
                                  }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        do {
                            if (
                                ::DISPATCH(
                                    ::DISPATCH(
                                        ::DISPATCH(
                                            $node,
                                            'isa',
                                            ::DISPATCH( $::Str, 'new', 'Hash' )
                                        ),
                                        "true"
                                    ),
                                    "p5landish"
                                )
                              )
                            {
                                do {
                                    my $result;
                                    $result = ::DISPATCH(
                                        $::Scalar,
                                        'new',
                                        {
                                            modified => $_MODIFIED,
                                            name     => '$result'
                                        }
                                    ) unless defined $result;
                                    INIT {
                                        $result = ::DISPATCH(
                                            $::Scalar,
                                            'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$result'
                                            }
                                        );
                                    }
                                    my $subitem;
                                    $subitem = ::DISPATCH(
                                        $::Scalar,
                                        'new',
                                        {
                                            modified => $_MODIFIED,
                                            name     => '$subitem'
                                        }
                                    ) unless defined $subitem;
                                    INIT {
                                        $subitem = ::DISPATCH(
                                            $::Scalar,
                                            'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$subitem'
                                            }
                                        );
                                    }
                                    do {
                                        ::MODIFIED($result);
                                        $result = ::DISPATCH( $::Hash, 'new', );
                                    };
                                    $subitem;
                                    ::DISPATCH(
                                        ::DISPATCH(
                                            (
                                                $GLOBAL::Code_keys =
                                                  $GLOBAL::Code_keys
                                                  || ::DISPATCH(
                                                    $::Routine, "new",
                                                  )
                                            ),
                                            'APPLY',
                                            ::DISPATCH(
                                                (
                                                    $GLOBAL::Code_prefix_58__60__37__62_
                                                      = $GLOBAL::Code_prefix_58__60__37__62_
                                                      || ::DISPATCH(
                                                        $::Routine, "new",
                                                      )
                                                ),
                                                'APPLY', $node
                                            )
                                        ),
                                        'map',
                                        ::DISPATCH(
                                            $::Code, 'new',
                                            {
                                                code => sub {
                                                    my $List__ = ::DISPATCH(
                                                        $::ArrayContainer,
                                                        'new',
                                                        {
                                                            modified =>
                                                              $_MODIFIED,
                                                            name => '$List__'
                                                        }
                                                    );
                                                    my $subitem;
                                                    $subitem = ::DISPATCH(
                                                        $::Scalar,
                                                        'new',
                                                        {
                                                            modified =>
                                                              $_MODIFIED,
                                                            name => '$subitem'
                                                        }
                                                    ) unless defined $subitem;
                                                    INIT {
                                                        $subitem = ::DISPATCH(
                                                            $::Scalar,
                                                            'new',
                                                            {
                                                                modified =>
                                                                  $_MODIFIED,
                                                                name =>
                                                                  '$subitem'
                                                            }
                                                        );
                                                    }
                                                    my $CAPTURE;
                                                    $CAPTURE = ::DISPATCH(
                                                        $::Scalar,
                                                        'new',
                                                        {
                                                            modified =>
                                                              $_MODIFIED,
                                                            name => '$CAPTURE'
                                                        }
                                                    ) unless defined $CAPTURE;
                                                    INIT {
                                                        $CAPTURE = ::DISPATCH(
                                                            $::Scalar,
                                                            'new',
                                                            {
                                                                modified =>
                                                                  $_MODIFIED,
                                                                name =>
                                                                  '$CAPTURE'
                                                            }
                                                        );
                                                    }
                                                    my $List__ = ::DISPATCH(
                                                        $::ArrayContainer,
                                                        'new',
                                                        {
                                                            modified =>
                                                              $_MODIFIED,
                                                            name => '$List__'
                                                        }
                                                    );
                                                    ::DISPATCH_VAR( $CAPTURE,
                                                        "STORE",
                                                        ::CAPTURIZE( \@_ ) );
                                                    ::DISPATCH_VAR(
                                                        $List__, 'STORE',
                                                        ::DISPATCH(
                                                            $CAPTURE, 'array',
                                                        )
                                                    );
                                                    do {
                                                        ::MODIFIED($Hash__);
                                                        $Hash__ =
                                                          ::DISPATCH( $CAPTURE,
                                                            'hash', );
                                                    };
                                                    {
                                                        my $_param_index = 0;
                                                        if (
                                                            ::DISPATCH(
                                                                $GLOBAL::Code_exists,
                                                                'APPLY',
                                                                ::DISPATCH(
                                                                    $Hash__,
                                                                    'LOOKUP',
                                                                    ::DISPATCH(
                                                                        $::Str,
                                                                        'new',
'subitem'
                                                                    )
                                                                )
                                                            )->{_value}
                                                          )
                                                        {
                                                            do {
                                                                ::MODIFIED(
                                                                    $subitem);
                                                                $subitem =
                                                                  ::DISPATCH(
                                                                    $Hash__,
                                                                    'LOOKUP',
                                                                    ::DISPATCH(
                                                                        $::Str,
                                                                        'new',
'subitem'
                                                                    )
                                                                  );
                                                              }
                                                        }
                                                        elsif (
                                                            ::DISPATCH(
                                                                $GLOBAL::Code_exists,
                                                                'APPLY',
                                                                ::DISPATCH(
                                                                    $List__,
                                                                    'INDEX',
                                                                    ::DISPATCH(
                                                                        $::Int,
                                                                        'new',
                                                                        $_param_index
                                                                    )
                                                                )
                                                            )->{_value}
                                                          )
                                                        {
                                                            $subitem =
                                                              ::DISPATCH(
                                                                $List__,
                                                                'INDEX',
                                                                ::DISPATCH(
                                                                    $::Int,
                                                                    'new',
                                                                    $_param_index++
                                                                )
                                                              );
                                                        }
                                                    }
                                                    ::DISPATCH_VAR(
                                                        ::DISPATCH(
                                                            $result,
                                                            'LOOKUP',
                                                            $subitem
                                                        ),
                                                        "BIND",
                                                        ::DISPATCH(
                                                            $Code_visit_subnode,
                                                            'APPLY',
                                                            $visitor,
                                                            ::DISPATCH(
                                                                $node,
                                                                'LOOKUP',
                                                                $subitem
                                                            ),
                                                            $path
                                                        )
                                                    );
                                                },
                                                signature => ::DISPATCH(
                                                    $::Signature,
                                                    "new",
                                                    {
                                                        invocant => $::Undef,
                                                        array    => ::DISPATCH(
                                                            $::List,
                                                            "new",
                                                            {
                                                                _array => [
                                                                    ::DISPATCH(
                                                                        $::Signature::Item,
                                                                        'new',
                                                                        {
                                                                            sigil =>
'$',
                                                                            twigil =>
'',
                                                                            name =>
'subitem',
                                                                            value =>
                                                                              $::Undef,
                                                                            has_default =>
                                                                              ::DISPATCH(
                                                                                $::Bit,
'new',
                                                                                0
                                                                              ),
                                                                            is_named_only =>
                                                                              ::DISPATCH(
                                                                                $::Bit,
'new',
                                                                                0
                                                                              ),
                                                                            is_optional =>
                                                                              ::DISPATCH(
                                                                                $::Bit,
'new',
                                                                                0
                                                                              ),
                                                                            is_slurpy =>
                                                                              ::DISPATCH(
                                                                                $::Bit,
'new',
                                                                                0
                                                                              ),
                                                                            is_multidimensional =>
                                                                              ::DISPATCH(
                                                                                $::Bit,
'new',
                                                                                0
                                                                              ),
                                                                            is_rw =>
                                                                              ::DISPATCH(
                                                                                $::Bit,
'new',
                                                                                0
                                                                              ),
                                                                            is_copy =>
                                                                              ::DISPATCH(
                                                                                $::Bit,
'new',
                                                                                0
                                                                              ),
                                                                        }
                                                                    ),
                                                                ]
                                                            }
                                                        ),
                                                        return => $::Undef,
                                                    }
                                                ),
                                            }
                                        )
                                    );
                                    return ($result);
                                  }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        do {
                            if (
                                ::DISPATCH(
                                    ::DISPATCH(
                                        ::DISPATCH(
                                            $node,
                                            'isa',
                                            ::DISPATCH( $::Str, 'new', 'Str' )
                                        ),
                                        "true"
                                    ),
                                    "p5landish"
                                )
                              )
                            {
                                do {
                                    return ($node);
                                  }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        do {
                            if (
                                ::DISPATCH(
                                    ::DISPATCH(
                                        ::DISPATCH(
                                            $node,
                                            'isa',
                                            ::DISPATCH( $::Str, 'new', 'Pad' )
                                        ),
                                        "true"
                                    ),
                                    "p5landish"
                                )
                              )
                            {
                                do {
                                    return ($node);
                                  }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        do {
                            ::MODIFIED($path);
                            $path = ::DISPATCH(
                                $::Array, 'new',
                                {
                                    _array => [
                                        $node,
                                        ::DISPATCH(
                                            (
                                                $GLOBAL::Code_prefix_58__60__64__62_
                                                  = $GLOBAL::Code_prefix_58__60__64__62_
                                                  || ::DISPATCH(
                                                    $::Routine, "new",
                                                  )
                                            ),
                                            'APPLY', $path
                                        )
                                    ]
                                }
                            );
                        };
                        do {
                            ::MODIFIED($result);
                            $result =
                              ::DISPATCH( $visitor, 'visit', $node, $node_name,
                                $path );
                        };
                        do {
                            if (
                                ::DISPATCH(
                                    ::DISPATCH( $result, "true" ), "p5landish"
                                )
                              )
                            {
                                do {
                                    return ($result);
                                  }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        do {
                            ::MODIFIED($result);
                            $result = ::DISPATCH( $::Hash, 'new', );
                        };
                        do {
                            ::MODIFIED($data);
                            $data = ::DISPATCH( $node, 'attribs', );
                        };
                        $item;
                        ::DISPATCH(
                            ::DISPATCH(
                                (
                                    $GLOBAL::Code_keys = $GLOBAL::Code_keys
                                      || ::DISPATCH( $::Routine, "new", )
                                ),
                                'APPLY',
                                ::DISPATCH(
                                    (
                                        $GLOBAL::Code_prefix_58__60__37__62_ =
                                          $GLOBAL::Code_prefix_58__60__37__62_
                                          || ::DISPATCH( $::Routine, "new", )
                                    ),
                                    'APPLY', $data
                                )
                            ),
                            'map',
                            ::DISPATCH(
                                $::Code, 'new',
                                {
                                    code => sub {
                                        my $List__ = ::DISPATCH(
                                            $::ArrayContainer,
                                            'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$List__'
                                            }
                                        );
                                        my $item;
                                        $item = ::DISPATCH(
                                            $::Scalar,
                                            'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$item'
                                            }
                                        ) unless defined $item;
                                        INIT {
                                            $item = ::DISPATCH(
                                                $::Scalar,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$item'
                                                }
                                            );
                                        }
                                        my $CAPTURE;
                                        $CAPTURE = ::DISPATCH(
                                            $::Scalar,
                                            'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$CAPTURE'
                                            }
                                        ) unless defined $CAPTURE;
                                        INIT {
                                            $CAPTURE = ::DISPATCH(
                                                $::Scalar,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$CAPTURE'
                                                }
                                            );
                                        }
                                        my $List__ = ::DISPATCH(
                                            $::ArrayContainer,
                                            'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$List__'
                                            }
                                        );
                                        ::DISPATCH_VAR( $CAPTURE, "STORE",
                                            ::CAPTURIZE( \@_ ) );
                                        ::DISPATCH_VAR( $List__, 'STORE',
                                            ::DISPATCH( $CAPTURE, 'array', ) );
                                        do {
                                            ::MODIFIED($Hash__);
                                            $Hash__ =
                                              ::DISPATCH( $CAPTURE, 'hash', );
                                        };
                                        {
                                            my $_param_index = 0;
                                            if (
                                                ::DISPATCH(
                                                    $GLOBAL::Code_exists,
                                                    'APPLY',
                                                    ::DISPATCH(
                                                        $Hash__, 'LOOKUP',
                                                        ::DISPATCH(
                                                            $::Str, 'new',
                                                            'item'
                                                        )
                                                    )
                                                )->{_value}
                                              )
                                            {
                                                do {
                                                    ::MODIFIED($item);
                                                    $item = ::DISPATCH(
                                                        $Hash__, 'LOOKUP',
                                                        ::DISPATCH(
                                                            $::Str, 'new',
                                                            'item'
                                                        )
                                                    );
                                                  }
                                            }
                                            elsif (
                                                ::DISPATCH(
                                                    $GLOBAL::Code_exists,
                                                    'APPLY',
                                                    ::DISPATCH(
                                                        $List__, 'INDEX',
                                                        ::DISPATCH(
                                                            $::Int,
                                                            'new',
                                                            $_param_index
                                                        )
                                                    )
                                                )->{_value}
                                              )
                                            {
                                                $item = ::DISPATCH(
                                                    $List__, 'INDEX',
                                                    ::DISPATCH(
                                                        $::Int,
                                                        'new',
                                                        $_param_index++
                                                    )
                                                );
                                            }
                                        }
                                        ::DISPATCH_VAR(
                                            ::DISPATCH(
                                                $result, 'LOOKUP', $item
                                            ),
                                            "BIND",
                                            ::DISPATCH(
                                                $Code_visit_subnode,
                                                'APPLY', $visitor,
                                                ::DISPATCH(
                                                    $data, 'LOOKUP', $item
                                                ),
                                                $path
                                            )
                                        );
                                    },
                                    signature => ::DISPATCH(
                                        $::Signature,
                                        "new",
                                        {
                                            invocant => $::Undef,
                                            array    => ::DISPATCH(
                                                $::List, "new",
                                                {
                                                    _array => [
                                                        ::DISPATCH(
                                                            $::Signature::Item,
                                                            'new',
                                                            {
                                                                sigil  => '$',
                                                                twigil => '',
                                                                name => 'item',
                                                                value =>
                                                                  $::Undef,
                                                                has_default =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_named_only =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_optional =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_slurpy =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_multidimensional =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_rw =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_copy =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                            }
                                                        ),
                                                    ]
                                                }
                                            ),
                                            return => $::Undef,
                                        }
                                    ),
                                }
                            )
                        );
                        return (
                            ::DISPATCH(
                                $node, 'new',
                                ::DISPATCH(
                                    (
                                        $GLOBAL::Code_prefix_58__60__37__62_ =
                                          $GLOBAL::Code_prefix_58__60__37__62_
                                          || ::DISPATCH( $::Routine, "new", )
                                    ),
                                    'APPLY', $result
                                )
                            )
                        );
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => $::Undef,
                            array    => ::DISPATCH(
                                $::List, "new",
                                {
                                    _array => [
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'visitor',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'node',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'node_name',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'path',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                    ]
                                }
                            ),
                            return => $::Undef,
                        }
                    ),
                }
            );
        };
        do {
            ::MODIFIED($Code_visit_subnode);
            $Code_visit_subnode = ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $visitor;
                        $visitor =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$visitor' } )
                          unless defined $visitor;
                        INIT {
                            $visitor = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$visitor' }
                            );
                        }
                        my $subnode;
                        $subnode =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$subnode' } )
                          unless defined $subnode;
                        INIT {
                            $subnode = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$subnode' }
                            );
                        }
                        my $path;
                        $path =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$path' } )
                          unless defined $path;
                        INIT {
                            $path =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$path' } );
                        }
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;
                        INIT {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        ::DISPATCH_VAR( $List__, 'STORE',
                            ::DISPATCH( $CAPTURE, 'array', ) );
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        {
                            my $_param_index = 0;
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__,
                                        'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'visitor' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($visitor);
                                    $visitor = ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'visitor' )
                                    );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $visitor = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__,
                                        'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'subnode' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($subnode);
                                    $subnode = ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'subnode' )
                                    );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $subnode = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'path' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($path);
                                    $path =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'path' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $path = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                        }
                        do {
                            if (
                                ::DISPATCH(
                                    ::DISPATCH(
                                        ::DISPATCH(
                                            (
                                                $GLOBAL::Code_prefix_58__60__33__62_
                                                  = $GLOBAL::Code_prefix_58__60__33__62_
                                                  || ::DISPATCH(
                                                    $::Routine, "new",
                                                  )
                                            ),
                                            'APPLY',
                                            ::DISPATCH(
                                                (
                                                    $GLOBAL::Code_defined =
                                                      $GLOBAL::Code_defined
                                                      || ::DISPATCH(
                                                        $::Routine, "new",
                                                      )
                                                ),
                                                'APPLY', $subnode
                                            )
                                        ),
                                        "true"
                                    ),
                                    "p5landish"
                                )
                              )
                            {
                                do {
                                    return ($::Undef);
                                  }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        do {
                            if (
                                ::DISPATCH(
                                    ::DISPATCH(
                                        do {
                                            my $_tmp1 = ::DISPATCH(
                                                $subnode, 'isa',
                                                ::DISPATCH(
                                                    $::Str, 'new', 'Array'
                                                )
                                            );
                                            ::DISPATCH( $_tmp1, "true" )
                                              ->{_value} ? $_tmp1 : do {
                                                my $_tmp1 = ::DISPATCH(
                                                    $subnode, 'isa',
                                                    ::DISPATCH(
                                                        $::Str, 'new',
                                                        'List'
                                                    )
                                                );
                                                ::DISPATCH( $_tmp1, "true" )
                                                  ->{_value} ? $_tmp1 : do {
                                                    my $_tmp1 = ::DISPATCH(
                                                        $subnode, 'isa',
                                                        ::DISPATCH(
                                                            $::Str, 'new',
                                                            'Hash'
                                                        )
                                                    );
                                                    ::DISPATCH( $_tmp1, "true" )
                                                      ->{_value} ? $_tmp1 : do {
                                                        my $_tmp1 = ::DISPATCH(
                                                            $subnode,
                                                            'isa',
                                                            ::DISPATCH(
                                                                $::Str, 'new',
                                                                'Str'
                                                            )
                                                        );
                                                        ::DISPATCH( $_tmp1,
                                                            "true" )->{_value}
                                                          ? $_tmp1
                                                          : ::DISPATCH(
                                                            $subnode,
                                                            'isa',
                                                            ::DISPATCH(
                                                                $::Str, 'new',
                                                                'Pad'
                                                            )
                                                          );
                                                      }
                                                  }
                                              }
                                        },
                                        "true"
                                    ),
                                    "p5landish"
                                )
                              )
                            {
                                do {
                                    return (
                                        ::DISPATCH(
                                            $Code_visit, 'APPLY',
                                            $visitor,    $subnode,
                                            $::Undef,    $path
                                        )
                                    );
                                  }
                            }
                            else {
                                do {
                                    return (
                                        ::DISPATCH(
                                            $subnode, 'emit',
                                            $visitor, $path
                                        )
                                    );
                                  }
                            }
                          }
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => $::Undef,
                            array    => ::DISPATCH(
                                $::List, "new",
                                {
                                    _array => [
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'visitor',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'subnode',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'path',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                    ]
                                }
                            ),
                            return => $::Undef,
                        }
                    ),
                }
            );
          }
    };
    1
}
