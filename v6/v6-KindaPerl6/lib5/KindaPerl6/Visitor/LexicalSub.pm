# Do not edit this file - Generated by MiniPerl6
use v5;
use strict;
use MiniPerl6::Perl5::Runtime;
use MiniPerl6::Perl5::Match;
package KindaPerl6::Visitor::LexicalSub; sub new { shift; bless { @_ }, "KindaPerl6::Visitor::LexicalSub" } sub env { @_ == 1 ? ( $_[0]->{env} ) : ( $_[0]->{env} = $_[1] ) }; sub visit { my $self = shift; my $List__ = \@_; my $node; my $node_name; do {  $node = $List__->[0];  $node_name = $List__->[1]; [$node, $node_name] }; do { if (($node_name eq 'Lit::Code')) { push(@{$self->{env}}, {  });my  $result = $self->visit($node->block(), $node_name);pop(@{$self->{env}});return(Lit::Code->new( 'pad' => $node->pad(),'state' => $node->state(),'sig' => $node->sig(),'body' => $result, )) } else {  } }; my  $data = $node->attribs(); do { if ((($node_name eq 'Sub') && ($data->{'name'} ne ''))) { return(Bind->new( 'parameters' => Decl->new( 'decl' => 'our','var' => Var->new( 'name' => ('_SUB_' . $data->{'name'}),'twigil' => '','sigil' => '$', ),'type' => '', ),'arguments' => Sub->new( 'sig' => $data->{'sig'},'name' => '','block' => $data->{'block'}, ), )) } else {  } }; do { if ((($node_name eq 'Apply') && (Main::isa($data->{'code'}, 'Str') && ((($data->{'code'} eq 'my') || ($data->{'code'} eq 'our')) && Main::isa($data->{'arguments'}->[0], 'Sub'))))) { return(Bind->new( 'parameters' => Decl->new( 'decl' => $data->{'code'},'var' => Var->new( 'name' => ('_SUB_' . $data->{'arguments'}->[0]->name()),'twigil' => '','sigil' => '$', ),'type' => '', ),'arguments' => Sub->new( 'sig' => $data->{'arguments'}->[0]->sig(),'name' => '','block' => $data->{'arguments'}->[0]->block(), ), )) } else {  } }; do { if ((($node_name eq 'Apply') && Main::isa($data->{'code'}, 'Str'))) { return(Apply->new( 'arguments' => $data->{'arguments'},'code' => Var->new( 'name' => ('_SUB_' . $data->{'code'}),'twigil' => '','sigil' => '$', ), )) } else {  } }; return((undef)) }
;
1;
