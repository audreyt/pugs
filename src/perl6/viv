#!/usr/local/bin/perl

# The start of a gimme5 replacement based on STD parsing.
#
use strict;
use warnings;

use STD;
use utf8;
use YAML::XS;
use feature 'say';

$::ACTIONS = 'Actions';
my $OPT_pos = 0;

sub MAIN {
    my $output = 'ast';
    while (@ARGV) {
	last unless $ARGV[0] =~ /^--/;
	my $switch = shift @ARGV;
	if ($switch eq '--ast') {
	    $output = 'ast';
	}
	elsif ($switch eq '--p5') {
	    $output = 'p5';
	}
	elsif ($switch eq '--p6') {
	    $output = 'p6';
	}
	elsif ($switch eq '--pos') {
	    $OPT_pos = 1;
	}
    }
    my $r = STD->parsefile($ARGV[0])->item;
    if ($output eq 'ast') {
	print Dump($r);
    }
    elsif ($output eq 'p6') {
	print $r->emit_p6;
    }
    elsif ($output eq 'p5') {
	print $r->emit_p5;
    }
    else {
	die "Unknown output mode";
    }
}

###################################################################

{ package Actions;

    # Generic ast translation done via autoload

    our $AUTOLOAD;
    my $SEQ = 1;

    sub AUTOLOAD {
	my $self = shift;
	my $match = shift;
	my $r = hoist($match);
	(my $class = $AUTOLOAD) =~ s/^Actions/VAST/;
	gen_class($class);
	bless $r, $class unless ref($r) =~ /^VAST/;
	$match->{''} = $r;
    }

    # propagate ->{''} nodes upward
    # (untransformed STD nodes in output indicate bugs)

    sub hoist {
	my $node = shift;
	my $text = $node->text;
	my %r;
	for my $k (keys %$node) {
	    my $v = $node->{$k};
	    if ($k eq 'O') {
		for my $key (keys %$v) {
		    $r{$key} = $$v{$key};
		}
	    }
	    elsif ($k eq 'SIGIL') {
		$r{SIGIL} = $v;
	    }
	    elsif ($k eq '_arity') {
		$r{ARITY} = $v;
	    }
	    elsif ($k eq '_from') {
		$r{POS} = $v if $OPT_pos;
		if (exists $node->{'_'}[$v]{'ws'}) {
		    my $wsstart = $node->{'_'}[$v]{'ws'};
		    $r{WS} = $v - $wsstart if defined $wsstart and $wsstart < $v
		}
	    }
	    elsif ($k =~ /^[a-zA-Z]/) {
		if (ref $v eq 'ARRAY') {
		    my $zyg = [];
		    for my $z (@$v) {
			if (ref $z) {
			    if (ref $z eq 'ARRAY') {
				push @$zyg, $z;
			    }
			    elsif (exists $z->{''}) {
				push @$zyg, $z->{''};
			    }
			}
			else {
			    push @$zyg, $z;
			}
		    }
		    $r{$k} = $zyg;
		    $r{zygs}{$k} = $SEQ++ if @$zyg;
		}
		elsif (ref $v) {
		    if (exists $v->{''}) {
			$r{$k} = $v->{''};
		    }
		    else {
			$r{$k} = $v;
		    }
		    $r{zygs}{$k} = $SEQ++;
		    unless (ref($r{$k}) =~ /^VAST/) {
			my $class = "VAST::$k";
			gen_class($class);
			bless $r{$k}, $class;
		    }
		}
		else {
		    $r{$k} = $v;
		    $r{TEXT} = $text;
		}
	    }
	}
	$r{TEXT} = $text unless keys %r;
	\%r;
    }

    sub EXPR {
	my $self = shift;
	my $match = shift;
	my $r = hoist($match);
	(my $class = $r->{kind} // "STD::TERM") =~ s/^STD/VAST/;
	gen_class($class);
	$match->{''} = bless $r, $class;
    }

    sub gen_class {
	my $class = shift;
	no strict 'refs';
	return if @{$class . '::ISA'};
	@{$class . '::ISA'} = 'VAST::Base';
    }

}

###################################################################

{ package VAST::Base;
    sub emit_p5 { die "Perl 5 emitter unimplemented" }

    sub emit_p6 { my $self = shift;
	my $text;
	my @sym;
	if (exists $self->{sym}) {
	    my $sym = $self->{sym};
	    if (ref $sym eq 'ARRAY') {
		@sym = @$sym;
	    }
	    else {
		@sym = $sym;
	    }
	}
	if ($self->{zygs}) {
	    my @zyg = $self->visit_zygs;
	    my $arity = $self->{arity} // '';
	    if ($arity eq 'BINARY') {
		$text .= shift @zyg;
		$text .= shift @sym;
		$text .= shift @zyg;
	    }
	    elsif ($arity eq 'UNARY') {
		if ($self->{post}) {
		    $text .= shift @zyg;
		    $text .= shift @sym;
		}
		else {
		    $text .= shift @sym;
		    $text .= shift @zyg;
		}
	    }
	    else {
		$text .= join('', @zyg);
	    }
	}
	elsif (exists $self->{TEXT}) {
	    $text = $self->{TEXT};
	}
	elsif (@sym) {
	    $text .= join('', @sym);
	}
	$text;
    }

    sub visit_zygs { my $self = shift;
	my @zygs;
	if ($self->{zygs}) {
	    my $zygs = $self->{zygs};
	    for my $key (sort {$zygs->{$a} <=> $zygs->{$b}} keys %$zygs) {
		my $part = $self->{$key};
		if (ref $part eq 'ARRAY') {
		    my @kids = @$part;
		    for my $kid (@kids) {
			push @zygs, $kid->emit_p6 // '';
		    }
		}
		elsif (ref $part) {
		    push @zygs, $part->emit_p6 // '';
		}
		else {
		    push @zygs, $key . '=' . $part;
		}
	    }
	}
	@zygs;
    }
}


if ($0 eq __FILE__) {
    ::MAIN();
}

# vim: ts=8 sw=4 noexpandtab smarttab
