{

    package Match;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }

    BEGIN {
        $_ =
          $::Scalar->{_dispatch}( $::Scalar, "new",
            { modified => $_MODIFIED, name => "$_" } );
    }
    $::Match =
      $::Class->{_dispatch}( $::Class, 'new',
        $::Str->{_dispatch}( $::Str, 'new', 'Match' ) )->{_dispatch}(
        $::Class->{_dispatch}( $::Class, 'new',
            $::Str->{_dispatch}( $::Str, 'new', 'Match' ) ),
        'PROTOTYPE',
        );
    $::Match->{_dispatch}( $::Match, 'HOW', )->{_dispatch}(
        $::Match->{_dispatch}( $::Match, 'HOW', ),
        'add_attribute', $::Str->{_dispatch}( $::Str, 'new', 'from' )
    );
    $::Match->{_dispatch}( $::Match, 'HOW', )->{_dispatch}(
        $::Match->{_dispatch}( $::Match, 'HOW', ),
        'add_attribute', $::Str->{_dispatch}( $::Str, 'new', 'to' )
    );
    $::Match->{_dispatch}( $::Match, 'HOW', )->{_dispatch}(
        $::Match->{_dispatch}( $::Match, 'HOW', ),
        'add_attribute', $::Str->{_dispatch}( $::Str, 'new', 'result' )
    );
    $::Match->{_dispatch}( $::Match, 'HOW', )->{_dispatch}(
        $::Match->{_dispatch}( $::Match, 'HOW', ),
        'add_attribute', $::Str->{_dispatch}( $::Str, 'new', 'bool' )
    );
    $::Match->{_dispatch}( $::Match, 'HOW', )->{_dispatch}(
        $::Match->{_dispatch}( $::Match, 'HOW', ),
        'add_attribute', $::Str->{_dispatch}( $::Str, 'new', 'match_str' )
    );
    $::Match->{_dispatch}( $::Match, 'HOW', )->{_dispatch}(
        $::Match->{_dispatch}( $::Match, 'HOW', ),
        'add_attribute', $::Str->{_dispatch}( $::Str, 'new', 'array' )
    );
    $::Match->{_dispatch}( $::Match, 'HOW', )->{_dispatch}(
        $::Match->{_dispatch}( $::Match, 'HOW', ),
        'add_attribute', $::Str->{_dispatch}( $::Str, 'new', 'hash' )
    );
    $::Match->{_dispatch}( $::Match, 'HOW', )->{_dispatch}(
        $::Match->{_dispatch}( $::Match, 'HOW', ),
        'add_method',
        $::Str->{_dispatch}( $::Str, 'new', 'str' ),
        $::Method->{_dispatch}(
            $::Method,
            'new',
            sub {
                my $self   = shift;
                my $List__ = \@_;
                $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_
                  ->{_dispatch}(
                    $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_,
                    'APPLY',
                    $self->{_dispatch}( $self, 'bool', ),
                    $GLOBAL::Code_substr->{_dispatch}(
                        $GLOBAL::Code_substr,
                        'APPLY',
                        $self->{_dispatch}( $self, 'match_str', ),
                        $self->{_dispatch}( $self, 'from', ),
                        $GLOBAL::Code_infix_58__60__45__62_->{_dispatch}(
                            $GLOBAL::Code_infix_58__60__45__62_,
                            'APPLY',
                            $self->{_dispatch}( $self, 'to', ),
                            $self->{_dispatch}( $self, 'from', )
                        )
                    ),
                    $::Undef
                  );
            }
        )
    );
    1
}

{

    package Signature;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }

    BEGIN {
        $_ =
          $::Scalar->{_dispatch}( $::Scalar, "new",
            { modified => $_MODIFIED, name => "$_" } );
    }
    $::Signature =
      $::Class->{_dispatch}( $::Class, 'new',
        $::Str->{_dispatch}( $::Str, 'new', 'Signature' ) )->{_dispatch}(
        $::Class->{_dispatch}(
            $::Class, 'new',
            $::Str->{_dispatch}( $::Str, 'new', 'Signature' )
        ),
        'PROTOTYPE',
        );
    $::Signature->{_dispatch}( $::Signature, 'HOW', )->{_dispatch}(
        $::Signature->{_dispatch}( $::Signature, 'HOW', ),
        'add_attribute', $::Str->{_dispatch}( $::Str, 'new', 'invocant' )
    );
    $::Signature->{_dispatch}( $::Signature, 'HOW', )->{_dispatch}(
        $::Signature->{_dispatch}( $::Signature, 'HOW', ),
        'add_attribute', $::Str->{_dispatch}( $::Str, 'new', 'positional' )
    );
    $::Signature->{_dispatch}( $::Signature, 'HOW', )->{_dispatch}(
        $::Signature->{_dispatch}( $::Signature, 'HOW', ),
        'add_attribute', $::Str->{_dispatch}( $::Str, 'new', 'named' )
    );
    $::Signature->{_dispatch}( $::Signature, 'HOW', )->{_dispatch}(
        $::Signature->{_dispatch}( $::Signature, 'HOW', ),
        'add_attribute', $::Str->{_dispatch}( $::Str, 'new', 'return' )
    );
    1
}

** * Syntax Error in sub ''
