{-# OPTIONS_GHC -fglasgow-exts -funbox-strict-fields -fallow-overlapping-instances -fno-warn-orphans -fno-warn-incomplete-patterns -fallow-undecidable-instances #-}
{- Generated by DrIFT (Automatic class derivations for Haskell) -}
{-# LINE 1 "src/Pugs/PIL2.hs-drift" #-}

{-|
    Pugs Intermediate Language, version 2.

>   And the Tree that was withered shall be renewed,
>   And he shall plant it in the high places,
>   And the City shall be blessed.
>   Sing all ye people!

-}


module Pugs.PIL2 (
    PIL_Environment(..),
    PIL_Stmts(..), PIL_Stmt(..), PIL_Decl(..),
    PIL_Expr(..), PIL_Literal(..), PIL_LValue(..),
    TParam(..), TCxt(..), TEnv(..),
) where
import Pugs.AST hiding (Prim)
import Pugs.Internals hiding (get, put)
import Pugs.Types
import Emit.PIR
import DrIFT.Perl5
import DrIFT.Binary
import DrIFT.JSON

-- import DrIFT.XML
-- {-! global : Haskell2Xml !-}

{-! global : GhcBinary, Perl5, JSON !-}

{-|
    The plan here is to first compile the environment (subroutines,
    statements, etc.) to an abstract syntax tree ('PIL' -- Pugs Intermediate
    Language) using the 'compile' function and 'Compile' class.
-}

data PIL_Environment = PIL_Environment
    { pilGlob :: [PIL_Decl]
    , pilMain :: PIL_Stmts
    }
    deriving (Show, Eq, Ord, Typeable)

data PIL_Stmts = PNil
    | PStmts
        { pStmt  :: !PIL_Stmt
        , pStmts :: !PIL_Stmts
        }
    | PPad
        { pScope :: !Scope
        , pSyms  :: ![(VarName, PIL_Expr)]
        , pStmts :: !PIL_Stmts
        }
    deriving (Show, Eq, Ord, Typeable)

data PIL_Stmt = PNoop | PStmt { pExpr :: !PIL_Expr } | PPos
        { pPos  :: !Pos
        , pExp  :: !Exp
        , pNode :: !PIL_Stmt
        }
    deriving (Show, Eq, Ord, Typeable)

data PIL_Expr
    = PRawName { pRawName :: !VarName }
    | PExp { pLV  :: !PIL_LValue }
    | PLit { pLit :: !PIL_Literal }
    | PThunk { pThunk :: !PIL_Expr }
    | PCode
        { pType    :: !SubType
        , pParams  :: ![TParam]
        , pLValue  :: !Bool
        , pIsMulti :: !Bool
        , pBody    :: !PIL_Stmts
        }
    deriving (Show, Eq, Ord, Typeable)

data PIL_Decl = PSub
    { pSubName      :: !SubName
    , pSubType      :: !SubType
    , pSubParams    :: ![TParam]
    , pSubLValue    :: !Bool
    , pSubIsMulti   :: !Bool
    , pSubBody      :: !PIL_Stmts
    }
    deriving (Show, Eq, Ord, Typeable)

data PIL_Literal = PVal { pVal :: Val }
    deriving (Show, Eq, Ord, Typeable)

data PIL_LValue = PVar { pVarName :: !VarName }
    | PApp 
        { pCxt  :: !TCxt
        , pFun  :: !PIL_Expr
        , pInv  :: !(Maybe PIL_Expr)
        , pArgs :: ![PIL_Expr]
        }
    | PAssign
        { pLHS  :: ![PIL_LValue]
        , pRHS  :: !PIL_Expr
        }
    | PBind
        { pLHS  :: ![PIL_LValue]
        , pRHS  :: !PIL_Expr
        }
    deriving (Show, Eq, Ord, Typeable)

data TParam = MkTParam
    { tpParam   :: !Param
    , tpDefault :: !(Maybe (PIL_Expr))
    }
    deriving (Show, Eq, Ord, Typeable)

data TCxt
    = TCxtVoid | TCxtLValue !Type | TCxtItem !Type | TCxtSlurpy !Type
    | TTailCall !TCxt
    deriving (Show, Eq, Ord, Typeable)

data TEnv = MkTEnv
    { tLexDepth :: !Int                 -- ^ Lexical scope depth
    , tTokDepth :: !Int                 -- ^ Exp nesting depth
    , tCxt      :: !TCxt                -- ^ Current context
    , tReg      :: !(TVar (Int, String))-- ^ Register name supply
    , tLabel    :: !(TVar Int)          -- ^ Label name supply
    }
    deriving (Show, Eq, Ord, Typeable)

------------------------------------------------------------------------

instance Binary Exp where
    put_ _ _ = return ()
    get  _   = return Noop
instance Perl5 Exp where
    showPerl5 _ = "(undef)"
instance JSON Exp where
    showJSON _ = "null"

-- Non-canonical serialization... needs work
instance (Show (TVar a)) => Perl5 (TVar a) where
    showPerl5 _ = "(warn '<ref>')"
instance (Show (TVar a)) => JSON (TVar a) where
    showJSON _ = "null"

{-* Generated by DrIFT : Look, but Don't Touch. *-}
instance Binary PIL_Environment where
    put_ bh (PIL_Environment aa ab) = do
	    put_ bh aa
	    put_ bh ab
    get bh = do
    aa <- get bh
    ab <- get bh
    return (PIL_Environment aa ab)

-- Warning : Rule Perl5 not found.

-- Warning : Rule JSON not found.

instance Binary PIL_Stmts where
    put_ bh PNil = do
	    putByte bh 0
    put_ bh (PStmts aa ab) = do
	    putByte bh 1
	    put_ bh aa
	    put_ bh ab
    put_ bh (PPad ac ad ae) = do
	    putByte bh 2
	    put_ bh ac
	    put_ bh ad
	    put_ bh ae
    get bh = do
	    h <- getByte bh
	    case h of
	      0 -> do
		    return PNil
	      1 -> do
		    aa <- get bh
		    ab <- get bh
		    return (PStmts aa ab)
	      2 -> do
		    ac <- get bh
		    ad <- get bh
		    ae <- get bh
		    return (PPad ac ad ae)
	      _ -> fail "invalid binary data found"

-- Warning : Rule Perl5 not found.

-- Warning : Rule JSON not found.

instance Binary PIL_Stmt where
    put_ bh PNoop = do
	    putByte bh 0
    put_ bh (PStmt aa) = do
	    putByte bh 1
	    put_ bh aa
    put_ bh (PPos ab ac ad) = do
	    putByte bh 2
	    put_ bh ab
	    put_ bh ac
	    put_ bh ad
    get bh = do
	    h <- getByte bh
	    case h of
	      0 -> do
		    return PNoop
	      1 -> do
		    aa <- get bh
		    return (PStmt aa)
	      2 -> do
		    ab <- get bh
		    ac <- get bh
		    ad <- get bh
		    return (PPos ab ac ad)
	      _ -> fail "invalid binary data found"

-- Warning : Rule Perl5 not found.

-- Warning : Rule JSON not found.

instance Binary PIL_Expr where
    put_ bh (PRawName aa) = do
	    putByte bh 0
	    put_ bh aa
    put_ bh (PExp ab) = do
	    putByte bh 1
	    put_ bh ab
    put_ bh (PLit ac) = do
	    putByte bh 2
	    put_ bh ac
    put_ bh (PThunk ad) = do
	    putByte bh 3
	    put_ bh ad
    put_ bh (PCode ae af ag ah ai) = do
	    putByte bh 4
	    put_ bh ae
	    put_ bh af
	    put_ bh ag
	    put_ bh ah
	    put_ bh ai
    get bh = do
	    h <- getByte bh
	    case h of
	      0 -> do
		    aa <- get bh
		    return (PRawName aa)
	      1 -> do
		    ab <- get bh
		    return (PExp ab)
	      2 -> do
		    ac <- get bh
		    return (PLit ac)
	      3 -> do
		    ad <- get bh
		    return (PThunk ad)
	      4 -> do
		    ae <- get bh
		    af <- get bh
		    ag <- get bh
		    ah <- get bh
		    ai <- get bh
		    return (PCode ae af ag ah ai)
	      _ -> fail "invalid binary data found"

-- Warning : Rule Perl5 not found.

-- Warning : Rule JSON not found.

instance Binary PIL_Decl where
    put_ bh (PSub aa ab ac ad ae af) = do
	    put_ bh aa
	    put_ bh ab
	    put_ bh ac
	    put_ bh ad
	    put_ bh ae
	    put_ bh af
    get bh = do
    aa <- get bh
    ab <- get bh
    ac <- get bh
    ad <- get bh
    ae <- get bh
    af <- get bh
    return (PSub aa ab ac ad ae af)

-- Warning : Rule Perl5 not found.

-- Warning : Rule JSON not found.

instance Binary PIL_Literal where
    put_ bh (PVal aa) = do
	    put_ bh aa
    get bh = do
    aa <- get bh
    return (PVal aa)

-- Warning : Rule Perl5 not found.

-- Warning : Rule JSON not found.

instance Binary PIL_LValue where
    put_ bh (PVar aa) = do
	    putByte bh 0
	    put_ bh aa
    put_ bh (PApp ab ac ad ae) = do
	    putByte bh 1
	    put_ bh ab
	    put_ bh ac
	    put_ bh ad
	    put_ bh ae
    put_ bh (PAssign af ag) = do
	    putByte bh 2
	    put_ bh af
	    put_ bh ag
    put_ bh (PBind ah ai) = do
	    putByte bh 3
	    put_ bh ah
	    put_ bh ai
    get bh = do
	    h <- getByte bh
	    case h of
	      0 -> do
		    aa <- get bh
		    return (PVar aa)
	      1 -> do
		    ab <- get bh
		    ac <- get bh
		    ad <- get bh
		    ae <- get bh
		    return (PApp ab ac ad ae)
	      2 -> do
		    af <- get bh
		    ag <- get bh
		    return (PAssign af ag)
	      3 -> do
		    ah <- get bh
		    ai <- get bh
		    return (PBind ah ai)
	      _ -> fail "invalid binary data found"

-- Warning : Rule Perl5 not found.

-- Warning : Rule JSON not found.

instance Binary TParam where
    put_ bh (MkTParam aa ab) = do
	    put_ bh aa
	    put_ bh ab
    get bh = do
    aa <- get bh
    ab <- get bh
    return (MkTParam aa ab)

-- Warning : Rule Perl5 not found.

-- Warning : Rule JSON not found.

instance Binary TCxt where
    put_ bh TCxtVoid = do
	    putByte bh 0
    put_ bh (TCxtLValue aa) = do
	    putByte bh 1
	    put_ bh aa
    put_ bh (TCxtItem ab) = do
	    putByte bh 2
	    put_ bh ab
    put_ bh (TCxtSlurpy ac) = do
	    putByte bh 3
	    put_ bh ac
    put_ bh (TTailCall ad) = do
	    putByte bh 4
	    put_ bh ad
    get bh = do
	    h <- getByte bh
	    case h of
	      0 -> do
		    return TCxtVoid
	      1 -> do
		    aa <- get bh
		    return (TCxtLValue aa)
	      2 -> do
		    ab <- get bh
		    return (TCxtItem ab)
	      3 -> do
		    ac <- get bh
		    return (TCxtSlurpy ac)
	      4 -> do
		    ad <- get bh
		    return (TTailCall ad)
	      _ -> fail "invalid binary data found"

-- Warning : Rule Perl5 not found.

-- Warning : Rule JSON not found.

instance Binary TEnv where
    put_ bh (MkTEnv aa ab ac ad ae) = do
	    put_ bh aa
	    put_ bh ab
	    put_ bh ac
	    put_ bh ad
	    put_ bh ae
    get bh = do
    aa <- get bh
    ab <- get bh
    ac <- get bh
    ad <- get bh
    ae <- get bh
    return (MkTEnv aa ab ac ad ae)

-- Warning : Rule Perl5 not found.

-- Warning : Rule JSON not found.

instance Binary Scope where
    put_ bh SState = do
	    putByte bh 0
    put_ bh SMy = do
	    putByte bh 1
    put_ bh SOur = do
	    putByte bh 2
    put_ bh SLet = do
	    putByte bh 3
    put_ bh STemp = do
	    putByte bh 4
    put_ bh SGlobal = do
	    putByte bh 5
    get bh = do
	    h <- getByte bh
	    case h of
	      0 -> do
		    return SState
	      1 -> do
		    return SMy
	      2 -> do
		    return SOur
	      3 -> do
		    return SLet
	      4 -> do
		    return STemp
	      5 -> do
		    return SGlobal
	      _ -> fail "invalid binary data found"

-- Warning : Rule Perl5 not found.

-- Warning : Rule JSON not found.

instance Binary SubType where
    put_ bh SubMethod = do
	    putByte bh 0
    put_ bh SubCoroutine = do
	    putByte bh 1
    put_ bh SubMacro = do
	    putByte bh 2
    put_ bh SubRoutine = do
	    putByte bh 3
    put_ bh SubBlock = do
	    putByte bh 4
    put_ bh SubPointy = do
	    putByte bh 5
    put_ bh SubPrim = do
	    putByte bh 6
    get bh = do
	    h <- getByte bh
	    case h of
	      0 -> do
		    return SubMethod
	      1 -> do
		    return SubCoroutine
	      2 -> do
		    return SubMacro
	      3 -> do
		    return SubRoutine
	      4 -> do
		    return SubBlock
	      5 -> do
		    return SubPointy
	      6 -> do
		    return SubPrim
	      _ -> fail "invalid binary data found"

-- Warning : Rule Perl5 not found.

-- Warning : Rule JSON not found.

instance Binary Val where
    put_ bh VUndef = do
	    putByte bh 0
    put_ bh (VBool aa) = do
	    putByte bh 1
	    put_ bh aa
    put_ bh (VInt ab) = do
	    putByte bh 2
	    put_ bh ab
    put_ bh (VRat ac) = do
	    putByte bh 3
	    put_ bh ac
    put_ bh (VNum ad) = do
	    putByte bh 4
	    put_ bh ad
    put_ bh (VStr ae) = do
	    putByte bh 5
	    put_ bh ae
    put_ bh (VList af) = do
	    putByte bh 6
	    put_ bh af
    put_ bh (VType ag) = do
	    putByte bh 7
	    put_ bh ag
    get bh = do
	    h <- getByte bh
	    case h of
	      0 -> do
		    return VUndef
	      1 -> do
		    aa <- get bh
		    return (VBool aa)
	      2 -> do
		    ab <- get bh
		    return (VInt ab)
	      3 -> do
		    ac <- get bh
		    return (VRat ac)
	      4 -> do
		    ad <- get bh
		    return (VNum ad)
	      5 -> do
		    ae <- get bh
		    return (VStr ae)
	      6 -> do
		    af <- get bh
		    return (VList af)
	      7 -> do
		    ag <- get bh
		    return (VType ag)
	      _ -> fail "invalid binary data found"

-- Warning : Rule Perl5 not found.

-- Warning : Rule JSON not found.

instance Binary Cxt where
    put_ bh CxtVoid = do
	    putByte bh 0
    put_ bh (CxtItem aa) = do
	    putByte bh 1
	    put_ bh aa
    put_ bh (CxtSlurpy ab) = do
	    putByte bh 2
	    put_ bh ab
    get bh = do
	    h <- getByte bh
	    case h of
	      0 -> do
		    return CxtVoid
	      1 -> do
		    aa <- get bh
		    return (CxtItem aa)
	      2 -> do
		    ab <- get bh
		    return (CxtSlurpy ab)
	      _ -> fail "invalid binary data found"

-- Warning : Rule Perl5 not found.

-- Warning : Rule JSON not found.

instance Binary Type where
    put_ bh (MkType aa) = do
	    putByte bh 0
	    put_ bh aa
    put_ bh (TypeOr ab ac) = do
	    putByte bh 1
	    put_ bh ab
	    put_ bh ac
    put_ bh (TypeAnd ad ae) = do
	    putByte bh 2
	    put_ bh ad
	    put_ bh ae
    get bh = do
	    h <- getByte bh
	    case h of
	      0 -> do
		    aa <- get bh
		    return (MkType aa)
	      1 -> do
		    ab <- get bh
		    ac <- get bh
		    return (TypeOr ab ac)
	      2 -> do
		    ad <- get bh
		    ae <- get bh
		    return (TypeAnd ad ae)
	      _ -> fail "invalid binary data found"

-- Warning : Rule Perl5 not found.

-- Warning : Rule JSON not found.

instance Binary Param where
    put_ bh (MkParam aa ab ac ad ae af ag ah ai) = do
	    put_ bh aa
	    put_ bh ab
	    put_ bh ac
	    put_ bh ad
	    put_ bh ae
	    put_ bh af
	    put_ bh ag
	    put_ bh ah
	    put_ bh ai
    get bh = do
    aa <- get bh
    ab <- get bh
    ac <- get bh
    ad <- get bh
    ae <- get bh
    af <- get bh
    ag <- get bh
    ah <- get bh
    ai <- get bh
    return (MkParam aa ab ac ad ae af ag ah ai)

-- Warning : Rule Perl5 not found.

-- Warning : Rule JSON not found.

instance Binary Pos where
    put_ bh (MkPos aa ab ac ad ae) = do
	    put_ bh aa
	    put_ bh ab
	    put_ bh ac
	    put_ bh ad
	    put_ bh ae
    get bh = do
    aa <- get bh
    ab <- get bh
    ac <- get bh
    ad <- get bh
    ae <- get bh
    return (MkPos aa ab ac ad ae)

-- Warning : Rule Perl5 not found.

-- Warning : Rule JSON not found.

--  Imported from other files :-
