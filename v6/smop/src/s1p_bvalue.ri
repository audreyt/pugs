%prefix smop_s1p_bvalue
%RI.id bvalue
%prototype SMOP__S1P__BValue
%attr SMOP__Object** container
%{
    SMOP__Object* SMOP__S1P__BValue_create(SMOP__Object* interpreter,SMOP__Object** container) {
        smop_s1p_bvalue_struct* bvalue = (smop_s1p_bvalue_struct*) smop_lowlevel_alloc(sizeof(smop_s1p_bvalue_struct));
        bvalue->RI = (SMOP__ResponderInterface*)RI;
        bvalue->container = container;
        SMOP_REFERENCE(interpreter,RI);
        return (SMOP__Object*) bvalue;
    }
%}
%method BIND

    SMOP__Object** container = ((smop_s1p_bvalue_struct*)invocant)->container;
    if (*container) SMOP_RELEASE(interpreter,*container);
    *container = SMOP__NATIVE__capture_positional(interpreter, capture, 0);
    ret = SMOP__S1P__BValue_create(interpreter,container);

%method STORE

    SMOP__Object** container = ((smop_s1p_bvalue_struct*)invocant)->container;
    SMOP__Object* value = SMOP__NATIVE__capture_positional(interpreter, capture, 0);
    ret = SMOP_DISPATCH(interpreter,SMOP_RI(*container),SMOP__ID__STORE,SMOP__NATIVE__capture_create(interpreter,SMOP_REFERENCE(interpreter,*container),(SMOP__Object*[]) {value,NULL},NULL));

%method DESTROYALL
    SMOP__Object** container = ((smop_s1p_bvalue_struct*)invocant)->container;
    SMOP_RELEASE(interpreter,RI);

%method FETCH

    SMOP__Object** container = ((smop_s1p_bvalue_struct*)invocant)->container;
    ret = SMOP_DISPATCH(interpreter,SMOP_RI(*container),SMOP__ID__FETCH,SMOP__NATIVE__capture_create(interpreter,SMOP_REFERENCE(interpreter,*container),NULL,NULL));
