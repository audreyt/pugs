<HTML>
<HEAD>
<!-- @(#) $Revision: 4.43 $ $Source: /cvsroot/judy/doc/ext/JudyHS_3.htm,v $ --->
<TITLE>JudyHS(3)</TITLE>
</HEAD>
<BODY>
<TABLE border=0 width="100%"><TR>
<TD width="40%" align="left">JudyHS(3)</TD>
<TD width="10%" align="center">     </TD>
<TD width="40%" align="right">JudyHS(3)</TD>
</TR></TABLE>
<P>
<!----------------->
<DT><B>NAME</B></DT>
<DD>
JudyHS macros - C library for creating and accessing a dynamic array,
using an array-of-bytes of <B>Length</B> as an <B>Index</B> and a word
as a <B>Value</B>.
<!----------------->
<P>
<DT><B>SYNOPSIS</B></DT>
<DD>
<B><PRE>
cc [flags] <I>sourcefiles</I> -lJudy

#include &lt;Judy.h&gt;

Word_t  * PValue;                           // JudyHS array element
int       Rc_int;                           // return flag
Word_t    Rc_word;                          // full word return value
Pvoid_t   PJHSArray = (Pvoid_t) NULL;       // initialize JudyHS array
uint8_t * Index;                            // array-of-bytes pointer
Word_t    Length;                           // number of bytes in Index
Pvoid_t   PJHSIter = (Pvoid_t) NULL;        // initialize JudyHSIter

<A href="#JHSI" >JHSI</A>( PValue,  PJHSArray, Index, Length);   // <A href="JudyHS_funcs_3.htm#JudyHSIns">JudyHSIns()</A>
<A href="#JHSD" >JHSD</A>( Rc_int,  PJHSArray, Index, Length);   // <A href="JudyHS_funcs_3.htm#JudyHSDel">JudyHSDel()</A>
<A href="#JHSG" >JHSG</A>( PValue,  PJHSArray, Index, Length);   // <A href="JudyHS_funcs_3.htm#JudyHSGet">JudyHSGet()</A>
<A href="#JHSFA">JHSFA</A>(Rc_word, PJHSArray);                  // <A href="JudyHS_funcs_3.htm#JudyHSFreeArray">JudyHSFreeArray()</A>
<A href="#JHSIF" >JHSIF</A>( PValue,  PJHSArray, PJHSIter, Index, Length);   // <A href="JudyHS_funcs_3.htm#JudyHSIterFirst">JudyHSIterFirst()</A>
<A href="#JHSIN" >JHSIN</A>( PValue,  PJHSArray, PJHSIter, Index, Length);   // <A href="JudyHS_funcs_3.htm#JudyHSIterNext">JudyHSNIterext()</A>
<A href="#JHSIL" >JHSIL</A>( PValue,  PJHSArray, PJHSIter, Index, Length);   // <A href="JudyHS_funcs_3.htm#JudyHSIterLast">JudyHSLIterast()</A>
<A href="#JHSIP" >JHSIP</A>( PValue,  PJHSArray, PJHSIter, Index, Length);   // <A href="JudyHS_funcs_3.htm#JudyHSIterPrev">JudyHSPIterrev()</A>
<A href="#JHSFI">JHSFI</A>(Rc_word, PJHSIter);                   // <A href="JudyHS_funcs_3.htm#JudyHSFreeIter">JudyHSFreeIter()</A>
</PRE></B>
<!----------------->
<DT><B>DESCRIPTION</B></DT>
<DD>
A JudyHS array is the equivalent of an array of word-sized
value/pointers.  An <B>Index</B> is a pointer to an array-of-bytes of
specified length:  <B>Length</B>.  Rather than using a null terminated
string, this difference from <A href="JudySL_3.htm">JudySL(3)</A>
allows strings to contain all bits (specifically the null character).
This new addition (May 2004) to Judy arrays is a hybird using the best
capabilities of hashing and Judy methods.  <B>JudyHS</B> does not have a
poor performance case where knowledge of the hash algorithm can be used
to degrade the performance.
<P>
The <B>Length</B> of each 
array-of-bytes can be from 0 to the limits of <I>malloc()</I> (about 2GB).  
Since JudyHS is based on a hash method, <B>Indexes</B> are not stored in
any externally useful order; therefore the JudyHSIterFirst(), JudyHSIterNext(),
JudyHSIterPrev() and JudyHSIterLast() neighbor search functions should be 
considered as providing an unordered enumeration of keys and values.    
<P>
The hallmark of <B>JudyHS</B> is speed with scalability, but memory
efficiency is excellent.  The speed is very competitive with the best
hashing methods.  The memory efficiency is similar to a linked list of
the same <B>Indexes</B> and <B>Values</B>.  <B>JudyHS</B> is designed to
scale from 0 to billions of <B>Indexes</B>.
<P>
A JudyHS array is allocated with a <B>NULL</B> pointer
<PRE>
Pvoid_t PJHSArray = (Pvoid_t) NULL;
</PRE>
<P>
Because the macro forms of the API have a simpler error handling
interface than the equivalent
<A href="JudyHS_funcs_3.htm">functions</A>,
they are the preferred way to use JudyHS.
<P>
<DT>
<A name="JHSI"><B>JHSI(PValue, PJHSArray, Index, Length)</B></A> // <A href="JudyHS_funcs_3.htm#JudyHSIns">JudyHSIns()</A></DT>
<DD>
Given a pointer to a JudyHS array (<B>PJHSArray</B>), insert an
<B>Index</B> string of length: <B>Length</B> and a <B>Value</B> into the
JudyHS array:  <B>PJHSArray</B>.  If the <B>Index</B> is successfully
inserted, the <B>Value</B> is initialized to 0.  If the <B>Index</B> was
already present, the <B>Value</B> is not modified.
<P>
Return <B>PValue</B> pointing to <B>Value</B>.  Your program should use
this pointer to read or modify the <B>Value</B>, for example:
<PRE>
Value = *PValue;
*PValue = 1234;
</PRE>
<P>
<B>Note</B>:
<B>JHSI()</B> and <B>JHSD</B> can reorganize the JudyHS array.
Therefore, pointers returned from previous <B>JudyHS</B> calls become
invalid and must be re-acquired (using <B>JHSG()</B>).
<P>
<DT><A name="JHSD"><B>JHSD(Rc_int, PJHSArray, Index, Length)</B></A> // <A href="JudyHS_funcs_3.htm#JudyHSDel">JudyHSDel()</A></DT>
<DD>
Given a pointer to a JudyHS array (<B>PJHSArray</B>), delete the
specified <B>Index</B> along with the <B>Value</B> from the JudyHS
array.
<P>
Return <B>Rc_int</B> set to 1 if successfully removed from the array.
Return <B>Rc_int</B> set to 0 if <B>Index</B> was not present.
<P>
<DT><A name="JHSG"><B>JHSG(PValue, PJHSArray, Index, Length)</B></A> // <A href="JudyHS_funcs_3.htm#JudyHSGet">JudyHSGet()</A></DT>
<DD>
Given a pointer to a JudyHS array (<B>PJHSArray</B>),
find <B>Value</B> associated with <B>Index</B>.
<P>
Return <B>PValue</B> pointing to <B>Index</B>'s <B>Value</B>.
Return <B>PValue</B> set to <B>NULL</B> if the <B>Index</B> was not present.
<P>
<DT><A name="JHSFA"><B>JHSFA(Rc_word, PJHSArray)</B></A> // <A href="JudyHS_funcs_3.htm#JudyHSFreeArray">JudyHSFreeArray()</A></DT>
<DD>
Given a pointer to a JudyHS array (<B>PJHSArray</B>), free the entire array.
<P>
Return <B>Rc_word</B> set to the number of bytes freed and <B>PJHSArray</B> set to NULL.
<P>
<DT><B>JudyHS Search Functions</B>: <B>JudyHSIter</B> </DT>
<DD>
The JudyHSIter search functions allow you to search for indexes in the array,
using an opaque iterator structure to hold search state, which is passed into
and out of each call.  Supplying a null pointer for the iterator will cause a
new active structure to be allocated; thereafter, passing the structure, index
and length as last returned into the next call will optimally continue the 
search; when done searching, free the iterator structure with <B>JHSFI</B>.
Supplying a null pointer for the index string, and a 0 length, causes the search
to begin at the start (for <B>JHSIF</B> and <B>JHSIN</B>) or end (for 
<B>JHSIL</B> and <B>JHSIP</B>) of the internal hash order.
You may search inclusively or exclusively,
in either forward or reverse directions.
<P>
If successful,
<B>Index</B> is returned set to a pointer to the found index (in a read-only 
buffer owned by the iterator which will be overwritten by later search operations), 
<B>Length</B> is returned set to the length of the found index, and
<B>PValue</B> is returned set to a pointer to <B>Index</B>'s <B>Value</B>.
If unsuccessful,
<B>PValue</B> is returned set to <B>NULL</B>,
and <B>Index</B> and <B>Length</B> are returned set to <B>NULL</B> and 0 respectively.
<B>PValue</B> must be tested for non-<B>NULL</B> prior
to using <B>Index</B> and <B>Length</B>,
since a search failure is possible.
<P>
A JudyHS iterator is allocated with a <B>NULL</B> pointer
<PRE>
Pvoid_t PJHSIter = (Pvoid_t) NULL;
</PRE>
and when freed is reset to a <B>NULL</B> pointer.
<P>
Example of use:
<PRE>
Pvoid_t PJHSIter;
uint8_t *Index;
Word_t Length;
Word_t Rc_word;

PJHSIter = (Pvoid_t) NULL;
Index = (uint8_t) NULL;
Length = 0;
JHSIF(PValue, PJHSArray, PJHSIter, Index, Length);
while (PValue) {
  use(Index, Length, PValue);
  JHSIN(PValue, PJHSArray, PJHSIter, Index, Length);
}
JHSFI(Rc_word, PJHSIter);
</PRE>
<P>
<DT><A name="JHSIF"><B>JHSIF(PValue, PJHSArray, PJHSIter, Index, Length)</B></A> // <A href="JudyHS_funcs_3.htm#JudyHSIterFirst">JudyHSIterFirst()</A></DT>
<DD>
Search (inclusive) for the first index present that is equal to or greater than the
passed <B>Index</B> string in the internal hash order.
(Start with a 0-length <B>NULL</B>string to find the first index in the array.)
<B>JHSIF()</B> is typically used to <I>begin</I> a hash-order scan of
the valid indexes in a JudyHS array.
<P>
<DT><A name="JHSIN"><B>JHSIN(PValue, PJHSArray, PJHSIter, Index, Length)</B></A> // <A href="JudyHS_funcs_3.htm#JudyHSIterNext">JudyHSIterNext()</A></DT>
<DD>
Search (exclusive) for the next index present that is greater than the passed
<B>Index</B> string.
<B>JHSIN()</B> is typically used to <I>continue</I> a hash-order scan of
the valid indexes in a JudyHS array, or to locate a "neighbor" of a given
index in the internal hash order.
<P>
<DT><A name="JHSIL"><B>JHSIL(PValue, PJHSArray, PJHSIter, Index, Length)</B></A> // <A href="JudyHS_funcs_3.htm#JudyHSIterLast">JudyHSIterLast()</A></DT>
<DD>
Search (inclusive) for the last index present that is equal to or less
than the passed <B>Index</B> string.
(Start with a 0-length <B>NULL</B>string to look up the last index in the array,
as there is no particular value guaranteed to be last in the internal hash order.)
<B>JHSIL()</B> is typically used to <I>begin</I> a reverse-hash-order
scan of the valid indexes in a JudyHS array.
<P>
<DT><A name="JHSIP"><B>JHSIP(PValue, PJHSArray, PJHSIter, Index, Length)</B></A> // <A href="JudyHS_funcs_3.htm#JudyHSIterPrev">JudyHSIterPrev()</A></DT>
<DD>
Search (exclusive) for the previous index present that is less than the
passed <B>Index</B> string.
<B>JHSIP()</B> is typically used to <I>continue</I> a reverse-hash-order
scan of the valid indexes in a JudyHS array, or to locate a "neighbor" of
a given index.
<P>
<DT><A name="JHSFI"><B>JHSFI(Rc_word, PJHSIter)</B></A> // <A href="JudyHS_funcs_3.htm#JudyHSFreeIter">JudyHSFreeIter()</A></DT>
<DD>
Given a pointer to a JudyHS iterator (<B>PJHSIter</B>), free the entire iterator structure.
<P>
Return <B>Rc_word</B> set to the number of bytes freed and <B>PJHSIter</B> set to NULL.
<!----------------->
<P>
<DT><A name="ERRORS"><B>ERRORS:</B> See: </A><A href="Judy_3.htm#ERRORS">Judy_3.htm#ERRORS</A></DT>
<DD>
<P>
<DT><B>EXAMPLES</B></DT>
<DD>
Show how to program with the JudyHS macros.  This program will print
duplicate lines and their line number from <I>stdin</I>.
<P><PRE>
#include &lt;unistd.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;Judy.h&gt;

//  Compiled:
//  cc -O PrintDupLines.c -lJudy -o PrintDupLines

#define MAXLINE 1000000                 /* max fgets length of line */
uint8_t   Index[MAXLINE];               // string to check

int     // Usage:  PrintDupLines &lt; file
main()
{
    Pvoid_t   PJArray = (PWord_t)NULL;  // Judy array.
    PWord_t   PValue;                   // Judy array element pointer.
    Word_t    Bytes;                    // size of JudyHS array.
    Word_t    LineNumb = 0;             // current line number
    Word_t    Dups = 0;                 // number of duplicate lines

    while (fgets(Index, MAXLINE, stdin) != (char *)NULL)
    {
        LineNumb++;                     // line number

        // store string into array
        JHSI(PValue, PJArray, Index, strlen(Index)); 
        if (PValue == PJERR)            // See ERRORS section
        {
            fprintf(stderr, "Out of memory -- exit\n");
            exit(1);
        }
        if (*PValue != 0)               // check if duplicate
        {
            Dups++;
            printf("Duplicate lines %lu:%lu:%s", *PValue, LineNumb, Index);
        }
        else
        {
            *PValue = LineNumb;         // store Line number
        }
    }
    printf("%lu Duplicates, JudyHS array of %lu Lines\n", 
		    Dups, LineNumb - Dups);

    // dump lines in hash order
    printf("Lines in hash order:\n");
    {
	Pvoid_t PJHSIter = (Pvoid_t) NULL;  // JudyHS iterator
        uint8_t *Index2 = (uint8_t) NULL;   // JudyHS key: line
        Word_t Length2 = 0;                 // length of key
        Word_t IterBytes;                   // size of iterator
	
        JHSIF(PValue, PJHSArray, PJHSIter, Index2, Length2);
        while (PValue) {
            printf(" line %lu: %*s", *PValue, Index2, Length2);
            JHSIN(PValue, PJHSArray, PJHSIter, Index2, Length2);
        }
	JHSFI(IterBytes, PJHSIter);
	printf("JudyHSFreeIter() freed %lu bytes of memory\n", IterBytes);
    }
    
    JHSFA(Bytes, PJArray);              // free JudyHS array
    printf("JudyHSFreeArray() freed %lu bytes of memory\n", Bytes);
    return (0);
}
</PRE>
<!----------------->
<P>
<DT><B>AUTHOR</B></DT>
<DD>
JudyHS was invented and implemented by Doug Baskins after retiring from Hewlett-Packard.
<!----------------->
<P>
<DT><B>SEE ALSO</B></DT>
<DD>
<A href="Judy_3.htm">Judy(3)</A>,
<A href="Judy1_3.htm">Judy1(3)</A>,
<A href="JudyL_3.htm">JudyL(3)</A>,
<A href="JudySL_3.htm">JudySL(3)</A>,
<BR>
<I>malloc()</I>,
<BR>
the Judy website,
<A href="http://judy.sourceforge.net">
http://judy.sourceforge.net</A>,
for further information and Application Notes.
</BODY>
</HTML>
