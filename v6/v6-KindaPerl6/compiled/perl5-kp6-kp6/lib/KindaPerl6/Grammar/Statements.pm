{

    package KindaPerl6::Grammar;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict "vars";
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }

    BEGIN {
        $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } );
    }
    do {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::KindaPerl6::Grammar ), "true" ), "p5landish" ) ) {
            }
            else {
                do {
                    do {
                        ::MODIFIED($::KindaPerl6::Grammar);
                        $::KindaPerl6::Grammar = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'KindaPerl6::Grammar' ) ), 'PROTOTYPE', );
                        }
                    }
            }
        };
        do {
            use vars qw($_rule_stmt_sep);
            $_rule_stmt_sep
                = qr/(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; $GLOBAL::_M2 = $GLOBAL::_M; })(?:(?:(?:(??{ eval '$_rule_opt_ws' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; }))\;(?:(??{ eval '$_rule_opt_ws' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; })))|(?:(?:\n\r?|\r\n?)(?:(??{ eval '$_rule_opt_ws' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; }))))(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; $GLOBAL::_M2 = $GLOBAL::_M; })/x;
            ::DISPATCH(
                ::DISPATCH( $::KindaPerl6::Grammar, "HOW" ),
                "add_method",
                ::DISPATCH( $::Str, "new", "stmt_sep" ),
                ::DISPATCH(
                    $::Method,
                    "new",
                    sub {
                        local $GLOBAL::_Class = shift;
                        undef $GLOBAL::_M2;
                        (   ref($_)
                            ? $_->{_dispatch}( $_, "Str" )->{_value}
                            : $_
                        ) =~ /$_rule_stmt_sep/;
                        if ( $GLOBAL::_M2->[1] eq 'to' ) {
                            Match::from_global_data($GLOBAL::_M2);
                            $MATCH = $GLOBAL::MATCH = pop @Match::Matches;
                        }
                        else { $MATCH = $GLOBAL::MATCH = Match->new(); }
                        @Match::Matches = ();
                        return $MATCH;
                    }
                ),
            );
        };
        do {
            use vars qw($_rule_exp_stmts);
            $_rule_exp_stmts
                = qr/(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; $GLOBAL::_M2 = $GLOBAL::_M; })(?:(?:(?:(??{ eval '$_rule_exp' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "exp" ]; }))(?:(?:(?:(??{ eval '$_rule_stmt_sep' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; }))(?:(??{ eval '$_rule_exp_stmts' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "exp_stmts" ]; }))(?:(?:(?:(??{ eval '$_rule_stmt_sep' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; })))|(?:(?:(??{ eval '$_rule_opt_ws' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; }))))(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(::DISPATCH( $::Array, 'new', { _array => [::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp' )
 )
 )
, ::DISPATCH( $GLOBAL::Code_prefix_58__60__64__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp_stmts' )
 )
 )
 )
] }
 )
)
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; }))|(?:(?:(?:(?:(??{ eval '$_rule_stmt_sep' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; })))|(?:(?:(??{ eval '$_rule_opt_ws' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; }))))(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(::DISPATCH( $::Array, 'new', { _array => [::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp' )
 )
 )
] }
 )
)
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; }))))|(?:(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(::DISPATCH( $::Array, 'new', { _array => [] }
 )
)
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; })))(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; $GLOBAL::_M2 = $GLOBAL::_M; })/x;
            ::DISPATCH(
                ::DISPATCH( $::KindaPerl6::Grammar, "HOW" ),
                "add_method",
                ::DISPATCH( $::Str, "new", "exp_stmts" ),
                ::DISPATCH(
                    $::Method,
                    "new",
                    sub {
                        local $GLOBAL::_Class = shift;
                        undef $GLOBAL::_M2;
                        (   ref($_)
                            ? $_->{_dispatch}( $_, "Str" )->{_value}
                            : $_
                        ) =~ /$_rule_exp_stmts/;
                        if ( $GLOBAL::_M2->[1] eq 'to' ) {
                            Match::from_global_data($GLOBAL::_M2);
                            $MATCH = $GLOBAL::MATCH = pop @Match::Matches;
                        }
                        else { $MATCH = $GLOBAL::MATCH = Match->new(); }
                        @Match::Matches = ();
                        return $MATCH;
                    }
                ),
            );
        };
        do {
            use vars qw($_rule_exp_stmts2);
            $_rule_exp_stmts2
                = qr/(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; $GLOBAL::_M2 = $GLOBAL::_M; })(?:(?:(?:(??{ eval '$_rule_exp' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "exp" ]; }))(?:(?:(?:(??{ eval '$_rule_stmt_sep' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; }))(?:(??{ eval '$_rule_exp_stmts' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "exp_stmts" ]; }))(?:(?:(?:(??{ eval '$_rule_stmt_sep' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; })))|(?:(?:(??{ eval '$_rule_opt_ws' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; }))))(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(::DISPATCH( $::Array, 'new', { _array => [::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp' )
 )
 )
, ::DISPATCH( $GLOBAL::Code_prefix_58__60__64__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp_stmts' )
 )
 )
 )
] }
 )
)
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; }))|(?:(?:(?:(?:(??{ eval '$_rule_stmt_sep' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; })))|(?:(?:(??{ eval '$_rule_opt_ws' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; }))))(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(::DISPATCH( $::Array, 'new', { _array => [::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp' )
 )
 )
] }
 )
)
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; })))))(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; $GLOBAL::_M2 = $GLOBAL::_M; })/x;
            ::DISPATCH(
                ::DISPATCH( $::KindaPerl6::Grammar, "HOW" ),
                "add_method",
                ::DISPATCH( $::Str, "new", "exp_stmts2" ),
                ::DISPATCH(
                    $::Method,
                    "new",
                    sub {
                        local $GLOBAL::_Class = shift;
                        undef $GLOBAL::_M2;
                        (   ref($_)
                            ? $_->{_dispatch}( $_, "Str" )->{_value}
                            : $_
                        ) =~ /$_rule_exp_stmts2/;
                        if ( $GLOBAL::_M2->[1] eq 'to' ) {
                            Match::from_global_data($GLOBAL::_M2);
                            $MATCH = $GLOBAL::MATCH = pop @Match::Matches;
                        }
                        else { $MATCH = $GLOBAL::MATCH = Match->new(); }
                        @Match::Matches = ();
                        return $MATCH;
                    }
                ),
            );
            }
    };
    1
}
