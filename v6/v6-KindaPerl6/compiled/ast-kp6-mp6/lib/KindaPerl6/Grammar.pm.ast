::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Use( perl5 => '0', mod => 'KindaPerl6::Grammar::Regex', ),
            ::Use( perl5 => '0', mod => 'KindaPerl6::Grammar::Mapping', ),
            ::Use( perl5 => '0', mod => 'KindaPerl6::Grammar::Control', ),
            ::Use( perl5 => '0', mod => 'KindaPerl6::Grammar::Parameters', ),
            ::Use( perl5 => '0', mod => 'KindaPerl6::Grammar::Signature', ),
            ::Use( perl5 => '0', mod => 'KindaPerl6::Grammar::Term', ),
            ::Use( perl5 => '0', mod => 'KindaPerl6::Grammar::Statements', ),
            ::Use( perl5 => '0', mod => 'KindaPerl6::Grammar::Quote', ),
            ::Use( perl5 => '0', mod => 'KindaPerl6::Grammar::Sub', ),
            ::Use( perl5 => '0', mod => 'KindaPerl6::Grammar::Token', ),
            ::Use( perl5 => '0', mod => 'KindaPerl6::Grammar::Expression', ),
            ::Var( namespace => [], name => 'Class_name', twigil => '', sigil => '$', ),
            ::Bind(
                parameters => ::Var( namespace => [], name => 'get_class_name', twigil => '', sigil => '&', ),
                arguments  => ::Sub(
                    name  => 'get_class_name',
                    block => ::Lit::Code(
                        body => [ ::Var( namespace => [], name       => 'Class_name', twigil => '', sigil => '$', ), ],
                        sig  => ::Sig( invocant    => '', positional => [], ),
                        pad =>
                            ::Pad( lexicals => [ ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_', twigil => '', sigil => '@', ), type => '', ) ], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                        CATCH => '',
                        state => {},
                    ),
                ),
            ),
            ::Token(
                regex => ::Rule::Or(
                    or => [
                        ::Rule::Concat(
                            concat => [
                                ::Rule::Or(
                                    or => [
                                        ::Rule::Concat(
                                            concat => [
                                                ::Rule::Or(
                                                    or => [
                                                        ::Rule::Concat( concat => [ ::Rule::SubruleNoCapture( metasyntax => 'word', ), ], ),
                                                        ::Rule::Concat( concat => [ ::Rule::Constant( constant           => '_', ), ], ),
                                                        ::Rule::Concat( concat => [ ::Rule::SubruleNoCapture( metasyntax => 'digit', ), ], ),
                                                    ],
                                                ),
                                                ::Rule::SubruleNoCapture( metasyntax => 'ident_digit', ),
                                            ],
                                        ),
                                        ::Rule::Concat( concat => [ ::Rule::Constant( constant => '', ), ], ),
                                    ],
                                ),
                            ],
                        ),
                    ],
                ),
                sym  => '',
                name => 'ident_digit',
            ),
            ::Token(
                regex => ::Rule::Or(
                    or => [
                        ::Rule::Concat(
                            concat => [
                                ::Rule::Or(
                                    or => [
                                        ::Rule::Concat(
                                            concat => [
                                                ::Rule::Before( assertion_modifier => '!', capture_to_array => '', rule => ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::SpecialChar( char => 'd', ), ], ), ], ), ),
                                                ::Rule::SubruleNoCapture( metasyntax => 'word', ),
                                            ],
                                        ),
                                        ::Rule::Concat( concat => [ ::Rule::Constant( constant => '_', ), ], ),
                                    ],
                                ),
                                ::Rule::SubruleNoCapture( metasyntax => 'ident_digit', ),
                                ::Rule::Or(
                                    or => [
                                        ::Rule::Concat( concat => [ ::Rule::Constant( constant => ':<', ), ::Rule::Subrule( capture_to_array => '', metasyntax => 'angle_quoted', ident => '', ), ::Rule::Constant( constant => '>', ), ], ),
                                        ::Rule::Concat( concat => [ ::Rule::Constant( constant => '', ), ], ),
                                    ],
                                ),
                            ],
                        ),
                        ::Rule::Concat( concat => [ ::Rule::Constant( constant => 'Â', ), ::Rule::Constant( constant => '¢', ), ], ),
                    ],
                ),
                sym  => '',
                name => 'ident',
            ),
            ::Token(
                regex => ::Rule::Or(
                    or => [
                        ::Rule::Concat(
                            concat => [
                                ::Rule::SubruleNoCapture( metasyntax => 'ident', ),
                                ::Rule::Or(
                                    or => [ ::Rule::Concat( concat => [ ::Rule::Constant( constant => '::', ), ::Rule::SubruleNoCapture( metasyntax => 'full_ident', ), ], ), ::Rule::Concat( concat => [ ::Rule::Constant( constant => '', ), ], ), ],
                                ),
                            ],
                        ),
                    ],
                ),
                sym  => '',
                name => 'full_ident',
            ),
            ::Token(
                regex => ::Rule::Or(
                    or => [
                        ::Rule::Concat(
                            concat => [
                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'ident', ident => '', ),
                                ::Rule::Constant( constant => '::', ),
                                ::Rule::Or(
                                    or => [
                                        ::Rule::Concat(
                                            concat => [
                                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'namespace', ident => '', ),
                                                ::Rule::Block(
                                                    closure => ::Lit::Code(
                                                        body => [
                                                            ::Apply(
                                                                arguments => [
                                                                    ::Call(
                                                                        hyper     => '',
                                                                        arguments => [
                                                                            ::Lit::Array(
                                                                                array => [
                                                                                    ::Apply(
                                                                                        arguments => [
                                                                                            ::Call(
                                                                                                hyper     => '',
                                                                                                arguments => [ ::Val::Buf( buf => 'ident', ), ],
                                                                                                method    => 'LOOKUP',
                                                                                                invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                            ),
                                                                                        ],
                                                                                        code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                                    ),
                                                                                    ::Call(
                                                                                        hyper     => '',
                                                                                        arguments => '',
                                                                                        method    => 'values',
                                                                                        invocant  => ::Apply(
                                                                                            arguments => [
                                                                                                ::Call(
                                                                                                    hyper     => '',
                                                                                                    arguments => [ ::Val::Buf( buf => 'namespace', ), ],
                                                                                                    method    => 'LOOKUP',
                                                                                                    invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                                ),
                                                                                            ],
                                                                                            code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                                        ),
                                                                                    ),
                                                                                ],
                                                                            ),
                                                                        ],
                                                                        method   => 'new',
                                                                        invocant => ::Proto( name => 'Array', ),
                                                                    ),
                                                                ],
                                                                code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                                            ),
                                                        ],
                                                        sig => ::Sig( invocant => '', positional => [], ),
                                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                        CATCH => '',
                                                        state => {},
                                                    ),
                                                ),
                                            ],
                                        ),
                                        ::Rule::Concat(
                                            concat => [
                                                ::Rule::Block(
                                                    closure => ::Lit::Code(
                                                        body => [
                                                            ::Apply(
                                                                arguments => [
                                                                    ::Call(
                                                                        hyper     => '',
                                                                        arguments => [
                                                                            ::Lit::Array(
                                                                                array => [
                                                                                    ::Apply(
                                                                                        arguments => [
                                                                                            ::Call(
                                                                                                hyper     => '',
                                                                                                arguments => [ ::Val::Buf( buf => 'ident', ), ],
                                                                                                method    => 'LOOKUP',
                                                                                                invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                            ),
                                                                                        ],
                                                                                        code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                                    ),
                                                                                ],
                                                                            ),
                                                                        ],
                                                                        method   => 'new',
                                                                        invocant => ::Proto( name => 'Array', ),
                                                                    ),
                                                                ],
                                                                code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                                            ),
                                                        ],
                                                        sig => ::Sig( invocant => '', positional => [], ),
                                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                        CATCH => '',
                                                        state => {},
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ::Rule::Concat(
                            concat => [
                                ::Rule::Block(
                                    closure => ::Lit::Code(
                                        body => [
                                            ::Apply(
                                                arguments => [ ::Call( hyper  => '', arguments => [ ::Lit::Array( array => [], ), ], method => 'new', invocant => ::Proto( name => 'Array', ), ), ],
                                                code      => ::Var( namespace => [], name      => 'make',               twigil       => '', sigil     => '&', ),
                                            ),
                                        ],
                                        sig => ::Sig( invocant => '', positional => [], ),
                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                        CATCH => '',
                                        state => {},
                                    ),
                                ),
                            ],
                        ),
                    ],
                ),
                sym  => '',
                name => 'namespace',
            ),
            ::Token(
                regex => ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::SpecialChar( char => 'N', ), ::Rule::SubruleNoCapture( metasyntax => 'to_line_end', ), ], ), ::Rule::Concat( concat => [ ::Rule::Constant( constant => '', ), ], ), ], ),
                sym   => '',
                name  => 'to_line_end',
            ),
            ::Token(
                regex => ::Rule::Or(
                    or => [
                        ::Rule::Concat( concat => [ ::Rule::SpecialChar( char => 'n', ),                           ::Rule::Constant( constant => '=end', ),                        ::Rule::SubruleNoCapture( metasyntax => 'to_line_end', ), ], ),
                        ::Rule::Concat( concat => [ ::Rule::Dot(),            ::Rule::SubruleNoCapture( metasyntax => 'to_line_end', ),       ::Rule::SubruleNoCapture( metasyntax => 'pod_begin', ), ], ),
                    ],
                ),
                sym  => '',
                name => 'pod_begin',
            ),
            ::Token(
                regex => ::Rule::Or(
                    or => [
                        ::Rule::Concat( concat => [ ::Rule::SpecialChar( char => 'n', ),                           ::Rule::Constant( constant => '=cut', ),                        ::Rule::SubruleNoCapture( metasyntax => 'to_line_end', ), ], ),
                        ::Rule::Concat( concat => [ ::Rule::SpecialChar( char => 'n', ),                           ::Rule::Constant( constant => '=end', ),                        ::Rule::SubruleNoCapture( metasyntax => 'to_line_end', ), ], ),
                        ::Rule::Concat( concat => [ ::Rule::Dot(),            ::Rule::SubruleNoCapture( metasyntax => 'to_line_end', ),       ::Rule::SubruleNoCapture( metasyntax => 'pod_other', ), ], ),
                    ],
                ),
                sym  => '',
                name => 'pod_other',
            ),
            ::Token(
                regex => ::Rule::Or(
                    or => [
                        ::Rule::Concat(
                            concat => [
                                ::Rule::Or(
                                    or => [
                                        ::Rule::Concat( concat => [ ::Rule::Constant( constant => '#', ), ::Rule::SubruleNoCapture( metasyntax => 'to_line_end', ), ], ),
                                        ::Rule::Concat(
                                            concat => [
                                                ::Rule::SpecialChar( char => 'n', ),
                                                ::Rule::Or(
                                                    or => [
                                                        ::Rule::Concat( concat => [ ::Rule::Constant( constant => '=begin', ), ::Rule::SubruleNoCapture( metasyntax => 'pod_begin', ), ], ),
                                                        ::Rule::Concat( concat => [ ::Rule::Constant( constant => '=kwid', ),  ::Rule::SubruleNoCapture( metasyntax => 'pod_other', ), ], ),
                                                        ::Rule::Concat( concat => [ ::Rule::Constant( constant => '=pod', ),   ::Rule::SubruleNoCapture( metasyntax => 'pod_other', ), ], ),
                                                        ::Rule::Concat( concat => [ ::Rule::Constant( constant => '=for', ),   ::Rule::SubruleNoCapture( metasyntax => 'pod_other', ), ], ),
                                                        ::Rule::Concat( concat => [ ::Rule::Constant( constant => '=head1', ), ::Rule::SubruleNoCapture( metasyntax => 'pod_other', ), ], ),
                                                        ::Rule::Concat( concat => [ ::Rule::Constant( constant => '', ), ], ),
                                                    ],
                                                ),
                                            ],
                                        ),
                                        ::Rule::Concat( concat => [ ::Rule::SpecialChar( char => 's', ), ], ),
                                    ],
                                ),
                                ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::SubruleNoCapture( metasyntax => 'ws', ), ], ), ::Rule::Concat( concat => [ ::Rule::Constant( constant => '', ), ], ), ], ),
                            ],
                        ),
                    ],
                ),
                sym  => '',
                name => 'ws',
            ),
            ::Token( regex => ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::SubruleNoCapture( metasyntax => 'ws', ), ], ), ::Rule::Concat( concat => [ ::Rule::Constant( constant => '', ), ], ), ], ), sym => '', name => 'opt_ws', ),
            ::Token( regex => ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::SubruleNoCapture( metasyntax => 'ws', ), ], ), ::Rule::Concat( concat => [ ::Rule::Constant( constant => '', ), ], ), ], ), sym => '', name => 'opt_ws2', ),
            ::Token( regex => ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::SubruleNoCapture( metasyntax => 'ws', ), ], ), ::Rule::Concat( concat => [ ::Rule::Constant( constant => '', ), ], ), ], ), sym => '', name => 'opt_ws3', ),
            ::Token(
                regex => ::Rule::Or(
                    or => [
                        ::Rule::Concat( concat => [ ::Rule::SpecialChar( char => '.', ), ], ),
                        ::Rule::Concat(
                            concat => [
                                ::Rule::SpecialChar(
                                    char => '\', ) , ::Rule::SubruleNoCapture(  metasyntax => ' opt_ws ', ) , ::Rule::SpecialChar(  char => '
                                        . ', ) ,  ], ) ,  ], ) ,  sym => '',  name => ' dot ', ) , ::Token(  regex => ::Rule::Or(  or => [ ::Rule::Concat(  concat => [ ::Rule::Subrule(  capture_to_array => '',  metasyntax => ' comp_unit
                                        ',  ident => '', ) , ::Rule::Or(  or => [ ::Rule::Concat(  concat => [ ::Rule::Subrule(  capture_to_array => '',  metasyntax => ' parse ',  ident => '
                                        ', ) , ::Rule::Block(  closure => ::Lit::Code(  body => [ ::Apply(  arguments => [ ::Call(  hyper => '',  arguments => [ ::Lit::Array(  array => [ ::Apply(  arguments => [ ::Call(  hyper => '
                                        ',  arguments => [ ::Val::Buf(  buf => ' comp_unit ', ) ,  ],  method => ' LOOKUP ',  invocant => ::Var(  namespace => [  ],  name => ' / ',  twigil => '',  sigil => '$',
                                ),
                            ),
                            ],
                        code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ), ),
                    ::Call(
                        hyper     => '',
                        arguments => '',
                        method    => 'values',
                        invocant  => ::Apply(
                            arguments => [ ::Call( hyper  => '', arguments => [ ::Val::Buf( buf => 'parse', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ), ],
                            code      => ::Var( namespace => [], name      => 'prefix:<$>',     twigil            => '', sigil        => '&', ),
                        ),
                    ),
                ],
            ),
        ],
        method   => 'new',
        invocant => ::Proto( name => 'Array', ),
    ),
    ],
    code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
    ),
    ],
    sig => ::Sig(
        invocant   => '',
        positional => [],
    ),
    pad => ::Pad(
        lexicals  => [],
        namespace => "KindaPerl6::Grammar",
        parent    => ::Pad(...),
        evaluator => ::Sub(...),
    ),
    CATCH => '',
    state => {}, ),
    ), ], ),
    ::Rule::Concat( concat => [ ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply(
                            arguments => [
                                ::Call(
                                    hyper     => '',
                                    arguments => [
                                        ::Lit::Array(
                                            array => [
                                                ::Apply(
                                                    arguments => [ ::Call( hyper  => '', arguments => [ ::Val::Buf( buf => 'comp_unit', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ), ],
                                                    code      => ::Var( namespace => [], name      => 'prefix:<$>',     twigil                => '', sigil        => '&', ),
                                                ),
                                            ],
                                        ),
                                    ],
                                    method   => 'new',
                                    invocant => ::Proto( name => 'Array', ),
                                ),
                            ],
                            code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                    ),
                ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [],
                    ),
                    pad => ::Pad(
                        lexicals  => [],
                        namespace => "KindaPerl6::Grammar",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {}, ),
                ), ], ), ], ), ], ),
    ::Rule::Concat( concat => [ ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Call(
                                    hyper     => '',
                                    arguments => [ ::Lit::Array( array => [], ),
                                    ],
                                    method   => 'new',
                                    invocant => ::Proto( name => 'Array', ),
                                    ), ],
                            code => ::Var(
                                namespace => [],
                                name      => 'make',
                                twigil    => '',
                                sigil     => '&',
                            ),
                            ), ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [],
                    ),
                    pad => ::Pad(
                        lexicals  => [],
                        namespace => "KindaPerl6::Grammar",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {}, ),
                ), ], ), ], ),
    sym  => '',
    name => 'parse', ),
    ::Token( regex => ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::Constant( constant => 'class', ),
                        ], ),
                ::Rule::Concat( concat => [ ::Rule::Constant( constant => 'grammar', ),
                        ], ),
                ::Rule::Concat( concat => [ ::Rule::Constant( constant => 'role', ),
                        ], ),
                ::Rule::Concat( concat => [ ::Rule::Constant( constant => 'module', ),
                        ], ), ], ),
        sym  => '',
        name => 'unit_type', ),
    ::Token( regex => ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::Constant( constant => 'i', ),
                        ::Rule::Constant( constant => 's', ),
                        ], ),
                ::Rule::Concat( concat => [ ::Rule::Constant( constant => 'd', ),
                        ::Rule::Constant( constant => 'o', ),
                        ::Rule::Constant( constant => 'e', ),
                        ::Rule::Constant( constant => 's', ),
                        ], ),
                ::Rule::Concat( concat => [ ::Rule::Constant( constant => 'm', ),
                        ::Rule::Constant( constant => 'e', ),
                        ::Rule::Constant( constant => 't', ),
                        ::Rule::Constant( constant => 'a', ),
                        ], ), ], ),
        sym  => '',
        name => 'trait_auxiliary', ),
    ::Token( regex => ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::Subrule(
                            capture_to_array => '',
                            metasyntax       => 'trait_auxiliary',
                            ident            => '',
                    ),
                        ::Rule::SubruleNoCapture( metasyntax => 'ws', ),
                        ::Rule::Subrule(
                            capture_to_array => '',
                            metasyntax       => 'full_ident',
                            ident            => '',
                        ),
                        ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Call(
                                                hyper     => '',
                                                arguments => [ ::Lit::Array( array => [
                                                            ::Apply(
                                                                arguments => [
                                                                    ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'trait_auxiliary', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ),
                                                                ],
                                                                code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                            ),
                                                            ::Apply(
                                                                arguments =>
                                                                    [ ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'full_ident', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ), ],
                                                                code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                            ),
                                                    ],
                                                ),
                                                ],
                                                method   => 'new',
                                                invocant => ::Proto( name => 'Array', ),
                                                ), ],
                                        code => ::Var(
                                            namespace => [],
                                            name      => 'make',
                                            twigil    => '',
                                            sigil     => '&',
                                        ),
                                        ), ],
                                sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                ),
                                pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                ),
                                CATCH => '',
                                state => {}, ),
                            ), ], ), ], ),
        sym  => '',
        name => 'class_trait', ),
    ::Token( regex => ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::Subrule(
                            capture_to_array => '',
                            metasyntax       => 'class_trait',
                            ident            => '',
                    ),
                        ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::SubruleNoCapture( metasyntax => 'ws', ),
                                        ::Rule::Subrule(
                                            capture_to_array => '',
                                            metasyntax       => 'class_traits',
                                            ident            => '',
                                        ),
                                        ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply(
                                                        arguments => [
                                                            ::Call(
                                                                hyper     => '',
                                                                arguments => [
                                                                    ::Lit::Array(
                                                                        array => [
                                                                            ::Apply(
                                                                                arguments => [
                                                                                    ::Call(
                                                                                        hyper     => '',
                                                                                        arguments => [ ::Val::Buf( buf => 'class_trait', ), ],
                                                                                        method    => 'LOOKUP',
                                                                                        invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                    ),
                                                                                ],
                                                                                code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                            ),
                                                                            ::Call(
                                                                                hyper     => '',
                                                                                arguments => '',
                                                                                method    => 'values',
                                                                                invocant  => ::Apply(
                                                                                    arguments => [
                                                                                        ::Call(
                                                                                            hyper     => '',
                                                                                            arguments => [ ::Val::Buf( buf => 'class_traits', ), ],
                                                                                            method    => 'LOOKUP',
                                                                                            invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                        ),
                                                                                    ],
                                                                                    code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                                ),
                                                                            ),
                                                                        ],
                                                                    ),
                                                                ],
                                                                method   => 'new',
                                                                invocant => ::Proto( name => 'Array', ),
                                                            ),
                                                        ],
                                                        code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                                ),
                                            ],
                                                sig => ::Sig(
                                                    invocant   => '',
                                                    positional => [],
                                                ),
                                                pad => ::Pad(
                                                    lexicals  => [],
                                                    namespace => "KindaPerl6::Grammar",
                                                    parent    => ::Pad(...),
                                                    evaluator => ::Sub(...),
                                                ),
                                                CATCH => '',
                                                state => {}, ),
                                            ), ], ),
                                ::Rule::Concat( concat => [ ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply(
                                                        arguments => [
                                                            ::Call(
                                                                hyper     => '',
                                                                arguments => [
                                                                    ::Lit::Array(
                                                                        array => [
                                                                            ::Apply(
                                                                                arguments => [
                                                                                    ::Call(
                                                                                        hyper     => '',
                                                                                        arguments => [ ::Val::Buf( buf => 'class_trait', ), ],
                                                                                        method    => 'LOOKUP',
                                                                                        invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                    ),
                                                                                ],
                                                                                code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                            ),
                                                                        ],
                                                                    ),
                                                                ],
                                                                method   => 'new',
                                                                invocant => ::Proto( name => 'Array', ),
                                                            ),
                                                        ],
                                                        code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                                ),
                                            ],
                                                sig => ::Sig(
                                                    invocant   => '',
                                                    positional => [],
                                                ),
                                                pad => ::Pad(
                                                    lexicals  => [],
                                                    namespace => "KindaPerl6::Grammar",
                                                    parent    => ::Pad(...),
                                                    evaluator => ::Sub(...),
                                                ),
                                                CATCH => '',
                                                state => {}, ),
                                            ), ], ), ], ), ], ),
                ::Rule::Concat( concat => [ ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Call(
                                                hyper     => '',
                                                arguments => [ ::Lit::Array( array => [], ),
                                                ],
                                                method   => 'new',
                                                invocant => ::Proto( name => 'Array', ),
                                                ), ],
                                        code => ::Var(
                                            namespace => [],
                                            name      => 'make',
                                            twigil    => '',
                                            sigil     => '&',
                                        ),
                                        ), ],
                                sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                ),
                                pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                ),
                                CATCH => '',
                                state => {}, ),
                            ), ], ), ], ),
        sym  => '',
        name => 'class_traits', ),
    ::Token( regex => ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                        ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::SpecialChar( char => ';', ),
                                        ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                        ], ),
                                ::Rule::Concat( concat => [ ::Rule::Constant( constant => '', ),
                                        ], ), ], ),
                        ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::Constant( constant => 'use', ),
                                        ::Rule::SubruleNoCapture( metasyntax => 'ws', ),
                                        ::Rule::Constant( constant => 'v6-', ),
                                        ::Rule::Subrule(
                                            capture_to_array => '',
                                            metasyntax       => 'ident',
                                            ident            => '',
                                        ),
                                        ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                        ::Rule::SpecialChar( char => ';', ),
                                        ::Rule::SubruleNoCapture( metasyntax => 'ws', ),
                                        ], ),
                                ::Rule::Concat( concat => [ ::Rule::Constant( constant => '', ),
                                        ], ), ], ),
                        ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::Subrule(
                                            capture_to_array => '',
                                            metasyntax       => 'unit_type',
                                            ident            => '',
                                    ),
                                        ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                        ::Rule::Subrule(
                                            capture_to_array => '',
                                            metasyntax       => 'full_ident',
                                            ident            => '',
                                        ),
                                        ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                        ::Rule::Subrule(
                                            capture_to_array => '',
                                            metasyntax       => 'class_traits',
                                            ident            => '',
                                        ),
                                        ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                        ::Rule::Constant( constant => '{', ),
                                        ::Rule::Block( closure => ::Lit::Code( body => [ ::Bind(
                                                        parameters => ::Var( namespace => [], name => 'Class_name', twigil => '', sigil => '$', ),
                                                        arguments  => ::Apply(
                                                            arguments =>
                                                                [ ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'full_ident', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ), ],
                                                            code => ::Var( namespace => [], name => 'prefix:<~>', twigil => '', sigil => '&', ),
                                                        ),
                                                ),
                                            ],
                                                sig => ::Sig(
                                                    invocant   => '',
                                                    positional => [],
                                                ),
                                                pad => ::Pad(
                                                    lexicals  => [],
                                                    namespace => "KindaPerl6::Grammar",
                                                    parent    => ::Pad(...),
                                                    evaluator => ::Sub(...),
                                                ),
                                                CATCH => '',
                                                state => {}, ),
                                        ),
                                        ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                        ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply(
                                                        arguments => [ ::Var( namespace => [],              name => 'Class_name', twigil => '', sigil => '$', ), ],
                                                        code      => ::Var( namespace   => [ 'COMPILER', ], name => 'add_pad',    twigil => '', sigil => '&', ),
                                                ),
                                            ],
                                                sig => ::Sig(
                                                    invocant   => '',
                                                    positional => [],
                                                ),
                                                pad => ::Pad(
                                                    lexicals  => [],
                                                    namespace => "KindaPerl6::Grammar",
                                                    parent    => ::Pad(...),
                                                    evaluator => ::Sub(...),
                                                ),
                                                CATCH => '',
                                                state => {}, ),
                                        ),
                                        ::Rule::Subrule(
                                            capture_to_array => '',
                                            metasyntax       => 'exp_stmts',
                                            ident            => '',
                                        ),
                                        ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                        ::Rule::Constant( constant => '}', ),
                                        ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                        ::Rule::Or( or => [ ::Rule::Concat(
                                                    concat => [ ::Rule::SpecialChar( char => ';', ),
                                                        ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                                    ],
                                            ),
                                                ::Rule::Concat( concat => [ ::Rule::Constant( constant => '', ), ],
                                                    ), ], ),
                                        ::Rule::Block( closure => ::Lit::Code( body => [ ::Bind(
                                                        parameters => ::Var( namespace => [], name => 'env', twigil => '', sigil => '$', ),
                                                        arguments => ::Apply( arguments => [], code => ::Var( namespace => [ 'COMPILER', ], name => 'current_pad', twigil => '', sigil => '&', ), ),
                                                ),
                                                    ::Apply(
                                                        arguments => [],
                                                        code      => ::Var( namespace => [ 'COMPILER', ], name => 'drop_pad', twigil => '', sigil => '&', ),
                                                    ),
                                                    ::Apply(
                                                        arguments => [
                                                            ::Call(
                                                                hyper     => '',
                                                                arguments => [
                                                                    ::Lit::Pair(
                                                                        value => ::Apply(
                                                                            arguments => [
                                                                                ::Call(
                                                                                    hyper     => '',
                                                                                    arguments => [ ::Val::Buf( buf => 'unit_type', ), ],
                                                                                    method    => 'LOOKUP',
                                                                                    invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                ),
                                                                            ],
                                                                            code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                        ),
                                                                        key => ::Val::Buf( buf => 'unit_type', ),
                                                                    ),
                                                                    ::Lit::Pair(
                                                                        value => ::Apply(
                                                                            arguments => [
                                                                                ::Call(
                                                                                    hyper     => '',
                                                                                    arguments => [ ::Val::Buf( buf => 'full_ident', ), ],
                                                                                    method    => 'LOOKUP',
                                                                                    invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                ),
                                                                            ],
                                                                            code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                        ),
                                                                        key => ::Val::Buf( buf => 'name', ),
                                                                    ),
                                                                    ::Lit::Pair(
                                                                        value => ::Apply(
                                                                            arguments => [
                                                                                ::Call(
                                                                                    hyper     => '',
                                                                                    arguments => [ ::Val::Buf( buf => 'class_traits', ), ],
                                                                                    method    => 'LOOKUP',
                                                                                    invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                ),
                                                                            ],
                                                                            code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                        ),
                                                                        key => ::Val::Buf( buf => 'traits', ),
                                                                    ),
                                                                    ::Lit::Pair(
                                                                        value => ::Call( hyper   => '', arguments => [ ::Lit::Hash( hash => [], ), ], method => 'new', invocant => ::Proto( name => 'Hash', ), ),
                                                                        key   => ::Val::Buf( buf => 'attributes', ),
                                                                    ),
                                                                    ::Lit::Pair(
                                                                        value => ::Call( hyper   => '', arguments => [ ::Lit::Hash( hash => [], ), ], method => 'new', invocant => ::Proto( name => 'Hash', ), ),
                                                                        key   => ::Val::Buf( buf => 'methods', ),
                                                                    ),
                                                                    ::Lit::Pair(
                                                                        value => ::Call(
                                                                            hyper     => '',
                                                                            arguments => [
                                                                                ::Lit::NamedArgument( value => ::Var( namespace => [], name => 'env', twigil => '', sigil => '$', ), key => ::Val::Buf( buf => 'pad', ), ),
                                                                                ::Lit::NamedArgument(
                                                                                    value => ::Call( hyper   => '', arguments => [ ::Lit::Hash( hash => [], ), ], method => 'new', invocant => ::Proto( name => 'Hash', ), ),
                                                                                    key   => ::Val::Buf( buf => 'state', ),
                                                                                ),
                                                                                ::Lit::NamedArgument(
                                                                                    value => ::Call(
                                                                                        hyper     => '',
                                                                                        arguments => [
                                                                                            ::Lit::Pair( value => ::Val::Undef(), key => ::Val::Buf( buf => 'invocant', ), ),
                                                                                            ::Lit::Pair(
                                                                                                value => ::Call( hyper   => '', arguments => [ ::Lit::Array( array => [], ), ], method => 'new', invocant => ::Proto( name => 'Array', ), ),
                                                                                                key   => ::Val::Buf( buf => 'positional', ),
                                                                                            ),
                                                                                        ],
                                                                                        method   => 'new',
                                                                                        invocant => ::Proto( name => 'Sig', ),
                                                                                    ),
                                                                                    key => ::Val::Buf( buf => 'sig', ),
                                                                                ),
                                                                                ::Lit::NamedArgument(
                                                                                    value => ::Apply(
                                                                                        arguments => [
                                                                                            ::Call(
                                                                                                hyper     => '',
                                                                                                arguments => [ ::Val::Buf( buf => 'exp_stmts', ), ],
                                                                                                method    => 'LOOKUP',
                                                                                                invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                            ),
                                                                                        ],
                                                                                        code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                                    ),
                                                                                    key => ::Val::Buf( buf => 'body', ),
                                                                                ),
                                                                            ],
                                                                            method   => 'new',
                                                                            invocant => ::Proto( name => 'Lit::Code', ),
                                                                        ),
                                                                        key => ::Val::Buf( buf => 'body', ),
                                                                    ),
                                                                ],
                                                                method   => 'new',
                                                                invocant => ::Proto( name => 'CompUnit', ),
                                                            ),
                                                        ],
                                                        code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                                    ),
                                            ],
                                                sig => ::Sig(
                                                    invocant   => '',
                                                    positional => [],
                                                ),
                                                pad => ::Pad(
                                                    lexicals  => [ ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'env', twigil => '', sigil => '$', ), type => '', ) ],
                                                    namespace => "KindaPerl6::Grammar",
                                                    parent    => ::Pad(...),
                                                    evaluator => ::Sub(...),
                                                ),
                                                CATCH => '',
                                                state => {}, ),
                                            ), ], ), ], ), ], ),
                ::Rule::Concat( concat => [ ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                        ::Rule::Block( closure => ::Lit::Code( body => [ ::Bind(
                                                        parameters => ::Var( namespace => [], name => 'Class_name', twigil => '', sigil => '$', ),
                                                        arguments  => ::Val::Buf( buf  => 'Main', ),
                                                ),
                                                    ::Apply(
                                                        arguments => [ ::Var( namespace => [],              name => 'Class_name', twigil => '', sigil => '$', ), ],
                                                        code      => ::Var( namespace   => [ 'COMPILER', ], name => 'add_pad',    twigil => '', sigil => '&', ),
                                                    ),
                                            ],
                                                sig => ::Sig(
                                                    invocant   => '',
                                                    positional => [],
                                                ),
                                                pad => ::Pad(
                                                    lexicals  => [],
                                                    namespace => "KindaPerl6::Grammar",
                                                    parent    => ::Pad(...),
                                                    evaluator => ::Sub(...),
                                                ),
                                                CATCH => '',
                                                state => {}, ),
                                        ),
                                        ::Rule::Subrule(
                                            capture_to_array => '',
                                            metasyntax       => 'exp_stmts2',
                                            ident            => '',
                                        ),
                                        ::Rule::Block( closure => ::Lit::Code( body => [ ::Bind(
                                                        parameters => ::Var( namespace => [], name => 'env', twigil => '', sigil => '$', ),
                                                        arguments => ::Apply( arguments => [], code => ::Var( namespace => [ 'COMPILER', ], name => 'current_pad', twigil => '', sigil => '&', ), ),
                                                ),
                                                    ::Apply(
                                                        arguments => [],
                                                        code      => ::Var( namespace => [ 'COMPILER', ], name => 'drop_pad', twigil => '', sigil => '&', ),
                                                    ),
                                                    ::Apply(
                                                        arguments => [
                                                            ::Call(
                                                                hyper     => '',
                                                                arguments => [
                                                                    ::Lit::Pair( value => ::Val::Buf( buf => 'module', ), key => ::Val::Buf( buf => 'unit_type', ), ),
                                                                    ::Lit::Pair( value => ::Val::Buf( buf => 'Main', ),   key => ::Val::Buf( buf => 'name', ), ),
                                                                    ::Lit::Pair(
                                                                        value => ::Call( hyper   => '', arguments => [ ::Lit::Array( array => [], ), ], method => 'new', invocant => ::Proto( name => 'Array', ), ),
                                                                        key   => ::Val::Buf( buf => 'traits', ),
                                                                    ),
                                                                    ::Lit::Pair(
                                                                        value => ::Call( hyper   => '', arguments => [ ::Lit::Hash( hash => [], ), ], method => 'new', invocant => ::Proto( name => 'Hash', ), ),
                                                                        key   => ::Val::Buf( buf => 'attributes', ),
                                                                    ),
                                                                    ::Lit::Pair(
                                                                        value => ::Call( hyper   => '', arguments => [ ::Lit::Hash( hash => [], ), ], method => 'new', invocant => ::Proto( name => 'Hash', ), ),
                                                                        key   => ::Val::Buf( buf => 'methods', ),
                                                                    ),
                                                                    ::Lit::Pair(
                                                                        value => ::Call(
                                                                            hyper     => '',
                                                                            arguments => [
                                                                                ::Lit::NamedArgument( value => ::Var( namespace => [], name => 'env', twigil => '', sigil => '$', ), key => ::Val::Buf( buf => 'pad', ), ),
                                                                                ::Lit::NamedArgument(
                                                                                    value => ::Call( hyper   => '', arguments => [ ::Lit::Hash( hash => [], ), ], method => 'new', invocant => ::Proto( name => 'Hash', ), ),
                                                                                    key   => ::Val::Buf( buf => 'state', ),
                                                                                ),
                                                                                ::Lit::NamedArgument(
                                                                                    value => ::Call(
                                                                                        hyper     => '',
                                                                                        arguments => [
                                                                                            ::Lit::Pair( value => ::Val::Undef(), key => ::Val::Buf( buf => 'invocant', ), ),
                                                                                            ::Lit::Pair(
                                                                                                value => ::Call( hyper   => '', arguments => [ ::Lit::Array( array => [], ), ], method => 'new', invocant => ::Proto( name => 'Array', ), ),
                                                                                                key   => ::Val::Buf( buf => 'positional', ),
                                                                                            ),
                                                                                        ],
                                                                                        method   => 'new',
                                                                                        invocant => ::Proto( name => 'Sig', ),
                                                                                    ),
                                                                                    key => ::Val::Buf( buf => 'sig', ),
                                                                                ),
                                                                                ::Lit::NamedArgument(
                                                                                    value => ::Apply(
                                                                                        arguments => [
                                                                                            ::Call(
                                                                                                hyper     => '',
                                                                                                arguments => [ ::Val::Buf( buf => 'exp_stmts2', ), ],
                                                                                                method    => 'LOOKUP',
                                                                                                invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                            ),
                                                                                        ],
                                                                                        code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                                    ),
                                                                                    key => ::Val::Buf( buf => 'body', ),
                                                                                ),
                                                                            ],
                                                                            method   => 'new',
                                                                            invocant => ::Proto( name => 'Lit::Code', ),
                                                                        ),
                                                                        key => ::Val::Buf( buf => 'body', ),
                                                                    ),
                                                                ],
                                                                method   => 'new',
                                                                invocant => ::Proto( name => 'CompUnit', ),
                                                            ),
                                                        ],
                                                        code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                                    ),
                                            ],
                                                sig => ::Sig(
                                                    invocant   => '',
                                                    positional => [],
                                                ),
                                                pad => ::Pad(
                                                    lexicals  => [ ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'env', twigil => '', sigil => '$', ), type => '', ) ],
                                                    namespace => "KindaPerl6::Grammar",
                                                    parent    => ::Pad(...),
                                                    evaluator => ::Sub(...),
                                                ),
                                                CATCH => '',
                                                state => {}, ),
                                            ), ], ), ], ), ], ), ], ),
        sym  => '',
        name => 'comp_unit', ),
    ::Token( regex => ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::Constant( constant => 'my', ),
                        ], ),
                ::Rule::Concat( concat => [ ::Rule::Constant( constant => 'state', ),
                        ], ),
                ::Rule::Concat( concat => [ ::Rule::Constant( constant => 'has', ),
                        ], ),
                ::Rule::Concat( concat => [ ::Rule::Constant( constant => 'our', ),
                        ], ), ], ),
        sym  => '',
        name => 'declarator', ),
    ::Token( regex => ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::Subrule(
                            capture_to_array => '',
                            metasyntax       => 'declarator',
                            ident            => '',
                    ),
                        ::Rule::SubruleNoCapture( metasyntax => 'ws', ),
                        ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Apply( arguments => [ ::Call(
                                                        hyper     => '',
                                                        arguments => [ ::Val::Buf( buf => 'declarator', ), ],
                                                        method    => 'LOOKUP',
                                                        invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                ),
                                            ],
                                                code => ::Var(
                                                    namespace => [],
                                                    name      => 'prefix:<$>',
                                                    twigil    => '',
                                                    sigil     => '&',
                                                ),
                                                ), ],
                                        code => ::Var(
                                            namespace => [],
                                            name      => 'make',
                                            twigil    => '',
                                            sigil     => '&',
                                        ),
                                        ), ],
                                sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                ),
                                pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                ),
                                CATCH => '',
                                state => {}, ),
                            ), ], ),
                ::Rule::Concat( concat => [ ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Val::Buf( buf => '', ),
                                    ],
                                        code => ::Var(
                                            namespace => [],
                                            name      => 'make',
                                            twigil    => '',
                                            sigil     => '&',
                                        ),
                                        ), ],
                                sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                ),
                                pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                ),
                                CATCH => '',
                                state => {}, ),
                            ), ], ), ], ),
        sym  => '',
        name => 'opt_declarator', ),
    ::Token( regex => ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::Subrule(
                            capture_to_array => '',
                            metasyntax       => 'ident',
                            ident            => '',
                    ),
                        ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Apply( arguments => [ ::Call(
                                                        hyper     => '',
                                                        arguments => [ ::Val::Buf( buf => 'ident', ), ],
                                                        method    => 'LOOKUP',
                                                        invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                ),
                                            ],
                                                code => ::Var(
                                                    namespace => [],
                                                    name      => 'prefix:<$>',
                                                    twigil    => '',
                                                    sigil     => '&',
                                                ),
                                                ), ],
                                        code => ::Var(
                                            namespace => [],
                                            name      => 'make',
                                            twigil    => '',
                                            sigil     => '&',
                                        ),
                                        ), ],
                                sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                ),
                                pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                ),
                                CATCH => '',
                                state => {}, ),
                            ), ], ),
                ::Rule::Concat( concat => [ ::Rule::Constant( constant => '', ),
                        ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Val::Buf( buf => 'postcircumfix:<( )>', ),
                                    ],
                                        code => ::Var(
                                            namespace => [],
                                            name      => 'make',
                                            twigil    => '',
                                            sigil     => '&',
                                        ),
                                        ), ],
                                sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                ),
                                pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                ),
                                CATCH => '',
                                state => {}, ),
                            ), ], ), ], ),
        sym  => '',
        name => 'opt_ident', ),
    ::Token( regex => ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::Subrule(
                            capture_to_array => '',
                            metasyntax       => 'full_ident',
                            ident            => '',
                    ),
                        ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::SubruleNoCapture( metasyntax => 'dot', ),
                                        ::Rule::Subrule(
                                            capture_to_array => '',
                                            metasyntax       => 'ident',
                                            ident            => '',
                                        ),
                                        ], ),
                                ::Rule::Concat( concat => [ ::Rule::Constant( constant => '', ),
                                        ], ), ], ), ], ), ], ),
        sym  => '',
        name => 'sub_or_method_name', ),
    ::Token( regex => ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::Constant( constant => '::', ),
                                        ], ),
                                ::Rule::Concat( concat => [ ::Rule::Constant( constant => '', ),
                                        ], ), ], ),
                        ::Rule::Subrule(
                            capture_to_array => '',
                            metasyntax       => 'full_ident',
                            ident            => '',
                        ),
                        ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Apply( arguments => [ ::Call(
                                                        hyper     => '',
                                                        arguments => [ ::Val::Buf( buf => 'full_ident', ), ],
                                                        method    => 'LOOKUP',
                                                        invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                ),
                                            ],
                                                code => ::Var(
                                                    namespace => [],
                                                    name      => 'prefix:<$>',
                                                    twigil    => '',
                                                    sigil     => '&',
                                                ),
                                                ), ],
                                        code => ::Var(
                                            namespace => [],
                                            name      => 'make',
                                            twigil    => '',
                                            sigil     => '&',
                                        ),
                                        ), ],
                                sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                ),
                                pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                ),
                                CATCH => '',
                                state => {}, ),
                            ), ], ),
                ::Rule::Concat( concat => [ ::Rule::Constant( constant => '', ),
                        ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Val::Buf( buf => '', ),
                                    ],
                                        code => ::Var(
                                            namespace => [],
                                            name      => 'make',
                                            twigil    => '',
                                            sigil     => '&',
                                        ),
                                        ), ],
                                sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                ),
                                pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                ),
                                CATCH => '',
                                state => {}, ),
                            ), ], ), ], ),
        sym  => '',
        name => 'opt_type', ),
    ::Token( regex => ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::Constant( constant => ':from<perl5>', ),
                        ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Val::Int( int => '1', ),
                                    ],
                                        code => ::Var(
                                            namespace => [],
                                            name      => 'make',
                                            twigil    => '',
                                            sigil     => '&',
                                        ),
                                        ), ],
                                sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                ),
                                pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                ),
                                CATCH => '',
                                state => {}, ),
                            ), ], ),
                ::Rule::Concat( concat => [ ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Val::Int( int => '0', ),
                                    ],
                                        code => ::Var(
                                            namespace => [],
                                            name      => 'make',
                                            twigil    => '',
                                            sigil     => '&',
                                        ),
                                        ), ],
                                sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                ),
                                pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                ),
                                CATCH => '',
                                state => {}, ),
                            ), ], ), ], ),
        sym  => '',
        name => 'use_from_perl5', ),
    ::Token( regex => ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::SpecialChar( char => '$', ),
                        ], ),
                ::Rule::Concat( concat => [ ::Rule::SpecialChar( char => '%', ),
                        ], ),
                ::Rule::Concat( concat => [ ::Rule::SpecialChar( char => '@', ),
                        ], ),
                ::Rule::Concat( concat => [ ::Rule::SpecialChar( char => '&', ),
                        ], ), ], ),
        sym  => '',
        name => 'sigil', ),
    ::Token( regex => ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::SpecialChar( char => '.', ),
                                        ], ),
                                ::Rule::Concat( concat => [ ::Rule::SpecialChar( char => '!', ),
                                        ], ),
                                ::Rule::Concat( concat => [ ::Rule::SpecialChar( char => '^', ),
                                        ], ),
                                ::Rule::Concat( concat => [ ::Rule::SpecialChar( char => '*', ),
                                        ], ), ], ), ], ),
                ::Rule::Concat( concat => [ ::Rule::Constant( constant => '', ),
                        ], ), ], ),
        sym  => '',
        name => 'twigil', ),
    ::Token( regex => ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::Subrule(
                            capture_to_array => '',
                            metasyntax       => 'sigil',
                            ident            => '',
                    ),
                        ::Rule::Subrule(
                            capture_to_array => '',
                            metasyntax       => 'twigil',
                            ident            => '',
                        ),
                        ::Rule::Subrule(
                            capture_to_array => '',
                            metasyntax       => 'namespace',
                            ident            => '',
                        ),
                        ::Rule::Subrule(
                            capture_to_array => '',
                            metasyntax       => 'ident',
                            ident            => '',
                        ),
                        ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Call(
                                                hyper     => '',
                                                arguments => [ ::Lit::NamedArgument(
                                                        value => ::Apply(
                                                            arguments => [ ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'sigil', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ), ],
                                                            code => ::Var( namespace => [], name => 'prefix:<~>', twigil => '', sigil => '&', ),
                                                        ),
                                                        key => ::Val::Buf( buf => 'sigil', ),
                                                ),
                                                    ::Lit::NamedArgument(
                                                        value => ::Apply(
                                                            arguments =>
                                                                [ ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'twigil', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ), ],
                                                            code => ::Var( namespace => [], name => 'prefix:<~>', twigil => '', sigil => '&', ),
                                                        ),
                                                        key => ::Val::Buf( buf => 'twigil', ),
                                                    ),
                                                    ::Lit::NamedArgument(
                                                        value => ::Apply(
                                                            arguments => [ ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'ident', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ), ],
                                                            code => ::Var( namespace => [], name => 'prefix:<~>', twigil => '', sigil => '&', ),
                                                        ),
                                                        key => ::Val::Buf( buf => 'name', ),
                                                    ),
                                                    ::Lit::NamedArgument(
                                                        value => ::Apply(
                                                            arguments =>
                                                                [ ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'namespace', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ), ],
                                                            code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                        ),
                                                        key => ::Val::Buf( buf => 'namespace', ),
                                                    ),
                                                ],
                                                method   => 'new',
                                                invocant => ::Proto( name => 'Var', ),
                                                ), ],
                                        code => ::Var(
                                            namespace => [],
                                            name      => 'make',
                                            twigil    => '',
                                            sigil     => '&',
                                        ),
                                        ), ],
                                sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                ),
                                pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                ),
                                CATCH => '',
                                state => {}, ),
                            ), ], ), ], ),
        sym  => '',
        name => 'undeclared_var', ),
    ::Token( regex => ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::Subrule(
                            capture_to_array => '',
                            metasyntax       => 'sigil',
                            ident            => '',
                    ),
                        ::Rule::Constant( constant => '/', ),
                        ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Call(
                                                hyper     => '',
                                                arguments => [ ::Lit::NamedArgument(
                                                        value => ::Apply(
                                                            arguments => [ ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'sigil', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ), ],
                                                            code => ::Var( namespace => [], name => 'prefix:<~>', twigil => '', sigil => '&', ),
                                                        ),
                                                        key => ::Val::Buf( buf => 'sigil', ),
                                                ),
                                                    ::Lit::NamedArgument(
                                                        value => ::Val::Buf( buf => '', ),
                                                        key   => ::Val::Buf( buf => 'twigil', ),
                                                    ),
                                                    ::Lit::NamedArgument(
                                                        value => ::Val::Buf( buf => '/', ),
                                                        key   => ::Val::Buf( buf => 'name', ),
                                                    ),
                                                    ::Lit::NamedArgument(
                                                        value => ::Call( hyper   => '', arguments => [ ::Lit::Array( array => [], ), ], method => 'new', invocant => ::Proto( name => 'Array', ), ),
                                                        key   => ::Val::Buf( buf => 'namespace', ),
                                                    ),
                                                ],
                                                method   => 'new',
                                                invocant => ::Proto( name => 'Var', ),
                                                ), ],
                                        code => ::Var(
                                            namespace => [],
                                            name      => 'make',
                                            twigil    => '',
                                            sigil     => '&',
                                        ),
                                        ), ],
                                sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                ),
                                pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                ),
                                CATCH => '',
                                state => {}, ),
                            ), ], ),
                ::Rule::Concat( concat => [ ::Rule::Subrule(
                            capture_to_array => '',
                            metasyntax       => 'sigil',
                            ident            => '',
                    ),
                        ::Rule::Subrule(
                            capture_to_array => '',
                            metasyntax       => 'twigil',
                            ident            => '',
                        ),
                        ::Rule::Subrule(
                            capture_to_array => '',
                            metasyntax       => 'namespace',
                            ident            => '',
                        ),
                        ::Rule::Subrule(
                            capture_to_array => '',
                            metasyntax       => 'ident',
                            ident            => '',
                        ),
                        ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Apply( arguments => [ ::Call(
                                                        hyper     => '',
                                                        arguments => [
                                                            ::Lit::NamedArgument(
                                                                value => ::Apply(
                                                                    arguments =>
                                                                        [ ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'sigil', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ), ],
                                                                    code => ::Var( namespace => [], name => 'prefix:<~>', twigil => '', sigil => '&', ),
                                                                ),
                                                                key => ::Val::Buf( buf => 'sigil', ),
                                                            ),
                                                            ::Lit::NamedArgument(
                                                                value => ::Apply(
                                                                    arguments =>
                                                                        [ ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'twigil', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ), ],
                                                                    code => ::Var( namespace => [], name => 'prefix:<~>', twigil => '', sigil => '&', ),
                                                                ),
                                                                key => ::Val::Buf( buf => 'twigil', ),
                                                            ),
                                                            ::Lit::NamedArgument(
                                                                value => ::Apply(
                                                                    arguments =>
                                                                        [ ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'ident', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ), ],
                                                                    code => ::Var( namespace => [], name => 'prefix:<~>', twigil => '', sigil => '&', ),
                                                                ),
                                                                key => ::Val::Buf( buf => 'name', ),
                                                            ),
                                                            ::Lit::NamedArgument(
                                                                value => ::Apply(
                                                                    arguments => [
                                                                        ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'namespace', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ),
                                                                    ],
                                                                    code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                ),
                                                                key => ::Val::Buf( buf => 'namespace', ),
                                                            ),
                                                        ],
                                                        method   => 'new',
                                                        invocant => ::Proto( name => 'Var', ),
                                                ),
                                            ],
                                                code => ::Var( namespace => [ 'COMPILER', ],
                                                    name   => 'get_var',
                                                    twigil => '',
                                                    sigil  => '&', ),
                                                ), ],
                                        code => ::Var(
                                            namespace => [],
                                            name      => 'make',
                                            twigil    => '',
                                            sigil     => '&',
                                        ),
                                        ), ],
                                sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                ),
                                pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                ),
                                CATCH => '',
                                state => {}, ),
                            ), ], ), ], ),
        sym  => '',
        name => 'var', ),
    ::Token( regex => ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::Subrule(
                            capture_to_array => '',
                            metasyntax       => 'val_undef',
                            ident            => '',
                    ),
                        ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Apply( arguments => [ ::Call(
                                                        hyper     => '',
                                                        arguments => [ ::Val::Buf( buf => 'val_undef', ), ],
                                                        method    => 'LOOKUP',
                                                        invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                ),
                                            ],
                                                code => ::Var(
                                                    namespace => [],
                                                    name      => 'prefix:<$>',
                                                    twigil    => '',
                                                    sigil     => '&',
                                                ),
                                                ), ],
                                        code => ::Var(
                                            namespace => [],
                                            name      => 'make',
                                            twigil    => '',
                                            sigil     => '&',
                                        ),
                                        ), ],
                                sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                ),
                                pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                ),
                                CATCH => '',
                                state => {}, ),
                            ), ], ),
                ::Rule::Concat( concat => [ ::Rule::Subrule(
                            capture_to_array => '',
                            metasyntax       => 'val_int',
                            ident            => '',
                    ),
                        ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Apply( arguments => [ ::Call(
                                                        hyper     => '',
                                                        arguments => [ ::Val::Buf( buf => 'val_int', ), ],
                                                        method    => 'LOOKUP',
                                                        invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                ),
                                            ],
                                                code => ::Var(
                                                    namespace => [],
                                                    name      => 'prefix:<$>',
                                                    twigil    => '',
                                                    sigil     => '&',
                                                ),
                                                ), ],
                                        code => ::Var(
                                            namespace => [],
                                            name      => 'make',
                                            twigil    => '',
                                            sigil     => '&',
                                        ),
                                        ), ],
                                sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                ),
                                pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                ),
                                CATCH => '',
                                state => {}, ),
                            ), ], ),
                ::Rule::Concat( concat => [ ::Rule::Subrule(
                            capture_to_array => '',
                            metasyntax       => 'val_bit',
                            ident            => '',
                    ),
                        ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Apply( arguments => [ ::Call(
                                                        hyper     => '',
                                                        arguments => [ ::Val::Buf( buf => 'val_bit', ), ],
                                                        method    => 'LOOKUP',
                                                        invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                ),
                                            ],
                                                code => ::Var(
                                                    namespace => [],
                                                    name      => 'prefix:<$>',
                                                    twigil    => '',
                                                    sigil     => '&',
                                                ),
                                                ), ],
                                        code => ::Var(
                                            namespace => [],
                                            name      => 'make',
                                            twigil    => '',
                                            sigil     => '&',
                                        ),
                                        ), ],
                                sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                ),
                                pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                ),
                                CATCH => '',
                                state => {}, ),
                            ), ], ),
                ::Rule::Concat( concat => [ ::Rule::Subrule(
                            capture_to_array => '',
                            metasyntax       => 'val_num',
                            ident            => '',
                    ),
                        ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Apply( arguments => [ ::Call(
                                                        hyper     => '',
                                                        arguments => [ ::Val::Buf( buf => 'val_num', ), ],
                                                        method    => 'LOOKUP',
                                                        invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                ),
                                            ],
                                                code => ::Var(
                                                    namespace => [],
                                                    name      => 'prefix:<$>',
                                                    twigil    => '',
                                                    sigil     => '&',
                                                ),
                                                ), ],
                                        code => ::Var(
                                            namespace => [],
                                            name      => 'make',
                                            twigil    => '',
                                            sigil     => '&',
                                        ),
                                        ), ],
                                sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                ),
                                pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                ),
                                CATCH => '',
                                state => {}, ),
                            ), ], ),
                ::Rule::Concat( concat => [ ::Rule::Subrule(
                            capture_to_array => '',
                            metasyntax       => 'val_buf',
                            ident            => '',
                    ),
                        ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Apply( arguments => [ ::Call(
                                                        hyper     => '',
                                                        arguments => [ ::Val::Buf( buf => 'val_buf', ), ],
                                                        method    => 'LOOKUP',
                                                        invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                ),
                                            ],
                                                code => ::Var(
                                                    namespace => [],
                                                    name      => 'prefix:<$>',
                                                    twigil    => '',
                                                    sigil     => '&',
                                                ),
                                                ), ],
                                        code => ::Var(
                                            namespace => [],
                                            name      => 'make',
                                            twigil    => '',
                                            sigil     => '&',
                                        ),
                                        ), ],
                                sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                ),
                                pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                ),
                                CATCH => '',
                                state => {}, ),
                            ), ], ), ], ),
        sym  => '',
        name => 'val', ),
    ::Token( regex => ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::Constant( constant => 'T', ),
                        ::Rule::Constant( constant => 'r', ),
                        ::Rule::Constant( constant => 'u', ),
                        ::Rule::Constant( constant => 'e', ),
                        ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Call(
                                                hyper     => '',
                                                arguments => [ ::Lit::Pair(
                                                        value => ::Val::Int( int => '1', ),
                                                        key   => ::Val::Buf( buf => 'bit', ),
                                                ),
                                                ],
                                                method   => 'new',
                                                invocant => ::Proto( name => 'Val::Bit', ),
                                                ), ],
                                        code => ::Var(
                                            namespace => [],
                                            name      => 'make',
                                            twigil    => '',
                                            sigil     => '&',
                                        ),
                                        ), ],
                                sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                ),
                                pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                ),
                                CATCH => '',
                                state => {}, ),
                            ), ], ),
                ::Rule::Concat( concat => [ ::Rule::Constant( constant => 'F', ),
                        ::Rule::Constant( constant => 'a', ),
                        ::Rule::Constant( constant => 'l', ),
                        ::Rule::Constant( constant => 's', ),
                        ::Rule::Constant( constant => 'e', ),
                        ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Call(
                                                hyper     => '',
                                                arguments => [ ::Lit::Pair(
                                                        value => ::Val::Int( int => '0', ),
                                                        key   => ::Val::Buf( buf => 'bit', ),
                                                ),
                                                ],
                                                method   => 'new',
                                                invocant => ::Proto( name => 'Val::Bit', ),
                                                ), ],
                                        code => ::Var(
                                            namespace => [],
                                            name      => 'make',
                                            twigil    => '',
                                            sigil     => '&',
                                        ),
                                        ), ],
                                sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                ),
                                pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                ),
                                CATCH => '',
                                state => {}, ),
                            ), ], ), ], ),
        sym  => '',
        name => 'val_bit', ),
    ::Token( regex => ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::Constant( constant => 'u', ),
                        ::Rule::Constant( constant => 'n', ),
                        ::Rule::Constant( constant => 'd', ),
                        ::Rule::Constant( constant => 'e', ),
                        ::Rule::Constant( constant => 'f', ),
                        ::Rule::Before(
                            assertion_modifier => '!',
                            capture_to_array   => '',
                            rule               => ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::SpecialChar( char => 'w', ),
                                            ], ), ], ),
                        ),
                        ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Call(
                                                hyper     => '',
                                                arguments => [],
                                                method    => 'new',
                                                invocant  => ::Proto( name => 'Val::Undef', ),
                                                ), ],
                                        code => ::Var(
                                            namespace => [],
                                            name      => 'make',
                                            twigil    => '',
                                            sigil     => '&',
                                        ),
                                        ), ],
                                sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                ),
                                pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                ),
                                CATCH => '',
                                state => {}, ),
                            ), ], ), ], ),
        sym  => '',
        name => 'val_undef', ),
    ::Token( regex => ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::Constant( constant => 'X', ),
                        ::Rule::Constant( constant => 'X', ),
                        ::Rule::Constant( constant => 'X', ),
                        ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Val::Buf( buf => 'TODO: val_num', ),
                                    ],
                                        code => ::Var(
                                            namespace => [],
                                            name      => 'make',
                                            twigil    => '',
                                            sigil     => '&',
                                        ),
                                        ), ],
                                sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                ),
                                pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                ),
                                CATCH => '',
                                state => {}, ),
                            ), ], ), ], ),
        sym  => '',
        name => 'val_num', ),
    ::Token( regex => ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::SpecialChar( char => 'd', ),
                        ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::Subrule(
                                            capture_to_array => '',
                                            metasyntax       => 'digits',
                                            ident            => '',
                                    ),
                                        ], ),
                                ::Rule::Concat( concat => [ ::Rule::Constant( constant => '', ),
                                        ], ), ], ), ], ), ], ),
        sym  => '',
        name => 'digits', ),
    ::Token( regex => ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::Subrule(
                            capture_to_array => '',
                            metasyntax       => 'digits',
                            ident            => '',
                    ),
                        ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Call(
                                                hyper     => '',
                                                arguments => [ ::Lit::Pair(
                                                        value => ::Apply( arguments => [ ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ], code => ::Var( namespace => [], name => 'prefix:<~>', twigil => '', sigil => '&', ), ),
                                                        key   => ::Val::Buf( buf    => 'int', ),
                                                ),
                                                ],
                                                method   => 'new',
                                                invocant => ::Proto( name => 'Val::Int', ),
                                                ), ],
                                        code => ::Var(
                                            namespace => [],
                                            name      => 'make',
                                            twigil    => '',
                                            sigil     => '&',
                                        ),
                                        ), ],
                                sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                ),
                                pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                ),
                                CATCH => '',
                                state => {}, ),
                            ), ], ), ], ),
        sym  => '',
        name => 'val_int', ),
    ::Token( regex => ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::Subrule(
                            capture_to_array => '',
                            metasyntax       => 'exp',
                            ident            => '',
                    ),
                        ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                        ::Rule::SpecialChar( char => ',', ),
                                        ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                        ::Rule::Subrule(
                                            capture_to_array => '',
                                            metasyntax       => 'exp_seq',
                                            ident            => '',
                                        ),
                                        ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                        ::Rule::Or( or => [ ::Rule::Concat(
                                                    concat => [ ::Rule::SpecialChar( char => ',', ),
                                                        ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                                    ],
                                            ),
                                                ::Rule::Concat( concat => [ ::Rule::Constant( constant => '', ), ],
                                                    ), ], ),
                                        ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply(
                                                        arguments => [
                                                            ::Call(
                                                                hyper     => '',
                                                                arguments => [
                                                                    ::Lit::Array(
                                                                        array => [
                                                                            ::Apply(
                                                                                arguments => [
                                                                                    ::Call(
                                                                                        hyper     => '',
                                                                                        arguments => [ ::Val::Buf( buf => 'exp', ), ],
                                                                                        method    => 'LOOKUP',
                                                                                        invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                    ),
                                                                                ],
                                                                                code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                            ),
                                                                            ::Call(
                                                                                hyper     => '',
                                                                                arguments => '',
                                                                                method    => 'values',
                                                                                invocant  => ::Apply(
                                                                                    arguments => [
                                                                                        ::Call(
                                                                                            hyper     => '',
                                                                                            arguments => [ ::Val::Buf( buf => 'exp_seq', ), ],
                                                                                            method    => 'LOOKUP',
                                                                                            invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                        ),
                                                                                    ],
                                                                                    code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                                ),
                                                                            ),
                                                                        ],
                                                                    ),
                                                                ],
                                                                method   => 'new',
                                                                invocant => ::Proto( name => 'Array', ),
                                                            ),
                                                        ],
                                                        code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                                ),
                                            ],
                                                sig => ::Sig(
                                                    invocant   => '',
                                                    positional => [],
                                                ),
                                                pad => ::Pad(
                                                    lexicals  => [],
                                                    namespace => "KindaPerl6::Grammar",
                                                    parent    => ::Pad(...),
                                                    evaluator => ::Sub(...),
                                                ),
                                                CATCH => '',
                                                state => {}, ),
                                            ), ], ),
                                ::Rule::Concat( concat => [ ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                        ::Rule::Or( or => [ ::Rule::Concat(
                                                    concat => [ ::Rule::SpecialChar( char => ',', ),
                                                        ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                                    ],
                                            ),
                                                ::Rule::Concat( concat => [ ::Rule::Constant( constant => '', ), ],
                                                    ), ], ),
                                        ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply(
                                                        arguments => [
                                                            ::Call(
                                                                hyper     => '',
                                                                arguments => [
                                                                    ::Lit::Array(
                                                                        array => [
                                                                            ::Apply(
                                                                                arguments => [
                                                                                    ::Call(
                                                                                        hyper     => '',
                                                                                        arguments => [ ::Val::Buf( buf => 'exp', ), ],
                                                                                        method    => 'LOOKUP',
                                                                                        invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                    ),
                                                                                ],
                                                                                code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                            ),
                                                                        ],
                                                                    ),
                                                                ],
                                                                method   => 'new',
                                                                invocant => ::Proto( name => 'Array', ),
                                                            ),
                                                        ],
                                                        code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                                ),
                                            ],
                                                sig => ::Sig(
                                                    invocant   => '',
                                                    positional => [],
                                                ),
                                                pad => ::Pad(
                                                    lexicals  => [],
                                                    namespace => "KindaPerl6::Grammar",
                                                    parent    => ::Pad(...),
                                                    evaluator => ::Sub(...),
                                                ),
                                                CATCH => '',
                                                state => {}, ),
                                            ), ], ), ], ), ], ),
                ::Rule::Concat( concat => [ ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Call(
                                                hyper     => '',
                                                arguments => [ ::Lit::Array( array => [], ),
                                                ],
                                                method   => 'new',
                                                invocant => ::Proto( name => 'Array', ),
                                                ), ],
                                        code => ::Var(
                                            namespace => [],
                                            name      => 'make',
                                            twigil    => '',
                                            sigil     => '&',
                                        ),
                                        ), ],
                                sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                ),
                                pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                ),
                                CATCH => '',
                                state => {}, ),
                            ), ], ), ], ),
        sym  => '',
        name => 'exp_seq', ),
    ::Token( regex => ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::Subrule(
                            capture_to_array => '',
                            metasyntax       => 'namespace',
                            ident            => '',
                    ),
                        ::Rule::Subrule(
                            capture_to_array => '',
                            metasyntax       => 'ident',
                            ident            => '',
                        ),
                        ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::Or( or => [ ::Rule::Concat(
                                                    concat => [ ::Rule::SpecialChar( char => '(', ),
                                                        ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                                        ::Rule::Subrule( capture_to_array => '', metasyntax => 'exp_parameter_list', ident => '', ),
                                                        ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                                        ::Rule::SpecialChar( char => ')', ),
                                                    ],
                                            ),
                                                ::Rule::Concat(
                                                    concat => [ ::Rule::SubruleNoCapture( metasyntax => 'ws', ),
                                                        ::Rule::Subrule( capture_to_array => '', metasyntax => 'exp_parameter_list', ident => '', ),
                                                        ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                                    ],
                                                    ), ], ),
                                        ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply(
                                                        arguments => [
                                                            ::Call(
                                                                hyper     => '',
                                                                arguments => [
                                                                    ::Lit::Pair(
                                                                        value => ::Apply(
                                                                            arguments => [
                                                                                ::Call(
                                                                                    hyper     => '',
                                                                                    arguments => [
                                                                                        ::Lit::NamedArgument( value => ::Val::Buf( buf => '&', ), key => ::Val::Buf( buf => 'sigil', ), ),
                                                                                        ::Lit::NamedArgument( value => ::Val::Buf( buf => '', ),  key => ::Val::Buf( buf => 'twigil', ), ),
                                                                                        ::Lit::NamedArgument(
                                                                                            value => ::Apply(
                                                                                                arguments => [
                                                                                                    ::Call(
                                                                                                        hyper     => '',
                                                                                                        arguments => [ ::Val::Buf( buf => 'ident', ), ],
                                                                                                        method    => 'LOOKUP',
                                                                                                        invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                                    ),
                                                                                                ],
                                                                                                code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                                            ),
                                                                                            key => ::Val::Buf( buf => 'name', ),
                                                                                        ),
                                                                                        ::Lit::NamedArgument(
                                                                                            value => ::Apply(
                                                                                                arguments => [
                                                                                                    ::Call(
                                                                                                        hyper     => '',
                                                                                                        arguments => [ ::Val::Buf( buf => 'namespace', ), ],
                                                                                                        method    => 'LOOKUP',
                                                                                                        invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                                    ),
                                                                                                ],
                                                                                                code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                                            ),
                                                                                            key => ::Val::Buf( buf => 'namespace', ),
                                                                                        ),
                                                                                    ],
                                                                                    method   => 'new',
                                                                                    invocant => ::Proto( name => 'Var', ),
                                                                                ),
                                                                            ],
                                                                            code => ::Var( namespace => [ 'COMPILER', ], name => 'get_var', twigil => '', sigil => '&', ),
                                                                        ),
                                                                        key => ::Val::Buf( buf => 'code', ),
                                                                    ),
                                                                    ::Lit::Pair(
                                                                        value => ::Apply(
                                                                            arguments => [
                                                                                ::Call(
                                                                                    hyper     => '',
                                                                                    arguments => [ ::Val::Buf( buf => 'exp_parameter_list', ), ],
                                                                                    method    => 'LOOKUP',
                                                                                    invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                ),
                                                                            ],
                                                                            code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                        ),
                                                                        key => ::Val::Buf( buf => 'arguments', ),
                                                                    ),
                                                                ],
                                                                method   => 'new',
                                                                invocant => ::Proto( name => 'Apply', ),
                                                            ),
                                                        ],
                                                        code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                                ),
                                            ],
                                                sig => ::Sig(
                                                    invocant   => '',
                                                    positional => [],
                                                ),
                                                pad => ::Pad(
                                                    lexicals  => [],
                                                    namespace => "KindaPerl6::Grammar",
                                                    parent    => ::Pad(...),
                                                    evaluator => ::Sub(...),
                                                ),
                                                CATCH => '',
                                                state => {}, ),
                                            ), ], ),
                                ::Rule::Concat( concat => [ ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply(
                                                        arguments => [
                                                            ::Call(
                                                                hyper     => '',
                                                                arguments => [
                                                                    ::Lit::Pair(
                                                                        value => ::Apply(
                                                                            arguments => [
                                                                                ::Call(
                                                                                    hyper     => '',
                                                                                    arguments => [
                                                                                        ::Lit::NamedArgument( value => ::Val::Buf( buf => '&', ), key => ::Val::Buf( buf => 'sigil', ), ),
                                                                                        ::Lit::NamedArgument( value => ::Val::Buf( buf => '', ),  key => ::Val::Buf( buf => 'twigil', ), ),
                                                                                        ::Lit::NamedArgument(
                                                                                            value => ::Apply(
                                                                                                arguments => [
                                                                                                    ::Call(
                                                                                                        hyper     => '',
                                                                                                        arguments => [ ::Val::Buf( buf => 'ident', ), ],
                                                                                                        method    => 'LOOKUP',
                                                                                                        invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                                    ),
                                                                                                ],
                                                                                                code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                                            ),
                                                                                            key => ::Val::Buf( buf => 'name', ),
                                                                                        ),
                                                                                        ::Lit::NamedArgument(
                                                                                            value => ::Apply(
                                                                                                arguments => [
                                                                                                    ::Call(
                                                                                                        hyper     => '',
                                                                                                        arguments => [ ::Val::Buf( buf => 'namespace', ), ],
                                                                                                        method    => 'LOOKUP',
                                                                                                        invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                                    ),
                                                                                                ],
                                                                                                code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                                            ),
                                                                                            key => ::Val::Buf( buf => 'namespace', ),
                                                                                        ),
                                                                                    ],
                                                                                    method   => 'new',
                                                                                    invocant => ::Proto( name => 'Var', ),
                                                                                ),
                                                                            ],
                                                                            code => ::Var( namespace => [ 'COMPILER', ], name => 'get_var', twigil => '', sigil => '&', ),
                                                                        ),
                                                                        key => ::Val::Buf( buf => 'code', ),
                                                                    ),
                                                                    ::Lit::Pair(
                                                                        value => ::Call( hyper   => '', arguments => [ ::Lit::Array( array => [], ), ], method => 'new', invocant => ::Proto( name => 'Array', ), ),
                                                                        key   => ::Val::Buf( buf => 'arguments', ),
                                                                    ),
                                                                ],
                                                                method   => 'new',
                                                                invocant => ::Proto( name => 'Apply', ),
                                                            ),
                                                        ],
                                                        code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                                ),
                                            ],
                                                sig => ::Sig(
                                                    invocant   => '',
                                                    positional => [],
                                                ),
                                                pad => ::Pad(
                                                    lexicals  => [],
                                                    namespace => "KindaPerl6::Grammar",
                                                    parent    => ::Pad(...),
                                                    evaluator => ::Sub(...),
                                                ),
                                                CATCH => '',
                                                state => {}, ),
                                            ), ], ), ], ), ], ), ], ),
        sym  => '',
        name => 'apply', ),
    ::Token( regex => ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::Subrule(
                            capture_to_array => '',
                            metasyntax       => 'ident',
                            ident            => '',
                    ),
                        ], ),
                ::Rule::Concat( concat => [ ::Rule::Constant( constant => '', ),
                        ], ), ], ),
        sym  => '',
        name => 'opt_name', ),
    ::Token( regex => ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::Subrule(
                            capture_to_array => '',
                            metasyntax       => 'var',
                            ident            => '',
                    ),
                        ::Rule::SpecialChar( char => ':', ),
                        ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Apply( arguments => [ ::Call(
                                                        hyper     => '',
                                                        arguments => [ ::Val::Buf( buf => 'var', ), ],
                                                        method    => 'LOOKUP',
                                                        invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                ),
                                            ],
                                                code => ::Var(
                                                    namespace => [],
                                                    name      => 'prefix:<$>',
                                                    twigil    => '',
                                                    sigil     => '&',
                                                ),
                                                ), ],
                                        code => ::Var(
                                            namespace => [],
                                            name      => 'make',
                                            twigil    => '',
                                            sigil     => '&',
                                        ),
                                        ), ],
                                sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                ),
                                pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                ),
                                CATCH => '',
                                state => {}, ),
                            ), ], ),
                ::Rule::Concat( concat => [ ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Val::Undef(), ],
                                        code => ::Var(
                                            namespace => [],
                                            name      => 'make',
                                            twigil    => '',
                                            sigil     => '&',
                                        ),
                                        ), ],
                                sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                ),
                                pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                ),
                                CATCH => '',
                                state => {}, ),
                            ), ], ), ], ),
        sym  => '',
        name => 'invocant', ),
    ::Token( regex => ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::Subrule(
                            capture_to_array => '',
                            metasyntax       => 'exp',
                            ident            => '',
                    ),
                        ::Rule::SpecialChar( char => ':', ),
                        ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                        ::Rule::Subrule(
                            capture_to_array => '',
                            metasyntax       => 'exp_parameter_list',
                            ident            => '',
                        ),
                        ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Call(
                                                hyper     => '',
                                                arguments => [ ::Lit::Pair(
                                                        value => ::Apply(
                                                            arguments => [ ::Call( hyper  => '', arguments => [ ::Val::Buf( buf => 'exp', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ), ],
                                                            code      => ::Var( namespace => [], name      => 'prefix:<$>',     twigil          => '', sigil        => '&', ),
                                                        ),
                                                        key => ::Val::Buf( buf => 'invocant', ),
                                                ),
                                                    ::Lit::Pair(
                                                        value => ::Apply(
                                                            arguments => [
                                                                ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'exp_parameter_list', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ),
                                                            ],
                                                            code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                        ),
                                                        key => ::Val::Buf( buf => 'array', ),
                                                    ),
                                                    ::Lit::Pair(
                                                        value => ::Call( hyper   => '', arguments => [ ::Lit::Array( array => [], ), ], method => 'new', invocant => ::Proto( name => 'Array', ), ),
                                                        key   => ::Val::Buf( buf => 'hash', ),
                                                    ),
                                                ],
                                                method   => 'new',
                                                invocant => ::Proto( name => 'Lit::Capture', ),
                                                ), ],
                                        code => ::Var(
                                            namespace => [],
                                            name      => 'make',
                                            twigil    => '',
                                            sigil     => '&',
                                        ),
                                        ), ],
                                sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                ),
                                pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                ),
                                CATCH => '',
                                state => {}, ),
                            ), ], ),
                ::Rule::Concat( concat => [ ::Rule::Subrule(
                            capture_to_array => '',
                            metasyntax       => 'exp_mapping',
                            ident            => '',
                    ),
                        ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Call(
                                                hyper     => '',
                                                arguments => [ ::Lit::Pair(
                                                        value => ::Val::Undef(),
                                                        key   => ::Val::Buf( buf => 'invocant', ),
                                                ),
                                                    ::Lit::Pair(
                                                        value => ::Call( hyper   => '', arguments => [ ::Lit::Array( array => [], ), ], method => 'new', invocant => ::Proto( name => 'Array', ), ),
                                                        key   => ::Val::Buf( buf => 'array', ),
                                                    ),
                                                    ::Lit::Pair(
                                                        value => ::Apply(
                                                            arguments =>
                                                                [ ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'exp_mapping', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ), ],
                                                            code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                        ),
                                                        key => ::Val::Buf( buf => 'hash', ),
                                                    ),
                                                ],
                                                method   => 'new',
                                                invocant => ::Proto( name => 'Lit::Capture', ),
                                                ), ],
                                        code => ::Var(
                                            namespace => [],
                                            name      => 'make',
                                            twigil    => '',
                                            sigil     => '&',
                                        ),
                                        ), ],
                                sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                ),
                                pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                ),
                                CATCH => '',
                                state => {}, ),
                            ), ], ), ], ),
        sym  => '',
        name => 'capture', ),
    ::Token( regex => ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::Subrule(
                            capture_to_array => '',
                            metasyntax       => 'full_ident',
                            ident            => '',
                    ),
                        ], ), ], ),
        sym  => '',
        name => 'base_class', ),
    ::Token( regex => ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::Constant( constant => 's', ),
                        ::Rule::Constant( constant => 'u', ),
                        ::Rule::Constant( constant => 'b', ),
                        ::Rule::Constant( constant => 's', ),
                        ::Rule::Constant( constant => 'e', ),
                        ::Rule::Constant( constant => 't', ),
                        ::Rule::SubruleNoCapture( metasyntax => 'ws', ),
                        ::Rule::Subrule(
                            capture_to_array => '',
                            metasyntax       => 'full_ident',
                            ident            => '',
                        ),
                        ::Rule::SubruleNoCapture( metasyntax => 'ws', ),
                        ::Rule::Constant( constant => 'o', ),
                        ::Rule::Constant( constant => 'f', ),
                        ::Rule::SubruleNoCapture( metasyntax => 'ws', ),
                        ::Rule::Subrule(
                            capture_to_array => '',
                            metasyntax       => 'base_class',
                            ident            => '',
                        ),
                        ::Rule::SubruleNoCapture( metasyntax => 'ws', ),
                        ::Rule::Constant( constant => 'w', ),
                        ::Rule::Constant( constant => 'h', ),
                        ::Rule::Constant( constant => 'e', ),
                        ::Rule::Constant( constant => 'r', ),
                        ::Rule::Constant( constant => 'e', ),
                        ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                        ::Rule::SpecialChar( char => '{', ),
                        ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                        ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply(
                                        arguments => [],
                                        code      => ::Var( namespace => [ 'COMPILER', ],
                                            name   => 'add_pad',
                                            twigil => '',
                                            sigil  => '&', ),
                                        ), ],
                                sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                ),
                                pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                ),
                                CATCH => '',
                                state => {}, ),
                        ),
                        ::Rule::Subrule(
                            capture_to_array => '',
                            metasyntax       => 'exp_stmts',
                            ident            => '',
                        ),
                        ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                        ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::SpecialChar( char => '}', ),
                                        ], ),
                                ::Rule::Concat( concat => [ ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply(
                                                        arguments => [
                                                            ::Apply(
                                                                arguments => [ ::Val::Buf( buf => '*** Syntax Error in subset ', ), ::Val::Char( char => '39', ), ],
                                                                code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                            ),
                                                            ::Apply( arguments => [], code => ::Var( namespace => [], name => 'get_class_name', twigil => '', sigil => '&', ), ),
                                                            ::Val::Buf( buf => '.', ),
                                                            ::Apply(
                                                                arguments =>
                                                                    [ ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'name', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ), ],
                                                                code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                            ),
                                                            ::Apply( arguments => [ ::Val::Char( char => '39', ), ::Val::Buf( buf => ' near pos=', ), ], code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ), ),
                                                            ::Call( hyper => '', arguments => '', method => 'to', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ),
                                                        ],
                                                        code => ::Var( namespace => [], name => 'say', twigil => '', sigil => '&', ),
                                                ),
                                                    ::Apply(
                                                        arguments => [ ::Val::Buf( buf => 'error in Block', ), ],
                                                        code => ::Var( namespace => [], name => 'die', twigil => '', sigil => '&', ),
                                                    ),
                                            ],
                                                sig => ::Sig(
                                                    invocant   => '',
                                                    positional => [],
                                                ),
                                                pad => ::Pad(
                                                    lexicals  => [],
                                                    namespace => "KindaPerl6::Grammar",
                                                    parent    => ::Pad(...),
                                                    evaluator => ::Sub(...),
                                                ),
                                                CATCH => '',
                                                state => {}, ),
                                            ), ], ), ], ),
                        ::Rule::Block( closure => ::Lit::Code( body => [ ::Bind( parameters => ::Var(
                                            namespace => [],
                                            name      => 'env',
                                            twigil    => '',
                                            sigil     => '$',
                                    ),
                                        arguments => ::Apply(
                                            arguments => [],
                                            code      => ::Var( namespace => [ 'COMPILER', ],
                                                name   => 'current_pad',
                                                twigil => '',
                                                sigil  => '&', ),
                                            ), ),
                                    ::Apply(
                                        arguments => [],
                                        code      => ::Var( namespace => [ 'COMPILER', ],
                                            name   => 'drop_pad',
                                            twigil => '',
                                            sigil  => '&', ),
                                    ),
                                    ::Apply( arguments => [ ::Call(
                                                hyper     => '',
                                                arguments => [ ::Lit::Pair(
                                                        value => ::Apply(
                                                            arguments =>
                                                                [ ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'full_ident', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ), ],
                                                            code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                        ),
                                                        key => ::Val::Buf( buf => 'name', ),
                                                ),
                                                    ::Lit::Pair(
                                                        value => ::Call(
                                                            hyper     => '',
                                                            arguments => [
                                                                ::Lit::NamedArgument(
                                                                    value => ::Apply(
                                                                        arguments => [
                                                                            ::Call(
                                                                                hyper     => '',
                                                                                arguments => [ ::Val::Buf( buf => 'base_class', ), ],
                                                                                method    => 'LOOKUP',
                                                                                invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                            ),
                                                                        ],
                                                                        code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                    ),
                                                                    key => ::Val::Buf( buf => 'name', ),
                                                                ),
                                                            ],
                                                            method   => 'new',
                                                            invocant => ::Proto( name => 'Proto', ),
                                                        ),
                                                        key => ::Val::Buf( buf => 'base_class', ),
                                                    ),
                                                    ::Lit::Pair(
                                                        value => ::Call(
                                                            hyper     => '',
                                                            arguments => [
                                                                ::Lit::Pair( value => ::Val::Undef(), key => ::Val::Buf( buf => 'name', ), ),
                                                                ::Lit::Pair(
                                                                    value => ::Call(
                                                                        hyper     => '',
                                                                        arguments => [
                                                                            ::Lit::NamedArgument( value => ::Var( namespace => [], name => 'env', twigil => '', sigil => '$', ), key => ::Val::Buf( buf => 'pad', ), ),
                                                                            ::Lit::NamedArgument(
                                                                                value => ::Call( hyper   => '', arguments => [ ::Lit::Hash( hash => [], ), ], method => 'new', invocant => ::Proto( name => 'Hash', ), ),
                                                                                key   => ::Val::Buf( buf => 'state', ),
                                                                            ),
                                                                            ::Lit::NamedArgument(
                                                                                value => ::Call(
                                                                                    hyper     => '',
                                                                                    arguments => [
                                                                                        ::Lit::Pair( value => ::Val::Undef(), key => ::Val::Buf( buf => 'invocant', ), ),
                                                                                        ::Lit::Pair(
                                                                                            value => ::Call( hyper   => '', arguments => [ ::Lit::Array( array => [], ), ], method => 'new', invocant => ::Proto( name => 'Array', ), ),
                                                                                            key   => ::Val::Buf( buf => 'positional', ),
                                                                                        ),
                                                                                    ],
                                                                                    method   => 'new',
                                                                                    invocant => ::Proto( name => 'Sig', ),
                                                                                ),
                                                                                key => ::Val::Buf( buf => 'sig', ),
                                                                            ),
                                                                            ::Lit::NamedArgument(
                                                                                value => ::Apply(
                                                                                    arguments => [
                                                                                        ::Call(
                                                                                            hyper     => '',
                                                                                            arguments => [ ::Val::Buf( buf => 'exp_stmts', ), ],
                                                                                            method    => 'LOOKUP',
                                                                                            invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                        ),
                                                                                    ],
                                                                                    code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                                ),
                                                                                key => ::Val::Buf( buf => 'body', ),
                                                                            ),
                                                                        ],
                                                                        method   => 'new',
                                                                        invocant => ::Proto( name => 'Lit::Code', ),
                                                                    ),
                                                                    key => ::Val::Buf( buf => 'block', ),
                                                                ),
                                                            ],
                                                            method   => 'new',
                                                            invocant => ::Proto( name => 'Sub', ),
                                                        ),
                                                        key => ::Val::Buf( buf => 'block', ),
                                                    ),
                                                ],
                                                method   => 'new',
                                                invocant => ::Proto( name => 'Lit::Subset', ),
                                                ), ],
                                        code => ::Var(
                                            namespace => [],
                                            name      => 'make',
                                            twigil    => '',
                                            sigil     => '&',
                                        ),
                                        ), ],
                                sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                ),
                                pad => ::Pad( lexicals => [ ::Decl(
                                            decl => 'my',
                                            var  => ::Var(
                                                namespace => [],
                                                name      => 'env',
                                                twigil    => '',
                                                sigil     => '$',
                                            ),
                                            type => '',
                                            ) ],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...), ),
                                CATCH => '',
                                state => {}, ),
                            ), ], ), ], ),
        sym  => '',
        name => 'subset', ),
    ::Token( regex => ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::Constant( constant => 'B', ),
                        ::Rule::Constant( constant => 'E', ),
                        ::Rule::Constant( constant => 'G', ),
                        ::Rule::Constant( constant => 'I', ),
                        ::Rule::Constant( constant => 'N', ),
                        ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                        ::Rule::SpecialChar( char => '{', ),
                        ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                        ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply(
                                        arguments => [],
                                        code      => ::Var( namespace => [ 'COMPILER', ],
                                            name   => 'add_pad',
                                            twigil => '',
                                            sigil  => '&', ),
                                        ), ],
                                sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                ),
                                pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                ),
                                CATCH => '',
                                state => {}, ),
                        ),
                        ::Rule::Subrule(
                            capture_to_array => '',
                            metasyntax       => 'exp_stmts',
                            ident            => '',
                        ),
                        ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                        ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::SpecialChar( char => '}', ),
                                        ], ),
                                ::Rule::Concat( concat => [ ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply(
                                                        arguments => [
                                                            ::Val::Buf( buf => '*** Syntax Error in BEGIN near pos=', ),
                                                            ::Call( hyper => '', arguments => '', method => 'to', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ),
                                                        ],
                                                        code => ::Var( namespace => [], name => 'say', twigil => '', sigil => '&', ),
                                                ),
                                                    ::Apply(
                                                        arguments => [ ::Val::Buf( buf => 'error in Block', ), ],
                                                        code => ::Var( namespace => [], name => 'die', twigil => '', sigil => '&', ),
                                                    ),
                                            ],
                                                sig => ::Sig(
                                                    invocant   => '',
                                                    positional => [],
                                                ),
                                                pad => ::Pad(
                                                    lexicals  => [],
                                                    namespace => "KindaPerl6::Grammar",
                                                    parent    => ::Pad(...),
                                                    evaluator => ::Sub(...),
                                                ),
                                                CATCH => '',
                                                state => {}, ),
                                            ), ], ), ], ),
                        ::Rule::Block( closure => ::Lit::Code( body => [ ::Bind( parameters => ::Var(
                                            namespace => [],
                                            name      => 'env',
                                            twigil    => '',
                                            sigil     => '$',
                                    ),
                                        arguments => ::Apply(
                                            arguments => [],
                                            code      => ::Var( namespace => [ 'COMPILER', ],
                                                name   => 'current_pad',
                                                twigil => '',
                                                sigil  => '&', ),
                                            ), ),
                                    ::Apply(
                                        arguments => [],
                                        code      => ::Var( namespace => [ 'COMPILER', ],
                                            name   => 'drop_pad',
                                            twigil => '',
                                            sigil  => '&', ),
                                    ),
                                    ::Apply( arguments => [ ::Apply( arguments => [ ::Call(
                                                        hyper     => '',
                                                        arguments => [
                                                            ::Lit::NamedArgument( value => ::Var( namespace => [], name => 'env', twigil => '', sigil => '$', ), key => ::Val::Buf( buf => 'pad', ), ),
                                                            ::Lit::NamedArgument(
                                                                value => ::Call( hyper   => '', arguments => [ ::Lit::Hash( hash => [], ), ], method => 'new', invocant => ::Proto( name => 'Hash', ), ),
                                                                key   => ::Val::Buf( buf => 'state', ),
                                                            ),
                                                            ::Lit::NamedArgument(
                                                                value => ::Call(
                                                                    hyper     => '',
                                                                    arguments => [
                                                                        ::Lit::Pair( value => ::Val::Undef(), key => ::Val::Buf( buf => 'invocant', ), ),
                                                                        ::Lit::Pair(
                                                                            value => ::Call( hyper   => '', arguments => [ ::Lit::Array( array => [], ), ], method => 'new', invocant => ::Proto( name => 'Array', ), ),
                                                                            key   => ::Val::Buf( buf => 'positional', ),
                                                                        ),
                                                                    ],
                                                                    method   => 'new',
                                                                    invocant => ::Proto( name => 'Sig', ),
                                                                ),
                                                                key => ::Val::Buf( buf => 'sig', ),
                                                            ),
                                                            ::Lit::NamedArgument(
                                                                value => ::Apply(
                                                                    arguments => [
                                                                        ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'exp_stmts', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ),
                                                                    ],
                                                                    code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                ),
                                                                key => ::Val::Buf( buf => 'body', ),
                                                            ),
                                                        ],
                                                        method   => 'new',
                                                        invocant => ::Proto( name => 'Lit::Code', ),
                                                ),
                                            ],
                                                code => ::Var( namespace => [ 'COMPILER', ],
                                                    name   => 'begin_block',
                                                    twigil => '',
                                                    sigil  => '&', ),
                                                ), ],
                                        code => ::Var(
                                            namespace => [],
                                            name      => 'make',
                                            twigil    => '',
                                            sigil     => '&',
                                        ),
                                        ), ],
                                sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                ),
                                pad => ::Pad( lexicals => [ ::Decl(
                                            decl => 'my',
                                            var  => ::Var(
                                                namespace => [],
                                                name      => 'env',
                                                twigil    => '',
                                                sigil     => '$',
                                            ),
                                            type => '',
                                            ) ],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...), ),
                                CATCH => '',
                                state => {}, ),
                            ), ], ), ], ),
        sym  => '',
        name => 'begin_block', ),
    ::Token( regex => ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::Constant( constant => 'C', ),
                        ::Rule::Constant( constant => 'H', ),
                        ::Rule::Constant( constant => 'E', ),
                        ::Rule::Constant( constant => 'C', ),
                        ::Rule::Constant( constant => 'K', ),
                        ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                        ::Rule::SpecialChar( char => '{', ),
                        ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                        ::Rule::Subrule(
                            capture_to_array => '',
                            metasyntax       => 'exp_stmts',
                            ident            => '',
                        ),
                        ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                        ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::SpecialChar( char => '}', ),
                                        ], ),
                                ::Rule::Concat( concat => [ ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply(
                                                        arguments => [ ::Val::Buf( buf => '*** Syntax Error in CHECK block', ), ],
                                                        code => ::Var( namespace => [], name => 'say', twigil => '', sigil => '&', ),
                                                ),
                                                    ::Apply(
                                                        arguments => [ ::Val::Buf( buf => 'error in Block', ), ],
                                                        code => ::Var( namespace => [], name => 'die', twigil => '', sigil => '&', ),
                                                    ),
                                            ],
                                                sig => ::Sig(
                                                    invocant   => '',
                                                    positional => [],
                                                ),
                                                pad => ::Pad(
                                                    lexicals  => [],
                                                    namespace => "KindaPerl6::Grammar",
                                                    parent    => ::Pad(...),
                                                    evaluator => ::Sub(...),
                                                ),
                                                CATCH => '',
                                                state => {}, ),
                                            ), ], ), ], ),
                        ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Apply( arguments => [ ::Apply(
                                                        arguments => [ ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'exp_stmts', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ), ],
                                                        code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                ),
                                            ],
                                                code => ::Var( namespace => [ 'COMPILER', ],
                                                    name   => 'check_block',
                                                    twigil => '',
                                                    sigil  => '&', ),
                                                ), ],
                                        code => ::Var(
                                            namespace => [],
                                            name      => 'make',
                                            twigil    => '',
                                            sigil     => '&',
                                        ),
                                        ), ],
                                sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                ),
                                pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                ),
                                CATCH => '',
                                state => {}, ),
                            ), ], ), ], ),
        sym  => '',
        name => 'check_block', ),
    ],
    sig => ::Sig(
        invocant   => '',
        positional => [],
    ),
    pad => ::Pad( lexicals => [ ::Decl(
                decl => 'my',
                var  => ::Var(
                    namespace => [],
                    name      => 'Class_name',
                    twigil    => '',
                    sigil     => '$',
                ),
                type => '',
        ),
            ::Decl(
                decl => 'our',
                var  => ::Var(
                    namespace => [],
                    name      => 'get_class_name',
                    twigil    => '',
                    sigil     => '&',
                ),
                type => '',
                ) ],
        namespace => "KindaPerl6::Grammar",
        parent    => ::Pad(...),
        evaluator => ::Sub(...), ),
    CATCH      => '',
    state      => {}, ),
    methods    => {},
    name       => 'KindaPerl6::Grammar',
    attributes => {},
    traits     => [],
    unit_type  => 'grammar', )
