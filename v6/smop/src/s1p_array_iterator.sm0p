#include <smop.h>
#include <smop_lowlevel.h>
#include <smop_identifiers.h>
#include <smop_mold.h>
#include <smop_s1p.h>
#include <stdlib.h>
#include <assert.h>
#include <stdio.h>

SMOP__Object* SMOP__S1P__Array_Iterator;

static SMOP__Object* smop_s1p_array_iterator_mold;

typedef struct SMOP__S1P__Array_Iterator_struct {
  SMOP__Object__BASE
  SMOP__Object* input_array;
  SMOP__Object* count;
} SMOP__S1P__Array_Iterator_struct;

SMOP__Object* SMOP__S1P__Array_Iterator_create(SMOP__Object* input_array) {
    SMOP__Object* ret = smop_lowlevel_alloc(sizeof(SMOP__S1P__Array_Iterator_struct));
    ret->RI = (SMOP__ResponderInterface*)SMOP__S1P__Array_Iterator;
    ((SMOP__S1P__Array_Iterator_struct*)ret)->input_array = input_array;
    ((SMOP__S1P__Array_Iterator_struct*)ret)->count = SMOP__NATIVE__int_create(0);
    return ret;
}

static SMOP__Object* lowlevel_array_iterator_message(SMOP__Object* interpreter,
                                                     SMOP__ResponderInterface* self,
                                                     SMOP__Object* identifier,
                                                     SMOP__Object* capture) {
  ___NATIVE_CAPTURE_ONLY___;
  ___CONST_IDENTIFIER_ONLY___;
  ___INVOCANT_RI_SHOULD_MATCH___;

  SMOP__Object* ret = SMOP__NATIVE__bool_false;

  if (identifier == SMOP__ID__prefix_equal) {

    SMOP__Object* frame = SMOP__Mold__Frame_create(interpreter,SMOP_REFERENCE(interpreter,smop_s1p_array_iterator_mold));
    SMOP__Object* back = SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
      SMOP__ID__continuation,
      SMOP__NATIVE__capture_create(interpreter,SMOP_REFERENCE(interpreter,interpreter),
        NULL,NULL));

    mold_reg_set(interpreter,frame,0,SMOP_REFERENCE(interpreter,interpreter));
    mold_reg_set(interpreter,frame,1,SMOP_REFERENCE(interpreter,capture));
    mold_reg_set(interpreter,frame,2,back);

    SMOP_DISPATCH(interpreter,SMOP_RI(interpreter),SMOP__ID__goto,frame);

  } else if (identifier == SMOP__ID__input_array) {

    smop_lowlevel_rdlock(invocant);
    ret = ((SMOP__S1P__Array_Iterator_struct*)invocant)->input_array;
    smop_lowlevel_unlock(invocant);

    SMOP_REFERENCE(interpreter,ret);

  } else if (identifier == SMOP__ID__count) {

    smop_lowlevel_rdlock(invocant);
    ret = ((SMOP__S1P__Array_Iterator_struct*)invocant)->count;
    smop_lowlevel_unlock(invocant);

    SMOP_REFERENCE(interpreter,ret);

  } else if (identifier == SMOP__ID__FETCH) {

    ret = SMOP_REFERENCE(interpreter,invocant);

  } else if (identifier == SMOP__ID__DESTROYALL) {

    SMOP_RELEASE(interpreter, ((SMOP__S1P__Array_Iterator_struct*)invocant)->input_array);
    SMOP_RELEASE(interpreter, ((SMOP__S1P__Array_Iterator_struct*)invocant)->count);

  } else {

    ___UNKNOWN_METHOD___;

  }

  SMOP_RELEASE(interpreter,invocant);
  SMOP_RELEASE(interpreter,capture);
  return ret;
}


void smop_s1p_array_iterator_init() {
  SMOP__S1P__Array_Iterator = malloc(sizeof(SMOP__ResponderInterface));
  assert(SMOP__S1P__Array_Iterator);
  ((SMOP__ResponderInterface*)SMOP__S1P__Array_Iterator)->RI = NULL;
  ((SMOP__ResponderInterface*)SMOP__S1P__Array_Iterator)->MESSAGE = lowlevel_array_iterator_message;
  ((SMOP__ResponderInterface*)SMOP__S1P__Array_Iterator)->REFERENCE = smop_lowlevel_generic_reference;
  ((SMOP__ResponderInterface*)SMOP__S1P__Array_Iterator)->RELEASE = smop_lowlevel_generic_release;
  ((SMOP__ResponderInterface*)SMOP__S1P__Array_Iterator)->id = "SMOP S1P Array Iterator";
}

void smop_s1p_array_iterator_destr() {
  free(SMOP__S1P__Array_Iterator);
}

void smop_s1p_array_iterator_mold_init() {
  SMOP__Object* interpreter = SMOP__GlobalInterpreter;
  smop_s1p_array_iterator_mold = q:m0ld {
    my $interpreter;
    my $capture;
    my $back;

    my $void;

    my $iterator = $capture."invocant"();
    my $array = $iterator."input_array"();
    my $count = $iterator."count"();

    my $size = $array."elems"();
    my $bigger = $count."infix:>="($size);

    if $bigger { goto final } else { goto has_next };
     has_next:
      my $item = $array."postcircumfix:[ ]"($count);
      $void = $count."postfix:++"();
      $void = $back."setr"($item);
      $void = $interpreter."goto"($back);
     final:
      $void = $back."setr"(Â¢SMOP__S1P__EndOfIterator);
      $void = $interpreter."goto"($back)

  };
}

void smop_s1p_array_iterator_mold_destr() {
  SMOP__Object* interpreter = SMOP__GlobalInterpreter;
  SMOP_RELEASE(interpreter, smop_s1p_array_iterator_mold);
}
