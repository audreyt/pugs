{ package KindaPerl6::Grammar; 
# Do not edit this file - Perl 5 generated by HASH(0x1b09380)
# AUTHORS, COPYRIGHT: Please look at the source file.
use v5;
use strict;
no strict "vars";
use constant KP6_DISABLE_INSECURE_CODE => 0;
use KindaPerl6::Runtime::Perl5::Runtime;
my $_MODIFIED; INIT { $_MODIFIED = {} }
INIT { $_ = ::DISPATCH($::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
do {do { if (::DISPATCH(::DISPATCH(::DISPATCH(  ( $GLOBAL::Code_VAR_defined = $GLOBAL::Code_VAR_defined || ::DISPATCH( $::Routine, "new", )  ) 
, 'APPLY', $::KindaPerl6::Grammar )
,"true"),"p5landish") ) { do {} }  else { do {do {::MODIFIED($::KindaPerl6::Grammar);
$::KindaPerl6::Grammar = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'KindaPerl6::Grammar' )
 )
, 'PROTOTYPE',  )
}} } }
;     sub _rule_term {
    local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; 
    $GLOBAL::_M2 = $GLOBAL::_M; do{ my $_pos = pos(); ( ( /\G\.\.\./g && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH( $::Apply, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'code' )
    , value => ::DISPATCH( $::Var, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'sigil' )
    , value => ::DISPATCH( $::Str, 'new', '&' )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'twigil' )
    , value => ::DISPATCH( $::Str, 'new', '' )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'name' )
    , value => ::DISPATCH( $::Str, 'new', 'die' )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'namespace' )
    , value => ::DISPATCH( $::Array, 'new', { _array => [] }
     )
     } )
     )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'arguments' )
    , value => ::DISPATCH( $::Array, 'new', { _array => [] }
     )
     } )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\GI/g && /\Gn/g && /\Gf/g && do { local $GLOBAL::_M; my $_pos = pos(); my $_res = do{ my $_pos = pos(); ( ( do { local $GLOBAL::_M; _rule_word() } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G_/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( do { local $GLOBAL::_M; _rule_digit() } ) ) }; ( pos() = $_pos ); !$_res }  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH( $::Apply, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'code' )
    , value => ::DISPATCH( $::Var, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'sigil' )
    , value => ::DISPATCH( $::Str, 'new', '&' )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'twigil' )
    , value => ::DISPATCH( $::Str, 'new', '' )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'name' )
    , value => ::DISPATCH( $::Str, 'new', 'Inf' )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'namespace' )
    , value => ::DISPATCH( $::Array, 'new', { _array => [] }
     )
     } )
     )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'arguments' )
    , value => ::DISPATCH( $::Array, 'new', { _array => [] }
     )
     } )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\GN/g && /\Ga/g && /\GN/g && do { local $GLOBAL::_M; my $_pos = pos(); my $_res = do{ my $_pos = pos(); ( ( do { local $GLOBAL::_M; _rule_word() } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G_/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( do { local $GLOBAL::_M; _rule_digit() } ) ) }; ( pos() = $_pos ); !$_res }  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH( $::Apply, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'code' )
    , value => ::DISPATCH( $::Var, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'sigil' )
    , value => ::DISPATCH( $::Str, 'new', '&' )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'twigil' )
    , value => ::DISPATCH( $::Str, 'new', '' )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'name' )
    , value => ::DISPATCH( $::Str, 'new', 'NaN' )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'namespace' )
    , value => ::DISPATCH( $::Array, 'new', { _array => [] }
     )
     } )
     )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'arguments' )
    , value => ::DISPATCH( $::Array, 'new', { _array => [] }
     )
     } )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( ( _rule_var() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "var" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'var' )
     )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( ( _rule_arrow_sub() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "arrow_sub" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'arrow_sub' )
     )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( ( _rule_prefix_op() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "prefix_op" ] ))  && ( _rule_exp() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "exp" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH( $::Apply, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'code' )
    , value => ::DISPATCH( $::Var, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'sigil' )
    , value => ::DISPATCH( $::Str, 'new', '&' )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'twigil' )
    , value => ::DISPATCH( $::Str, 'new', '' )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'name' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_infix_58__60__126__62_ = $GLOBAL::Code_infix_58__60__126__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $::Str, 'new', 'prefix:<' )
    , ::DISPATCH(  ( $GLOBAL::Code_infix_58__60__126__62_ = $GLOBAL::Code_infix_58__60__126__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'prefix_op' )
     )
    , ::DISPATCH( $::Str, 'new', '>' )
     )
     )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'namespace' )
    , value => ::DISPATCH( $::Array, 'new', { _array => [] }
     )
     } )
     )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'arguments' )
    , value => ::DISPATCH( $::Array, 'new', { _array => [::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp' )
     )
     )
    ] }
     )
     } )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\(/g && do { local $GLOBAL::_M; _rule_opt_ws() } && do{ my $_pos = pos(); ( ( ( _rule_exp() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "exp" ] ))  && do { local $GLOBAL::_M; _rule_opt_ws() } && /\G\)/g && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp' )
     )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( ( _rule_pair() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "pair" ] ))  && do { local $GLOBAL::_M; _rule_opt_ws() } && do{ my $_pos = pos(); ( ( /\G\,/g && do { local $GLOBAL::_M; _rule_opt_ws() } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G/g ) ) } && /\G\)/g && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH( $::Lit::Pair, 'new', ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'key' )
    , value => ::DISPATCH( ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'pair' )
     )
     )
    , 'INDEX', ::DISPATCH( $::Int, 'new', 0 )
     )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'value' )
    , value => ::DISPATCH( ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'pair' )
     )
     )
    , 'INDEX', ::DISPATCH( $::Int, 'new', 1 )
     )
     } )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( ( _rule_exp_seq() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "exp_seq" ] ))  && do { local $GLOBAL::_M; _rule_opt_ws() } && /\G\)/g && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {return(::DISPATCH( $::Call, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'invocant' )
    , value => ::DISPATCH( $::Proto, 'new', ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'name' )
    , value => ::DISPATCH( $::Str, 'new', 'List' )
     } )
     )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'hyper' )
    , value => ::DISPATCH( $::Str, 'new', '' )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'method' )
    , value => ::DISPATCH( $::Str, 'new', 'new' )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'arguments' )
    , value => ::DISPATCH( $::Array, 'new', { _array => [::DISPATCH( $::Lit::Array, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'array' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp_seq' )
     )
     )
     } )
     )
    ] }
     )
     } )
     )
    )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\{/g && do { local $GLOBAL::_M; _rule_opt_ws() } && do{ my $_pos = pos(); ( ( ( _rule_pair() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "pair" ] ))  && do { local $GLOBAL::_M; _rule_opt_ws() } && /\G\,/g && do { local $GLOBAL::_M; _rule_opt_ws() } && /\G\}/g && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH( $::Lit::Pair, 'new', ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'key' )
    , value => ::DISPATCH( ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'pair' )
     )
     )
    , 'INDEX', ::DISPATCH( $::Int, 'new', 0 )
     )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'value' )
    , value => ::DISPATCH( ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'pair' )
     )
     )
    , 'INDEX', ::DISPATCH( $::Int, 'new', 1 )
     )
     } )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( ( _rule_pair() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "pair" ] ))  && do { local $GLOBAL::_M; _rule_opt_ws() } && /\G\}/g && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH( $::Lit::Code, 'new', ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'pad' )
    , value => ::DISPATCH(  ( $COMPILER::Code_current_pad = $COMPILER::Code_current_pad || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY',  )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'state' )
    , value => ::DISPATCH( $::Hash, 'new', 
     )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'sig' )
    , value => ::DISPATCH( $::Sig, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'invocant' )
    , value => $::Undef } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'positional' )
    , value => ::DISPATCH( $::Array, 'new', { _array => [] }
     )
     } )
     )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'body' )
    , value => ::DISPATCH( $::Array, 'new', { _array => [::DISPATCH( $::Lit::Pair, 'new', ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'key' )
    , value => ::DISPATCH( ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'pair' )
     )
     )
    , 'INDEX', ::DISPATCH( $::Int, 'new', 0 )
     )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'value' )
    , value => ::DISPATCH( ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'pair' )
     )
     )
    , 'INDEX', ::DISPATCH( $::Int, 'new', 1 )
     )
     } )
     )
    ] }
     )
     } )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( ( _rule_exp_mapping() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "exp_mapping" ] ))  && do { local $GLOBAL::_M; _rule_opt_ws() } && /\G\}/g && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {return(::DISPATCH( $::Call, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'invocant' )
    , value => ::DISPATCH( $::Proto, 'new', ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'name' )
    , value => ::DISPATCH( $::Str, 'new', 'Hash' )
     } )
     )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'hyper' )
    , value => ::DISPATCH( $::Str, 'new', '' )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'method' )
    , value => ::DISPATCH( $::Str, 'new', 'new' )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'arguments' )
    , value => ::DISPATCH( $::Array, 'new', { _array => [::DISPATCH( $::Lit::Hash, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'hash' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp_mapping' )
     )
     )
     } )
     )
    ] }
     )
     } )
     )
    )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( ( _rule_bare_block() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "bare_block" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'bare_block' )
     )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH(  ( $GLOBAL::Code_die = $GLOBAL::Code_die || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $::Str, 'new', 'syntax error inside bare block' )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\[/g && do { local $GLOBAL::_M; _rule_opt_ws() } && ( _rule_exp_seq() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "exp_seq" ] ))  && do { local $GLOBAL::_M; _rule_opt_ws() } && /\G\]/g && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {return(::DISPATCH( $::Call, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'invocant' )
    , value => ::DISPATCH( $::Proto, 'new', ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'name' )
    , value => ::DISPATCH( $::Str, 'new', 'Array' )
     } )
     )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'hyper' )
    , value => ::DISPATCH( $::Str, 'new', '' )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'method' )
    , value => ::DISPATCH( $::Str, 'new', 'new' )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'arguments' )
    , value => ::DISPATCH( $::Array, 'new', { _array => [::DISPATCH( $::Lit::Array, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'array' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp_seq' )
     )
     )
     } )
     )
    ] }
     )
     } )
     )
    )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\\/g && /\G\(/g && do { local $GLOBAL::_M; _rule_opt_ws() } && ( _rule_capture() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "capture" ] ))  && do { local $GLOBAL::_M; _rule_opt_ws() } && /\G\)/g && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'capture' )
     )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\\/g && /\G\(/g && do { local $GLOBAL::_M; _rule_opt_ws() } && ( _rule_exp_seq() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "exp_seq" ] ))  && do { local $GLOBAL::_M; _rule_opt_ws() } && /\G\)/g && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH( $::Lit::Capture, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'invocant' )
    , value => $::Undef } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'array' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp_seq' )
     )
     )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'hash' )
    , value => ::DISPATCH( $::Array, 'new', { _array => [] }
     )
     } )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\\/g && ( _rule_var() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "var" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH( $::Lit::Capture, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'invocant' )
    , value => $::Undef } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'array' )
    , value => ::DISPATCH( $::Array, 'new', { _array => [::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'var' )
     )
     )
    ] }
     )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'hash' )
    , value => ::DISPATCH( $::Array, 'new', { _array => [] }
     )
     } )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\$/g && /\G\</g && ( _rule_sub_or_method_name() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "sub_or_method_name" ] ))  && /\G\>/g && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH( $::Call, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'invocant' )
    , value => ::DISPATCH( $::Var, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'sigil' )
    , value => ::DISPATCH( $::Str, 'new', '$' )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'twigil' )
    , value => ::DISPATCH( $::Str, 'new', '' )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'name' )
    , value => ::DISPATCH( $::Str, 'new', '/' )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'namespace' )
    , value => ::DISPATCH( $::Array, 'new', { _array => [] }
     )
     } )
     )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'hyper' )
    , value => ::DISPATCH( $::Str, 'new', '' )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'method' )
    , value => ::DISPATCH( $::Str, 'new', 'LOOKUP' )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'arguments' )
    , value => ::DISPATCH( $::Array, 'new', { _array => [::DISPATCH( $::Val::Buf, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'buf' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'sub_or_method_name' )
     )
     )
     } )
     )
    ] }
     )
     } )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\Gd/g && /\Go/g && do { local $GLOBAL::_M; _rule_opt_ws() } && ( _rule_block1() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "block1" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH( $::Do, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'block' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'block1' )
     )
     )
     } )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\Gu/g && /\Gs/g && /\Ge/g && do { local $GLOBAL::_M; _rule_ws() } && ( _rule_full_ident() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "full_ident" ] ))  && ( _rule_use_from_perl5() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "use_from_perl5" ] ))  && do{ my $_pos = pos(); ( ( /\G\-/g && ( _rule_ident() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "ident" ] ))  ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G/g ) ) } && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH( $::Use, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'mod' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'full_ident' )
     )
     )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'perl5' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'use_from_perl5' )
     )
     )
     } )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( ( _rule_val() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "val" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'val' )
     )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( ( _rule_token_sym() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "token_sym" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'token_sym' )
     )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( ( _rule_token() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "token" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'token' )
     )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( ( _rule_token_P5() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "token_P5" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'token_P5' )
     )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( ( _rule_proto() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "proto" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'proto' )
     )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( ( _rule_multi_method() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "multi_method" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'multi_method' )
     )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( ( _rule_method() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "method" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'method' )
     )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( ( _rule_multi_sub() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "multi_sub" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'multi_sub' )
     )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( ( _rule_subset() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "subset" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {do { if (::DISPATCH(::DISPATCH(::DISPATCH(  ( $GLOBAL::Code_infix_58__60_ne_62_ = $GLOBAL::Code_infix_58__60_ne_62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'subset' )
     )
     )
    , 'name',  )
    , ::DISPATCH( $::Str, 'new', '' )
     )
    ,"true"),"p5landish") ) { do {my $bind; $bind = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$bind' } )  unless defined $bind; INIT { $bind = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$bind' } ) }
    ;
    do {::MODIFIED($bind);
    $bind = ::DISPATCH( $::Bind, 'new', ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'parameters' )
    , value => ::DISPATCH( $::Proto, 'new', ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'name' )
    , value => ::DISPATCH( ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'subset' )
     )
     )
    , 'name',  )
     } )
     )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'arguments' )
    , value => ::DISPATCH( $::Lit::Subset, 'new', ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'name' )
    , value => ::DISPATCH( $::Str, 'new', '' )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'base_class' )
    , value => ::DISPATCH( ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'subset' )
     )
     )
    , 'base_class',  )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'block' )
    , value => ::DISPATCH( ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'subset' )
     )
     )
    , 'block',  )
     } )
     )
     } )
     )
    }; ::DISPATCH(  ( $COMPILER::Code_begin_block = $COMPILER::Code_begin_block || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', $bind )
    ; ::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", $bind )
    } }  else { ::DISPATCH($::Bit, "new", 0) } }
    ; ::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'subset' )
     )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( ( _rule_opt_declarator() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "opt_declarator" ] ))  && ( _rule_sub() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "sub" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {my $decl; $decl = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$decl' } )  unless defined $decl; INIT { $decl = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$decl' } ) }
    ;
    my $bind; $bind = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$bind' } )  unless defined $bind; INIT { $bind = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$bind' } ) }
    ;
    do { if (::DISPATCH(::DISPATCH(::DISPATCH(  ( $GLOBAL::Code_infix_58__60_eq_62_ = $GLOBAL::Code_infix_58__60_eq_62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'sub' )
     )
     )
    , 'name',  )
    , ::DISPATCH( $::Str, 'new', '' )
     )
    ,"true"),"p5landish") ) { do {do { if (::DISPATCH(::DISPATCH(::DISPATCH(  ( $GLOBAL::Code_infix_58__60_eq_62_ = $GLOBAL::Code_infix_58__60_eq_62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'opt_declarator' )
     )
     )
    , ::DISPATCH( $::Str, 'new', '' )
     )
    ,"true"),"p5landish") ) { do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'sub' )
     )
     )
     )
    } }  else { do {::DISPATCH(  ( $GLOBAL::Code_print = $GLOBAL::Code_print || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $::Str, 'new', 'Error: subroutines with declarators should have a name' )
     )
    ; ::DISPATCH(  ( $GLOBAL::Code_die = $GLOBAL::Code_die || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $::Str, 'new', 'Error: subroutines with declarators should have a name' )
     )
    } } }
    } }  else { ::DISPATCH($::Bit, "new", 0) } }
    ; $decl; do { if (::DISPATCH(::DISPATCH(::DISPATCH(  ( $GLOBAL::Code_infix_58__60_eq_62_ = $GLOBAL::Code_infix_58__60_eq_62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'opt_declarator' )
     )
     )
    , ::DISPATCH( $::Str, 'new', '' )
     )
    ,"true"),"p5landish") ) { do {do {::MODIFIED($decl);
    $decl = ::DISPATCH( $::Str, 'new', 'our' )
    }} }  else { do {do {::MODIFIED($decl);
    $decl = ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'opt_declarator' )
     )
     )
    }} } }
    ; ::DISPATCH( ::DISPATCH(  ( $COMPILER::Code_current_pad = $COMPILER::Code_current_pad || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY',  )
    , 'add_lexicals', ::DISPATCH( $::Array, 'new', { _array => [::DISPATCH( $::Decl, 'new', ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'decl' )
    , value => $decl } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'var' )
    , value => ::DISPATCH( $::Var, 'new', ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'name' )
    , value => ::DISPATCH( ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'sub' )
     )
     )
    , 'name',  )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'twigil' )
    , value => ::DISPATCH( $::Str, 'new', '' )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'sigil' )
    , value => ::DISPATCH( $::Str, 'new', '&' )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'namespace' )
    , value => ::DISPATCH( $::Array, 'new', { _array => [] }
     )
     } )
     )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'type' )
    , value => ::DISPATCH( $::Str, 'new', '' )
     } )
     )
    ] }
     )
     )
    ; do {::MODIFIED($bind);
    $bind = ::DISPATCH( $::Bind, 'new', ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'parameters' )
    , value => ::DISPATCH( $::Var, 'new', ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'name' )
    , value => ::DISPATCH( ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'sub' )
     )
     )
    , 'name',  )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'twigil' )
    , value => ::DISPATCH( $::Str, 'new', '' )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'sigil' )
    , value => ::DISPATCH( $::Str, 'new', '&' )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'namespace' )
    , value => ::DISPATCH( $::Array, 'new', { _array => [] }
     )
     } )
     )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'arguments' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'sub' )
     )
     )
     } )
     )
    }; ::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", $bind )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( ( _rule_opt_declarator() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "opt_declarator" ] ))  && ( _rule_macro() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "macro" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {my $decl; $decl = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$decl' } )  unless defined $decl; INIT { $decl = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$decl' } ) }
    ;
    my $bind; $bind = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$bind' } )  unless defined $bind; INIT { $bind = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$bind' } ) }
    ;
    do { if (::DISPATCH(::DISPATCH(::DISPATCH(  ( $GLOBAL::Code_infix_58__60_eq_62_ = $GLOBAL::Code_infix_58__60_eq_62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'macro' )
     )
     )
    , 'name',  )
    , ::DISPATCH( $::Str, 'new', '' )
     )
    ,"true"),"p5landish") ) { do {do { if (::DISPATCH(::DISPATCH(::DISPATCH(  ( $GLOBAL::Code_infix_58__60_eq_62_ = $GLOBAL::Code_infix_58__60_eq_62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'opt_declarator' )
     )
     )
    , ::DISPATCH( $::Str, 'new', '' )
     )
    ,"true"),"p5landish") ) { do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'macro' )
     )
     )
     )
    } }  else { do {::DISPATCH(  ( $GLOBAL::Code_print = $GLOBAL::Code_print || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $::Str, 'new', 'Error: macros with declarators should have a name' )
     )
    ; ::DISPATCH(  ( $GLOBAL::Code_die = $GLOBAL::Code_die || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $::Str, 'new', 'Error: macros with declarators should have a name' )
     )
    } } }
    } }  else { ::DISPATCH($::Bit, "new", 0) } }
    ; $decl; do { if (::DISPATCH(::DISPATCH(::DISPATCH(  ( $GLOBAL::Code_infix_58__60_eq_62_ = $GLOBAL::Code_infix_58__60_eq_62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'opt_declarator' )
     )
     )
    , ::DISPATCH( $::Str, 'new', '' )
     )
    ,"true"),"p5landish") ) { do {do {::MODIFIED($decl);
    $decl = ::DISPATCH( $::Str, 'new', 'our' )
    }} }  else { do {do {::MODIFIED($decl);
    $decl = ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'opt_declarator' )
     )
     )
    }} } }
    ; ::DISPATCH( ::DISPATCH(  ( $COMPILER::Code_current_pad = $COMPILER::Code_current_pad || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY',  )
    , 'add_lexicals', ::DISPATCH( $::Array, 'new', { _array => [::DISPATCH( $::Decl, 'new', ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'decl' )
    , value => $decl } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'var' )
    , value => ::DISPATCH( $::Var, 'new', ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'name' )
    , value => ::DISPATCH( ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'macro' )
     )
     )
    , 'name',  )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'twigil' )
    , value => ::DISPATCH( $::Str, 'new', '' )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'sigil' )
    , value => ::DISPATCH( $::Str, 'new', '&' )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'namespace' )
    , value => ::DISPATCH( $::Array, 'new', { _array => [] }
     )
     } )
     )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'type' )
    , value => ::DISPATCH( $::Str, 'new', '' )
     } )
     )
    ] }
     )
     )
    ; do {::MODIFIED($bind);
    $bind = ::DISPATCH( $::Bind, 'new', ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'parameters' )
    , value => ::DISPATCH( $::Var, 'new', ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'name' )
    , value => ::DISPATCH( ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'macro' )
     )
     )
    , 'name',  )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'twigil' )
    , value => ::DISPATCH( $::Str, 'new', '' )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'sigil' )
    , value => ::DISPATCH( $::Str, 'new', '&' )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'namespace' )
    , value => ::DISPATCH( $::Array, 'new', { _array => [] }
     )
     } )
     )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'arguments' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'macro' )
     )
     )
     } )
     )
    }; ::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", $bind )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( ( _rule_opt_declarator() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "opt_declarator" ] ))  && ( _rule_coro() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "coro" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {my $decl; $decl = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$decl' } )  unless defined $decl; INIT { $decl = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$decl' } ) }
    ;
    my $bind; $bind = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$bind' } )  unless defined $bind; INIT { $bind = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$bind' } ) }
    ;
    do { if (::DISPATCH(::DISPATCH(::DISPATCH(  ( $GLOBAL::Code_infix_58__60_eq_62_ = $GLOBAL::Code_infix_58__60_eq_62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'coro' )
     )
     )
    , 'name',  )
    , ::DISPATCH( $::Str, 'new', '' )
     )
    ,"true"),"p5landish") ) { do {do { if (::DISPATCH(::DISPATCH(::DISPATCH(  ( $GLOBAL::Code_infix_58__60_eq_62_ = $GLOBAL::Code_infix_58__60_eq_62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'opt_declarator' )
     )
     )
    , ::DISPATCH( $::Str, 'new', '' )
     )
    ,"true"),"p5landish") ) { do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'coro' )
     )
     )
     )
    } }  else { do {::DISPATCH(  ( $GLOBAL::Code_print = $GLOBAL::Code_print || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $::Str, 'new', 'Error: subroutines with declarators should have a name' )
     )
    ; ::DISPATCH(  ( $GLOBAL::Code_die = $GLOBAL::Code_die || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $::Str, 'new', 'Error: subroutines with declarators should have a name' )
     )
    } } }
    } }  else { ::DISPATCH($::Bit, "new", 0) } }
    ; $decl; do { if (::DISPATCH(::DISPATCH(::DISPATCH(  ( $GLOBAL::Code_infix_58__60_eq_62_ = $GLOBAL::Code_infix_58__60_eq_62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'opt_declarator' )
     )
     )
    , ::DISPATCH( $::Str, 'new', '' )
     )
    ,"true"),"p5landish") ) { do {do {::MODIFIED($decl);
    $decl = ::DISPATCH( $::Str, 'new', 'our' )
    }} }  else { do {do {::MODIFIED($decl);
    $decl = ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'opt_declarator' )
     )
     )
    }} } }
    ; ::DISPATCH( ::DISPATCH(  ( $COMPILER::Code_current_pad = $COMPILER::Code_current_pad || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY',  )
    , 'add_lexicals', ::DISPATCH( $::Array, 'new', { _array => [::DISPATCH( $::Decl, 'new', ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'decl' )
    , value => $decl } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'var' )
    , value => ::DISPATCH( $::Var, 'new', ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'name' )
    , value => ::DISPATCH( ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'coro' )
     )
     )
    , 'name',  )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'twigil' )
    , value => ::DISPATCH( $::Str, 'new', '' )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'sigil' )
    , value => ::DISPATCH( $::Str, 'new', '&' )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'namespace' )
    , value => ::DISPATCH( $::Array, 'new', { _array => [] }
     )
     } )
     )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'type' )
    , value => ::DISPATCH( $::Str, 'new', '' )
     } )
     )
    ] }
     )
     )
    ; do {::MODIFIED($bind);
    $bind = ::DISPATCH( $::Bind, 'new', ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'parameters' )
    , value => ::DISPATCH( $::Var, 'new', ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'name' )
    , value => ::DISPATCH( ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'coro' )
     )
     )
    , 'name',  )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'twigil' )
    , value => ::DISPATCH( $::Str, 'new', '' )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'sigil' )
    , value => ::DISPATCH( $::Str, 'new', '&' )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'namespace' )
    , value => ::DISPATCH( $::Array, 'new', { _array => [] }
     )
     } )
     )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'arguments' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'coro' )
     )
     )
     } )
     )
    }; ::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", $bind )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( ( _rule_declarator() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "declarator" ] ))  && do { local $GLOBAL::_M; _rule_ws() } && ( _rule_opt_type() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "opt_type" ] ))  && do { local $GLOBAL::_M; _rule_opt_ws() } && ( _rule_undeclared_var() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "undeclared_var" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {do { if (::DISPATCH(::DISPATCH(::DISPATCH(  ( $GLOBAL::Code_infix_58__60_eq_62_ = $GLOBAL::Code_infix_58__60_eq_62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'declarator' )
     )
     )
    , ::DISPATCH( $::Str, 'new', 'my' )
     )
    ,"true"),"p5landish") ) { do {::DISPATCH( ::DISPATCH(  ( $COMPILER::Code_current_pad = $COMPILER::Code_current_pad || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY',  )
    , 'add_lexicals', ::DISPATCH( $::Array, 'new', { _array => [::DISPATCH( $::Decl, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'decl' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'declarator' )
     )
     )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'type' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'opt_type' )
     )
     )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'var' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'undeclared_var' )
     )
     )
     } )
     )
    ] }
     )
     )
    ; ::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'undeclared_var' )
     )
     )
     )
    } }  else { ::DISPATCH($::Bit, "new", 0) } }
    ; do { if (::DISPATCH(::DISPATCH(::DISPATCH(  ( $GLOBAL::Code_infix_58__60_eq_62_ = $GLOBAL::Code_infix_58__60_eq_62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'declarator' )
     )
     )
    , ::DISPATCH( $::Str, 'new', 'our' )
     )
    ,"true"),"p5landish") ) { do {::DISPATCH( ::DISPATCH(  ( $COMPILER::Code_current_pad = $COMPILER::Code_current_pad || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY',  )
    , 'add_lexicals', ::DISPATCH( $::Array, 'new', { _array => [::DISPATCH( $::Decl, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'decl' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'declarator' )
     )
     )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'type' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'opt_type' )
     )
     )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'var' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'undeclared_var' )
     )
     )
     } )
     )
    ] }
     )
     )
    ; ::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'undeclared_var' )
     )
     )
     )
    } }  else { ::DISPATCH($::Bit, "new", 0) } }
    ; ::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH( $::Decl, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'decl' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'declarator' )
     )
     )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'type' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'opt_type' )
     )
     )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'var' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'undeclared_var' )
     )
     )
     } )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( ( _rule_begin_block() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "begin_block" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'begin_block' )
     )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( ( _rule_check_block() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "check_block" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'check_block' )
     )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\Gg/g && /\Ga/g && /\Gt/g && /\Gh/g && /\Ge/g && /\Gr/g && do { local $GLOBAL::_M; _rule_ws() } && /\G\{/g && do { local $GLOBAL::_M; _rule_opt_ws() } && ( _rule_bare_block() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "bare_block" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {return(::DISPATCH( $::Call, 'new', ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'hyper' )
    , value => ::DISPATCH( $::Str, 'new', '' )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'arguments' )
    , value => ::DISPATCH( $::Array, 'new', { _array => [::DISPATCH( $::Sub, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'name' )
    , value => $::Undef } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'block' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'bare_block' )
     )
     )
     } )
     )
    ] }
     )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'method' )
    , value => ::DISPATCH( $::Str, 'new', 'new' )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'invocant' )
    , value => ::DISPATCH( $::Proto, 'new', ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'name' )
    , value => ::DISPATCH( $::Str, 'new', 'Gather' )
     } )
     )
     } )
     )
    )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\Gi/g && /\Gs/g && do { local $GLOBAL::_M; _rule_ws() } && ( _rule_full_ident() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "full_ident" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH(  ( $GLOBAL::Code_die = $GLOBAL::Code_die || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $::Str, 'new', '<is> not implemented' )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\Gd/g && /\Go/g && /\Ge/g && /\Gs/g && do { local $GLOBAL::_M; _rule_ws() } && ( _rule_full_ident() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "full_ident" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH(  ( $GLOBAL::Code_die = $GLOBAL::Code_die || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $::Str, 'new', '<does> not implemented' )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( ( _rule_control() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "control" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'control' )
     )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( ( _rule_apply() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "apply" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'apply' )
     )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\</g && ( _rule_angle_quoted() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "angle_quoted" ] ))  && /\G\>/g && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH( $::Apply, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'code' )
    , value => ::DISPATCH( $::Var, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'sigil' )
    , value => ::DISPATCH( $::Str, 'new', '&' )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'twigil' )
    , value => ::DISPATCH( $::Str, 'new', '' )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'name' )
    , value => ::DISPATCH( $::Str, 'new', 'qw' )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'namespace' )
    , value => ::DISPATCH( $::Array, 'new', { _array => [] }
     )
     } )
     )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'arguments' )
    , value => ::DISPATCH( $::Array, 'new', { _array => [::DISPATCH( $::Val::Buf, 'new', ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'buf' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__126__62_ = $GLOBAL::Code_prefix_58__60__126__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'angle_quoted' )
     )
     )
     } )
     )
    ] }
     )
     } )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) } && do { $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; 
    $GLOBAL::_M2 = $GLOBAL::_M }; } 
::DISPATCH(::DISPATCH($::KindaPerl6::Grammar,"HOW"),"add_method", ::DISPATCH( $::Str, "new", "term" ), ::DISPATCH( $::Method, "new", { code => sub { local $GLOBAL::_Class = shift; undef $GLOBAL::_M2; my ($str,$pos) = @_;$str = defined($str) ? $str : $_;local $_ = ( ref($str) ? DISPATCH.new( $str, "Str" )->{_value} : $str ); pos($_) = (ref $pos) ? ( $pos->{_value} ) : ( 0 + pos($_) );if ( _rule_term() ) { Match::from_global_data( $GLOBAL::_M2 ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; } else { $MATCH = $GLOBAL::MATCH = Match->new(); } @Match::Matches = (); return $MATCH; } } ), )}
; 1 }
