A SBCL Common-Lisp backend for elf

QUICKSTART

$ make elfx
$ ./elfx -v -xr -e 'say 3'

STATUS

Runs 'say 3' and fibonacci.

VISION

Become a second, faster-than-p5 backend for elf.

This will permit elf to be declared bootstrapped, and provide a high
performance p6 implementation.  And thus provide an environment for
bootstrapped p6 compiler development where correctness is not
inherently incompatible with tolerable performance.

Current plan is to be similar to the current p5 backend.  Which means
no Containers, native objects without true p6 oo support, etc.  Unlike
the p5 backend, where this is necessary for acceptable performance (at
least until the elf compiler gets much more mature and optimizing),
with this CL backend it's merely a short-term simplicity convenience.
Mostly because the p6 oo spec seems still in flux.  Longer-term, with
CL we have speed to burn, and can spend it on correctness.

Use CL-PPCRE for regexps.
Use PACKAGEs as symbol tables, a flat namespace partitioning symbol space,
but not for interpackage linkage.

Next steps include compilation of classes, and definition of
primitives (Array, Hash, etc).


NOTES


  ../../elf/elf_g sbcl.pm -v -xr -e 'say 3'
  ../../elf/elf_g sbcl.pm -xr -e 'sub f($x){say $x+3}; f(4)'

  make elfx
  export ELF_STD_RED_RUN=../../STD_red/STD_red_run
  ./elfx -xr -e 'say 3'


  # A note on performance...
  ../../elf/elf_g sbcl.pm -xr -e 'sub fib($n){if $n==0 {0} elsif $n==1 {1} else {fib($n-1)+fib($n-2)}}; say fib(37)'
  time ./deleteme_exe
  time perl -e 'sub fib{my($n)=@_;if($n==0){0}elsif($n==1){1}else{fib($n-1)+fib($n-2)}};print fib(37),"\n";'
