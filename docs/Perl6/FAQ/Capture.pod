= Q: What happened to references?

A: They have been superseded by Captures.


= Q: What is a Capture?

A Capture is an object representing arguments in a function call.

For example, the arguments in say("Hello", "World") is a Capture object
denoted by \("Hello", "World").


= Q: Can I see how captures look like? Does \$x no longer work?

Prefix \ is now the Capture constructor.  These are all equivalent:

  my $xcap1 = \$x;
  my $xcap2 = \($x);
  my $xcap3 = \($x :);

All three represent an argument list with a single invocant $x, and hence are
all equivalent with each other:

  $xcap1 === $xcap2 === $xcap3; # true


= Q: What about capturing multiple arguments?

Here's how Captures look like deferred argument lists:

  sub make_car (Str $model, Str $color? = "black", Int $doors = 4);
  my $car_cap = \("Model T", doors => 2); # some positional, some named

  # passing the opaque Capture as actual function arguments  
  my $car = make_car(*$car_cap);

  # extracting a specific positional argument
  say "The color is $car_cap[1]"; # black
  
  # or by name
  say "It has $car_cap<doors> doors" # 2 doors


= Q: How do I extract all positional arguments or all named arguments?

As you can see above, a Capture object holds both positional and named parts.
If you want to retrieve all positional parts, there are two ways:

  $cap[];  # postfix .[]
  @$cap;   # prefix @

Both forms flatten under list context, so they may be used interchangeably.
However, only the postfix .[] form interpolates in a string.

Similarly, access to named arguments is available by treating the Capture as a hash:

  $cap{};  # postfix .{}
  %$cap;   # prefix %

Note that the positional parts do not include the invocant.

= Q: What do you mean by "invocant"?

When you call a object's method, the "self" inside the method is set to that
object. These are all equivalent:

  $fh.say("Hi!");
  say $fh: "Hi!";
  say($fh: "Hi!");

Note that an argument list can have at most one invocant. You can construct a
Capture object with an invocant using the same syntax:

  my $cap = \($fh: "Hi!");

To get back the invocant from a Capture object, use the prefix "$" operator:

  my $fh = $$cap;

So this Perl5ish equivalence still holds:

  $x === $(\$x);


= Q: What about multimethod dispatch and cases where there is more than one invocant?

There's always one invocant, but it may be an Array of several values (see below).


= Q: What happens when a named argument is repeated?

Let's look at some examples:

  sub make_car (Int $doors) { say "My car has $doors doors" }
  make_car( doors => 2, doors => 4 ); # 4 doors
 
  sub board_ark (@animal) { say "@animal.elems() animals boarded the ark" }
  board_ark( animal => "moose", animal => "elephant"); # 2 animals 

A Capture object may hold named arguments that occur twice or more.  When it's
bound to a variable in the Signature, if the sigil is "@", then it expands to a
list of all arguments (in the order they were specified).  Otherwise (i.e. if
it's bound to a scalar or a slurpy hash), the last argument overrides the
previous ones.


= Q: What do *$x, *@x and *%x mean?

The prefix * method casts an object into a Capture object, and merges it
into the Capture being currently constructed (e.g. an argument list):

    my $cap = \(1, 2, x=>42);
    f(*$cap);   # f(1, 2, x=>42)

Array, List, Hash and Pair objects cast into Capture objects in obvious ways:

    my $a = [1, 2];     f(*$a);     # f(1, 2)
    my $l = (1, 2);     f(*$l);     # f(1, 2)
    my $h = {x => 42};  f(*$h);     # f(x => 42)
    my $p = (x => 42);  f(*$p);     # f(x => 42)


= Q: What does $x = \@y mean?

The same as $x = (@y: ). That is, a Capture of one array as invocant. 

Unlike in Perl 5, this means that you can get back the Array object with:

  my @y2 := $$x; # get back the invocant

instead of:

  my @y2 := @$x; # WRONG: $x contains no positional parts

Manipulating the original value via the $x capture is still possible:

  $$x.push("another element");
  
Note the need for the extra $ sigil, implying we are accessing the captured invocant.
@$x.push() would mean an attempt to add an extra positional argument into $x; however,
this is forbidden by the spec, as all parts are immutable in an Capture object.

(Captures are immutable; their underlying data may not be.)


= Q: So $x = @y does not mean $x = \@y anymore. What does it mean then?

Assign $x with the object @y is bound to (typically an Array object).

This does not create Capture objects; to get back @y, @$x would do.

Also note that all these forms mean the same thing:

  @y;
  @@y;
  @@@y;
  @y[];
  @y[][];
  @y[][][];


= Q: Does this mean I can't have something akin to a refrence to a reference?

[ hw !! 1 ]
You can, because a Signature can contain Captures.

  sub apply (Code $f, Capture $args) { $f(*$args) }


= Q: How is @x = (1, 2, 3) different from @y := (1, 2, 3) ?

The latter is an error. :-)  The := operator binds its left hand side (a Signature object)
to its right hand side (a Capture object), so the latter form is akin to:

  sub foo (@y is rw) { ... }
  foo(1, 2, 3); # error: three arguments passed where one is expected

However, these forms are valid:

  *@y := (1,2,3);         # slurpy @
  @y  := ((1,2,3):);      # list as invocant
  @y  := ((1,2,3),);      # list as first positional
  @y  := (y => (1,2,3));  # named binding

But they are still different from the assignment form.


= Q: How is @x = (1, 2, 3) different from *@y := (1, 2, 3), then?

This means that while @y holds the values 1, 2, and 3, you cannot modify the
container itself, so this won't work:

  @y.push(4);   # error: cannot find method: List.push

On the other hand, because variables are initialized by their sigils, so these
two mean the same:

  my @x := [];  # new Array object 
  my @x;        # implicitly does the same thing

so @x = (1, 2, 3) would simply populate the previously allocated Array object
with new elements.


= Q: Is there any difference between $x = (1, 2, 3) and @y = (1, 2, 3)?

Yes.  The right-hand side in both case is a single List object constructed with
the list-associative infix:<,> operator, but it is flattened in the second
case, and its elements are put into the previously allocated Array container
bound to @y:

    $x.push(0); # error: cannot find method: List.push
    @y.push(0); # works just fine


= Q: Is there any difference between $x = [1, 2, 3] and @y = [1, 2, 3]?

Yes.  As in Perl 5, the Array constructor [...] does not flatten under list
context, so @y receives a List with one element (an Array object), which then
becomes @y[0]:

    $x.elems; # 3
    @y.elems; # 1

The behaviours below are similar to Perl 5 as well:

    $x.push(0);     # works - $x.elems becomes 4
    @y[0].push(0);  # works - @y.elems remains 1
    @y.push(0);     # works - @y.elems becomes 2 


= Q: Is there any difference between $x := [1, 2, 3] and @y := [1, 2, 3]?

For the usual method-based operations, they are pretty much interchangeable:

    $x.push(0); # works - $x.elems becomes 4
    @y.push(0); # works - @y.elems becomes 4

However, they differ when you try to assign something into them:

    $x = 42; # fails - Array doesn't handle scalar assignment
    @y = 42; # works - @y.elems is now 1

