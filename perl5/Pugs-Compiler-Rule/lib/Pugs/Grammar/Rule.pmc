# !!! DO NOT EDIT !!!
# This file was generated by Pugs::Compiler::Rule's compile_p6grammar.pl
# script from examples/Grammar.grammar at Fri Jul 13 16:13:59 2007

use strict;
use warnings;

package Pugs::Grammar::Rule;

#use base 'Pugs::Grammar::Base';

use Pugs::Runtime::Match;
use Pugs::Runtime::Regex;

# Code block from grammar spec


use utf8;
no strict 'refs';
no warnings 'redefine';
no warnings 'once';

#use Pugs::Runtime::Match;

our %rule_terms;
our %variables;



# token pod_begin
*pod_begin =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           ## <alt>
           (
               ( $pad{I1621} = $pos or 1 )
               && (
               (
                  (   ( $pad{I1622} = $pos or 1 ) &&
                   ## <perl5>
                   ( ( substr( $s, $pos ) =~ m/^((?:\n\r?|\r\n?))/ )
                       ? ( $pos += length( $1 ) or 1 )
                       : 0
                   )
                   ## </perl5>
     ||    ( ( $pos = $pad{I1622} ) && 0 ) )
               &&
                 ## <constant>
                 ( ( substr( $s, $pos, 1 ) eq '=' )
                     ? ( $pos += 1 or 1 )
                     : 0
                 )
                 ## </constant>
    
               &&
                 ## <constant>
                 ( ( substr( $s, $pos, 1 ) eq 'e' )
                     ? ( $pos += 1 or 1 )
                     : 0
                 )
                 ## </constant>
    
               &&
                 ## <constant>
                 ( ( substr( $s, $pos, 1 ) eq 'n' )
                     ? ( $pos += 1 or 1 )
                     : 0
                 )
                 ## </constant>
    
               &&
                  (   ( $pad{I1623} = $pos or 1 ) &&
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq 'd' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
     ||    ( ( $pos = $pad{I1623} ) && 0 ) )
               &&
                 do { while (
                  (   ( $pad{I1624} = $pos or 1 ) &&
                     ## <perl5>
                     ( ( substr( $s, $pos ) =~ m/^((?!\n\r?|\r\n?).)/ )
                         ? ( $pos += length( $1 ) or 1 )
                         : 0
                     )
                     ## </perl5>
     ||    ( ( $pos = $pad{I1624} ) && 0 ) )) {}; $bool = 1 }
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1621} ) or 1 )
               &&            (
                  (   ( $pad{I1625} = $pos or 1 ) &&
                   ( substr( $s, $pos++, 1 ) ne '' ) ||    ( ( $pos = $pad{I1625} ) && 0 ) )
               &&
                 do { while (
                  (   ( $pad{I1626} = $pos or 1 ) &&
                     ## <perl5>
                     ( ( substr( $s, $pos ) =~ m/^((?!\n\r?|\r\n?).)/ )
                         ? ( $pos += length( $1 ) or 1 )
                         : 0
                     )
                     ## </perl5>
     ||    ( ( $pos = $pad{I1626} ) && 0 ) )) {}; $bool = 1 }
               &&
                  (   ( $pad{I1627} = $pos or 1 ) &&
                   ## <metasyntax>
                   do {
                        my $prior = $::_V6_PRIOR_;
                        my $match =
                               $grammar->pod_begin( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior;
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   }
                   ## </metasyntax>
     ||    ( ( $pos = $pad{I1627} ) && 0 ) )
               )
             )
           )
    ## </alt>
    ;
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# token pod_other
*pod_other =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           ## <alt>
           (
               ( $pad{I1628} = $pos or 1 )
               && (
               (
                  (   ( $pad{I1629} = $pos or 1 ) &&
                   ## <perl5>
                   ( ( substr( $s, $pos ) =~ m/^((?:\n\r?|\r\n?))/ )
                       ? ( $pos += length( $1 ) or 1 )
                       : 0
                   )
                   ## </perl5>
     ||    ( ( $pos = $pad{I1629} ) && 0 ) )
               &&
                 ## <constant>
                 ( ( substr( $s, $pos, 1 ) eq '=' )
                     ? ( $pos += 1 or 1 )
                     : 0
                 )
                 ## </constant>
    
               &&
                 ## <constant>
                 ( ( substr( $s, $pos, 1 ) eq 'c' )
                     ? ( $pos += 1 or 1 )
                     : 0
                 )
                 ## </constant>
    
               &&
                 ## <constant>
                 ( ( substr( $s, $pos, 1 ) eq 'u' )
                     ? ( $pos += 1 or 1 )
                     : 0
                 )
                 ## </constant>
    
               &&
                  (   ( $pad{I1630} = $pos or 1 ) &&
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq 't' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
     ||    ( ( $pos = $pad{I1630} ) && 0 ) )
               &&
                 do { while (
                  (   ( $pad{I1631} = $pos or 1 ) &&
                     ## <perl5>
                     ( ( substr( $s, $pos ) =~ m/^((?!\n\r?|\r\n?).)/ )
                         ? ( $pos += length( $1 ) or 1 )
                         : 0
                     )
                     ## </perl5>
     ||    ( ( $pos = $pad{I1631} ) && 0 ) )) {}; $bool = 1 }
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1628} ) or 1 )
               &&            (
                  (   ( $pad{I1632} = $pos or 1 ) &&
                   ( substr( $s, $pos++, 1 ) ne '' ) ||    ( ( $pos = $pad{I1632} ) && 0 ) )
               &&
                 do { while (
                  (   ( $pad{I1633} = $pos or 1 ) &&
                     ## <perl5>
                     ( ( substr( $s, $pos ) =~ m/^((?!\n\r?|\r\n?).)/ )
                         ? ( $pos += length( $1 ) or 1 )
                         : 0
                     )
                     ## </perl5>
     ||    ( ( $pos = $pad{I1633} ) && 0 ) )) {}; $bool = 1 }
               &&
                  (   ( $pad{I1634} = $pos or 1 ) &&
                   ## <metasyntax>
                   do {
                        my $prior = $::_V6_PRIOR_;
                        my $match =
                               $grammar->pod_other( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior;
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   }
                   ## </metasyntax>
     ||    ( ( $pos = $pad{I1634} ) && 0 ) )
               )
             )
           )
    ## </alt>
    ;
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# token ws
*ws =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           (
            (   ( $pad{I1635} = $pos or 1 ) &&
               ## <alt>
               (
                   ( $pad{I1636} = $pos or 1 )
                   && (
                   (
                      (   ( $pad{I1637} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '#' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1637} ) && 0 ) )
                   &&
                     do { while (
                      (   ( $pad{I1638} = $pos or 1 ) &&
                         ## <perl5>
                         ( ( substr( $s, $pos ) =~ m/^((?!\n\r?|\r\n?).)/ )
                             ? ( $pos += length( $1 ) or 1 )
                             : 0
                         )
                         ## </perl5>
     ||    ( ( $pos = $pad{I1638} ) && 0 ) )) {}; $bool = 1 }
                   )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1636} ) or 1 )
                   &&                (
                      (   ( $pad{I1639} = $pos or 1 ) &&
                       ## <perl5>
                       ( ( substr( $s, $pos ) =~ m/^((?:\n\r?|\r\n?))/ )
                           ? ( $pos += length( $1 ) or 1 )
                           : 0
                       )
                       ## </perl5>
     ||    ( ( $pos = $pad{I1639} ) && 0 ) )
                   &&
                     (
                      (   ( $pad{I1640} = $pos or 1 ) &&
                         (
                            (   ( $pad{I1641} = $pos or 1 ) &&
                             ## <constant>
                             ( ( substr( $s, $pos, 1 ) eq '=' )
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             )
                             ## </constant>
     ||    ( ( $pos = $pad{I1641} ) && 0 ) )
                         &&
                           (
                            (   ( $pad{I1642} = $pos or 1 ) &&
                               ## <alt>
                               (
                                   ( $pad{I1643} = $pos or 1 )
                                   && (
                                   (
                                      (   ( $pad{I1644} = $pos or 1 ) &&
                                       ## <constant>
                                       ( ( substr( $s, $pos, 1 ) eq 'b' )
                                           ? ( $pos += 1 or 1 )
                                           : 0
                                       )
                                       ## </constant>
     ||    ( ( $pos = $pad{I1644} ) && 0 ) )
                                   &&
                                     ## <constant>
                                     ( ( substr( $s, $pos, 1 ) eq 'e' )
                                         ? ( $pos += 1 or 1 )
                                         : 0
                                     )
                                     ## </constant>
    
                                   &&
                                     ## <constant>
                                     ( ( substr( $s, $pos, 1 ) eq 'g' )
                                         ? ( $pos += 1 or 1 )
                                         : 0
                                     )
                                     ## </constant>
    
                                   &&
                                     ## <constant>
                                     ( ( substr( $s, $pos, 1 ) eq 'i' )
                                         ? ( $pos += 1 or 1 )
                                         : 0
                                     )
                                     ## </constant>
    
                                   &&
                                      (   ( $pad{I1645} = $pos or 1 ) &&
                                       ## <constant>
                                       ( ( substr( $s, $pos, 1 ) eq 'n' )
                                           ? ( $pos += 1 or 1 )
                                           : 0
                                       )
                                       ## </constant>
     ||    ( ( $pos = $pad{I1645} ) && 0 ) )
                                   &&
                                      (   ( $pad{I1646} = $pos or 1 ) &&
                                       ## <metasyntax>
                                       do {
                                            my $prior = $::_V6_PRIOR_;
                                            my $match =
                                                   $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                            $::_V6_PRIOR_ = $prior;
                                            my $bool = (!$match != 1);
                                            $pos = $match->to if $bool;
                                            $match;
                                       }
                                       ## </metasyntax>
     ||    ( ( $pos = $pad{I1646} ) && 0 ) )
                                   &&
                                     ## <constant>
                                     ( ( substr( $s, $pos, 1 ) eq 'E' )
                                         ? ( $pos += 1 or 1 )
                                         : 0
                                     )
                                     ## </constant>
    
                                   &&
                                     ## <constant>
                                     ( ( substr( $s, $pos, 1 ) eq 'N' )
                                         ? ( $pos += 1 or 1 )
                                         : 0
                                     )
                                     ## </constant>
    
                                   &&
                                      (   ( $pad{I1647} = $pos or 1 ) &&
                                       ## <constant>
                                       ( ( substr( $s, $pos, 1 ) eq 'D' )
                                           ? ( $pos += 1 or 1 )
                                           : 0
                                       )
                                       ## </constant>
     ||    ( ( $pos = $pad{I1647} ) && 0 ) )
                                   &&
                                     do { while (
                                      (   ( $pad{I1648} = $pos or 1 ) &&
                                         ## <perl5>
                                         ( ( substr( $s, $pos ) =~ m/^((?!\n\r?|\r\n?).)/ )
                                             ? ( $pos += length( $1 ) or 1 )
                                             : 0
                                         )
                                         ## </perl5>
     ||    ( ( $pos = $pad{I1648} ) && 0 ) )) {}; $bool = 1 }
                                   &&
                                     do { while (
                                      (   ( $pad{I1649} = $pos or 1 ) &&
                                         ( substr( $s, $pos++, 1 ) ne '' ) ||    ( ( $pos = $pad{I1649} ) && 0 ) )) {}; $bool = 1 }
                                   )
                                   )
                                 || (
                                   ( ( $bool = 1 ) && ( $pos = $pad{I1643} ) or 1 )
                                   &&                                (
                                      (   ( $pad{I1650} = $pos or 1 ) &&
                                       ## <constant>
                                       ( ( substr( $s, $pos, 1 ) eq 'b' )
                                           ? ( $pos += 1 or 1 )
                                           : 0
                                       )
                                       ## </constant>
     ||    ( ( $pos = $pad{I1650} ) && 0 ) )
                                   &&
                                     ## <constant>
                                     ( ( substr( $s, $pos, 1 ) eq 'e' )
                                         ? ( $pos += 1 or 1 )
                                         : 0
                                     )
                                     ## </constant>
    
                                   &&
                                     ## <constant>
                                     ( ( substr( $s, $pos, 1 ) eq 'g' )
                                         ? ( $pos += 1 or 1 )
                                         : 0
                                     )
                                     ## </constant>
    
                                   &&
                                     ## <constant>
                                     ( ( substr( $s, $pos, 1 ) eq 'i' )
                                         ? ( $pos += 1 or 1 )
                                         : 0
                                     )
                                     ## </constant>
    
                                   &&
                                      (   ( $pad{I1651} = $pos or 1 ) &&
                                       ## <constant>
                                       ( ( substr( $s, $pos, 1 ) eq 'n' )
                                           ? ( $pos += 1 or 1 )
                                           : 0
                                       )
                                       ## </constant>
     ||    ( ( $pos = $pad{I1651} ) && 0 ) )
                                   &&
                                      (   ( $pad{I1652} = $pos or 1 ) &&
                                       ## <metasyntax>
                                       do {
                                            my $prior = $::_V6_PRIOR_;
                                            my $match =
                                                   $grammar->pod_begin( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                            $::_V6_PRIOR_ = $prior;
                                            my $bool = (!$match != 1);
                                            $pos = $match->to if $bool;
                                            $match;
                                       }
                                       ## </metasyntax>
     ||    ( ( $pos = $pad{I1652} ) && 0 ) )
                                   )
                                   )
                                 || (
                                   ( ( $bool = 1 ) && ( $pos = $pad{I1643} ) or 1 )
                                   &&                                (
                                      (   ( $pad{I1653} = $pos or 1 ) &&
                                       ## <constant>
                                       ( ( substr( $s, $pos, 1 ) eq 'k' )
                                           ? ( $pos += 1 or 1 )
                                           : 0
                                       )
                                       ## </constant>
     ||    ( ( $pos = $pad{I1653} ) && 0 ) )
                                   &&
                                     ## <constant>
                                     ( ( substr( $s, $pos, 1 ) eq 'w' )
                                         ? ( $pos += 1 or 1 )
                                         : 0
                                     )
                                     ## </constant>
    
                                   &&
                                     ## <constant>
                                     ( ( substr( $s, $pos, 1 ) eq 'i' )
                                         ? ( $pos += 1 or 1 )
                                         : 0
                                     )
                                     ## </constant>
    
                                   &&
                                      (   ( $pad{I1654} = $pos or 1 ) &&
                                       ## <constant>
                                       ( ( substr( $s, $pos, 1 ) eq 'd' )
                                           ? ( $pos += 1 or 1 )
                                           : 0
                                       )
                                       ## </constant>
     ||    ( ( $pos = $pad{I1654} ) && 0 ) )
                                   &&
                                      (   ( $pad{I1655} = $pos or 1 ) &&
                                       ## <metasyntax>
                                       do {
                                            my $prior = $::_V6_PRIOR_;
                                            my $match =
                                                   $grammar->pod_other( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                            $::_V6_PRIOR_ = $prior;
                                            my $bool = (!$match != 1);
                                            $pos = $match->to if $bool;
                                            $match;
                                       }
                                       ## </metasyntax>
     ||    ( ( $pos = $pad{I1655} ) && 0 ) )
                                   )
                                   )
                                 || (
                                   ( ( $bool = 1 ) && ( $pos = $pad{I1643} ) or 1 )
                                   &&                                (
                                      (   ( $pad{I1656} = $pos or 1 ) &&
                                       ## <constant>
                                       ( ( substr( $s, $pos, 1 ) eq 'p' )
                                           ? ( $pos += 1 or 1 )
                                           : 0
                                       )
                                       ## </constant>
     ||    ( ( $pos = $pad{I1656} ) && 0 ) )
                                   &&
                                     ## <constant>
                                     ( ( substr( $s, $pos, 1 ) eq 'o' )
                                         ? ( $pos += 1 or 1 )
                                         : 0
                                     )
                                     ## </constant>
    
                                   &&
                                      (   ( $pad{I1657} = $pos or 1 ) &&
                                       ## <constant>
                                       ( ( substr( $s, $pos, 1 ) eq 'd' )
                                           ? ( $pos += 1 or 1 )
                                           : 0
                                       )
                                       ## </constant>
     ||    ( ( $pos = $pad{I1657} ) && 0 ) )
                                   &&
                                      (   ( $pad{I1658} = $pos or 1 ) &&
                                       ## <metasyntax>
                                       do {
                                            my $prior = $::_V6_PRIOR_;
                                            my $match =
                                                   $grammar->pod_other( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                            $::_V6_PRIOR_ = $prior;
                                            my $bool = (!$match != 1);
                                            $pos = $match->to if $bool;
                                            $match;
                                       }
                                       ## </metasyntax>
     ||    ( ( $pos = $pad{I1658} ) && 0 ) )
                                   )
                                   )
                                 || (
                                   ( ( $bool = 1 ) && ( $pos = $pad{I1643} ) or 1 )
                                   &&                                (
                                      (   ( $pad{I1659} = $pos or 1 ) &&
                                       ## <constant>
                                       ( ( substr( $s, $pos, 1 ) eq 'f' )
                                           ? ( $pos += 1 or 1 )
                                           : 0
                                       )
                                       ## </constant>
     ||    ( ( $pos = $pad{I1659} ) && 0 ) )
                                   &&
                                     ## <constant>
                                     ( ( substr( $s, $pos, 1 ) eq 'o' )
                                         ? ( $pos += 1 or 1 )
                                         : 0
                                     )
                                     ## </constant>
    
                                   &&
                                      (   ( $pad{I1660} = $pos or 1 ) &&
                                       ## <constant>
                                       ( ( substr( $s, $pos, 1 ) eq 'r' )
                                           ? ( $pos += 1 or 1 )
                                           : 0
                                       )
                                       ## </constant>
     ||    ( ( $pos = $pad{I1660} ) && 0 ) )
                                   &&
                                      (   ( $pad{I1661} = $pos or 1 ) &&
                                       ## <metasyntax>
                                       do {
                                            my $prior = $::_V6_PRIOR_;
                                            my $match =
                                                   $grammar->pod_other( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                            $::_V6_PRIOR_ = $prior;
                                            my $bool = (!$match != 1);
                                            $pos = $match->to if $bool;
                                            $match;
                                       }
                                       ## </metasyntax>
     ||    ( ( $pos = $pad{I1661} ) && 0 ) )
                                   )
                                   )
                                 || (
                                   ( ( $bool = 1 ) && ( $pos = $pad{I1643} ) or 1 )
                                   &&                                (
                                      (   ( $pad{I1662} = $pos or 1 ) &&
                                       ## <constant>
                                       ( ( substr( $s, $pos, 1 ) eq 'h' )
                                           ? ( $pos += 1 or 1 )
                                           : 0
                                       )
                                       ## </constant>
     ||    ( ( $pos = $pad{I1662} ) && 0 ) )
                                   &&
                                     ## <constant>
                                     ( ( substr( $s, $pos, 1 ) eq 'e' )
                                         ? ( $pos += 1 or 1 )
                                         : 0
                                     )
                                     ## </constant>
    
                                   &&
                                     ## <constant>
                                     ( ( substr( $s, $pos, 1 ) eq 'a' )
                                         ? ( $pos += 1 or 1 )
                                         : 0
                                     )
                                     ## </constant>
    
                                   &&
                                     ## <constant>
                                     ( ( substr( $s, $pos, 1 ) eq 'd' )
                                         ? ( $pos += 1 or 1 )
                                         : 0
                                     )
                                     ## </constant>
    
                                   &&
                                      (   ( $pad{I1663} = $pos or 1 ) &&
                                       ## <constant>
                                       ( ( substr( $s, $pos, 1 ) eq '1' )
                                           ? ( $pos += 1 or 1 )
                                           : 0
                                       )
                                       ## </constant>
     ||    ( ( $pos = $pad{I1663} ) && 0 ) )
                                   &&
                                      (   ( $pad{I1664} = $pos or 1 ) &&
                                       ## <metasyntax>
                                       do {
                                            my $prior = $::_V6_PRIOR_;
                                            my $match =
                                                   $grammar->pod_other( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                            $::_V6_PRIOR_ = $prior;
                                            my $bool = (!$match != 1);
                                            $pos = $match->to if $bool;
                                            $match;
                                       }
                                       ## </metasyntax>
     ||    ( ( $pos = $pad{I1664} ) && 0 ) )
                                   )
                                 )
                               )
    ## </alt>
     ||    ( ( $pos = $pad{I1642} ) && 0 ) )
                           || ( $bool = 1 )
                           ) 
                         ) ||    ( ( $pos = $pad{I1640} ) && 0 ) )
                     || ( $bool = 1 )
                     ) 
                   )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1636} ) or 1 )
                   &&                 (   ( $pad{I1665} = $pos or 1 ) &&
                     ## <perl5>
                     ( ( substr( $s, $pos ) =~ m/^(\s)/ )
                         ? ( $pos += length( $1 ) or 1 )
                         : 0
                     )
                     ## </perl5>
     ||    ( ( $pos = $pad{I1665} ) && 0 ) )
                 )
               )
    ## </alt>
     ||    ( ( $pos = $pad{I1635} ) && 0 ) )
           && do { while (
            (   ( $pad{I1635} = $pos or 1 ) &&
               ## <alt>
               (
                   ( $pad{I1636} = $pos or 1 )
                   && (
                   (
                      (   ( $pad{I1637} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '#' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1637} ) && 0 ) )
                   &&
                     do { while (
                      (   ( $pad{I1638} = $pos or 1 ) &&
                         ## <perl5>
                         ( ( substr( $s, $pos ) =~ m/^((?!\n\r?|\r\n?).)/ )
                             ? ( $pos += length( $1 ) or 1 )
                             : 0
                         )
                         ## </perl5>
     ||    ( ( $pos = $pad{I1638} ) && 0 ) )) {}; $bool = 1 }
                   )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1636} ) or 1 )
                   &&                (
                      (   ( $pad{I1639} = $pos or 1 ) &&
                       ## <perl5>
                       ( ( substr( $s, $pos ) =~ m/^((?:\n\r?|\r\n?))/ )
                           ? ( $pos += length( $1 ) or 1 )
                           : 0
                       )
                       ## </perl5>
     ||    ( ( $pos = $pad{I1639} ) && 0 ) )
                   &&
                     (
                      (   ( $pad{I1640} = $pos or 1 ) &&
                         (
                            (   ( $pad{I1641} = $pos or 1 ) &&
                             ## <constant>
                             ( ( substr( $s, $pos, 1 ) eq '=' )
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             )
                             ## </constant>
     ||    ( ( $pos = $pad{I1641} ) && 0 ) )
                         &&
                           (
                            (   ( $pad{I1642} = $pos or 1 ) &&
                               ## <alt>
                               (
                                   ( $pad{I1643} = $pos or 1 )
                                   && (
                                   (
                                      (   ( $pad{I1644} = $pos or 1 ) &&
                                       ## <constant>
                                       ( ( substr( $s, $pos, 1 ) eq 'b' )
                                           ? ( $pos += 1 or 1 )
                                           : 0
                                       )
                                       ## </constant>
     ||    ( ( $pos = $pad{I1644} ) && 0 ) )
                                   &&
                                     ## <constant>
                                     ( ( substr( $s, $pos, 1 ) eq 'e' )
                                         ? ( $pos += 1 or 1 )
                                         : 0
                                     )
                                     ## </constant>
    
                                   &&
                                     ## <constant>
                                     ( ( substr( $s, $pos, 1 ) eq 'g' )
                                         ? ( $pos += 1 or 1 )
                                         : 0
                                     )
                                     ## </constant>
    
                                   &&
                                     ## <constant>
                                     ( ( substr( $s, $pos, 1 ) eq 'i' )
                                         ? ( $pos += 1 or 1 )
                                         : 0
                                     )
                                     ## </constant>
    
                                   &&
                                      (   ( $pad{I1645} = $pos or 1 ) &&
                                       ## <constant>
                                       ( ( substr( $s, $pos, 1 ) eq 'n' )
                                           ? ( $pos += 1 or 1 )
                                           : 0
                                       )
                                       ## </constant>
     ||    ( ( $pos = $pad{I1645} ) && 0 ) )
                                   &&
                                      (   ( $pad{I1646} = $pos or 1 ) &&
                                       ## <metasyntax>
                                       do {
                                            my $prior = $::_V6_PRIOR_;
                                            my $match =
                                                   $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                            $::_V6_PRIOR_ = $prior;
                                            my $bool = (!$match != 1);
                                            $pos = $match->to if $bool;
                                            $match;
                                       }
                                       ## </metasyntax>
     ||    ( ( $pos = $pad{I1646} ) && 0 ) )
                                   &&
                                     ## <constant>
                                     ( ( substr( $s, $pos, 1 ) eq 'E' )
                                         ? ( $pos += 1 or 1 )
                                         : 0
                                     )
                                     ## </constant>
    
                                   &&
                                     ## <constant>
                                     ( ( substr( $s, $pos, 1 ) eq 'N' )
                                         ? ( $pos += 1 or 1 )
                                         : 0
                                     )
                                     ## </constant>
    
                                   &&
                                      (   ( $pad{I1647} = $pos or 1 ) &&
                                       ## <constant>
                                       ( ( substr( $s, $pos, 1 ) eq 'D' )
                                           ? ( $pos += 1 or 1 )
                                           : 0
                                       )
                                       ## </constant>
     ||    ( ( $pos = $pad{I1647} ) && 0 ) )
                                   &&
                                     do { while (
                                      (   ( $pad{I1648} = $pos or 1 ) &&
                                         ## <perl5>
                                         ( ( substr( $s, $pos ) =~ m/^((?!\n\r?|\r\n?).)/ )
                                             ? ( $pos += length( $1 ) or 1 )
                                             : 0
                                         )
                                         ## </perl5>
     ||    ( ( $pos = $pad{I1648} ) && 0 ) )) {}; $bool = 1 }
                                   &&
                                     do { while (
                                      (   ( $pad{I1649} = $pos or 1 ) &&
                                         ( substr( $s, $pos++, 1 ) ne '' ) ||    ( ( $pos = $pad{I1649} ) && 0 ) )) {}; $bool = 1 }
                                   )
                                   )
                                 || (
                                   ( ( $bool = 1 ) && ( $pos = $pad{I1643} ) or 1 )
                                   &&                                (
                                      (   ( $pad{I1650} = $pos or 1 ) &&
                                       ## <constant>
                                       ( ( substr( $s, $pos, 1 ) eq 'b' )
                                           ? ( $pos += 1 or 1 )
                                           : 0
                                       )
                                       ## </constant>
     ||    ( ( $pos = $pad{I1650} ) && 0 ) )
                                   &&
                                     ## <constant>
                                     ( ( substr( $s, $pos, 1 ) eq 'e' )
                                         ? ( $pos += 1 or 1 )
                                         : 0
                                     )
                                     ## </constant>
    
                                   &&
                                     ## <constant>
                                     ( ( substr( $s, $pos, 1 ) eq 'g' )
                                         ? ( $pos += 1 or 1 )
                                         : 0
                                     )
                                     ## </constant>
    
                                   &&
                                     ## <constant>
                                     ( ( substr( $s, $pos, 1 ) eq 'i' )
                                         ? ( $pos += 1 or 1 )
                                         : 0
                                     )
                                     ## </constant>
    
                                   &&
                                      (   ( $pad{I1651} = $pos or 1 ) &&
                                       ## <constant>
                                       ( ( substr( $s, $pos, 1 ) eq 'n' )
                                           ? ( $pos += 1 or 1 )
                                           : 0
                                       )
                                       ## </constant>
     ||    ( ( $pos = $pad{I1651} ) && 0 ) )
                                   &&
                                      (   ( $pad{I1652} = $pos or 1 ) &&
                                       ## <metasyntax>
                                       do {
                                            my $prior = $::_V6_PRIOR_;
                                            my $match =
                                                   $grammar->pod_begin( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                            $::_V6_PRIOR_ = $prior;
                                            my $bool = (!$match != 1);
                                            $pos = $match->to if $bool;
                                            $match;
                                       }
                                       ## </metasyntax>
     ||    ( ( $pos = $pad{I1652} ) && 0 ) )
                                   )
                                   )
                                 || (
                                   ( ( $bool = 1 ) && ( $pos = $pad{I1643} ) or 1 )
                                   &&                                (
                                      (   ( $pad{I1653} = $pos or 1 ) &&
                                       ## <constant>
                                       ( ( substr( $s, $pos, 1 ) eq 'k' )
                                           ? ( $pos += 1 or 1 )
                                           : 0
                                       )
                                       ## </constant>
     ||    ( ( $pos = $pad{I1653} ) && 0 ) )
                                   &&
                                     ## <constant>
                                     ( ( substr( $s, $pos, 1 ) eq 'w' )
                                         ? ( $pos += 1 or 1 )
                                         : 0
                                     )
                                     ## </constant>
    
                                   &&
                                     ## <constant>
                                     ( ( substr( $s, $pos, 1 ) eq 'i' )
                                         ? ( $pos += 1 or 1 )
                                         : 0
                                     )
                                     ## </constant>
    
                                   &&
                                      (   ( $pad{I1654} = $pos or 1 ) &&
                                       ## <constant>
                                       ( ( substr( $s, $pos, 1 ) eq 'd' )
                                           ? ( $pos += 1 or 1 )
                                           : 0
                                       )
                                       ## </constant>
     ||    ( ( $pos = $pad{I1654} ) && 0 ) )
                                   &&
                                      (   ( $pad{I1655} = $pos or 1 ) &&
                                       ## <metasyntax>
                                       do {
                                            my $prior = $::_V6_PRIOR_;
                                            my $match =
                                                   $grammar->pod_other( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                            $::_V6_PRIOR_ = $prior;
                                            my $bool = (!$match != 1);
                                            $pos = $match->to if $bool;
                                            $match;
                                       }
                                       ## </metasyntax>
     ||    ( ( $pos = $pad{I1655} ) && 0 ) )
                                   )
                                   )
                                 || (
                                   ( ( $bool = 1 ) && ( $pos = $pad{I1643} ) or 1 )
                                   &&                                (
                                      (   ( $pad{I1656} = $pos or 1 ) &&
                                       ## <constant>
                                       ( ( substr( $s, $pos, 1 ) eq 'p' )
                                           ? ( $pos += 1 or 1 )
                                           : 0
                                       )
                                       ## </constant>
     ||    ( ( $pos = $pad{I1656} ) && 0 ) )
                                   &&
                                     ## <constant>
                                     ( ( substr( $s, $pos, 1 ) eq 'o' )
                                         ? ( $pos += 1 or 1 )
                                         : 0
                                     )
                                     ## </constant>
    
                                   &&
                                      (   ( $pad{I1657} = $pos or 1 ) &&
                                       ## <constant>
                                       ( ( substr( $s, $pos, 1 ) eq 'd' )
                                           ? ( $pos += 1 or 1 )
                                           : 0
                                       )
                                       ## </constant>
     ||    ( ( $pos = $pad{I1657} ) && 0 ) )
                                   &&
                                      (   ( $pad{I1658} = $pos or 1 ) &&
                                       ## <metasyntax>
                                       do {
                                            my $prior = $::_V6_PRIOR_;
                                            my $match =
                                                   $grammar->pod_other( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                            $::_V6_PRIOR_ = $prior;
                                            my $bool = (!$match != 1);
                                            $pos = $match->to if $bool;
                                            $match;
                                       }
                                       ## </metasyntax>
     ||    ( ( $pos = $pad{I1658} ) && 0 ) )
                                   )
                                   )
                                 || (
                                   ( ( $bool = 1 ) && ( $pos = $pad{I1643} ) or 1 )
                                   &&                                (
                                      (   ( $pad{I1659} = $pos or 1 ) &&
                                       ## <constant>
                                       ( ( substr( $s, $pos, 1 ) eq 'f' )
                                           ? ( $pos += 1 or 1 )
                                           : 0
                                       )
                                       ## </constant>
     ||    ( ( $pos = $pad{I1659} ) && 0 ) )
                                   &&
                                     ## <constant>
                                     ( ( substr( $s, $pos, 1 ) eq 'o' )
                                         ? ( $pos += 1 or 1 )
                                         : 0
                                     )
                                     ## </constant>
    
                                   &&
                                      (   ( $pad{I1660} = $pos or 1 ) &&
                                       ## <constant>
                                       ( ( substr( $s, $pos, 1 ) eq 'r' )
                                           ? ( $pos += 1 or 1 )
                                           : 0
                                       )
                                       ## </constant>
     ||    ( ( $pos = $pad{I1660} ) && 0 ) )
                                   &&
                                      (   ( $pad{I1661} = $pos or 1 ) &&
                                       ## <metasyntax>
                                       do {
                                            my $prior = $::_V6_PRIOR_;
                                            my $match =
                                                   $grammar->pod_other( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                            $::_V6_PRIOR_ = $prior;
                                            my $bool = (!$match != 1);
                                            $pos = $match->to if $bool;
                                            $match;
                                       }
                                       ## </metasyntax>
     ||    ( ( $pos = $pad{I1661} ) && 0 ) )
                                   )
                                   )
                                 || (
                                   ( ( $bool = 1 ) && ( $pos = $pad{I1643} ) or 1 )
                                   &&                                (
                                      (   ( $pad{I1662} = $pos or 1 ) &&
                                       ## <constant>
                                       ( ( substr( $s, $pos, 1 ) eq 'h' )
                                           ? ( $pos += 1 or 1 )
                                           : 0
                                       )
                                       ## </constant>
     ||    ( ( $pos = $pad{I1662} ) && 0 ) )
                                   &&
                                     ## <constant>
                                     ( ( substr( $s, $pos, 1 ) eq 'e' )
                                         ? ( $pos += 1 or 1 )
                                         : 0
                                     )
                                     ## </constant>
    
                                   &&
                                     ## <constant>
                                     ( ( substr( $s, $pos, 1 ) eq 'a' )
                                         ? ( $pos += 1 or 1 )
                                         : 0
                                     )
                                     ## </constant>
    
                                   &&
                                     ## <constant>
                                     ( ( substr( $s, $pos, 1 ) eq 'd' )
                                         ? ( $pos += 1 or 1 )
                                         : 0
                                     )
                                     ## </constant>
    
                                   &&
                                      (   ( $pad{I1663} = $pos or 1 ) &&
                                       ## <constant>
                                       ( ( substr( $s, $pos, 1 ) eq '1' )
                                           ? ( $pos += 1 or 1 )
                                           : 0
                                       )
                                       ## </constant>
     ||    ( ( $pos = $pad{I1663} ) && 0 ) )
                                   &&
                                      (   ( $pad{I1664} = $pos or 1 ) &&
                                       ## <metasyntax>
                                       do {
                                            my $prior = $::_V6_PRIOR_;
                                            my $match =
                                                   $grammar->pod_other( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                            $::_V6_PRIOR_ = $prior;
                                            my $bool = (!$match != 1);
                                            $pos = $match->to if $bool;
                                            $match;
                                       }
                                       ## </metasyntax>
     ||    ( ( $pos = $pad{I1664} ) && 0 ) )
                                   )
                                 )
                               )
    ## </alt>
     ||    ( ( $pos = $pad{I1642} ) && 0 ) )
                           || ( $bool = 1 )
                           ) 
                         ) ||    ( ( $pos = $pad{I1640} ) && 0 ) )
                     || ( $bool = 1 )
                     ) 
                   )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1636} ) or 1 )
                   &&                 (   ( $pad{I1665} = $pos or 1 ) &&
                     ## <perl5>
                     ( ( substr( $s, $pos ) =~ m/^(\s)/ )
                         ? ( $pos += length( $1 ) or 1 )
                         : 0
                     )
                     ## </perl5>
     ||    ( ( $pos = $pad{I1665} ) && 0 ) )
                 )
               )
    ## </alt>
     ||    ( ( $pos = $pad{I1635} ) && 0 ) )) {}; $bool = 1 }
           ) ;
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# token ident
*ident =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           (
            (   ( $pad{I1666} = $pos or 1 ) &&
               ## <alt>
               (
                   ( $pad{I1667} = $pos or 1 )
                   && (
                    (   ( $pad{I1668} = $pos or 1 ) &&
                     ## <metasyntax>
                     do {
                          my $prior = $::_V6_PRIOR_;
                          my $match =
                                 $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                          $::_V6_PRIOR_ = $prior;
                          my $bool = (!$match != 1);
                          $pos = $match->to if $bool;
                          $match;
                     }
                     ## </metasyntax>
     ||    ( ( $pos = $pad{I1668} ) && 0 ) )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1667} ) or 1 )
                   &&                 (   ( $pad{I1669} = $pos or 1 ) &&
                     ## <constant>
                     ( ( substr( $s, $pos, 1 ) eq '_' )
                         ? ( $pos += 1 or 1 )
                         : 0
                     )
                     ## </constant>
     ||    ( ( $pos = $pad{I1669} ) && 0 ) )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1667} ) or 1 )
                   &&                 (   ( $pad{I1670} = $pos or 1 ) &&
                     ## <constant>
                     ( ( substr( $s, $pos, 2 ) eq '::' )
                         ? ( $pos += 2 or 1 )
                         : 0
                     )
                     ## </constant>
     ||    ( ( $pos = $pad{I1670} ) && 0 ) )
                 )
               )
    ## </alt>
     ||    ( ( $pos = $pad{I1666} ) && 0 ) )
           && do { while (
            (   ( $pad{I1666} = $pos or 1 ) &&
               ## <alt>
               (
                   ( $pad{I1667} = $pos or 1 )
                   && (
                    (   ( $pad{I1668} = $pos or 1 ) &&
                     ## <metasyntax>
                     do {
                          my $prior = $::_V6_PRIOR_;
                          my $match =
                                 $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                          $::_V6_PRIOR_ = $prior;
                          my $bool = (!$match != 1);
                          $pos = $match->to if $bool;
                          $match;
                     }
                     ## </metasyntax>
     ||    ( ( $pos = $pad{I1668} ) && 0 ) )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1667} ) or 1 )
                   &&                 (   ( $pad{I1669} = $pos or 1 ) &&
                     ## <constant>
                     ( ( substr( $s, $pos, 1 ) eq '_' )
                         ? ( $pos += 1 or 1 )
                         : 0
                     )
                     ## </constant>
     ||    ( ( $pos = $pad{I1669} ) && 0 ) )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1667} ) or 1 )
                   &&                 (   ( $pad{I1670} = $pos or 1 ) &&
                     ## <constant>
                     ( ( substr( $s, $pos, 2 ) eq '::' )
                         ? ( $pos += 2 or 1 )
                         : 0
                     )
                     ## </constant>
     ||    ( ( $pos = $pad{I1670} ) && 0 ) )
                 )
               )
    ## </alt>
     ||    ( ( $pos = $pad{I1666} ) && 0 ) )) {}; $bool = 1 }
           ) ;
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# token alnum
*alnum =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
            (   ( $pad{I1671} = $pos or 1 ) &&
             ## <perl5>
             ( ( substr( $s, $pos ) =~ m/^((?:(?=[0-9a-zA-Z]))\X)/ )
                 ? ( $pos += length( $1 ) or 1 )
                 : 0
             )
             ## </perl5>
     ||    ( ( $pos = $pad{I1671} ) && 0 ) );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# token alpha
*alpha =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
            (   ( $pad{I1672} = $pos or 1 ) &&
             ## <perl5>
             ( ( substr( $s, $pos ) =~ m/^((?:(?=[a-zA-Z]))\X)/ )
                 ? ( $pos += length( $1 ) or 1 )
                 : 0
             )
             ## </perl5>
     ||    ( ( $pos = $pad{I1672} ) && 0 ) );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# token digit
*digit =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
            (   ( $pad{I1673} = $pos or 1 ) &&
             ## <perl5>
             ( ( substr( $s, $pos ) =~ m/^((?:(?=[0-9]))\X)/ )
                 ? ( $pos += length( $1 ) or 1 )
                 : 0
             )
             ## </perl5>
     ||    ( ( $pos = $pad{I1673} ) && 0 ) );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# token special_char
*special_char =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           ## <alt>
           (
               ( $pad{I1674} = $pos or 1 )
               && (
               (
                  (   ( $pad{I1675} = $pos or 1 ) &&
                   do{
                       my $hash = do {
                         my $bool = 1;
                         my $from = $pos;
                         my @match;
                         my %named;
                         $bool = 0 unless
                           ## <alt>
                           (
                               ( $pad{I1676} = $pos or 1 )
                               && (
                                (   ( $pad{I1677} = $pos or 1 ) &&
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq 'c' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>
     ||    ( ( $pos = $pad{I1677} ) && 0 ) )
                               )
                             || (
                               ( ( $bool = 1 ) && ( $pos = $pad{I1676} ) or 1 )
                               &&                             (   ( $pad{I1678} = $pos or 1 ) &&
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq 'C' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>
     ||    ( ( $pos = $pad{I1678} ) && 0 ) )
                             )
                           )
    ## </alt>
    ;
                         { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                       };
                       my $bool = ${$hash->{'bool'}};
                       $match[ 0 ] = Pugs::Runtime::Match->new( $hash );
                       $bool;
                   } ||    ( ( $pos = $pad{I1675} ) && 0 ) )
               &&
                  (   ( $pad{I1679} = $pos or 1 ) &&
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '[' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
     ||    ( ( $pos = $pad{I1679} ) && 0 ) )
               &&
                  (   ( $pad{I1680} = $pos or 1 ) &&
                   do{
                       my $hash = do {
                         my $bool = 1;
                         my $from = $pos;
                         my @match;
                         my %named;
                         $bool = 0 unless
                           (
                            (   ( $pad{I1681} = $pos or 1 ) &&
                               ## <alt>
                               (
                                   ( $pad{I1682} = $pos or 1 )
                                   && (
                                   do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                                               $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { push @{$named{'alnum'}}, $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                }
                                   )
                                 || (
                                   ( ( $bool = 1 ) && ( $pos = $pad{I1682} ) or 1 )
                                   &&                                ## <perl5>
                                   ( ( substr( $s, $pos ) =~ m/^(\s)/ )
                                       ? ( $pos += length( $1 ) or 1 )
                                       : 0
                                   )
                                   ## </perl5>
    
                                   )
                                 || (
                                   ( ( $bool = 1 ) && ( $pos = $pad{I1682} ) or 1 )
                                   &&                                 (   ( $pad{I1683} = $pos or 1 ) &&
                                     ## <constant>
                                     ( ( substr( $s, $pos, 1 ) eq ';' )
                                         ? ( $pos += 1 or 1 )
                                         : 0
                                     )
                                     ## </constant>
     ||    ( ( $pos = $pad{I1683} ) && 0 ) )
                                   )
                                 || (
                                   ( ( $bool = 1 ) && ( $pos = $pad{I1682} ) or 1 )
                                   &&                                 (   ( $pad{I1684} = $pos or 1 ) &&
                                     ## <constant>
                                     ( ( substr( $s, $pos, 1 ) eq '(' )
                                         ? ( $pos += 1 or 1 )
                                         : 0
                                     )
                                     ## </constant>
     ||    ( ( $pos = $pad{I1684} ) && 0 ) )
                                   )
                                 || (
                                   ( ( $bool = 1 ) && ( $pos = $pad{I1682} ) or 1 )
                                   &&                                 (   ( $pad{I1685} = $pos or 1 ) &&
                                     ## <constant>
                                     ( ( substr( $s, $pos, 1 ) eq ')' )
                                         ? ( $pos += 1 or 1 )
                                         : 0
                                     )
                                     ## </constant>
     ||    ( ( $pos = $pad{I1685} ) && 0 ) )
                                   )
                                 || (
                                   ( ( $bool = 1 ) && ( $pos = $pad{I1682} ) or 1 )
                                   &&                                 (   ( $pad{I1686} = $pos or 1 ) &&
                                     ## <constant>
                                     ( ( substr( $s, $pos, 1 ) eq '-' )
                                         ? ( $pos += 1 or 1 )
                                         : 0
                                     )
                                     ## </constant>
     ||    ( ( $pos = $pad{I1686} ) && 0 ) )
                                 )
                               )
    ## </alt>
     ||    ( ( $pos = $pad{I1681} ) && 0 ) )
                           && do { while (
                            (   ( $pad{I1681} = $pos or 1 ) &&
                               ## <alt>
                               (
                                   ( $pad{I1682} = $pos or 1 )
                                   && (
                                   do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                                               $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { push @{$named{'alnum'}}, $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                }
                                   )
                                 || (
                                   ( ( $bool = 1 ) && ( $pos = $pad{I1682} ) or 1 )
                                   &&                                ## <perl5>
                                   ( ( substr( $s, $pos ) =~ m/^(\s)/ )
                                       ? ( $pos += length( $1 ) or 1 )
                                       : 0
                                   )
                                   ## </perl5>
    
                                   )
                                 || (
                                   ( ( $bool = 1 ) && ( $pos = $pad{I1682} ) or 1 )
                                   &&                                 (   ( $pad{I1683} = $pos or 1 ) &&
                                     ## <constant>
                                     ( ( substr( $s, $pos, 1 ) eq ';' )
                                         ? ( $pos += 1 or 1 )
                                         : 0
                                     )
                                     ## </constant>
     ||    ( ( $pos = $pad{I1683} ) && 0 ) )
                                   )
                                 || (
                                   ( ( $bool = 1 ) && ( $pos = $pad{I1682} ) or 1 )
                                   &&                                 (   ( $pad{I1684} = $pos or 1 ) &&
                                     ## <constant>
                                     ( ( substr( $s, $pos, 1 ) eq '(' )
                                         ? ( $pos += 1 or 1 )
                                         : 0
                                     )
                                     ## </constant>
     ||    ( ( $pos = $pad{I1684} ) && 0 ) )
                                   )
                                 || (
                                   ( ( $bool = 1 ) && ( $pos = $pad{I1682} ) or 1 )
                                   &&                                 (   ( $pad{I1685} = $pos or 1 ) &&
                                     ## <constant>
                                     ( ( substr( $s, $pos, 1 ) eq ')' )
                                         ? ( $pos += 1 or 1 )
                                         : 0
                                     )
                                     ## </constant>
     ||    ( ( $pos = $pad{I1685} ) && 0 ) )
                                   )
                                 || (
                                   ( ( $bool = 1 ) && ( $pos = $pad{I1682} ) or 1 )
                                   &&                                 (   ( $pad{I1686} = $pos or 1 ) &&
                                     ## <constant>
                                     ( ( substr( $s, $pos, 1 ) eq '-' )
                                         ? ( $pos += 1 or 1 )
                                         : 0
                                     )
                                     ## </constant>
     ||    ( ( $pos = $pad{I1686} ) && 0 ) )
                                 )
                               )
    ## </alt>
     ||    ( ( $pos = $pad{I1681} ) && 0 ) )) {}; $bool = 1 }
                           ) ;
                         { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                       };
                       my $bool = ${$hash->{'bool'}};
                       $match[ 1 ] = Pugs::Runtime::Match->new( $hash );
                       $bool;
                   } ||    ( ( $pos = $pad{I1680} ) && 0 ) )
               &&
                  (   ( $pad{I1687} = $pos or 1 ) &&
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq ']' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
     ||    ( ( $pos = $pad{I1687} ) && 0 ) )
               &&
                  (   ( $pad{I1688} = $pos or 1 ) &&
                   do { 
                     local $::_V6_SUCCEED = 1;
                     $::_V6_MATCH_ = $m;
                     $m->data->{capture} = \( sub { return { special_char => '\\' . $_[0]->[0] . $_[0]->[1], _pos => [$_[0]->from - 1, $_[0]->to] }; }->( $m ) ); 
                     $bool = $::_V6_SUCCEED;
                     $::_V6_MATCH_ = $m if $bool; 
                     return $m if $bool; 
                   } ||    ( ( $pos = $pad{I1688} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1674} ) or 1 )
               &&            (
                  (   ( $pad{I1689} = $pos or 1 ) &&
                   ## <alt>
                   (
                       ( $pad{I1690} = $pos or 1 )
                       && (
                        (   ( $pad{I1691} = $pos or 1 ) &&
                         ## <constant>
                         ( ( substr( $s, $pos, 1 ) eq 'x' )
                             ? ( $pos += 1 or 1 )
                             : 0
                         )
                         ## </constant>
     ||    ( ( $pos = $pad{I1691} ) && 0 ) )
                       )
                     || (
                       ( ( $bool = 1 ) && ( $pos = $pad{I1690} ) or 1 )
                       &&                     (   ( $pad{I1692} = $pos or 1 ) &&
                         ## <constant>
                         ( ( substr( $s, $pos, 1 ) eq 'X' )
                             ? ( $pos += 1 or 1 )
                             : 0
                         )
                         ## </constant>
     ||    ( ( $pos = $pad{I1692} ) && 0 ) )
                     )
                   )
    ## </alt>
     ||    ( ( $pos = $pad{I1689} ) && 0 ) )
               &&
                 (
                  (   ( $pad{I1693} = $pos or 1 ) &&
                     do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                                 $grammar->xdigit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { push @{$named{'xdigit'}}, $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1693} ) && 0 ) )
                 && do { while (
                  (   ( $pad{I1693} = $pos or 1 ) &&
                     do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                                 $grammar->xdigit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { push @{$named{'xdigit'}}, $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1693} ) && 0 ) )) {}; $bool = 1 }
                 ) 
               &&
                  (   ( $pad{I1694} = $pos or 1 ) &&
                   do { 
                     local $::_V6_SUCCEED = 1;
                     $::_V6_MATCH_ = $m;
                     $m->data->{capture} = \( sub { return { special_char => '\\' . $_[0], _pos => [$_[0]->from - 1, $_[0]->to] }; }->( $m ) ); 
                     $bool = $::_V6_SUCCEED;
                     $::_V6_MATCH_ = $m if $bool; 
                     return $m if $bool; 
                   } ||    ( ( $pos = $pad{I1694} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1674} ) or 1 )
               &&            (
                  (   ( $pad{I1695} = $pos or 1 ) &&
                   do{
                       my $hash = do {
                         my $bool = 1;
                         my $from = $pos;
                         my @match;
                         my %named;
                         $bool = 0 unless
                           ## <alt>
                           (
                               ( $pad{I1696} = $pos or 1 )
                               && (
                                (   ( $pad{I1697} = $pos or 1 ) &&
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq 'x' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>
     ||    ( ( $pos = $pad{I1697} ) && 0 ) )
                               )
                             || (
                               ( ( $bool = 1 ) && ( $pos = $pad{I1696} ) or 1 )
                               &&                             (   ( $pad{I1698} = $pos or 1 ) &&
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq 'X' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>
     ||    ( ( $pos = $pad{I1698} ) && 0 ) )
                             )
                           )
    ## </alt>
    ;
                         { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                       };
                       my $bool = ${$hash->{'bool'}};
                       $match[ 0 ] = Pugs::Runtime::Match->new( $hash );
                       $bool;
                   } ||    ( ( $pos = $pad{I1695} ) && 0 ) )
               &&
                  (   ( $pad{I1699} = $pos or 1 ) &&
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '[' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
     ||    ( ( $pos = $pad{I1699} ) && 0 ) )
               &&
                  (   ( $pad{I1700} = $pos or 1 ) &&
                   do{
                       my $hash = do {
                         my $bool = 1;
                         my $from = $pos;
                         my @match;
                         my %named;
                         $bool = 0 unless
                           (
                            (   ( $pad{I1701} = $pos or 1 ) &&
                               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                                           $grammar->xdigit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { push @{$named{'xdigit'}}, $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1701} ) && 0 ) )
                           && do { while (
                            (   ( $pad{I1701} = $pos or 1 ) &&
                               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                                           $grammar->xdigit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { push @{$named{'xdigit'}}, $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1701} ) && 0 ) )) {}; $bool = 1 }
                           ) ;
                         { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                       };
                       my $bool = ${$hash->{'bool'}};
                       $match[ 1 ] = Pugs::Runtime::Match->new( $hash );
                       $bool;
                   } ||    ( ( $pos = $pad{I1700} ) && 0 ) )
               &&
                  (   ( $pad{I1702} = $pos or 1 ) &&
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq ']' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
     ||    ( ( $pos = $pad{I1702} ) && 0 ) )
               &&
                  (   ( $pad{I1703} = $pos or 1 ) &&
                   do { 
                     local $::_V6_SUCCEED = 1;
                     $::_V6_MATCH_ = $m;
                     $m->data->{capture} = \( sub { return { special_char => '\\' . $_[0]->[0] . $_[0]->[1], _pos => [$_[0]->from - 1, $_[0]->to] }; }->( $m ) ); 
                     $bool = $::_V6_SUCCEED;
                     $::_V6_MATCH_ = $m if $bool; 
                     return $m if $bool; 
                   } ||    ( ( $pos = $pad{I1703} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1674} ) or 1 )
               &&            (
                  (   ( $pad{I1704} = $pos or 1 ) &&
                   ## <alt>
                   (
                       ( $pad{I1705} = $pos or 1 )
                       && (
                        (   ( $pad{I1706} = $pos or 1 ) &&
                         ## <constant>
                         ( ( substr( $s, $pos, 1 ) eq 'o' )
                             ? ( $pos += 1 or 1 )
                             : 0
                         )
                         ## </constant>
     ||    ( ( $pos = $pad{I1706} ) && 0 ) )
                       )
                     || (
                       ( ( $bool = 1 ) && ( $pos = $pad{I1705} ) or 1 )
                       &&                     (   ( $pad{I1707} = $pos or 1 ) &&
                         ## <constant>
                         ( ( substr( $s, $pos, 1 ) eq 'O' )
                             ? ( $pos += 1 or 1 )
                             : 0
                         )
                         ## </constant>
     ||    ( ( $pos = $pad{I1707} ) && 0 ) )
                     )
                   )
    ## </alt>
     ||    ( ( $pos = $pad{I1704} ) && 0 ) )
               &&
                 (
                  (   ( $pad{I1708} = $pos or 1 ) &&
                     ## <perl5>
                     ( ( substr( $s, $pos ) =~ m/^(\d)/ )
                         ? ( $pos += length( $1 ) or 1 )
                         : 0
                     )
                     ## </perl5>
     ||    ( ( $pos = $pad{I1708} ) && 0 ) )
                 && do { while (
                  (   ( $pad{I1708} = $pos or 1 ) &&
                     ## <perl5>
                     ( ( substr( $s, $pos ) =~ m/^(\d)/ )
                         ? ( $pos += length( $1 ) or 1 )
                         : 0
                     )
                     ## </perl5>
     ||    ( ( $pos = $pad{I1708} ) && 0 ) )) {}; $bool = 1 }
                 ) 
               &&
                  (   ( $pad{I1709} = $pos or 1 ) &&
                   do { 
                     local $::_V6_SUCCEED = 1;
                     $::_V6_MATCH_ = $m;
                     $m->data->{capture} = \( sub { return { special_char => '\\' . $_[0], _pos => [$_[0]->from - 1, $_[0]->to] }; }->( $m ) ); 
                     $bool = $::_V6_SUCCEED;
                     $::_V6_MATCH_ = $m if $bool; 
                     return $m if $bool; 
                   } ||    ( ( $pos = $pad{I1709} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1674} ) or 1 )
               &&            (
                  (   ( $pad{I1710} = $pos or 1 ) &&
                   do{
                       my $hash = do {
                         my $bool = 1;
                         my $from = $pos;
                         my @match;
                         my %named;
                         $bool = 0 unless
                           ## <alt>
                           (
                               ( $pad{I1711} = $pos or 1 )
                               && (
                                (   ( $pad{I1712} = $pos or 1 ) &&
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq 'o' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>
     ||    ( ( $pos = $pad{I1712} ) && 0 ) )
                               )
                             || (
                               ( ( $bool = 1 ) && ( $pos = $pad{I1711} ) or 1 )
                               &&                             (   ( $pad{I1713} = $pos or 1 ) &&
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq 'O' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>
     ||    ( ( $pos = $pad{I1713} ) && 0 ) )
                             )
                           )
    ## </alt>
    ;
                         { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                       };
                       my $bool = ${$hash->{'bool'}};
                       $match[ 0 ] = Pugs::Runtime::Match->new( $hash );
                       $bool;
                   } ||    ( ( $pos = $pad{I1710} ) && 0 ) )
               &&
                  (   ( $pad{I1714} = $pos or 1 ) &&
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '[' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
     ||    ( ( $pos = $pad{I1714} ) && 0 ) )
               &&
                  (   ( $pad{I1715} = $pos or 1 ) &&
                   do{
                       my $hash = do {
                         my $bool = 1;
                         my $from = $pos;
                         my @match;
                         my %named;
                         $bool = 0 unless
                           (
                            (   ( $pad{I1716} = $pos or 1 ) &&
                               ## <perl5>
                               ( ( substr( $s, $pos ) =~ m/^(\d)/ )
                                   ? ( $pos += length( $1 ) or 1 )
                                   : 0
                               )
                               ## </perl5>
     ||    ( ( $pos = $pad{I1716} ) && 0 ) )
                           && do { while (
                            (   ( $pad{I1716} = $pos or 1 ) &&
                               ## <perl5>
                               ( ( substr( $s, $pos ) =~ m/^(\d)/ )
                                   ? ( $pos += length( $1 ) or 1 )
                                   : 0
                               )
                               ## </perl5>
     ||    ( ( $pos = $pad{I1716} ) && 0 ) )) {}; $bool = 1 }
                           ) ;
                         { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                       };
                       my $bool = ${$hash->{'bool'}};
                       $match[ 1 ] = Pugs::Runtime::Match->new( $hash );
                       $bool;
                   } ||    ( ( $pos = $pad{I1715} ) && 0 ) )
               &&
                  (   ( $pad{I1717} = $pos or 1 ) &&
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq ']' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
     ||    ( ( $pos = $pad{I1717} ) && 0 ) )
               &&
                  (   ( $pad{I1718} = $pos or 1 ) &&
                   do { 
                     local $::_V6_SUCCEED = 1;
                     $::_V6_MATCH_ = $m;
                     $m->data->{capture} = \( sub { return { special_char => '\\' . $_[0]->[0] . $_[0]->[1], _pos => [$_[0]->from - 1, $_[0]->to] }; }->( $m ) ); 
                     $bool = $::_V6_SUCCEED;
                     $::_V6_MATCH_ = $m if $bool; 
                     return $m if $bool; 
                   } ||    ( ( $pos = $pad{I1718} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1674} ) or 1 )
               &&            (
                  (   ( $pad{I1719} = $pos or 1 ) &&
                   ( substr( $s, $pos++, 1 ) ne '' ) ||    ( ( $pos = $pad{I1719} ) && 0 ) )
               &&
                  (   ( $pad{I1720} = $pos or 1 ) &&
                   do { 
                     local $::_V6_SUCCEED = 1;
                     $::_V6_MATCH_ = $m;
                     $m->data->{capture} = \( sub { return { special_char => '\\' . $_[0], _pos => [$_[0]->from - 1, $_[0]->to] }; }->( $m ) ); 
                     $bool = $::_V6_SUCCEED;
                     $::_V6_MATCH_ = $m if $bool; 
                     return $m if $bool; 
                   } ||    ( ( $pos = $pad{I1720} ) && 0 ) )
               )
             )
           )
    ## </alt>
    ;
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# token literal
*literal =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           do { while (
            (   ( $pad{I1721} = $pos or 1 ) &&
               ## <alt>
               (
                   ( $pad{I1722} = $pos or 1 )
                   && (
                   (
                      (   ( $pad{I1723} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '\\' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1723} ) && 0 ) )
                   &&
                      (   ( $pad{I1724} = $pos or 1 ) &&
                       do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                                   $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { push @{$named{'special_char'}}, $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1724} ) && 0 ) )
                   )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1722} ) or 1 )
                   &&                 (   ( $pad{I1725} = $pos or 1 ) &&
                     ## <perl5>
                     ( ( substr( $s, $pos ) =~ m/^((?:(?![\']))\X)/ )
                         ? ( $pos += length( $1 ) or 1 )
                         : 0
                     )
                     ## </perl5>
     ||    ( ( $pos = $pad{I1725} ) && 0 ) )
                 )
               )
    ## </alt>
     ||    ( ( $pos = $pad{I1721} ) && 0 ) )) {}; $bool = 1 };
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# token double_quoted
*double_quoted =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           do { while (
            (   ( $pad{I1726} = $pos or 1 ) &&
               ## <alt>
               (
                   ( $pad{I1727} = $pos or 1 )
                   && (
                   (
                      (   ( $pad{I1728} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '\\' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1728} ) && 0 ) )
                   &&
                      (   ( $pad{I1729} = $pos or 1 ) &&
                       do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                                   $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { push @{$named{'special_char'}}, $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1729} ) && 0 ) )
                   )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1727} ) or 1 )
                   &&                 (   ( $pad{I1730} = $pos or 1 ) &&
                     do{
                    my $match =           ## <variable>
              do {
                our $I1731;
                our $I1731_sizes;
                unless ( $I1731 ) {
                    my $hash = \%Pugs::Grammar::Rule::variables;
                    my %sizes = map { length($_) => 1 } keys %$hash;
                    $I1731_sizes = [ sort { $b <=> $a } keys %sizes ];
                    $I1731 = $hash;
                }
                my $match = 0;
                my $key;
                for ( @$I1731_sizes ) {
                    $key = ( $pos <= length( $s )
                                ? substr( $s, $pos, $_ )
                                : '' );
                    if ( exists $I1731->{$key} ) {
                        #$named{KEY} = $key;
                        #$::_V6_MATCH_ = $m;
                        #print "m: ", Dumper( $::_V6_MATCH_->data )
                        #    if ( $key eq 'until' );
                        $match = Pugs::Runtime::Regex::preprocess_hash( $I1731, $key )->( $s, $grammar, { p => ( $pos + $_ ), positionals => [ ], args => { KEY => $key } }, undef );
                        last if $match;
                    }
                }
                if ( $match ) {
                    $pos = $match->to;
                    #print "match: $key at $pos = ", Dumper( $match->data );
                    $bool = 1;
                }; # else { $bool = 0 }
                $match;
              }
              ## </variable>
    ;
                    if ( $match ) { push @{$named{'Pugs::Grammar::Rule::variables'}}, $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1730} ) && 0 ) )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1727} ) or 1 )
                   &&                 (   ( $pad{I1732} = $pos or 1 ) &&
                     ## <perl5>
                     ( ( substr( $s, $pos ) =~ m/^((?:(?![\"]))\X)/ )
                         ? ( $pos += length( $1 ) or 1 )
                         : 0
                     )
                     ## </perl5>
     ||    ( ( $pos = $pad{I1732} ) && 0 ) )
                 )
               )
    ## </alt>
     ||    ( ( $pos = $pad{I1726} ) && 0 ) )) {}; $bool = 1 };
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# token metasyntax
*metasyntax =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           (
            (   ( $pad{I1733} = $pos or 1 ) &&
               ## <alt>
               (
                   ( $pad{I1734} = $pos or 1 )
                   && (
                   (
                      (   ( $pad{I1735} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '\\' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1735} ) && 0 ) )
                   &&
                      (   ( $pad{I1736} = $pos or 1 ) &&
                       do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                                   $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { push @{$named{'special_char'}}, $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1736} ) && 0 ) )
                   )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1734} ) or 1 )
                   &&                (
                      (   ( $pad{I1737} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq chr(39) )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1737} ) && 0 ) )
                   &&
                      (   ( $pad{I1738} = $pos or 1 ) &&
                       ## <metasyntax>
                       do {
                            my $prior = $::_V6_PRIOR_;
                            my $match =
                                   $grammar->literal( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                            $::_V6_PRIOR_ = $prior;
                            my $bool = (!$match != 1);
                            $pos = $match->to if $bool;
                            $match;
                       }
                       ## </metasyntax>
     ||    ( ( $pos = $pad{I1738} ) && 0 ) )
                   &&
                      (   ( $pad{I1739} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq chr(39) )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1739} ) && 0 ) )
                   )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1734} ) or 1 )
                   &&                (
                      (   ( $pad{I1740} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '"' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1740} ) && 0 ) )
                   &&
                      (   ( $pad{I1741} = $pos or 1 ) &&
                       ## <metasyntax>
                       do {
                            my $prior = $::_V6_PRIOR_;
                            my $match =
                                   $grammar->double_quoted( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                            $::_V6_PRIOR_ = $prior;
                            my $bool = (!$match != 1);
                            $pos = $match->to if $bool;
                            $match;
                       }
                       ## </metasyntax>
     ||    ( ( $pos = $pad{I1741} ) && 0 ) )
                   &&
                      (   ( $pad{I1742} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '"' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1742} ) && 0 ) )
                   )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1734} ) or 1 )
                   &&                (
                      (   ( $pad{I1743} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '{' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1743} ) && 0 ) )
                   &&
                      (   ( $pad{I1744} = $pos or 1 ) &&
                       ## <metasyntax>
                       do {
                            my $prior = $::_V6_PRIOR_;
                            my $match =
                                   $grammar->string_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                            $::_V6_PRIOR_ = $prior;
                            my $bool = (!$match != 1);
                            $pos = $match->to if $bool;
                            $match;
                       }
                       ## </metasyntax>
     ||    ( ( $pos = $pad{I1744} ) && 0 ) )
                   &&
                      (   ( $pad{I1745} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '}' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1745} ) && 0 ) )
                   )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1734} ) or 1 )
                   &&                (
                      (   ( $pad{I1746} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '<' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1746} ) && 0 ) )
                   &&
                      (   ( $pad{I1747} = $pos or 1 ) &&
                       ## <metasyntax>
                       do {
                            my $prior = $::_V6_PRIOR_;
                            my $match =
                                   $grammar->metasyntax( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                            $::_V6_PRIOR_ = $prior;
                            my $bool = (!$match != 1);
                            $pos = $match->to if $bool;
                            $match;
                       }
                       ## </metasyntax>
     ||    ( ( $pos = $pad{I1747} ) && 0 ) )
                   &&
                      (   ( $pad{I1748} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '>' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1748} ) && 0 ) )
                   )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1734} ) or 1 )
                   &&                 (   ( $pad{I1749} = $pos or 1 ) &&
                     ## <perl5>
                     ( ( substr( $s, $pos ) =~ m/^((?:(?![\>]))\X)/ )
                         ? ( $pos += length( $1 ) or 1 )
                         : 0
                     )
                     ## </perl5>
     ||    ( ( $pos = $pad{I1749} ) && 0 ) )
                 )
               )
    ## </alt>
     ||    ( ( $pos = $pad{I1733} ) && 0 ) )
           && do { while (
            (   ( $pad{I1733} = $pos or 1 ) &&
               ## <alt>
               (
                   ( $pad{I1734} = $pos or 1 )
                   && (
                   (
                      (   ( $pad{I1735} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '\\' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1735} ) && 0 ) )
                   &&
                      (   ( $pad{I1736} = $pos or 1 ) &&
                       do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                                   $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { push @{$named{'special_char'}}, $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1736} ) && 0 ) )
                   )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1734} ) or 1 )
                   &&                (
                      (   ( $pad{I1737} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq chr(39) )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1737} ) && 0 ) )
                   &&
                      (   ( $pad{I1738} = $pos or 1 ) &&
                       ## <metasyntax>
                       do {
                            my $prior = $::_V6_PRIOR_;
                            my $match =
                                   $grammar->literal( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                            $::_V6_PRIOR_ = $prior;
                            my $bool = (!$match != 1);
                            $pos = $match->to if $bool;
                            $match;
                       }
                       ## </metasyntax>
     ||    ( ( $pos = $pad{I1738} ) && 0 ) )
                   &&
                      (   ( $pad{I1739} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq chr(39) )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1739} ) && 0 ) )
                   )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1734} ) or 1 )
                   &&                (
                      (   ( $pad{I1740} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '"' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1740} ) && 0 ) )
                   &&
                      (   ( $pad{I1741} = $pos or 1 ) &&
                       ## <metasyntax>
                       do {
                            my $prior = $::_V6_PRIOR_;
                            my $match =
                                   $grammar->double_quoted( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                            $::_V6_PRIOR_ = $prior;
                            my $bool = (!$match != 1);
                            $pos = $match->to if $bool;
                            $match;
                       }
                       ## </metasyntax>
     ||    ( ( $pos = $pad{I1741} ) && 0 ) )
                   &&
                      (   ( $pad{I1742} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '"' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1742} ) && 0 ) )
                   )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1734} ) or 1 )
                   &&                (
                      (   ( $pad{I1743} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '{' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1743} ) && 0 ) )
                   &&
                      (   ( $pad{I1744} = $pos or 1 ) &&
                       ## <metasyntax>
                       do {
                            my $prior = $::_V6_PRIOR_;
                            my $match =
                                   $grammar->string_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                            $::_V6_PRIOR_ = $prior;
                            my $bool = (!$match != 1);
                            $pos = $match->to if $bool;
                            $match;
                       }
                       ## </metasyntax>
     ||    ( ( $pos = $pad{I1744} ) && 0 ) )
                   &&
                      (   ( $pad{I1745} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '}' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1745} ) && 0 ) )
                   )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1734} ) or 1 )
                   &&                (
                      (   ( $pad{I1746} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '<' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1746} ) && 0 ) )
                   &&
                      (   ( $pad{I1747} = $pos or 1 ) &&
                       ## <metasyntax>
                       do {
                            my $prior = $::_V6_PRIOR_;
                            my $match =
                                   $grammar->metasyntax( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                            $::_V6_PRIOR_ = $prior;
                            my $bool = (!$match != 1);
                            $pos = $match->to if $bool;
                            $match;
                       }
                       ## </metasyntax>
     ||    ( ( $pos = $pad{I1747} ) && 0 ) )
                   &&
                      (   ( $pad{I1748} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '>' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1748} ) && 0 ) )
                   )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1734} ) or 1 )
                   &&                 (   ( $pad{I1749} = $pos or 1 ) &&
                     ## <perl5>
                     ( ( substr( $s, $pos ) =~ m/^((?:(?![\>]))\X)/ )
                         ? ( $pos += length( $1 ) or 1 )
                         : 0
                     )
                     ## </perl5>
     ||    ( ( $pos = $pad{I1749} ) && 0 ) )
                 )
               )
    ## </alt>
     ||    ( ( $pos = $pad{I1733} ) && 0 ) )) {}; $bool = 1 }
           ) ;
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# token char_range
*char_range =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           (
            (   ( $pad{I1750} = $pos or 1 ) &&
               ## <alt>
               (
                   ( $pad{I1751} = $pos or 1 )
                   && (
                   (
                      (   ( $pad{I1752} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '\\' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1752} ) && 0 ) )
                   &&
                      (   ( $pad{I1753} = $pos or 1 ) &&
                       do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                                   $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { push @{$named{'special_char'}}, $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1753} ) && 0 ) )
                   )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1751} ) or 1 )
                   &&                 (   ( $pad{I1754} = $pos or 1 ) &&
                     ## <perl5>
                     ( ( substr( $s, $pos ) =~ m/^((?:(?![\]]))\X)/ )
                         ? ( $pos += length( $1 ) or 1 )
                         : 0
                     )
                     ## </perl5>
     ||    ( ( $pos = $pad{I1754} ) && 0 ) )
                 )
               )
    ## </alt>
     ||    ( ( $pos = $pad{I1750} ) && 0 ) )
           && do { while (
            (   ( $pad{I1750} = $pos or 1 ) &&
               ## <alt>
               (
                   ( $pad{I1751} = $pos or 1 )
                   && (
                   (
                      (   ( $pad{I1752} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '\\' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1752} ) && 0 ) )
                   &&
                      (   ( $pad{I1753} = $pos or 1 ) &&
                       do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                                   $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { push @{$named{'special_char'}}, $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1753} ) && 0 ) )
                   )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1751} ) or 1 )
                   &&                 (   ( $pad{I1754} = $pos or 1 ) &&
                     ## <perl5>
                     ( ( substr( $s, $pos ) =~ m/^((?:(?![\]]))\X)/ )
                         ? ( $pos += length( $1 ) or 1 )
                         : 0
                     )
                     ## </perl5>
     ||    ( ( $pos = $pad{I1754} ) && 0 ) )
                 )
               )
    ## </alt>
     ||    ( ( $pos = $pad{I1750} ) && 0 ) )) {}; $bool = 1 }
           ) ;
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# token char_class
*char_class =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           ## <alt>
           (
               ( $pad{I1755} = $pos or 1 )
               && (
               (
                (   ( $pad{I1756} = $pos or 1 ) &&
                   ## <metasyntax>
                   do {
                        my $prior = $::_V6_PRIOR_;
                        my $match =
                               $grammar->alpha( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior;
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   }
                   ## </metasyntax>
     ||    ( ( $pos = $pad{I1756} ) && 0 ) )
               && do { while (
                (   ( $pad{I1756} = $pos or 1 ) &&
                   ## <metasyntax>
                   do {
                        my $prior = $::_V6_PRIOR_;
                        my $match =
                               $grammar->alpha( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior;
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   }
                   ## </metasyntax>
     ||    ( ( $pos = $pad{I1756} ) && 0 ) )) {}; $bool = 1 }
               ) 
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1755} ) or 1 )
               &&            (
                  (   ( $pad{I1757} = $pos or 1 ) &&
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '[' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
     ||    ( ( $pos = $pad{I1757} ) && 0 ) )
               &&
                  (   ( $pad{I1758} = $pos or 1 ) &&
                   ## <metasyntax>
                   do {
                        my $prior = $::_V6_PRIOR_;
                        my $match =
                               $grammar->char_range( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior;
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   }
                   ## </metasyntax>
     ||    ( ( $pos = $pad{I1758} ) && 0 ) )
               &&
                  (   ( $pad{I1759} = $pos or 1 ) &&
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq ']' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
     ||    ( ( $pos = $pad{I1759} ) && 0 ) )
               )
             )
           )
    ## </alt>
    ;
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# token string_code
*string_code =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           (
            (   ( $pad{I1760} = $pos or 1 ) &&
               ## <alt>
               (
                   ( $pad{I1761} = $pos or 1 )
                   && (
                   (
                      (   ( $pad{I1762} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '\\' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1762} ) && 0 ) )
                   &&
                      (   ( $pad{I1763} = $pos or 1 ) &&
                       do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                                   $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { push @{$named{'special_char'}}, $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1763} ) && 0 ) )
                   )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1761} ) or 1 )
                   &&                (
                      (   ( $pad{I1764} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq chr(39) )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1764} ) && 0 ) )
                   &&
                      (   ( $pad{I1765} = $pos or 1 ) &&
                       ## <metasyntax>
                       do {
                            my $prior = $::_V6_PRIOR_;
                            my $match =
                                   $grammar->literal( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                            $::_V6_PRIOR_ = $prior;
                            my $bool = (!$match != 1);
                            $pos = $match->to if $bool;
                            $match;
                       }
                       ## </metasyntax>
     ||    ( ( $pos = $pad{I1765} ) && 0 ) )
                   &&
                      (   ( $pad{I1766} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq chr(39) )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1766} ) && 0 ) )
                   )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1761} ) or 1 )
                   &&                (
                      (   ( $pad{I1767} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '"' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1767} ) && 0 ) )
                   &&
                      (   ( $pad{I1768} = $pos or 1 ) &&
                       ## <metasyntax>
                       do {
                            my $prior = $::_V6_PRIOR_;
                            my $match =
                                   $grammar->double_quoted( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                            $::_V6_PRIOR_ = $prior;
                            my $bool = (!$match != 1);
                            $pos = $match->to if $bool;
                            $match;
                       }
                       ## </metasyntax>
     ||    ( ( $pos = $pad{I1768} ) && 0 ) )
                   &&
                      (   ( $pad{I1769} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '"' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1769} ) && 0 ) )
                   )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1761} ) or 1 )
                   &&                (
                      (   ( $pad{I1770} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '{' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1770} ) && 0 ) )
                   &&
                      (   ( $pad{I1771} = $pos or 1 ) &&
                       ## <alt>
                       (
                           ( $pad{I1772} = $pos or 1 )
                           && (
                            (   ( $pad{I1773} = $pos or 1 ) &&
                             ## <metasyntax>
                             do {
                                  my $prior = $::_V6_PRIOR_;
                                  my $match =
                                         $grammar->string_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                  $::_V6_PRIOR_ = $prior;
                                  my $bool = (!$match != 1);
                                  $pos = $match->to if $bool;
                                  $match;
                             }
                             ## </metasyntax>
     ||    ( ( $pos = $pad{I1773} ) && 0 ) )
                           )
                         || (
                           ( ( $bool = 1 ) && ( $pos = $pad{I1772} ) or 1 )
                           &&                         (   ( $pad{I1774} = $pos or 1 ) &&
     1 # null constant
     ||    ( ( $pos = $pad{I1774} ) && 0 ) )
                         )
                       )
    ## </alt>
     ||    ( ( $pos = $pad{I1771} ) && 0 ) )
                   &&
                      (   ( $pad{I1775} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '}' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1775} ) && 0 ) )
                   )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1761} ) or 1 )
                   &&                (
                      (   ( $pad{I1776} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '(' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1776} ) && 0 ) )
                   &&
                      (   ( $pad{I1777} = $pos or 1 ) &&
                       ## <alt>
                       (
                           ( $pad{I1778} = $pos or 1 )
                           && (
                            (   ( $pad{I1779} = $pos or 1 ) &&
                             ## <metasyntax>
                             do {
                                  my $prior = $::_V6_PRIOR_;
                                  my $match =
                                         $grammar->string_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                  $::_V6_PRIOR_ = $prior;
                                  my $bool = (!$match != 1);
                                  $pos = $match->to if $bool;
                                  $match;
                             }
                             ## </metasyntax>
     ||    ( ( $pos = $pad{I1779} ) && 0 ) )
                           )
                         || (
                           ( ( $bool = 1 ) && ( $pos = $pad{I1778} ) or 1 )
                           &&                         (   ( $pad{I1780} = $pos or 1 ) &&
     1 # null constant
     ||    ( ( $pos = $pad{I1780} ) && 0 ) )
                         )
                       )
    ## </alt>
     ||    ( ( $pos = $pad{I1777} ) && 0 ) )
                   &&
                      (   ( $pad{I1781} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq ')' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1781} ) && 0 ) )
                   )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1761} ) or 1 )
                   &&                (
                      (   ( $pad{I1782} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '<' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1782} ) && 0 ) )
                   &&
                      (   ( $pad{I1783} = $pos or 1 ) &&
                       ## <alt>
                       (
                           ( $pad{I1784} = $pos or 1 )
                           && (
                            (   ( $pad{I1785} = $pos or 1 ) &&
                             ## <metasyntax>
                             do {
                                  my $prior = $::_V6_PRIOR_;
                                  my $match =
                                         $grammar->string_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                  $::_V6_PRIOR_ = $prior;
                                  my $bool = (!$match != 1);
                                  $pos = $match->to if $bool;
                                  $match;
                             }
                             ## </metasyntax>
     ||    ( ( $pos = $pad{I1785} ) && 0 ) )
                           )
                         || (
                           ( ( $bool = 1 ) && ( $pos = $pad{I1784} ) or 1 )
                           &&                         (   ( $pad{I1786} = $pos or 1 ) &&
     1 # null constant
     ||    ( ( $pos = $pad{I1786} ) && 0 ) )
                         )
                       )
    ## </alt>
     ||    ( ( $pos = $pad{I1783} ) && 0 ) )
                   &&
                      (   ( $pad{I1787} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '>' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1787} ) && 0 ) )
                   )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1761} ) or 1 )
                   &&                (
                      (   ( $pad{I1788} = $pos or 1 ) &&
                       ## <alt>
                       (
                           ( $pad{I1789} = $pos or 1 )
                           && (
                            (   ( $pad{I1790} = $pos or 1 ) &&
                             ## <metasyntax>
                             do {
                                  my $prior = $::_V6_PRIOR_;
                                  my $match =
                                         $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                  $::_V6_PRIOR_ = $prior;
                                  my $bool = (!$match != 1);
                                  $pos = $match->to if $bool;
                                  $match;
                             }
                             ## </metasyntax>
     ||    ( ( $pos = $pad{I1790} ) && 0 ) )
                           )
                         || (
                           ( ( $bool = 1 ) && ( $pos = $pad{I1789} ) or 1 )
                           &&                         (   ( $pad{I1791} = $pos or 1 ) &&
                             ## <constant>
                             ( ( substr( $s, $pos, 1 ) eq '>' )
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             )
                             ## </constant>
     ||    ( ( $pos = $pad{I1791} ) && 0 ) )
                           )
                         || (
                           ( ( $bool = 1 ) && ( $pos = $pad{I1789} ) or 1 )
                           &&                         (   ( $pad{I1792} = $pos or 1 ) &&
                             ## <constant>
                             ( ( substr( $s, $pos, 1 ) eq '=' )
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             )
                             ## </constant>
     ||    ( ( $pos = $pad{I1792} ) && 0 ) )
                           )
                         || (
                           ( ( $bool = 1 ) && ( $pos = $pad{I1789} ) or 1 )
                           &&                         (   ( $pad{I1793} = $pos or 1 ) &&
                             ## <constant>
                             ( ( substr( $s, $pos, 1 ) eq '-' )
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             )
                             ## </constant>
     ||    ( ( $pos = $pad{I1793} ) && 0 ) )
                         )
                       )
    ## </alt>
     ||    ( ( $pos = $pad{I1788} ) && 0 ) )
                   &&
                      (   ( $pad{I1794} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '>' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1794} ) && 0 ) )
                   )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1761} ) or 1 )
                   &&                 (   ( $pad{I1795} = $pos or 1 ) &&
                     ## <metasyntax>
                     do {
                          my $prior = $::_V6_PRIOR_;
                          my $match =
                                 $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                          $::_V6_PRIOR_ = $prior;
                          my $bool = (!$match != 1);
                          $pos = $match->to if $bool;
                          $match;
                     }
                     ## </metasyntax>
     ||    ( ( $pos = $pad{I1795} ) && 0 ) )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1761} ) or 1 )
                   &&                 (   ( $pad{I1796} = $pos or 1 ) &&
                     ## <perl5>
                     ( ( substr( $s, $pos ) =~ m/^((?:(?![\}\)\>]))\X)/ )
                         ? ( $pos += length( $1 ) or 1 )
                         : 0
                     )
                     ## </perl5>
     ||    ( ( $pos = $pad{I1796} ) && 0 ) )
                 )
               )
    ## </alt>
     ||    ( ( $pos = $pad{I1760} ) && 0 ) )
           && do { while (
            (   ( $pad{I1760} = $pos or 1 ) &&
               ## <alt>
               (
                   ( $pad{I1761} = $pos or 1 )
                   && (
                   (
                      (   ( $pad{I1762} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '\\' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1762} ) && 0 ) )
                   &&
                      (   ( $pad{I1763} = $pos or 1 ) &&
                       do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                                   $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { push @{$named{'special_char'}}, $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1763} ) && 0 ) )
                   )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1761} ) or 1 )
                   &&                (
                      (   ( $pad{I1764} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq chr(39) )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1764} ) && 0 ) )
                   &&
                      (   ( $pad{I1765} = $pos or 1 ) &&
                       ## <metasyntax>
                       do {
                            my $prior = $::_V6_PRIOR_;
                            my $match =
                                   $grammar->literal( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                            $::_V6_PRIOR_ = $prior;
                            my $bool = (!$match != 1);
                            $pos = $match->to if $bool;
                            $match;
                       }
                       ## </metasyntax>
     ||    ( ( $pos = $pad{I1765} ) && 0 ) )
                   &&
                      (   ( $pad{I1766} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq chr(39) )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1766} ) && 0 ) )
                   )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1761} ) or 1 )
                   &&                (
                      (   ( $pad{I1767} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '"' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1767} ) && 0 ) )
                   &&
                      (   ( $pad{I1768} = $pos or 1 ) &&
                       ## <metasyntax>
                       do {
                            my $prior = $::_V6_PRIOR_;
                            my $match =
                                   $grammar->double_quoted( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                            $::_V6_PRIOR_ = $prior;
                            my $bool = (!$match != 1);
                            $pos = $match->to if $bool;
                            $match;
                       }
                       ## </metasyntax>
     ||    ( ( $pos = $pad{I1768} ) && 0 ) )
                   &&
                      (   ( $pad{I1769} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '"' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1769} ) && 0 ) )
                   )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1761} ) or 1 )
                   &&                (
                      (   ( $pad{I1770} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '{' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1770} ) && 0 ) )
                   &&
                      (   ( $pad{I1771} = $pos or 1 ) &&
                       ## <alt>
                       (
                           ( $pad{I1772} = $pos or 1 )
                           && (
                            (   ( $pad{I1773} = $pos or 1 ) &&
                             ## <metasyntax>
                             do {
                                  my $prior = $::_V6_PRIOR_;
                                  my $match =
                                         $grammar->string_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                  $::_V6_PRIOR_ = $prior;
                                  my $bool = (!$match != 1);
                                  $pos = $match->to if $bool;
                                  $match;
                             }
                             ## </metasyntax>
     ||    ( ( $pos = $pad{I1773} ) && 0 ) )
                           )
                         || (
                           ( ( $bool = 1 ) && ( $pos = $pad{I1772} ) or 1 )
                           &&                         (   ( $pad{I1774} = $pos or 1 ) &&
     1 # null constant
     ||    ( ( $pos = $pad{I1774} ) && 0 ) )
                         )
                       )
    ## </alt>
     ||    ( ( $pos = $pad{I1771} ) && 0 ) )
                   &&
                      (   ( $pad{I1775} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '}' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1775} ) && 0 ) )
                   )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1761} ) or 1 )
                   &&                (
                      (   ( $pad{I1776} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '(' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1776} ) && 0 ) )
                   &&
                      (   ( $pad{I1777} = $pos or 1 ) &&
                       ## <alt>
                       (
                           ( $pad{I1778} = $pos or 1 )
                           && (
                            (   ( $pad{I1779} = $pos or 1 ) &&
                             ## <metasyntax>
                             do {
                                  my $prior = $::_V6_PRIOR_;
                                  my $match =
                                         $grammar->string_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                  $::_V6_PRIOR_ = $prior;
                                  my $bool = (!$match != 1);
                                  $pos = $match->to if $bool;
                                  $match;
                             }
                             ## </metasyntax>
     ||    ( ( $pos = $pad{I1779} ) && 0 ) )
                           )
                         || (
                           ( ( $bool = 1 ) && ( $pos = $pad{I1778} ) or 1 )
                           &&                         (   ( $pad{I1780} = $pos or 1 ) &&
     1 # null constant
     ||    ( ( $pos = $pad{I1780} ) && 0 ) )
                         )
                       )
    ## </alt>
     ||    ( ( $pos = $pad{I1777} ) && 0 ) )
                   &&
                      (   ( $pad{I1781} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq ')' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1781} ) && 0 ) )
                   )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1761} ) or 1 )
                   &&                (
                      (   ( $pad{I1782} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '<' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1782} ) && 0 ) )
                   &&
                      (   ( $pad{I1783} = $pos or 1 ) &&
                       ## <alt>
                       (
                           ( $pad{I1784} = $pos or 1 )
                           && (
                            (   ( $pad{I1785} = $pos or 1 ) &&
                             ## <metasyntax>
                             do {
                                  my $prior = $::_V6_PRIOR_;
                                  my $match =
                                         $grammar->string_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                  $::_V6_PRIOR_ = $prior;
                                  my $bool = (!$match != 1);
                                  $pos = $match->to if $bool;
                                  $match;
                             }
                             ## </metasyntax>
     ||    ( ( $pos = $pad{I1785} ) && 0 ) )
                           )
                         || (
                           ( ( $bool = 1 ) && ( $pos = $pad{I1784} ) or 1 )
                           &&                         (   ( $pad{I1786} = $pos or 1 ) &&
     1 # null constant
     ||    ( ( $pos = $pad{I1786} ) && 0 ) )
                         )
                       )
    ## </alt>
     ||    ( ( $pos = $pad{I1783} ) && 0 ) )
                   &&
                      (   ( $pad{I1787} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '>' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1787} ) && 0 ) )
                   )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1761} ) or 1 )
                   &&                (
                      (   ( $pad{I1788} = $pos or 1 ) &&
                       ## <alt>
                       (
                           ( $pad{I1789} = $pos or 1 )
                           && (
                            (   ( $pad{I1790} = $pos or 1 ) &&
                             ## <metasyntax>
                             do {
                                  my $prior = $::_V6_PRIOR_;
                                  my $match =
                                         $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                  $::_V6_PRIOR_ = $prior;
                                  my $bool = (!$match != 1);
                                  $pos = $match->to if $bool;
                                  $match;
                             }
                             ## </metasyntax>
     ||    ( ( $pos = $pad{I1790} ) && 0 ) )
                           )
                         || (
                           ( ( $bool = 1 ) && ( $pos = $pad{I1789} ) or 1 )
                           &&                         (   ( $pad{I1791} = $pos or 1 ) &&
                             ## <constant>
                             ( ( substr( $s, $pos, 1 ) eq '>' )
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             )
                             ## </constant>
     ||    ( ( $pos = $pad{I1791} ) && 0 ) )
                           )
                         || (
                           ( ( $bool = 1 ) && ( $pos = $pad{I1789} ) or 1 )
                           &&                         (   ( $pad{I1792} = $pos or 1 ) &&
                             ## <constant>
                             ( ( substr( $s, $pos, 1 ) eq '=' )
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             )
                             ## </constant>
     ||    ( ( $pos = $pad{I1792} ) && 0 ) )
                           )
                         || (
                           ( ( $bool = 1 ) && ( $pos = $pad{I1789} ) or 1 )
                           &&                         (   ( $pad{I1793} = $pos or 1 ) &&
                             ## <constant>
                             ( ( substr( $s, $pos, 1 ) eq '-' )
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             )
                             ## </constant>
     ||    ( ( $pos = $pad{I1793} ) && 0 ) )
                         )
                       )
    ## </alt>
     ||    ( ( $pos = $pad{I1788} ) && 0 ) )
                   &&
                      (   ( $pad{I1794} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '>' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1794} ) && 0 ) )
                   )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1761} ) or 1 )
                   &&                 (   ( $pad{I1795} = $pos or 1 ) &&
                     ## <metasyntax>
                     do {
                          my $prior = $::_V6_PRIOR_;
                          my $match =
                                 $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                          $::_V6_PRIOR_ = $prior;
                          my $bool = (!$match != 1);
                          $pos = $match->to if $bool;
                          $match;
                     }
                     ## </metasyntax>
     ||    ( ( $pos = $pad{I1795} ) && 0 ) )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1761} ) or 1 )
                   &&                 (   ( $pad{I1796} = $pos or 1 ) &&
                     ## <perl5>
                     ( ( substr( $s, $pos ) =~ m/^((?:(?![\}\)\>]))\X)/ )
                         ? ( $pos += length( $1 ) or 1 )
                         : 0
                     )
                     ## </perl5>
     ||    ( ( $pos = $pad{I1796} ) && 0 ) )
                 )
               )
    ## </alt>
     ||    ( ( $pos = $pad{I1760} ) && 0 ) )) {}; $bool = 1 }
           ) ;
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# token parsed_code
*parsed_code =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           (
              (   ( $pad{I1797} = $pos or 1 ) &&
               ## <metasyntax>
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                           $grammar->string_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    my $bool = (!$match != 1);
                    $pos = $match->to if $bool;
                    $match;
               }
               ## </metasyntax>
     ||    ( ( $pos = $pad{I1797} ) && 0 ) )
           &&
              (   ( $pad{I1798} = $pos or 1 ) &&
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { return '{' . $_[0] . '}'; }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1798} ) && 0 ) )
           );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# token named_capture_body
*named_capture_body =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           ## <alt>
           (
               ( $pad{I1799} = $pos or 1 )
               && (
               (
                  (   ( $pad{I1800} = $pos or 1 ) &&
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '(' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
     ||    ( ( $pos = $pad{I1800} ) && 0 ) )
               &&
                  (   ( $pad{I1801} = $pos or 1 ) &&
                   do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                               $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'rule'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1801} ) && 0 ) )
               &&
                  (   ( $pad{I1802} = $pos or 1 ) &&
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq ')' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
     ||    ( ( $pos = $pad{I1802} ) && 0 ) )
               &&
                  (   ( $pad{I1803} = $pos or 1 ) &&
                   do { 
                     local $::_V6_SUCCEED = 1;
                     $::_V6_MATCH_ = $m;
                     $m->data->{capture} = \( sub { return { capturing_group => ${ $_[0]->{qw(rule)} } }; }->( $m ) ); 
                     $bool = $::_V6_SUCCEED;
                     $::_V6_MATCH_ = $m if $bool; 
                     return $m if $bool; 
                   } ||    ( ( $pos = $pad{I1803} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1799} ) or 1 )
               &&            (
                  (   ( $pad{I1804} = $pos or 1 ) &&
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '[' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
     ||    ( ( $pos = $pad{I1804} ) && 0 ) )
               &&
                  (   ( $pad{I1805} = $pos or 1 ) &&
                   do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                               $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'rule'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1805} ) && 0 ) )
               &&
                  (   ( $pad{I1806} = $pos or 1 ) &&
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq ']' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
     ||    ( ( $pos = $pad{I1806} ) && 0 ) )
               &&
                  (   ( $pad{I1807} = $pos or 1 ) &&
                   do { 
                     local $::_V6_SUCCEED = 1;
                     $::_V6_MATCH_ = $m;
                     $m->data->{capture} = \( sub { return ${ $_[0]->{qw(rule)} } }->( $m ) ); 
                     $bool = $::_V6_SUCCEED;
                     $::_V6_MATCH_ = $m if $bool; 
                     return $m if $bool; 
                   } ||    ( ( $pos = $pad{I1807} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1799} ) or 1 )
               &&            (
                  (   ( $pad{I1808} = $pos or 1 ) &&
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '<' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
     ||    ( ( $pos = $pad{I1808} ) && 0 ) )
               &&
                  (   ( $pad{I1809} = $pos or 1 ) &&
                   do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                               $grammar->parse_metasyntax( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'parse_metasyntax'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1809} ) && 0 ) )
               &&
                  (   ( $pad{I1810} = $pos or 1 ) &&
                   do { 
                     local $::_V6_SUCCEED = 1;
                     $::_V6_MATCH_ = $m;
                     $m->data->{capture} = \( sub { return ${ $_[0]->{qw(parse_metasyntax)} } }->( $m ) ); 
                     $bool = $::_V6_SUCCEED;
                     $::_V6_MATCH_ = $m if $bool; 
                     return $m if $bool; 
                   } ||    ( ( $pos = $pad{I1810} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1799} ) or 1 )
               &&            (
                  (   ( $pad{I1811} = $pos or 1 ) &&
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq chr(39) )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
     ||    ( ( $pos = $pad{I1811} ) && 0 ) )
               &&
                  (   ( $pad{I1812} = $pos or 1 ) &&
                   ## <metasyntax>
                   do {
                        my $prior = $::_V6_PRIOR_;
                        my $match =
                               $grammar->literal( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior;
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   }
                   ## </metasyntax>
     ||    ( ( $pos = $pad{I1812} ) && 0 ) )
               &&
                  (   ( $pad{I1813} = $pos or 1 ) &&
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq chr(39) )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
     ||    ( ( $pos = $pad{I1813} ) && 0 ) )
               &&
                  (   ( $pad{I1814} = $pos or 1 ) &&
                   do { 
                     local $::_V6_SUCCEED = 1;
                     $::_V6_MATCH_ = $m;
                     $m->data->{capture} = \( sub { return { metasyntax => {
                            metasyntax => "${$_[0]}",
                            _pos => [ $_[0]->from, $_[0]->to ],
                        }
                    };
            }->( $m ) ); 
                     $bool = $::_V6_SUCCEED;
                     $::_V6_MATCH_ = $m if $bool; 
                     return $m if $bool; 
                   } ||    ( ( $pos = $pad{I1814} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1799} ) or 1 )
               &&             (   ( $pad{I1815} = $pos or 1 ) &&
                 do { 
                   local $::_V6_SUCCEED = 1;
                   $::_V6_MATCH_ = $m;
                   sub { die "invalid alias syntax"; }->( $m );
                   1;
                 } ||    ( ( $pos = $pad{I1815} ) && 0 ) )
             )
           )
    ## </alt>
    ;
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# token parse_metasyntax
*parse_metasyntax =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           (
              (   ( $pad{I1816} = $pos or 1 ) &&
               do{
                    my $from = $pos;
                    my $bool =                    ## <alt>
                       (
                           ( $pad{I1817} = $pos or 1 )
                           && (
                            (   ( $pad{I1818} = $pos or 1 ) &&
                             ## <constant>
                             ( ( substr( $s, $pos, 1 ) eq '!' )
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             )
                             ## </constant>
     ||    ( ( $pos = $pad{I1818} ) && 0 ) )
                           )
                         || (
                           ( ( $bool = 1 ) && ( $pos = $pad{I1817} ) or 1 )
                           &&                         (   ( $pad{I1819} = $pos or 1 ) &&
                             ## <constant>
                             ( ( substr( $s, $pos, 1 ) eq '?' )
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             )
                             ## </constant>
     ||    ( ( $pos = $pad{I1819} ) && 0 ) )
                           )
                         || (
                           ( ( $bool = 1 ) && ( $pos = $pad{I1817} ) or 1 )
                           &&                         (   ( $pad{I1820} = $pos or 1 ) &&
     1 # null constant
     ||    ( ( $pos = $pad{I1820} ) && 0 ) )
                         )
                       )
    ## </alt>
    ;
                    my $match = Pugs::Runtime::Match->new(
                        { str => \$s, from => \$from, match => [], named => {}, bool => \1, to => \(0+$pos), capture => undef }
                    ); $named{'modifier'} = $match;
                    $bool
                } ||    ( ( $pos = $pad{I1816} ) && 0 ) )
           &&
              (   ( $pad{I1821} = $pos or 1 ) &&
               ## <alt>
               (
                   ( $pad{I1822} = $pos or 1 )
                   && (
                   (
                      (   ( $pad{I1823} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '{' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1823} ) && 0 ) )
                   &&
                      (   ( $pad{I1824} = $pos or 1 ) &&
                       do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                                   $grammar->parsed_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'parsed_code'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1824} ) && 0 ) )
                   &&
                      (   ( $pad{I1825} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 2 ) eq '}>' )
                           ? ( $pos += 2 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1825} ) && 0 ) )
                   &&
                      (   ( $pad{I1826} = $pos or 1 ) &&
                       do { 
                         local $::_V6_SUCCEED = 1;
                         $::_V6_MATCH_ = $m;
                         $m->data->{capture} = \( sub { return { closure => {
                closure  => ${ $_[0]->{qw(parsed_code)} },
                modifier => ${ $_[0]->{qw(modifier)} },
                _pos => [ $_[0]->from - 1, $_[0]->to ],
            } } }->( $m ) ); 
                         $bool = $::_V6_SUCCEED;
                         $::_V6_MATCH_ = $m if $bool; 
                         return $m if $bool; 
                       } ||    ( ( $pos = $pad{I1826} ) && 0 ) )
                   )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1822} ) or 1 )
                   &&                (
                      (   ( $pad{I1827} = $pos or 1 ) &&
                       do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                                   $grammar->char_class( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'char_class'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1827} ) && 0 ) )
                   &&
                     (
                      (   ( $pad{I1828} = $pos or 1 ) &&
                         do{
                             my $hash = do {
                               my $bool = 1;
                               my $from = $pos;
                               my @match;
                               my %named;
                               $bool = 0 unless
                                 (
                                    (   ( $pad{I1829} = $pos or 1 ) &&
                                     ## <perl5>
                                     ( ( substr( $s, $pos ) =~ m/^((?:(?=[+-]))\X)/ )
                                         ? ( $pos += length( $1 ) or 1 )
                                         : 0
                                     )
                                     ## </perl5>
     ||    ( ( $pos = $pad{I1829} ) && 0 ) )
                                 &&
                                    (   ( $pad{I1830} = $pos or 1 ) &&
                                     do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                                                 $grammar->char_class( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'char_class'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1830} ) && 0 ) )
                                 );
                               { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                             };
                             my $bool = ${$hash->{'bool'}};
                             if ( $bool ) {
                                 push @{ $match[ 0 ] }, Pugs::Runtime::Match->new( $hash );
                             }
                             $bool;
                         } ||    ( ( $pos = $pad{I1828} ) && 0 ) )
                     && do { while (
                      (   ( $pad{I1828} = $pos or 1 ) &&
                         do{
                             my $hash = do {
                               my $bool = 1;
                               my $from = $pos;
                               my @match;
                               my %named;
                               $bool = 0 unless
                                 (
                                    (   ( $pad{I1829} = $pos or 1 ) &&
                                     ## <perl5>
                                     ( ( substr( $s, $pos ) =~ m/^((?:(?=[+-]))\X)/ )
                                         ? ( $pos += length( $1 ) or 1 )
                                         : 0
                                     )
                                     ## </perl5>
     ||    ( ( $pos = $pad{I1829} ) && 0 ) )
                                 &&
                                    (   ( $pad{I1830} = $pos or 1 ) &&
                                     do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                                                 $grammar->char_class( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'char_class'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1830} ) && 0 ) )
                                 );
                               { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                             };
                             my $bool = ${$hash->{'bool'}};
                             if ( $bool ) {
                                 push @{ $match[ 0 ] }, Pugs::Runtime::Match->new( $hash );
                             }
                             $bool;
                         } ||    ( ( $pos = $pad{I1828} ) && 0 ) )) {}; $bool = 1 }
                     ) 
                   &&
                      (   ( $pad{I1831} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '>' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1831} ) && 0 ) )
                   &&
                      (   ( $pad{I1832} = $pos or 1 ) &&
                       do { 
                         local $::_V6_SUCCEED = 1;
                         $::_V6_MATCH_ = $m;
                         $m->data->{capture} = \( sub {
                if ( ${ $_[0]->{qw(modifier)} } eq '!' ) {
                  return {
                    negate => {
                      char_class => [
                        '+' . $_[0]->{qw(char_class)},
                        @{$_[0]->[0]},   # TODO - stringify
                  ] } }
                }
                return {
                  char_class => [
                    '+' . $_[0]->{qw(char_class)},
                    @{$_[0]->[0]},   # TODO - stringify
                ] }
            }->( $m ) ); 
                         $bool = $::_V6_SUCCEED;
                         $::_V6_MATCH_ = $m if $bool; 
                         return $m if $bool; 
                       } ||    ( ( $pos = $pad{I1832} ) && 0 ) )
                   )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1822} ) or 1 )
                   &&                (
                      (   ( $pad{I1833} = $pos or 1 ) &&
                       do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                                   $grammar->ident( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'ident'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1833} ) && 0 ) )
                   &&
                      (   ( $pad{I1834} = $pos or 1 ) &&
                       ## <alt>
                       (
                           ( $pad{I1835} = $pos or 1 )
                           && (
                           (
                              (   ( $pad{I1836} = $pos or 1 ) &&
                               ## <metasyntax>
                               do {
                                    my $prior = $::_V6_PRIOR_;
                                    my $match =
                                           $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                    $::_V6_PRIOR_ = $prior;
                                    my $bool = (!$match != 1);
                                    $pos = $match->to if $bool;
                                    $match;
                               }
                               ## </metasyntax>
     ||    ( ( $pos = $pad{I1836} ) && 0 ) )
                           &&
                              (   ( $pad{I1837} = $pos or 1 ) &&
                               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                                           $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'rule'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1837} ) && 0 ) )
                           &&
                              (   ( $pad{I1838} = $pos or 1 ) &&
                               ## <constant>
                               ( ( substr( $s, $pos, 1 ) eq '>' )
                                   ? ( $pos += 1 or 1 )
                                   : 0
                               )
                               ## </constant>
     ||    ( ( $pos = $pad{I1838} ) && 0 ) )
                           &&
                              (   ( $pad{I1839} = $pos or 1 ) &&
                               do { 
                                 local $::_V6_SUCCEED = 1;
                                 $::_V6_MATCH_ = $m;
                                 $m->data->{capture} = \( sub {
                if  ( ${ $_[0]->{qw(ident)} } eq 'before'
                   || ${ $_[0]->{qw(ident)} } eq 'after'
                    ) {
                    return { ${ $_[0]->{qw(ident)} } => { rule => ${ $_[0]->{qw(rule)} }, modifier => ${ $_[0]->{qw(modifier)} } } }
                }
                return { metasyntax => {
                    metasyntax => ${ $_[0]->{qw(ident)} },
                    rule       => ${ $_[0]->{qw(rule)} },
                    modifier   => ${ $_[0]->{qw(modifier)} },
                    _pos => [ $_[0]->from - 1, $_[0]->to ],
                } }
              }->( $m ) ); 
                                 $bool = $::_V6_SUCCEED;
                                 $::_V6_MATCH_ = $m if $bool; 
                                 return $m if $bool; 
                               } ||    ( ( $pos = $pad{I1839} ) && 0 ) )
                           )
                           )
                         || (
                           ( ( $bool = 1 ) && ( $pos = $pad{I1835} ) or 1 )
                           &&                        (
                              (   ( $pad{I1840} = $pos or 1 ) &&
                               ## <constant>
                               ( ( substr( $s, $pos, 1 ) eq ':' )
                                   ? ( $pos += 1 or 1 )
                                   : 0
                               )
                               ## </constant>
     ||    ( ( $pos = $pad{I1840} ) && 0 ) )
                           &&
                             (
                              (   ( $pad{I1841} = $pos or 1 ) &&
                                 ## <metasyntax>
                                 do {
                                      my $prior = $::_V6_PRIOR_;
                                      my $match =
                                             $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                      $::_V6_PRIOR_ = $prior;
                                      my $bool = (!$match != 1);
                                      $pos = $match->to if $bool;
                                      $match;
                                 }
                                 ## </metasyntax>
     ||    ( ( $pos = $pad{I1841} ) && 0 ) )
                             || ( $bool = 1 )
                             ) 
                           &&
                              (   ( $pad{I1842} = $pos or 1 ) &&
                               do{
                    my $from = $pos;
                    my $bool =                                    do { while (
                                        (   ( $pad{I1843} = $pos or 1 ) &&
                                           ## <alt>
                                           (
                                               ( $pad{I1844} = $pos or 1 )
                                               && (
                                               (
                                                  (   ( $pad{I1845} = $pos or 1 ) &&
                                                   ## <constant>
                                                   ( ( substr( $s, $pos, 1 ) eq '\\' )
                                                       ? ( $pos += 1 or 1 )
                                                       : 0
                                                   )
                                                   ## </constant>
     ||    ( ( $pos = $pad{I1845} ) && 0 ) )
                                               &&
                                                  (   ( $pad{I1846} = $pos or 1 ) &&
                                                   do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                                                               $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { push @{$named{'special_char'}}, $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1846} ) && 0 ) )
                                               )
                                               )
                                             || (
                                               ( ( $bool = 1 ) && ( $pos = $pad{I1844} ) or 1 )
                                               &&                                             (   ( $pad{I1847} = $pos or 1 ) &&
                                                 do{
                    my $match =           ## <variable>
              do {
                our $I1848;
                our $I1848_sizes;
                unless ( $I1848 ) {
                    my $hash = \%Pugs::Grammar::Rule::variables;
                    my %sizes = map { length($_) => 1 } keys %$hash;
                    $I1848_sizes = [ sort { $b <=> $a } keys %sizes ];
                    $I1848 = $hash;
                }
                my $match = 0;
                my $key;
                for ( @$I1848_sizes ) {
                    $key = ( $pos <= length( $s )
                                ? substr( $s, $pos, $_ )
                                : '' );
                    if ( exists $I1848->{$key} ) {
                        #$named{KEY} = $key;
                        #$::_V6_MATCH_ = $m;
                        #print "m: ", Dumper( $::_V6_MATCH_->data )
                        #    if ( $key eq 'until' );
                        $match = Pugs::Runtime::Regex::preprocess_hash( $I1848, $key )->( $s, $grammar, { p => ( $pos + $_ ), positionals => [ ], args => { KEY => $key } }, undef );
                        last if $match;
                    }
                }
                if ( $match ) {
                    $pos = $match->to;
                    #print "match: $key at $pos = ", Dumper( $match->data );
                    $bool = 1;
                }; # else { $bool = 0 }
                $match;
              }
              ## </variable>
    ;
                    if ( $match ) { push @{$named{'Pugs::Grammar::Rule::variables'}}, $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1847} ) && 0 ) )
                                               )
                                             || (
                                               ( ( $bool = 1 ) && ( $pos = $pad{I1844} ) or 1 )
                                               &&                                             (   ( $pad{I1849} = $pos or 1 ) &&
                                                 ## <perl5>
                                                 ( ( substr( $s, $pos ) =~ m/^((?:(?![\>]))\X)/ )
                                                     ? ( $pos += length( $1 ) or 1 )
                                                     : 0
                                                 )
                                                 ## </perl5>
     ||    ( ( $pos = $pad{I1849} ) && 0 ) )
                                             )
                                           )
    ## </alt>
     ||    ( ( $pos = $pad{I1843} ) && 0 ) )) {}; $bool = 1 };
                    my $match = Pugs::Runtime::Match->new(
                        { str => \$s, from => \$from, match => [], named => {}, bool => \1, to => \(0+$pos), capture => undef }
                    ); $named{'str'} = $match;
                    $bool
                } ||    ( ( $pos = $pad{I1842} ) && 0 ) )
                           &&
                              (   ( $pad{I1850} = $pos or 1 ) &&
                               ## <constant>
                               ( ( substr( $s, $pos, 1 ) eq '>' )
                                   ? ( $pos += 1 or 1 )
                                   : 0
                               )
                               ## </constant>
     ||    ( ( $pos = $pad{I1850} ) && 0 ) )
                           &&
                              (   ( $pad{I1851} = $pos or 1 ) &&
                               do { 
                                 local $::_V6_SUCCEED = 1;
                                 $::_V6_MATCH_ = $m;
                                 $m->data->{capture} = \( sub {
                if  ( ${ $_[0]->{qw(ident)} } eq 'before'
                   || ${ $_[0]->{qw(ident)} } eq 'after'
                    ) {
                    return { ${ $_[0]->{qw(ident)} } => {
                        rule     => { metasyntax => {
                            metasyntax => '\'' . ${ $_[0]->{qw(str)} } . '\'',
                            _pos => [ $_[0]->from - 1, $_[0]->to ],
                        } },
                        modifier => ${ $_[0]->{qw(modifier)} },
                    } }
                }
                return { metasyntax => {
                    metasyntax => ${ $_[0]->{qw(ident)} },
                    string   => ${ $_[0]->{qw(str)} },
                    modifier => ${ $_[0]->{qw(modifier)} },
                    _pos => [ $_[0]->from - 1, $_[0]->to ],
                } }
              }->( $m ) ); 
                                 $bool = $::_V6_SUCCEED;
                                 $::_V6_MATCH_ = $m if $bool; 
                                 return $m if $bool; 
                               } ||    ( ( $pos = $pad{I1851} ) && 0 ) )
                           )
                           )
                         || (
                           ( ( $bool = 1 ) && ( $pos = $pad{I1835} ) or 1 )
                           &&                        (
                              (   ( $pad{I1852} = $pos or 1 ) &&
                               ## <constant>
                               ( ( substr( $s, $pos, 1 ) eq '(' )
                                   ? ( $pos += 1 or 1 )
                                   : 0
                               )
                               ## </constant>
     ||    ( ( $pos = $pad{I1852} ) && 0 ) )
                           &&
                              (   ( $pad{I1853} = $pos or 1 ) &&
                               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                                           $grammar->parsed_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'parsed_code'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1853} ) && 0 ) )
                           &&
                              (   ( $pad{I1854} = $pos or 1 ) &&
                               ## <constant>
                               ( ( substr( $s, $pos, 1 ) eq ')' )
                                   ? ( $pos += 1 or 1 )
                                   : 0
                               )
                               ## </constant>
     ||    ( ( $pos = $pad{I1854} ) && 0 ) )
                           &&
                              (   ( $pad{I1855} = $pos or 1 ) &&
                               ## <constant>
                               ( ( substr( $s, $pos, 1 ) eq '>' )
                                   ? ( $pos += 1 or 1 )
                                   : 0
                               )
                               ## </constant>
     ||    ( ( $pos = $pad{I1855} ) && 0 ) )
                           &&
                              (   ( $pad{I1856} = $pos or 1 ) &&
                               do { 
                                 local $::_V6_SUCCEED = 1;
                                 $::_V6_MATCH_ = $m;
                                 $m->data->{capture} = \( sub { return { call => {
                  method   => ${ $_[0]->{qw(ident)} },
                  params   => ${ $_[0]->{qw(parsed_code)} },
                  modifier => ${ $_[0]->{qw(modifier)} },
              } } }->( $m ) ); 
                                 $bool = $::_V6_SUCCEED;
                                 $::_V6_MATCH_ = $m if $bool; 
                                 return $m if $bool; 
                               } ||    ( ( $pos = $pad{I1856} ) && 0 ) )
                           )
                         )
                       )
    ## </alt>
     ||    ( ( $pos = $pad{I1834} ) && 0 ) )
                   )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1822} ) or 1 )
                   &&                (
                      (   ( $pad{I1857} = $pos or 1 ) &&
                       do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                                   $grammar->metasyntax( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'metasyntax'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1857} ) && 0 ) )
                   &&
                      (   ( $pad{I1858} = $pos or 1 ) &&
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '>' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
     ||    ( ( $pos = $pad{I1858} ) && 0 ) )
                   &&
                      (   ( $pad{I1859} = $pos or 1 ) &&
                       do { 
                         local $::_V6_SUCCEED = 1;
                         $::_V6_MATCH_ = $m;
                         $m->data->{capture} = \( sub { return { metasyntax => {
                  metasyntax => "${ $_[0]->{qw(metasyntax)} }",
                  modifier   => ${ $_[0]->{qw(modifier)} },
                  _pos => [ $_[0]->from - 1, $_[0]->to ],
            } } }->( $m ) ); 
                         $bool = $::_V6_SUCCEED;
                         $::_V6_MATCH_ = $m if $bool; 
                         return $m if $bool; 
                       } ||    ( ( $pos = $pad{I1859} ) && 0 ) )
                   )
                 )
               )
    ## </alt>
     ||    ( ( $pos = $pad{I1821} ) && 0 ) )
           );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# token var1
*var1 =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           (
              (   ( $pad{I1860} = $pos or 1 ) &&
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                           $grammar->ident( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'ident'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1860} ) && 0 ) )
           &&
              (   ( $pad{I1861} = $pos or 1 ) &&
               ## <constant>
               ( ( substr( $s, $pos, 1 ) eq '>' )
                   ? ( $pos += 1 or 1 )
                   : 0
               )
               ## </constant>
     ||    ( ( $pos = $pad{I1861} ) && 0 ) )
           &&
              (   ( $pad{I1862} = $pos or 1 ) &&
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { return { match_variable => '$' . $_[0]->{ident} }; }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1862} ) && 0 ) )
           );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# Code block from grammar spec
 $variables{'$<'} = sub { var1($_[1], $_[0], $_[2], $_[3]) }; 

# token var2
*var2 =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           ## <alt>
           (
               ( $pad{I1863} = $pos or 1 )
               && (
               (
                 (
                  (   ( $pad{I1864} = $pos or 1 ) &&
                     ## <metasyntax>
                     do {
                          my $prior = $::_V6_PRIOR_;
                          my $match =
                                 $grammar->digit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                          $::_V6_PRIOR_ = $prior;
                          my $bool = (!$match != 1);
                          $pos = $match->to if $bool;
                          $match;
                     }
                     ## </metasyntax>
     ||    ( ( $pos = $pad{I1864} ) && 0 ) )
                 && do { while (
                  (   ( $pad{I1864} = $pos or 1 ) &&
                     ## <metasyntax>
                     do {
                          my $prior = $::_V6_PRIOR_;
                          my $match =
                                 $grammar->digit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                          $::_V6_PRIOR_ = $prior;
                          my $bool = (!$match != 1);
                          $pos = $match->to if $bool;
                          $match;
                     }
                     ## </metasyntax>
     ||    ( ( $pos = $pad{I1864} ) && 0 ) )) {}; $bool = 1 }
                 ) 
               &&
                  (   ( $pad{I1865} = $pos or 1 ) &&
                   do { 
                     local $::_V6_SUCCEED = 1;
                     $::_V6_MATCH_ = $m;
                     $m->data->{capture} = \( sub { return { match_variable => '$' . $_[0] }; }->( $m ) ); 
                     $bool = $::_V6_SUCCEED;
                     $::_V6_MATCH_ = $m if $bool; 
                     return $m if $bool; 
                   } ||    ( ( $pos = $pad{I1865} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1863} ) or 1 )
               &&            (
                 (
                  (   ( $pad{I1866} = $pos or 1 ) &&
                     ## <constant>
                     ( ( substr( $s, $pos, 1 ) eq '^' )
                         ? ( $pos += 1 or 1 )
                         : 0
                     )
                     ## </constant>
     ||    ( ( $pos = $pad{I1866} ) && 0 ) )
                 || ( $bool = 1 )
                 ) 
               &&
                 (
                  (   ( $pad{I1867} = $pos or 1 ) &&
                     ## <alt>
                     (
                         ( $pad{I1868} = $pos or 1 )
                         && (
                          (   ( $pad{I1869} = $pos or 1 ) &&
                           ## <metasyntax>
                           do {
                                my $prior = $::_V6_PRIOR_;
                                my $match =
                                       $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                $::_V6_PRIOR_ = $prior;
                                my $bool = (!$match != 1);
                                $pos = $match->to if $bool;
                                $match;
                           }
                           ## </metasyntax>
     ||    ( ( $pos = $pad{I1869} ) && 0 ) )
                         )
                       || (
                         ( ( $bool = 1 ) && ( $pos = $pad{I1868} ) or 1 )
                         &&                       (   ( $pad{I1870} = $pos or 1 ) &&
                           ## <constant>
                           ( ( substr( $s, $pos, 1 ) eq '_' )
                               ? ( $pos += 1 or 1 )
                               : 0
                           )
                           ## </constant>
     ||    ( ( $pos = $pad{I1870} ) && 0 ) )
                         )
                       || (
                         ( ( $bool = 1 ) && ( $pos = $pad{I1868} ) or 1 )
                         &&                      (
                            (   ( $pad{I1871} = $pos or 1 ) &&
                             ## <constant>
                             ( ( substr( $s, $pos, 1 ) eq ':' )
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             )
                             ## </constant>
     ||    ( ( $pos = $pad{I1871} ) && 0 ) )
                         &&
                            (   ( $pad{I1872} = $pos or 1 ) &&
                             ## <constant>
                             ( ( substr( $s, $pos, 1 ) eq ':' )
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             )
                             ## </constant>
     ||    ( ( $pos = $pad{I1872} ) && 0 ) )
                         )
                       )
                     )
    ## </alt>
     ||    ( ( $pos = $pad{I1867} ) && 0 ) )
                 && do { while (
                  (   ( $pad{I1867} = $pos or 1 ) &&
                     ## <alt>
                     (
                         ( $pad{I1868} = $pos or 1 )
                         && (
                          (   ( $pad{I1869} = $pos or 1 ) &&
                           ## <metasyntax>
                           do {
                                my $prior = $::_V6_PRIOR_;
                                my $match =
                                       $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                $::_V6_PRIOR_ = $prior;
                                my $bool = (!$match != 1);
                                $pos = $match->to if $bool;
                                $match;
                           }
                           ## </metasyntax>
     ||    ( ( $pos = $pad{I1869} ) && 0 ) )
                         )
                       || (
                         ( ( $bool = 1 ) && ( $pos = $pad{I1868} ) or 1 )
                         &&                       (   ( $pad{I1870} = $pos or 1 ) &&
                           ## <constant>
                           ( ( substr( $s, $pos, 1 ) eq '_' )
                               ? ( $pos += 1 or 1 )
                               : 0
                           )
                           ## </constant>
     ||    ( ( $pos = $pad{I1870} ) && 0 ) )
                         )
                       || (
                         ( ( $bool = 1 ) && ( $pos = $pad{I1868} ) or 1 )
                         &&                      (
                            (   ( $pad{I1871} = $pos or 1 ) &&
                             ## <constant>
                             ( ( substr( $s, $pos, 1 ) eq ':' )
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             )
                             ## </constant>
     ||    ( ( $pos = $pad{I1871} ) && 0 ) )
                         &&
                            (   ( $pad{I1872} = $pos or 1 ) &&
                             ## <constant>
                             ( ( substr( $s, $pos, 1 ) eq ':' )
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             )
                             ## </constant>
     ||    ( ( $pos = $pad{I1872} ) && 0 ) )
                         )
                       )
                     )
    ## </alt>
     ||    ( ( $pos = $pad{I1867} ) && 0 ) )) {}; $bool = 1 }
                 ) 
               &&
                  (   ( $pad{I1873} = $pos or 1 ) &&
                   do { 
                     local $::_V6_SUCCEED = 1;
                     $::_V6_MATCH_ = $m;
                     $m->data->{capture} = \( sub { return { variable => '$' . $_[0] }; }->( $m ) ); 
                     $bool = $::_V6_SUCCEED;
                     $::_V6_MATCH_ = $m if $bool; 
                     return $m if $bool; 
                   } ||    ( ( $pos = $pad{I1873} ) && 0 ) )
               )
             )
           )
    ## </alt>
    ;
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# Code block from grammar spec
 $variables{'$'} = sub { var2($_[1], $_[0], $_[2], $_[3]) }; 

# token var3
*var3 =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           ## <alt>
           (
               ( $pad{I1874} = $pos or 1 )
               && (
               (
                 (
                  (   ( $pad{I1875} = $pos or 1 ) &&
                     ## <metasyntax>
                     do {
                          my $prior = $::_V6_PRIOR_;
                          my $match =
                                 $grammar->digit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                          $::_V6_PRIOR_ = $prior;
                          my $bool = (!$match != 1);
                          $pos = $match->to if $bool;
                          $match;
                     }
                     ## </metasyntax>
     ||    ( ( $pos = $pad{I1875} ) && 0 ) )
                 && do { while (
                  (   ( $pad{I1875} = $pos or 1 ) &&
                     ## <metasyntax>
                     do {
                          my $prior = $::_V6_PRIOR_;
                          my $match =
                                 $grammar->digit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                          $::_V6_PRIOR_ = $prior;
                          my $bool = (!$match != 1);
                          $pos = $match->to if $bool;
                          $match;
                     }
                     ## </metasyntax>
     ||    ( ( $pos = $pad{I1875} ) && 0 ) )) {}; $bool = 1 }
                 ) 
               &&
                  (   ( $pad{I1876} = $pos or 1 ) &&
                   do { 
                     local $::_V6_SUCCEED = 1;
                     $::_V6_MATCH_ = $m;
                     $m->data->{capture} = \( sub { return { match_variable => '@' . $_[0] } }->( $m ) ); 
                     $bool = $::_V6_SUCCEED;
                     $::_V6_MATCH_ = $m if $bool; 
                     return $m if $bool; 
                   } ||    ( ( $pos = $pad{I1876} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1874} ) or 1 )
               &&            (
                 (
                  (   ( $pad{I1877} = $pos or 1 ) &&
                     ## <constant>
                     ( ( substr( $s, $pos, 1 ) eq '^' )
                         ? ( $pos += 1 or 1 )
                         : 0
                     )
                     ## </constant>
     ||    ( ( $pos = $pad{I1877} ) && 0 ) )
                 || ( $bool = 1 )
                 ) 
               &&
                 (
                  (   ( $pad{I1878} = $pos or 1 ) &&
                     ## <alt>
                     (
                         ( $pad{I1879} = $pos or 1 )
                         && (
                          (   ( $pad{I1880} = $pos or 1 ) &&
                           ## <metasyntax>
                           do {
                                my $prior = $::_V6_PRIOR_;
                                my $match =
                                       $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                $::_V6_PRIOR_ = $prior;
                                my $bool = (!$match != 1);
                                $pos = $match->to if $bool;
                                $match;
                           }
                           ## </metasyntax>
     ||    ( ( $pos = $pad{I1880} ) && 0 ) )
                         )
                       || (
                         ( ( $bool = 1 ) && ( $pos = $pad{I1879} ) or 1 )
                         &&                       (   ( $pad{I1881} = $pos or 1 ) &&
                           ## <constant>
                           ( ( substr( $s, $pos, 1 ) eq '_' )
                               ? ( $pos += 1 or 1 )
                               : 0
                           )
                           ## </constant>
     ||    ( ( $pos = $pad{I1881} ) && 0 ) )
                         )
                       || (
                         ( ( $bool = 1 ) && ( $pos = $pad{I1879} ) or 1 )
                         &&                      (
                            (   ( $pad{I1882} = $pos or 1 ) &&
                             ## <constant>
                             ( ( substr( $s, $pos, 1 ) eq ':' )
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             )
                             ## </constant>
     ||    ( ( $pos = $pad{I1882} ) && 0 ) )
                         &&
                            (   ( $pad{I1883} = $pos or 1 ) &&
                             ## <constant>
                             ( ( substr( $s, $pos, 1 ) eq ':' )
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             )
                             ## </constant>
     ||    ( ( $pos = $pad{I1883} ) && 0 ) )
                         )
                       )
                     )
    ## </alt>
     ||    ( ( $pos = $pad{I1878} ) && 0 ) )
                 && do { while (
                  (   ( $pad{I1878} = $pos or 1 ) &&
                     ## <alt>
                     (
                         ( $pad{I1879} = $pos or 1 )
                         && (
                          (   ( $pad{I1880} = $pos or 1 ) &&
                           ## <metasyntax>
                           do {
                                my $prior = $::_V6_PRIOR_;
                                my $match =
                                       $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                $::_V6_PRIOR_ = $prior;
                                my $bool = (!$match != 1);
                                $pos = $match->to if $bool;
                                $match;
                           }
                           ## </metasyntax>
     ||    ( ( $pos = $pad{I1880} ) && 0 ) )
                         )
                       || (
                         ( ( $bool = 1 ) && ( $pos = $pad{I1879} ) or 1 )
                         &&                       (   ( $pad{I1881} = $pos or 1 ) &&
                           ## <constant>
                           ( ( substr( $s, $pos, 1 ) eq '_' )
                               ? ( $pos += 1 or 1 )
                               : 0
                           )
                           ## </constant>
     ||    ( ( $pos = $pad{I1881} ) && 0 ) )
                         )
                       || (
                         ( ( $bool = 1 ) && ( $pos = $pad{I1879} ) or 1 )
                         &&                      (
                            (   ( $pad{I1882} = $pos or 1 ) &&
                             ## <constant>
                             ( ( substr( $s, $pos, 1 ) eq ':' )
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             )
                             ## </constant>
     ||    ( ( $pos = $pad{I1882} ) && 0 ) )
                         &&
                            (   ( $pad{I1883} = $pos or 1 ) &&
                             ## <constant>
                             ( ( substr( $s, $pos, 1 ) eq ':' )
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             )
                             ## </constant>
     ||    ( ( $pos = $pad{I1883} ) && 0 ) )
                         )
                       )
                     )
    ## </alt>
     ||    ( ( $pos = $pad{I1878} ) && 0 ) )) {}; $bool = 1 }
                 ) 
               &&
                  (   ( $pad{I1884} = $pos or 1 ) &&
                   do { 
                     local $::_V6_SUCCEED = 1;
                     $::_V6_MATCH_ = $m;
                     $m->data->{capture} = \( sub { return { variable => '@' . $_[0] } }->( $m ) ); 
                     $bool = $::_V6_SUCCEED;
                     $::_V6_MATCH_ = $m if $bool; 
                     return $m if $bool; 
                   } ||    ( ( $pos = $pad{I1884} ) && 0 ) )
               )
             )
           )
    ## </alt>
    ;
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# Code block from grammar spec
 $variables{'@'} = sub { var3($_[1], $_[0], $_[2], $_[3]) }; 

# token var4
*var4 =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           ## <alt>
           (
               ( $pad{I1885} = $pos or 1 )
               && (
               (
                 (
                  (   ( $pad{I1886} = $pos or 1 ) &&
                     ## <metasyntax>
                     do {
                          my $prior = $::_V6_PRIOR_;
                          my $match =
                                 $grammar->digit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                          $::_V6_PRIOR_ = $prior;
                          my $bool = (!$match != 1);
                          $pos = $match->to if $bool;
                          $match;
                     }
                     ## </metasyntax>
     ||    ( ( $pos = $pad{I1886} ) && 0 ) )
                 && do { while (
                  (   ( $pad{I1886} = $pos or 1 ) &&
                     ## <metasyntax>
                     do {
                          my $prior = $::_V6_PRIOR_;
                          my $match =
                                 $grammar->digit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                          $::_V6_PRIOR_ = $prior;
                          my $bool = (!$match != 1);
                          $pos = $match->to if $bool;
                          $match;
                     }
                     ## </metasyntax>
     ||    ( ( $pos = $pad{I1886} ) && 0 ) )) {}; $bool = 1 }
                 ) 
               &&
                  (   ( $pad{I1887} = $pos or 1 ) &&
                   do { 
                     local $::_V6_SUCCEED = 1;
                     $::_V6_MATCH_ = $m;
                     $m->data->{capture} = \( sub { return { match_variable => '%' . $_[0] } }->( $m ) ); 
                     $bool = $::_V6_SUCCEED;
                     $::_V6_MATCH_ = $m if $bool; 
                     return $m if $bool; 
                   } ||    ( ( $pos = $pad{I1887} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1885} ) or 1 )
               &&            (
                 (
                  (   ( $pad{I1888} = $pos or 1 ) &&
                     ## <constant>
                     ( ( substr( $s, $pos, 1 ) eq '^' )
                         ? ( $pos += 1 or 1 )
                         : 0
                     )
                     ## </constant>
     ||    ( ( $pos = $pad{I1888} ) && 0 ) )
                 || ( $bool = 1 )
                 ) 
               &&
                 (
                  (   ( $pad{I1889} = $pos or 1 ) &&
                     ## <alt>
                     (
                         ( $pad{I1890} = $pos or 1 )
                         && (
                          (   ( $pad{I1891} = $pos or 1 ) &&
                           ## <metasyntax>
                           do {
                                my $prior = $::_V6_PRIOR_;
                                my $match =
                                       $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                $::_V6_PRIOR_ = $prior;
                                my $bool = (!$match != 1);
                                $pos = $match->to if $bool;
                                $match;
                           }
                           ## </metasyntax>
     ||    ( ( $pos = $pad{I1891} ) && 0 ) )
                         )
                       || (
                         ( ( $bool = 1 ) && ( $pos = $pad{I1890} ) or 1 )
                         &&                       (   ( $pad{I1892} = $pos or 1 ) &&
                           ## <constant>
                           ( ( substr( $s, $pos, 1 ) eq '_' )
                               ? ( $pos += 1 or 1 )
                               : 0
                           )
                           ## </constant>
     ||    ( ( $pos = $pad{I1892} ) && 0 ) )
                         )
                       || (
                         ( ( $bool = 1 ) && ( $pos = $pad{I1890} ) or 1 )
                         &&                      (
                            (   ( $pad{I1893} = $pos or 1 ) &&
                             ## <constant>
                             ( ( substr( $s, $pos, 1 ) eq ':' )
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             )
                             ## </constant>
     ||    ( ( $pos = $pad{I1893} ) && 0 ) )
                         &&
                            (   ( $pad{I1894} = $pos or 1 ) &&
                             ## <constant>
                             ( ( substr( $s, $pos, 1 ) eq ':' )
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             )
                             ## </constant>
     ||    ( ( $pos = $pad{I1894} ) && 0 ) )
                         )
                       )
                     )
    ## </alt>
     ||    ( ( $pos = $pad{I1889} ) && 0 ) )
                 && do { while (
                  (   ( $pad{I1889} = $pos or 1 ) &&
                     ## <alt>
                     (
                         ( $pad{I1890} = $pos or 1 )
                         && (
                          (   ( $pad{I1891} = $pos or 1 ) &&
                           ## <metasyntax>
                           do {
                                my $prior = $::_V6_PRIOR_;
                                my $match =
                                       $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                $::_V6_PRIOR_ = $prior;
                                my $bool = (!$match != 1);
                                $pos = $match->to if $bool;
                                $match;
                           }
                           ## </metasyntax>
     ||    ( ( $pos = $pad{I1891} ) && 0 ) )
                         )
                       || (
                         ( ( $bool = 1 ) && ( $pos = $pad{I1890} ) or 1 )
                         &&                       (   ( $pad{I1892} = $pos or 1 ) &&
                           ## <constant>
                           ( ( substr( $s, $pos, 1 ) eq '_' )
                               ? ( $pos += 1 or 1 )
                               : 0
                           )
                           ## </constant>
     ||    ( ( $pos = $pad{I1892} ) && 0 ) )
                         )
                       || (
                         ( ( $bool = 1 ) && ( $pos = $pad{I1890} ) or 1 )
                         &&                      (
                            (   ( $pad{I1893} = $pos or 1 ) &&
                             ## <constant>
                             ( ( substr( $s, $pos, 1 ) eq ':' )
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             )
                             ## </constant>
     ||    ( ( $pos = $pad{I1893} ) && 0 ) )
                         &&
                            (   ( $pad{I1894} = $pos or 1 ) &&
                             ## <constant>
                             ( ( substr( $s, $pos, 1 ) eq ':' )
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             )
                             ## </constant>
     ||    ( ( $pos = $pad{I1894} ) && 0 ) )
                         )
                       )
                     )
    ## </alt>
     ||    ( ( $pos = $pad{I1889} ) && 0 ) )) {}; $bool = 1 }
                 ) 
               &&
                  (   ( $pad{I1895} = $pos or 1 ) &&
                   do { 
                     local $::_V6_SUCCEED = 1;
                     $::_V6_MATCH_ = $m;
                     $m->data->{capture} = \( sub { return { variable => '%' . $_[0] } }->( $m ) ); 
                     $bool = $::_V6_SUCCEED;
                     $::_V6_MATCH_ = $m if $bool; 
                     return $m if $bool; 
                   } ||    ( ( $pos = $pad{I1895} ) && 0 ) )
               )
             )
           )
    ## </alt>
    ;
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# Code block from grammar spec
 $variables{'%'} = sub { var4($_[1], $_[0], $_[2], $_[3]) }; 

# token term1
*term1 =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
            (   ( $pad{I1896} = $pos or 1 ) &&
             do { 
               local $::_V6_SUCCEED = 1;
               $::_V6_MATCH_ = $m;
               $m->data->{capture} = \( sub { return { metasyntax => {
                            metasyntax => 'null',
                            _pos => [ $_[0]->from, $_[0]->to ],
            } } }->( $m ) ); 
               $bool = $::_V6_SUCCEED;
               $::_V6_MATCH_ = $m if $bool; 
               return $m if $bool; 
             } ||    ( ( $pos = $pad{I1896} ) && 0 ) );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# Code block from grammar spec
 $rule_terms{'{*}'} = sub { term1($_[1], $_[0], $_[2], $_[3]) }; 

# token term2
*term2 =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           (
              (   ( $pad{I1897} = $pos or 1 ) &&
               ## <metasyntax>
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                           $grammar->literal( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    my $bool = (!$match != 1);
                    $pos = $match->to if $bool;
                    $match;
               }
               ## </metasyntax>
     ||    ( ( $pos = $pad{I1897} ) && 0 ) )
           &&
              (   ( $pad{I1898} = $pos or 1 ) &&
               ## <constant>
               ( ( substr( $s, $pos, 1 ) eq chr(39) )
                   ? ( $pos += 1 or 1 )
                   : 0
               )
               ## </constant>
     ||    ( ( $pos = $pad{I1898} ) && 0 ) )
           &&
              (   ( $pad{I1899} = $pos or 1 ) &&
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { return {
                    metasyntax => {
                        metasyntax => '\'' . ${$_[0]},
                        _pos => [ $_[0]->from - 1, $_[0]->to ],
                    }
                };
            }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1899} ) && 0 ) )
           );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# Code block from grammar spec
 $rule_terms{'\''} = sub { term2($_[1], $_[0], $_[2], $_[3]) }; 

# token term3
*term3 =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           (
              (   ( $pad{I1900} = $pos or 1 ) &&
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                           $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'rule'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1900} ) && 0 ) )
           &&
              (   ( $pad{I1901} = $pos or 1 ) &&
               ## <constant>
               ( ( substr( $s, $pos, 1 ) eq ')' )
                   ? ( $pos += 1 or 1 )
                   : 0
               )
               ## </constant>
     ||    ( ( $pos = $pad{I1901} ) && 0 ) )
           &&
              (   ( $pad{I1902} = $pos or 1 ) &&
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { return { capturing_group => ${ $_[0]->{qw(rule)} } }; }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1902} ) && 0 ) )
           );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# Code block from grammar spec
 $rule_terms{'('} = sub { term3($_[1], $_[0], $_[2], $_[3]) }; 

# token term4
*term4 =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           (
              (   ( $pad{I1903} = $pos or 1 ) &&
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                           $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'rule'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1903} ) && 0 ) )
           &&
              (   ( $pad{I1904} = $pos or 1 ) &&
               ## <constant>
               ( ( substr( $s, $pos, 2 ) eq ')>' )
                   ? ( $pos += 2 or 1 )
                   : 0
               )
               ## </constant>
     ||    ( ( $pos = $pad{I1904} ) && 0 ) )
           &&
              (   ( $pad{I1905} = $pos or 1 ) &&
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { return { capture_as_result => ${ $_[0]->{qw(rule)} } } }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1905} ) && 0 ) )
           );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# Code block from grammar spec
 $rule_terms{'<('} = sub { term4($_[1], $_[0], $_[2], $_[3]) }; 

# token term5
*term5 =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           (
              (   ( $pad{I1906} = $pos or 1 ) &&
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                           $grammar->char_class( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'char_class'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1906} ) && 0 ) )
           &&
             do { while (
              (   ( $pad{I1907} = $pos or 1 ) &&
                 do{
                     my $hash = do {
                       my $bool = 1;
                       my $from = $pos;
                       my @match;
                       my %named;
                       $bool = 0 unless
                         (
                            (   ( $pad{I1908} = $pos or 1 ) &&
                             ## <perl5>
                             ( ( substr( $s, $pos ) =~ m/^((?:(?=[+-]))\X)/ )
                                 ? ( $pos += length( $1 ) or 1 )
                                 : 0
                             )
                             ## </perl5>
     ||    ( ( $pos = $pad{I1908} ) && 0 ) )
                         &&
                            (   ( $pad{I1909} = $pos or 1 ) &&
                             do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                                         $grammar->char_class( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'char_class'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1909} ) && 0 ) )
                         );
                       { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                     };
                     my $bool = ${$hash->{'bool'}};
                     if ( $bool ) {
                         push @{ $match[ 0 ] }, Pugs::Runtime::Match->new( $hash );
                     }
                     $bool;
                 } ||    ( ( $pos = $pad{I1907} ) && 0 ) )) {}; $bool = 1 }
           &&
              (   ( $pad{I1910} = $pos or 1 ) &&
               ## <constant>
               ( ( substr( $s, $pos, 1 ) eq '>' )
                   ? ( $pos += 1 or 1 )
                   : 0
               )
               ## </constant>
     ||    ( ( $pos = $pad{I1910} ) && 0 ) )
           &&
              (   ( $pad{I1911} = $pos or 1 ) &&
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { return {
                char_class => [
                    '+' . $_[0]->{qw(char_class)},
                    @{$_[0]->[0]},   # TODO - stringify
                ] }
            }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1911} ) && 0 ) )
           );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# Code block from grammar spec
 $rule_terms{'<+'} = sub { term5($_[1], $_[0], $_[2], $_[3]) }; 

# token term6
*term6 =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           (
              (   ( $pad{I1912} = $pos or 1 ) &&
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                           $grammar->char_class( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'char_class'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1912} ) && 0 ) )
           &&
             do { while (
              (   ( $pad{I1913} = $pos or 1 ) &&
                 do{
                     my $hash = do {
                       my $bool = 1;
                       my $from = $pos;
                       my @match;
                       my %named;
                       $bool = 0 unless
                         (
                            (   ( $pad{I1914} = $pos or 1 ) &&
                             ## <perl5>
                             ( ( substr( $s, $pos ) =~ m/^((?:(?=[+-]))\X)/ )
                                 ? ( $pos += length( $1 ) or 1 )
                                 : 0
                             )
                             ## </perl5>
     ||    ( ( $pos = $pad{I1914} ) && 0 ) )
                         &&
                            (   ( $pad{I1915} = $pos or 1 ) &&
                             do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                                         $grammar->char_class( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'char_class'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1915} ) && 0 ) )
                         );
                       { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                     };
                     my $bool = ${$hash->{'bool'}};
                     if ( $bool ) {
                         push @{ $match[ 0 ] }, Pugs::Runtime::Match->new( $hash );
                     }
                     $bool;
                 } ||    ( ( $pos = $pad{I1913} ) && 0 ) )) {}; $bool = 1 }
           &&
              (   ( $pad{I1916} = $pos or 1 ) &&
               ## <constant>
               ( ( substr( $s, $pos, 1 ) eq '>' )
                   ? ( $pos += 1 or 1 )
                   : 0
               )
               ## </constant>
     ||    ( ( $pos = $pad{I1916} ) && 0 ) )
           &&
              (   ( $pad{I1917} = $pos or 1 ) &&
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { return {
                char_class => [
                    '-' . $_[0]->{qw(char_class)},
                    @{$_[0]->[0]},   # TODO - stringify
                ] }
            }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1917} ) && 0 ) )
           );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# Code block from grammar spec
 $rule_terms{'<-'} = sub { term6($_[1], $_[0], $_[2], $_[3]) }; 

# token term7
*term7 =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           (
              (   ( $pad{I1918} = $pos or 1 ) &&
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                           $grammar->char_range( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'char_range'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1918} ) && 0 ) )
           &&
              (   ( $pad{I1919} = $pos or 1 ) &&
               ## <constant>
               ( ( substr( $s, $pos, 1 ) eq ']' )
                   ? ( $pos += 1 or 1 )
                   : 0
               )
               ## </constant>
     ||    ( ( $pos = $pad{I1919} ) && 0 ) )
           &&
             do { while (
              (   ( $pad{I1920} = $pos or 1 ) &&
                 do{
                     my $hash = do {
                       my $bool = 1;
                       my $from = $pos;
                       my @match;
                       my %named;
                       $bool = 0 unless
                         (
                            (   ( $pad{I1921} = $pos or 1 ) &&
                             ## <perl5>
                             ( ( substr( $s, $pos ) =~ m/^((?:(?=[+-]))\X)/ )
                                 ? ( $pos += length( $1 ) or 1 )
                                 : 0
                             )
                             ## </perl5>
     ||    ( ( $pos = $pad{I1921} ) && 0 ) )
                         &&
                            (   ( $pad{I1922} = $pos or 1 ) &&
                             do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                                         $grammar->char_class( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'char_class'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1922} ) && 0 ) )
                         );
                       { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                     };
                     my $bool = ${$hash->{'bool'}};
                     if ( $bool ) {
                         push @{ $match[ 0 ] }, Pugs::Runtime::Match->new( $hash );
                     }
                     $bool;
                 } ||    ( ( $pos = $pad{I1920} ) && 0 ) )) {}; $bool = 1 }
           &&
              (   ( $pad{I1923} = $pos or 1 ) &&
               ## <constant>
               ( ( substr( $s, $pos, 1 ) eq '>' )
                   ? ( $pos += 1 or 1 )
                   : 0
               )
               ## </constant>
     ||    ( ( $pos = $pad{I1923} ) && 0 ) )
           &&
              (   ( $pad{I1924} = $pos or 1 ) &&
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { return {
                char_class => [
                    '+[' . $_[0]->{qw(char_range)} . ']',
                    @{$_[0]->[0]},   # TODO - stringify
                ] }
            }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1924} ) && 0 ) )
           );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# Code block from grammar spec
 $rule_terms{'<['} = sub { term7($_[1], $_[0], $_[2], $_[3]) }; 

# token term8
*term8 =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           (
              (   ( $pad{I1925} = $pos or 1 ) &&
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                           $grammar->parse_metasyntax( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'parse_metasyntax'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1925} ) && 0 ) )
           &&
              (   ( $pad{I1926} = $pos or 1 ) &&
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { return ${ $_[0]->{qw(parse_metasyntax)} } }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1926} ) && 0 ) )
           );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# Code block from grammar spec
 $rule_terms{'<'} = sub { term8($_[1], $_[0], $_[2], $_[3]) }; 

# token term9
*term9 =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           (
              (   ( $pad{I1927} = $pos or 1 ) &&
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                           $grammar->parsed_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'parsed_code'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1927} ) && 0 ) )
           &&
              (   ( $pad{I1928} = $pos or 1 ) &&
               ## <constant>
               ( ( substr( $s, $pos, 1 ) eq '}' )
                   ? ( $pos += 1 or 1 )
                   : 0
               )
               ## </constant>
     ||    ( ( $pos = $pad{I1928} ) && 0 ) )
           &&
              (   ( $pad{I1929} = $pos or 1 ) &&
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { return { closure => {
                closure => ${ $_[0]->{qw(parsed_code)} },
                modifier => 'plain',
                _pos => [$_[0]->from - 1, $_[0]->to],
            } } }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1929} ) && 0 ) )
           );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# Code block from grammar spec
 $rule_terms{'{'} = sub { term9($_[1], $_[0], $_[2], $_[3]) }; 

# token term10
*term10 =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           (
              (   ( $pad{I1930} = $pos or 1 ) &&
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                           $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'special_char'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1930} ) && 0 ) )
           &&
              (   ( $pad{I1931} = $pos or 1 ) &&
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { return ${ $_[0]->{qw(special_char)} } }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1931} ) && 0 ) )
           );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# Code block from grammar spec
 $rule_terms{'\\'} = sub { term10($_[1], $_[0], $_[2], $_[3]) }; 

# token term11
*term11 =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
            (   ( $pad{I1932} = $pos or 1 ) &&
             do { 
               local $::_V6_SUCCEED = 1;
               $::_V6_MATCH_ = $m;
               $m->data->{capture} = \( sub { return { 'dot' => 1 } }->( $m ) ); 
               $bool = $::_V6_SUCCEED;
               $::_V6_MATCH_ = $m if $bool; 
               return $m if $bool; 
             } ||    ( ( $pos = $pad{I1932} ) && 0 ) );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# Code block from grammar spec
 $rule_terms{'.'} = sub { term11($_[1], $_[0], $_[2], $_[3]) }; 

# token term12
*term12 =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           (
              (   ( $pad{I1933} = $pos or 1 ) &&
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                           $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'rule'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1933} ) && 0 ) )
           &&
              (   ( $pad{I1934} = $pos or 1 ) &&
               ## <constant>
               ( ( substr( $s, $pos, 1 ) eq ']' )
                   ? ( $pos += 1 or 1 )
                   : 0
               )
               ## </constant>
     ||    ( ( $pos = $pad{I1934} ) && 0 ) )
           &&
              (   ( $pad{I1935} = $pos or 1 ) &&
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { return ${ $_[0]->{qw(rule)} } }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1935} ) && 0 ) )
           );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# Code block from grammar spec
 $rule_terms{'['} = sub { term12($_[1], $_[0], $_[2], $_[3]) }; 

# token term13
*term13 =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
            (   ( $pad{I1936} = $pos or 1 ) &&
             do { 
               local $::_V6_SUCCEED = 1;
               $::_V6_MATCH_ = $m;
               $m->data->{capture} = \( sub { return { colon => ':::' } }->( $m ) ); 
               $bool = $::_V6_SUCCEED;
               $::_V6_MATCH_ = $m if $bool; 
               return $m if $bool; 
             } ||    ( ( $pos = $pad{I1936} ) && 0 ) );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# Code block from grammar spec
 $rule_terms{':::'} = sub { term13($_[1], $_[0], $_[2], $_[3]) }; 

# token term14
*term14 =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
            (   ( $pad{I1937} = $pos or 1 ) &&
             do { 
               local $::_V6_SUCCEED = 1;
               $::_V6_MATCH_ = $m;
               $m->data->{capture} = \( sub { return { colon => ':?' } }->( $m ) ); 
               $bool = $::_V6_SUCCEED;
               $::_V6_MATCH_ = $m if $bool; 
               return $m if $bool; 
             } ||    ( ( $pos = $pad{I1937} ) && 0 ) );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# Code block from grammar spec
 $rule_terms{':?'} = sub { term14($_[1], $_[0], $_[2], $_[3]) }; 

# token term15
*term15 =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
            (   ( $pad{I1938} = $pos or 1 ) &&
             do { 
               local $::_V6_SUCCEED = 1;
               $::_V6_MATCH_ = $m;
               $m->data->{capture} = \( sub { return { colon => ':+' } }->( $m ) ); 
               $bool = $::_V6_SUCCEED;
               $::_V6_MATCH_ = $m if $bool; 
               return $m if $bool; 
             } ||    ( ( $pos = $pad{I1938} ) && 0 ) );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# Code block from grammar spec
 $rule_terms{':+'} = sub { term15($_[1], $_[0], $_[2], $_[3]) }; 

# token term16
*term16 =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
            (   ( $pad{I1939} = $pos or 1 ) &&
             do { 
               local $::_V6_SUCCEED = 1;
               $::_V6_MATCH_ = $m;
               $m->data->{capture} = \( sub { return { colon => '::' } }->( $m ) ); 
               $bool = $::_V6_SUCCEED;
               $::_V6_MATCH_ = $m if $bool; 
               return $m if $bool; 
             } ||    ( ( $pos = $pad{I1939} ) && 0 ) );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# Code block from grammar spec
 $rule_terms{'::'} = sub { term16($_[1], $_[0], $_[2], $_[3]) }; 

# token term17
*term17 =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
            (   ( $pad{I1940} = $pos or 1 ) &&
             do { 
               local $::_V6_SUCCEED = 1;
               $::_V6_MATCH_ = $m;
               $m->data->{capture} = \( sub { return { colon => ':'  } }->( $m ) ); 
               $bool = $::_V6_SUCCEED;
               $::_V6_MATCH_ = $m if $bool; 
               return $m if $bool; 
             } ||    ( ( $pos = $pad{I1940} ) && 0 ) );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# Code block from grammar spec
 $rule_terms{':'} = sub { term17($_[1], $_[0], $_[2], $_[3]) }; 

# token term18
*term18 =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
            (   ( $pad{I1941} = $pos or 1 ) &&
             do { 
               local $::_V6_SUCCEED = 1;
               $::_V6_MATCH_ = $m;
               $m->data->{capture} = \( sub { return { colon => '$$' } }->( $m ) ); 
               $bool = $::_V6_SUCCEED;
               $::_V6_MATCH_ = $m if $bool; 
               return $m if $bool; 
             } ||    ( ( $pos = $pad{I1941} ) && 0 ) );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# Code block from grammar spec
 $rule_terms{'$$'} = sub { term18($_[1], $_[0], $_[2], $_[3]) }; 

# token term19
*term19 =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
            (   ( $pad{I1942} = $pos or 1 ) &&
             do { 
               local $::_V6_SUCCEED = 1;
               $::_V6_MATCH_ = $m;
               $m->data->{capture} = \( sub { return { colon => '$'  } }->( $m ) ); 
               $bool = $::_V6_SUCCEED;
               $::_V6_MATCH_ = $m if $bool; 
               return $m if $bool; 
             } ||    ( ( $pos = $pad{I1942} ) && 0 ) );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# Code block from grammar spec
 $rule_terms{'$'} = sub { term19($_[1], $_[0], $_[2], $_[3]) }; 

# token term20
*term20 =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
            (   ( $pad{I1943} = $pos or 1 ) &&
             do { 
               local $::_V6_SUCCEED = 1;
               $::_V6_MATCH_ = $m;
               $m->data->{capture} = \( sub { return { colon => '^^' } }->( $m ) ); 
               $bool = $::_V6_SUCCEED;
               $::_V6_MATCH_ = $m if $bool; 
               return $m if $bool; 
             } ||    ( ( $pos = $pad{I1943} ) && 0 ) );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# Code block from grammar spec
 $rule_terms{'^^'} = sub { term20($_[1], $_[0], $_[2], $_[3]) }; 

# token term21
*term21 =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
            (   ( $pad{I1944} = $pos or 1 ) &&
             do { 
               local $::_V6_SUCCEED = 1;
               $::_V6_MATCH_ = $m;
               $m->data->{capture} = \( sub { return { colon => '^'  } }->( $m ) ); 
               $bool = $::_V6_SUCCEED;
               $::_V6_MATCH_ = $m if $bool; 
               return $m if $bool; 
             } ||    ( ( $pos = $pad{I1944} ) && 0 ) );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# Code block from grammar spec
 $rule_terms{'^'} = sub { term21($_[1], $_[0], $_[2], $_[3]) }; 

# token term22
*term22 =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
            (   ( $pad{I1945} = $pos or 1 ) &&
             do { 
               local $::_V6_SUCCEED = 1;
               $::_V6_MATCH_ = $m;
               $m->data->{capture} = \( sub { return { colon => '>>' } }->( $m ) ); 
               $bool = $::_V6_SUCCEED;
               $::_V6_MATCH_ = $m if $bool; 
               return $m if $bool; 
             } ||    ( ( $pos = $pad{I1945} ) && 0 ) );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# Code block from grammar spec
 $rule_terms{'>>'} = sub { term22($_[1], $_[0], $_[2], $_[3]) }; 

# Code block from grammar spec
 $rule_terms{'»'} = sub { term22($_[1], $_[0], $_[2], $_[3]) }; 

# token term24
*term24 =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
            (   ( $pad{I1946} = $pos or 1 ) &&
             do { 
               local $::_V6_SUCCEED = 1;
               $::_V6_MATCH_ = $m;
               $m->data->{capture} = \( sub { return { colon => '<<' } }->( $m ) ); 
               $bool = $::_V6_SUCCEED;
               $::_V6_MATCH_ = $m if $bool; 
               return $m if $bool; 
             } ||    ( ( $pos = $pad{I1946} ) && 0 ) );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# Code block from grammar spec
 $rule_terms{'<<'} = sub { term24($_[1], $_[0], $_[2], $_[3]) }; 

# Code block from grammar spec
 $rule_terms{'«'} = sub { term24($_[1], $_[0], $_[2], $_[3]) }; 

# token term26
*term26 =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           (
              (   ( $pad{I1947} = $pos or 1 ) &&
               ## <metasyntax>
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                           $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    my $bool = (!$match != 1);
                    $pos = $match->to if $bool;
                    $match;
               }
               ## </metasyntax>
     ||    ( ( $pos = $pad{I1947} ) && 0 ) )
           &&
              (   ( $pad{I1948} = $pos or 1 ) &&
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                           $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'rule'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1948} ) && 0 ) )
           &&
              (   ( $pad{I1949} = $pos or 1 ) &&
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { return {
                modifier => {
                    modifier => 'ignorecase',
                    rule => ${ $_[0]->{qw(rule)} },
                    }
                }
            }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1949} ) && 0 ) )
           );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# Code block from grammar spec
 $rule_terms{':i'} = sub { term26($_[1], $_[0], $_[2], $_[3]) }; 

# Code block from grammar spec
 $rule_terms{':ignorecase'} = sub { term26($_[1], $_[0], $_[2], $_[3]) }; 

# token term28
*term28 =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           (
              (   ( $pad{I1950} = $pos or 1 ) &&
               ## <metasyntax>
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                           $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    my $bool = (!$match != 1);
                    $pos = $match->to if $bool;
                    $match;
               }
               ## </metasyntax>
     ||    ( ( $pos = $pad{I1950} ) && 0 ) )
           &&
              (   ( $pad{I1951} = $pos or 1 ) &&
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                           $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'rule'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1951} ) && 0 ) )
           &&
              (   ( $pad{I1952} = $pos or 1 ) &&
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { return { modifier => 'sigspace', rule => ${ $_[0]->{qw(rule)} } } }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1952} ) && 0 ) )
           );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# Code block from grammar spec
 $rule_terms{':s'} = sub { term28($_[1], $_[0], $_[2], $_[3]) }; 

# Code block from grammar spec
 $rule_terms{':sigspace'} = sub { term28($_[1], $_[0], $_[2], $_[3]) }; 

# token term30
*term30 =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           (
              (   ( $pad{I1953} = $pos or 1 ) &&
               ## <metasyntax>
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                           $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    my $bool = (!$match != 1);
                    $pos = $match->to if $bool;
                    $match;
               }
               ## </metasyntax>
     ||    ( ( $pos = $pad{I1953} ) && 0 ) )
           &&
              (   ( $pad{I1954} = $pos or 1 ) &&
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                           $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'rule'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1954} ) && 0 ) )
           &&
              (   ( $pad{I1955} = $pos or 1 ) &&
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { return { modifier => 'Perl5', rule => ${ $_[0]->{qw(rule)} } } }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1955} ) && 0 ) )
           );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# Code block from grammar spec
 $rule_terms{':P5'} = sub { term30($_[1], $_[0], $_[2], $_[3]) }; 

# Code block from grammar spec
 $rule_terms{':Perl5'} = sub { term30($_[1], $_[0], $_[2], $_[3]) }; 

# token term32
*term32 =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           (
              (   ( $pad{I1956} = $pos or 1 ) &&
               ## <metasyntax>
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                           $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    my $bool = (!$match != 1);
                    $pos = $match->to if $bool;
                    $match;
               }
               ## </metasyntax>
     ||    ( ( $pos = $pad{I1956} ) && 0 ) )
           &&
              (   ( $pad{I1957} = $pos or 1 ) &&
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                           $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'rule'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1957} ) && 0 ) )
           &&
              (   ( $pad{I1958} = $pos or 1 ) &&
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { return { modifier => 'bytes', rule => ${ $_[0]->{qw(rule)} } } }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1958} ) && 0 ) )
           );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# Code block from grammar spec
 $rule_terms{':bytes'} = sub { term32($_[1], $_[0], $_[2], $_[3]) }; 

# token term33
*term33 =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           (
              (   ( $pad{I1959} = $pos or 1 ) &&
               ## <metasyntax>
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                           $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    my $bool = (!$match != 1);
                    $pos = $match->to if $bool;
                    $match;
               }
               ## </metasyntax>
     ||    ( ( $pos = $pad{I1959} ) && 0 ) )
           &&
              (   ( $pad{I1960} = $pos or 1 ) &&
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                           $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'rule'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1960} ) && 0 ) )
           &&
              (   ( $pad{I1961} = $pos or 1 ) &&
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { return { modifier => 'codes', rule => ${ $_[0]->{qw(rule)} } } }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1961} ) && 0 ) )
           );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# Code block from grammar spec
 $rule_terms{':codes'} = sub { term33($_[1], $_[0], $_[2], $_[3]) }; 

# token term34
*term34 =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           (
              (   ( $pad{I1962} = $pos or 1 ) &&
               ## <metasyntax>
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                           $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    my $bool = (!$match != 1);
                    $pos = $match->to if $bool;
                    $match;
               }
               ## </metasyntax>
     ||    ( ( $pos = $pad{I1962} ) && 0 ) )
           &&
              (   ( $pad{I1963} = $pos or 1 ) &&
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                           $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'rule'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1963} ) && 0 ) )
           &&
              (   ( $pad{I1964} = $pos or 1 ) &&
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { return { modifier => 'graphs', rule => ${ $_[0]->{qw(rule)} } } }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1964} ) && 0 ) )
           );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# Code block from grammar spec
 $rule_terms{':graphs'} = sub { term34($_[1], $_[0], $_[2], $_[3]) }; 

# token term35
*term35 =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           (
              (   ( $pad{I1965} = $pos or 1 ) &&
               ## <metasyntax>
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                           $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    my $bool = (!$match != 1);
                    $pos = $match->to if $bool;
                    $match;
               }
               ## </metasyntax>
     ||    ( ( $pos = $pad{I1965} ) && 0 ) )
           &&
              (   ( $pad{I1966} = $pos or 1 ) &&
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                           $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'rule'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1966} ) && 0 ) )
           &&
              (   ( $pad{I1967} = $pos or 1 ) &&
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { return { modifier => 'langs',  rule => ${ $_[0]->{qw(rule)} } } }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1967} ) && 0 ) )
           );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# Code block from grammar spec
 $rule_terms{':langs'} = sub { term35($_[1], $_[0], $_[2], $_[3]) }; 

# token term
*term =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           ## <alt>
           (
               ( $pad{I1968} = $pos or 1 )
               && (
               (
                  (   ( $pad{I1969} = $pos or 1 ) &&
                   do{
                    my $match =           ## <variable>
              do {
                our $I1970;
                our $I1970_sizes;
                unless ( $I1970 ) {
                    my $hash = \%Pugs::Grammar::Rule::variables;
                    my %sizes = map { length($_) => 1 } keys %$hash;
                    $I1970_sizes = [ sort { $b <=> $a } keys %sizes ];
                    $I1970 = $hash;
                }
                my $match = 0;
                my $key;
                for ( @$I1970_sizes ) {
                    $key = ( $pos <= length( $s )
                                ? substr( $s, $pos, $_ )
                                : '' );
                    if ( exists $I1970->{$key} ) {
                        #$named{KEY} = $key;
                        #$::_V6_MATCH_ = $m;
                        #print "m: ", Dumper( $::_V6_MATCH_->data )
                        #    if ( $key eq 'until' );
                        $match = Pugs::Runtime::Regex::preprocess_hash( $I1970, $key )->( $s, $grammar, { p => ( $pos + $_ ), positionals => [ ], args => { KEY => $key } }, undef );
                        last if $match;
                    }
                }
                if ( $match ) {
                    $pos = $match->to;
                    #print "match: $key at $pos = ", Dumper( $match->data );
                    $bool = 1;
                }; # else { $bool = 0 }
                $match;
              }
              ## </variable>
    ;
                    if ( $match ) { $named{'Pugs::Grammar::Rule::variables'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1969} ) && 0 ) )
               &&
                  (   ( $pad{I1971} = $pos or 1 ) &&
                   ## <alt>
                   (
                       ( $pad{I1972} = $pos or 1 )
                       && (
                       (
                         (
                          (   ( $pad{I1973} = $pos or 1 ) &&
                             ## <metasyntax>
                             do {
                                  my $prior = $::_V6_PRIOR_;
                                  my $match =
                                         $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                  $::_V6_PRIOR_ = $prior;
                                  my $bool = (!$match != 1);
                                  $pos = $match->to if $bool;
                                  $match;
                             }
                             ## </metasyntax>
     ||    ( ( $pos = $pad{I1973} ) && 0 ) )
                         || ( $bool = 1 )
                         ) 
                       &&
                          (   ( $pad{I1974} = $pos or 1 ) &&
                           ## <constant>
                           ( ( substr( $s, $pos, 2 ) eq ':=' )
                               ? ( $pos += 2 or 1 )
                               : 0
                           )
                           ## </constant>
     ||    ( ( $pos = $pad{I1974} ) && 0 ) )
                       &&
                         (
                          (   ( $pad{I1975} = $pos or 1 ) &&
                             ## <metasyntax>
                             do {
                                  my $prior = $::_V6_PRIOR_;
                                  my $match =
                                         $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                  $::_V6_PRIOR_ = $prior;
                                  my $bool = (!$match != 1);
                                  $pos = $match->to if $bool;
                                  $match;
                             }
                             ## </metasyntax>
     ||    ( ( $pos = $pad{I1975} ) && 0 ) )
                         || ( $bool = 1 )
                         ) 
                       &&
                          (   ( $pad{I1976} = $pos or 1 ) &&
                           do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                                       $grammar->named_capture_body( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'named_capture_body'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1976} ) && 0 ) )
                       &&
                          (   ( $pad{I1977} = $pos or 1 ) &&
                           do { 
                             local $::_V6_SUCCEED = 1;
                             $::_V6_MATCH_ = $m;
                             $m->data->{capture} = \( sub {
                return { named_capture => {
                    rule =>  ${ $_[0]->{qw(named_capture_body)} },
                    ident => ${ $_[0]->{qw(Pugs::Grammar::Rule::variables)} },
                }, };
              }->( $m ) ); 
                             $bool = $::_V6_SUCCEED;
                             $::_V6_MATCH_ = $m if $bool; 
                             return $m if $bool; 
                           } ||    ( ( $pos = $pad{I1977} ) && 0 ) )
                       )
                       )
                     || (
                       ( ( $bool = 1 ) && ( $pos = $pad{I1972} ) or 1 )
                       &&                     (   ( $pad{I1978} = $pos or 1 ) &&
                         do { 
                           local $::_V6_SUCCEED = 1;
                           $::_V6_MATCH_ = $m;
                           $m->data->{capture} = \( sub {
                return ${ $_[0]->{qw(Pugs::Grammar::Rule::variables)} }
              }->( $m ) ); 
                           $bool = $::_V6_SUCCEED;
                           $::_V6_MATCH_ = $m if $bool; 
                           return $m if $bool; 
                         } ||    ( ( $pos = $pad{I1978} ) && 0 ) )
                     )
                   )
    ## </alt>
     ||    ( ( $pos = $pad{I1971} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1968} ) or 1 )
               &&            (
                  (   ( $pad{I1979} = $pos or 1 ) &&
                   do{
                    my $match =           ## <variable>
              do {
                our $I1980;
                our $I1980_sizes;
                unless ( $I1980 ) {
                    my $hash = \%Pugs::Grammar::Rule::rule_terms;
                    my %sizes = map { length($_) => 1 } keys %$hash;
                    $I1980_sizes = [ sort { $b <=> $a } keys %sizes ];
                    $I1980 = $hash;
                }
                my $match = 0;
                my $key;
                for ( @$I1980_sizes ) {
                    $key = ( $pos <= length( $s )
                                ? substr( $s, $pos, $_ )
                                : '' );
                    if ( exists $I1980->{$key} ) {
                        #$named{KEY} = $key;
                        #$::_V6_MATCH_ = $m;
                        #print "m: ", Dumper( $::_V6_MATCH_->data )
                        #    if ( $key eq 'until' );
                        $match = Pugs::Runtime::Regex::preprocess_hash( $I1980, $key )->( $s, $grammar, { p => ( $pos + $_ ), positionals => [ ], args => { KEY => $key } }, undef );
                        last if $match;
                    }
                }
                if ( $match ) {
                    $pos = $match->to;
                    #print "match: $key at $pos = ", Dumper( $match->data );
                    $bool = 1;
                }; # else { $bool = 0 }
                $match;
              }
              ## </variable>
    ;
                    if ( $match ) { $named{'Pugs::Grammar::Rule::rule_terms'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1979} ) && 0 ) )
               &&
                  (   ( $pad{I1981} = $pos or 1 ) &&
                   do { 
                     local $::_V6_SUCCEED = 1;
                     $::_V6_MATCH_ = $m;
                     $m->data->{capture} = \( sub {
                #print "term: ", Dumper( $_[0]->data );
                return ${ $_[0]->{qw(Pugs::Grammar::Rule::rule_terms)} }
            }->( $m ) ); 
                     $bool = $::_V6_SUCCEED;
                     $::_V6_MATCH_ = $m if $bool; 
                     return $m if $bool; 
                   } ||    ( ( $pos = $pad{I1981} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1968} ) or 1 )
               &&            (
                  (   ( $pad{I1982} = $pos or 1 ) &&
                   ## <perl5>
                   ( ( substr( $s, $pos ) =~ m/^((?:(?![\]\}\)\>\:\?\+\*\|\&]))\X)/ )
                       ? ( $pos += length( $1 ) or 1 )
                       : 0
                   )
                   ## </perl5>
     ||    ( ( $pos = $pad{I1982} ) && 0 ) )
               &&
                  (   ( $pad{I1983} = $pos or 1 ) &&
                   do { 
                     local $::_V6_SUCCEED = 1;
                     $::_V6_MATCH_ = $m;
                     $m->data->{capture} = \( sub {
                return { 'constant' => ${$_[0]},
                         _pos => [ $_[0]->from, $_[0]->to ] }
            }->( $m ) ); 
                     $bool = $::_V6_SUCCEED;
                     $::_V6_MATCH_ = $m if $bool; 
                     return $m if $bool; 
                   } ||    ( ( $pos = $pad{I1983} ) && 0 ) )
               )
             )
           )
    ## </alt>
    ;
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# token quant
*quant =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           ## <alt>
           (
               ( $pad{I1984} = $pos or 1 )
               && (
               (
                  (   ( $pad{I1985} = $pos or 1 ) &&
                   ## <constant>
                   ( ( substr( $s, $pos, 2 ) eq '**' )
                       ? ( $pos += 2 or 1 )
                       : 0
                   )
                   ## </constant>
     ||    ( ( $pos = $pad{I1985} ) && 0 ) )
               &&
                 (
                  (   ( $pad{I1986} = $pos or 1 ) &&
                     ## <metasyntax>
                     do {
                          my $prior = $::_V6_PRIOR_;
                          my $match =
                                 $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                          $::_V6_PRIOR_ = $prior;
                          my $bool = (!$match != 1);
                          $pos = $match->to if $bool;
                          $match;
                     }
                     ## </metasyntax>
     ||    ( ( $pos = $pad{I1986} ) && 0 ) )
                 || ( $bool = 1 )
                 ) 
               &&
                  (   ( $pad{I1987} = $pos or 1 ) &&
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '{' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
     ||    ( ( $pos = $pad{I1987} ) && 0 ) )
               &&
                  (   ( $pad{I1988} = $pos or 1 ) &&
                   do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                               $grammar->parsed_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'parsed_code'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1988} ) && 0 ) )
               &&
                  (   ( $pad{I1989} = $pos or 1 ) &&
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '}' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
     ||    ( ( $pos = $pad{I1989} ) && 0 ) )
               &&
                  (   ( $pad{I1990} = $pos or 1 ) &&
                   do { 
                     local $::_V6_SUCCEED = 1;
                     $::_V6_MATCH_ = $m;
                     $m->data->{capture} = \( sub { return { closure => ${ $_[0]->{qw(parsed_code)} } } }->( $m ) ); 
                     $bool = $::_V6_SUCCEED;
                     $::_V6_MATCH_ = $m if $bool; 
                     return $m if $bool; 
                   } ||    ( ( $pos = $pad{I1990} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1984} ) or 1 )
               &&            (
                (   ( $pad{I1991} = $pos or 1 ) &&
                   ## <perl5>
                   ( ( substr( $s, $pos ) =~ m/^((?:(?=[\?\*\+]))\X)/ )
                       ? ( $pos += length( $1 ) or 1 )
                       : 0
                   )
                   ## </perl5>
     ||    ( ( $pos = $pad{I1991} ) && 0 ) )
               || ( $bool = 1 )
               ) 
             )
           )
    ## </alt>
    ;
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# token quantifier
*quantifier =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           (
              (   ( $pad{I1992} = $pos or 1 ) &&
               do{
                    my $match = Pugs::Runtime::Match->new( do {
                        my $bool = 1;
                        my $from = $pos;
                        my @match;
                        my %named;
                        $bool = 0 unless                    do{
                           my $hash = do {
                             my $bool = 1;
                             my $from = $pos;
                             my @match;
                             my %named;
                             $bool = 0 unless
                               (
                                (   ( $pad{I1993} = $pos or 1 ) &&
                                   ## <metasyntax>
                                   do {
                                        my $prior = $::_V6_PRIOR_;
                                        my $match =
                                               $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior;
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   }
                                   ## </metasyntax>
     ||    ( ( $pos = $pad{I1993} ) && 0 ) )
                               || ( $bool = 1 )
                               ) ;
                             { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                           };
                           my $bool = ${$hash->{'bool'}};
                           $match[ 0 ] = Pugs::Runtime::Match->new( $hash );
                           $bool;
                       };
                        { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                    } );
                    if ( $match ) { $named{'ws1'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1992} ) && 0 ) )
           &&
              (   ( $pad{I1994} = $pos or 1 ) &&
               do{
                   my $pos1 = $pos;
                   do {
                     my $pos = $pos1;
                     my $from = $pos;
                     my @match;
                     my %named;
                     $bool =                      do{
                             my $pos1 = $pos;
                             do {
                               my $pos = $pos1;
                               my $from = $pos;
                               my @match;
                               my %named;
                               $bool = 0 unless
                                    (   ( $pad{I1995} = $pos or 1 ) &&
                                     ## <perl5>
                                     ( ( substr( $s, $pos ) =~ m/^((?:(?=[\}\]\)]))\X)/ )
                                         ? ( $pos += length( $1 ) or 1 )
                                         : 0
                                     )
                                     ## </perl5>
     ||    ( ( $pos = $pad{I1995} ) && 0 ) );
                               $bool;
                             };
                         } ? 0 : 1;
                     $bool;
                   };
               } ||    ( ( $pos = $pad{I1994} ) && 0 ) )
           &&
              (   ( $pad{I1996} = $pos or 1 ) &&
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                           $grammar->term( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'term'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1996} ) && 0 ) )
           &&
              (   ( $pad{I1997} = $pos or 1 ) &&
               do{
                    my $match = Pugs::Runtime::Match->new( do {
                        my $bool = 1;
                        my $from = $pos;
                        my @match;
                        my %named;
                        $bool = 0 unless                    do{
                           my $hash = do {
                             my $bool = 1;
                             my $from = $pos;
                             my @match;
                             my %named;
                             $bool = 0 unless
                               (
                                (   ( $pad{I1998} = $pos or 1 ) &&
                                   ## <metasyntax>
                                   do {
                                        my $prior = $::_V6_PRIOR_;
                                        my $match =
                                               $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior;
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   }
                                   ## </metasyntax>
     ||    ( ( $pos = $pad{I1998} ) && 0 ) )
                               || ( $bool = 1 )
                               ) ;
                             { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                           };
                           my $bool = ${$hash->{'bool'}};
                           $match[ 0 ] = Pugs::Runtime::Match->new( $hash );
                           $bool;
                       };
                        { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                    } );
                    if ( $match ) { $named{'ws2'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1997} ) && 0 ) )
           &&
              (   ( $pad{I1999} = $pos or 1 ) &&
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                           $grammar->quant( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'quant'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I1999} ) && 0 ) )
           &&
              (   ( $pad{I2000} = $pos or 1 ) &&
               do{
                    my $match = Pugs::Runtime::Match->new( do {
                        my $bool = 1;
                        my $from = $pos;
                        my @match;
                        my %named;
                        $bool = 0 unless                    do{
                           my $hash = do {
                             my $bool = 1;
                             my $from = $pos;
                             my @match;
                             my %named;
                             $bool = 0 unless
                               (
                                (   ( $pad{I2001} = $pos or 1 ) &&
                                   ## <perl5>
                                   ( ( substr( $s, $pos ) =~ m/^((?:(?=[\?\+]))\X)/ )
                                       ? ( $pos += length( $1 ) or 1 )
                                       : 0
                                   )
                                   ## </perl5>
     ||    ( ( $pos = $pad{I2001} ) && 0 ) )
                               || ( $bool = 1 )
                               ) ;
                             { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                           };
                           my $bool = ${$hash->{'bool'}};
                           $match[ 0 ] = Pugs::Runtime::Match->new( $hash );
                           $bool;
                       };
                        { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                    } );
                    if ( $match ) { $named{'greedy'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I2000} ) && 0 ) )
           &&
              (   ( $pad{I2002} = $pos or 1 ) &&
               do{
                    my $match = Pugs::Runtime::Match->new( do {
                        my $bool = 1;
                        my $from = $pos;
                        my @match;
                        my %named;
                        $bool = 0 unless                    do{
                           my $hash = do {
                             my $bool = 1;
                             my $from = $pos;
                             my @match;
                             my %named;
                             $bool = 0 unless
                               (
                                (   ( $pad{I2003} = $pos or 1 ) &&
                                   ## <metasyntax>
                                   do {
                                        my $prior = $::_V6_PRIOR_;
                                        my $match =
                                               $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior;
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   }
                                   ## </metasyntax>
     ||    ( ( $pos = $pad{I2003} ) && 0 ) )
                               || ( $bool = 1 )
                               ) ;
                             { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                           };
                           my $bool = ${$hash->{'bool'}};
                           $match[ 0 ] = Pugs::Runtime::Match->new( $hash );
                           $bool;
                       };
                        { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                    } );
                    if ( $match ) { $named{'ws3'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I2002} ) && 0 ) )
           &&
              (   ( $pad{I2004} = $pos or 1 ) &&
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub {
          if (
                   ${$_[0]->{'quant'}}  eq ''
                && ${$_[0]->{'greedy'}} eq ''
                && ${$_[0]->{'ws1'}}    eq ''
                && ${$_[0]->{'ws2'}}    eq ''
                && ${$_[0]->{'ws3'}}    eq ''
          ) {
              return ${$_[0]->{'term'}};
          }
          return {
            quant => {
                term    => ${$_[0]->{'term'}},
                quant   => ${$_[0]->{'quant'}},
                greedy  => ${$_[0]->{'greedy'}},
                ws1     => ${$_[0]->{'ws1'}},
                ws2     => ${$_[0]->{'ws2'}},
                ws3     => ${$_[0]->{'ws3'}},
                _pos    => [$_[0]->from, $_[0]->to],
            } }
        }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I2004} ) && 0 ) )
           );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# token concat
*concat =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           (
             (
              (   ( $pad{I2005} = $pos or 1 ) &&
                 do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                             $grammar->quantifier( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { push @{$named{'quantifier'}}, $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I2005} ) && 0 ) )
             && do { while (
              (   ( $pad{I2005} = $pos or 1 ) &&
                 do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                             $grammar->quantifier( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { push @{$named{'quantifier'}}, $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I2005} ) && 0 ) )) {}; $bool = 1 }
             ) 
           &&
              (   ( $pad{I2006} = $pos or 1 ) &&
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub {
            my @a = map {  $_->()  }  @{ $::_V6_MATCH_->{'quantifier'} };
            return { concat => \@a, _pos => [$_[0]->from, $_[0]->to] }
                if scalar @a > 1;
            return $a[0];
        }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I2006} ) && 0 ) )
           );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# token conjunctive1
*conjunctive1 =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           (
             (
              (   ( $pad{I2007} = $pos or 1 ) &&
                 (
                   (
                    (   ( $pad{I2008} = $pos or 1 ) &&
                       ## <metasyntax>
                       do {
                            my $prior = $::_V6_PRIOR_;
                            my $match =
                                   $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                            $::_V6_PRIOR_ = $prior;
                            my $bool = (!$match != 1);
                            $pos = $match->to if $bool;
                            $match;
                       }
                       ## </metasyntax>
     ||    ( ( $pos = $pad{I2008} ) && 0 ) )
                   || ( $bool = 1 )
                   ) 
                 &&
                    (   ( $pad{I2009} = $pos or 1 ) &&
                     ## <constant>
                     ( ( substr( $s, $pos, 1 ) eq '&' )
                         ? ( $pos += 1 or 1 )
                         : 0
                     )
                     ## </constant>
     ||    ( ( $pos = $pad{I2009} ) && 0 ) )
                 &&
                    (   ( $pad{I2010} = $pos or 1 ) &&
                     do{
                         my $pos1 = $pos;
                         do {
                           my $pos = $pos1;
                           my $from = $pos;
                           my @match;
                           my %named;
                           $bool =                            do{
                                   my $pos1 = $pos;
                                   do {
                                     my $pos = $pos1;
                                     my $from = $pos;
                                     my @match;
                                     my %named;
                                     $bool = 0 unless
                                          (   ( $pad{I2011} = $pos or 1 ) &&
                                           ## <constant>
                                           ( ( substr( $s, $pos, 1 ) eq '&' )
                                               ? ( $pos += 1 or 1 )
                                               : 0
                                           )
                                           ## </constant>
     ||    ( ( $pos = $pad{I2011} ) && 0 ) );
                                     $bool;
                                   };
                               } ? 0 : 1;
                           $bool;
                         };
                     } ||    ( ( $pos = $pad{I2010} ) && 0 ) )
                 ) ||    ( ( $pos = $pad{I2007} ) && 0 ) )
             || ( $bool = 1 )
             ) 
           &&
             (
               (   ( $pad{I2012} = $pos or 1 ) &&
                 do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                             $grammar->concat( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { push @{$named{'concat'}}, $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I2012} ) && 0 ) )
             ) 
           &&
             do { while (
              (   ( $pad{I2013} = $pos or 1 ) &&
                 (
                    (   ( $pad{I2014} = $pos or 1 ) &&
                     ## <constant>
                     ( ( substr( $s, $pos, 1 ) eq '&' )
                         ? ( $pos += 1 or 1 )
                         : 0
                     )
                     ## </constant>
     ||    ( ( $pos = $pad{I2014} ) && 0 ) )
                 &&
                    (   ( $pad{I2015} = $pos or 1 ) &&
                     do{
                         my $pos1 = $pos;
                         do {
                           my $pos = $pos1;
                           my $from = $pos;
                           my @match;
                           my %named;
                           $bool =                            do{
                                   my $pos1 = $pos;
                                   do {
                                     my $pos = $pos1;
                                     my $from = $pos;
                                     my @match;
                                     my %named;
                                     $bool = 0 unless
                                          (   ( $pad{I2016} = $pos or 1 ) &&
                                           ## <constant>
                                           ( ( substr( $s, $pos, 1 ) eq '&' )
                                               ? ( $pos += 1 or 1 )
                                               : 0
                                           )
                                           ## </constant>
     ||    ( ( $pos = $pad{I2016} ) && 0 ) );
                                     $bool;
                                   };
                               } ? 0 : 1;
                           $bool;
                         };
                     } ||    ( ( $pos = $pad{I2015} ) && 0 ) )
                 &&
                    (   ( $pad{I2017} = $pos or 1 ) &&
                     do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                                 $grammar->concat( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { push @{$named{'concat'}}, $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I2017} ) && 0 ) )
                 ) ||    ( ( $pos = $pad{I2013} ) && 0 ) )) {}; $bool = 1 }
           &&
              (   ( $pad{I2018} = $pos or 1 ) &&
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub {
            my @a = map {  $$_  }  @{ $::_V6_MATCH_->{'concat'} };
            return { conjunctive1 => \@a }  if scalar @a > 1;
            return $a[0];
        }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I2018} ) && 0 ) )
           );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# token disjunctive1
*disjunctive1 =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           (
             (
              (   ( $pad{I2019} = $pos or 1 ) &&
                 (
                   (
                    (   ( $pad{I2020} = $pos or 1 ) &&
                       ## <metasyntax>
                       do {
                            my $prior = $::_V6_PRIOR_;
                            my $match =
                                   $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                            $::_V6_PRIOR_ = $prior;
                            my $bool = (!$match != 1);
                            $pos = $match->to if $bool;
                            $match;
                       }
                       ## </metasyntax>
     ||    ( ( $pos = $pad{I2020} ) && 0 ) )
                   || ( $bool = 1 )
                   ) 
                 &&
                    (   ( $pad{I2021} = $pos or 1 ) &&
                     ## <constant>
                     ( ( substr( $s, $pos, 1 ) eq '|' )
                         ? ( $pos += 1 or 1 )
                         : 0
                     )
                     ## </constant>
     ||    ( ( $pos = $pad{I2021} ) && 0 ) )
                 &&
                    (   ( $pad{I2022} = $pos or 1 ) &&
                     do{
                         my $pos1 = $pos;
                         do {
                           my $pos = $pos1;
                           my $from = $pos;
                           my @match;
                           my %named;
                           $bool =                            do{
                                   my $pos1 = $pos;
                                   do {
                                     my $pos = $pos1;
                                     my $from = $pos;
                                     my @match;
                                     my %named;
                                     $bool = 0 unless
                                          (   ( $pad{I2023} = $pos or 1 ) &&
                                           ## <constant>
                                           ( ( substr( $s, $pos, 1 ) eq '|' )
                                               ? ( $pos += 1 or 1 )
                                               : 0
                                           )
                                           ## </constant>
     ||    ( ( $pos = $pad{I2023} ) && 0 ) );
                                     $bool;
                                   };
                               } ? 0 : 1;
                           $bool;
                         };
                     } ||    ( ( $pos = $pad{I2022} ) && 0 ) )
                 ) ||    ( ( $pos = $pad{I2019} ) && 0 ) )
             || ( $bool = 1 )
             ) 
           &&
             (
               (   ( $pad{I2024} = $pos or 1 ) &&
                 do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                             $grammar->conjunctive1( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { push @{$named{'conjunctive1'}}, $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I2024} ) && 0 ) )
             ) 
           &&
             do { while (
              (   ( $pad{I2025} = $pos or 1 ) &&
                 (
                    (   ( $pad{I2026} = $pos or 1 ) &&
                     ## <constant>
                     ( ( substr( $s, $pos, 1 ) eq '|' )
                         ? ( $pos += 1 or 1 )
                         : 0
                     )
                     ## </constant>
     ||    ( ( $pos = $pad{I2026} ) && 0 ) )
                 &&
                    (   ( $pad{I2027} = $pos or 1 ) &&
                     do{
                         my $pos1 = $pos;
                         do {
                           my $pos = $pos1;
                           my $from = $pos;
                           my @match;
                           my %named;
                           $bool =                            do{
                                   my $pos1 = $pos;
                                   do {
                                     my $pos = $pos1;
                                     my $from = $pos;
                                     my @match;
                                     my %named;
                                     $bool = 0 unless
                                          (   ( $pad{I2028} = $pos or 1 ) &&
                                           ## <constant>
                                           ( ( substr( $s, $pos, 1 ) eq '|' )
                                               ? ( $pos += 1 or 1 )
                                               : 0
                                           )
                                           ## </constant>
     ||    ( ( $pos = $pad{I2028} ) && 0 ) );
                                     $bool;
                                   };
                               } ? 0 : 1;
                           $bool;
                         };
                     } ||    ( ( $pos = $pad{I2027} ) && 0 ) )
                 &&
                    (   ( $pad{I2029} = $pos or 1 ) &&
                     do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                                 $grammar->conjunctive1( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { push @{$named{'conjunctive1'}}, $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I2029} ) && 0 ) )
                 ) ||    ( ( $pos = $pad{I2025} ) && 0 ) )) {}; $bool = 1 }
           &&
              (   ( $pad{I2030} = $pos or 1 ) &&
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub {
            my @a = map {  $$_  }  @{ $::_V6_MATCH_->{'conjunctive1'} };
            return { alt1 => \@a, _pos => [$_[0]->from, $_[0]->to] }  if scalar @a > 1;
            return $a[0];
        }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I2030} ) && 0 ) )
           );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# token conjunctive
*conjunctive =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           (
             (
              (   ( $pad{I2031} = $pos or 1 ) &&
                 (
                   (
                    (   ( $pad{I2032} = $pos or 1 ) &&
                       ## <metasyntax>
                       do {
                            my $prior = $::_V6_PRIOR_;
                            my $match =
                                   $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                            $::_V6_PRIOR_ = $prior;
                            my $bool = (!$match != 1);
                            $pos = $match->to if $bool;
                            $match;
                       }
                       ## </metasyntax>
     ||    ( ( $pos = $pad{I2032} ) && 0 ) )
                   || ( $bool = 1 )
                   ) 
                 &&
                    (   ( $pad{I2033} = $pos or 1 ) &&
                     ## <constant>
                     ( ( substr( $s, $pos, 1 ) eq '&' )
                         ? ( $pos += 1 or 1 )
                         : 0
                     )
                     ## </constant>
     ||    ( ( $pos = $pad{I2033} ) && 0 ) )
                 &&
                    (   ( $pad{I2034} = $pos or 1 ) &&
                     ## <constant>
                     ( ( substr( $s, $pos, 1 ) eq '&' )
                         ? ( $pos += 1 or 1 )
                         : 0
                     )
                     ## </constant>
     ||    ( ( $pos = $pad{I2034} ) && 0 ) )
                 ) ||    ( ( $pos = $pad{I2031} ) && 0 ) )
             || ( $bool = 1 )
             ) 
           &&
             (
               (   ( $pad{I2035} = $pos or 1 ) &&
                 do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                             $grammar->disjunctive1( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { push @{$named{'disjunctive1'}}, $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I2035} ) && 0 ) )
             ) 
           &&
             do { while (
              (   ( $pad{I2036} = $pos or 1 ) &&
                 (
                    (   ( $pad{I2037} = $pos or 1 ) &&
                     ## <constant>
                     ( ( substr( $s, $pos, 1 ) eq '&' )
                         ? ( $pos += 1 or 1 )
                         : 0
                     )
                     ## </constant>
     ||    ( ( $pos = $pad{I2037} ) && 0 ) )
                 &&
                    (   ( $pad{I2038} = $pos or 1 ) &&
                     ## <constant>
                     ( ( substr( $s, $pos, 1 ) eq '&' )
                         ? ( $pos += 1 or 1 )
                         : 0
                     )
                     ## </constant>
     ||    ( ( $pos = $pad{I2038} ) && 0 ) )
                 &&
                    (   ( $pad{I2039} = $pos or 1 ) &&
                     do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                                 $grammar->disjunctive1( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { push @{$named{'disjunctive1'}}, $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I2039} ) && 0 ) )
                 ) ||    ( ( $pos = $pad{I2036} ) && 0 ) )) {}; $bool = 1 }
           &&
              (   ( $pad{I2040} = $pos or 1 ) &&
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub {
            my @a = map {  $$_  }  @{ $::_V6_MATCH_->{'disjunctive1'} };
            return { conjunctive => \@a }  if scalar @a > 1;
            return $a[0];
        }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I2040} ) && 0 ) )
           );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# token rule
*rule =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           (
             (
              (   ( $pad{I2041} = $pos or 1 ) &&
                 (
                   (
                    (   ( $pad{I2042} = $pos or 1 ) &&
                       ## <metasyntax>
                       do {
                            my $prior = $::_V6_PRIOR_;
                            my $match =
                                   $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                            $::_V6_PRIOR_ = $prior;
                            my $bool = (!$match != 1);
                            $pos = $match->to if $bool;
                            $match;
                       }
                       ## </metasyntax>
     ||    ( ( $pos = $pad{I2042} ) && 0 ) )
                   || ( $bool = 1 )
                   ) 
                 &&
                    (   ( $pad{I2043} = $pos or 1 ) &&
                     ## <constant>
                     ( ( substr( $s, $pos, 1 ) eq '|' )
                         ? ( $pos += 1 or 1 )
                         : 0
                     )
                     ## </constant>
     ||    ( ( $pos = $pad{I2043} ) && 0 ) )
                 &&
                    (   ( $pad{I2044} = $pos or 1 ) &&
                     ## <constant>
                     ( ( substr( $s, $pos, 1 ) eq '|' )
                         ? ( $pos += 1 or 1 )
                         : 0
                     )
                     ## </constant>
     ||    ( ( $pos = $pad{I2044} ) && 0 ) )
                 ) ||    ( ( $pos = $pad{I2041} ) && 0 ) )
             || ( $bool = 1 )
             ) 
           &&
             (
               (   ( $pad{I2045} = $pos or 1 ) &&
                 do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                             $grammar->conjunctive( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { push @{$named{'conjunctive'}}, $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I2045} ) && 0 ) )
             ) 
           &&
             do { while (
              (   ( $pad{I2046} = $pos or 1 ) &&
                 (
                    (   ( $pad{I2047} = $pos or 1 ) &&
                     ## <constant>
                     ( ( substr( $s, $pos, 1 ) eq '|' )
                         ? ( $pos += 1 or 1 )
                         : 0
                     )
                     ## </constant>
     ||    ( ( $pos = $pad{I2047} ) && 0 ) )
                 &&
                    (   ( $pad{I2048} = $pos or 1 ) &&
                     ## <constant>
                     ( ( substr( $s, $pos, 1 ) eq '|' )
                         ? ( $pos += 1 or 1 )
                         : 0
                     )
                     ## </constant>
     ||    ( ( $pos = $pad{I2048} ) && 0 ) )
                 &&
                    (   ( $pad{I2049} = $pos or 1 ) &&
                     do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                                 $grammar->conjunctive( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { push @{$named{'conjunctive'}}, $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I2049} ) && 0 ) )
                 ) ||    ( ( $pos = $pad{I2046} ) && 0 ) )) {}; $bool = 1 }
           &&
              (   ( $pad{I2050} = $pos or 1 ) &&
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub {
            my @a = map {  $$_  }  @{ $::_V6_MATCH_->{'conjunctive'} };
            return { alt => \@a }  if scalar @a > 1;
            return $a[0];
        }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I2050} ) && 0 ) )
           );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# token named_regex
*named_regex =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           (
              (   ( $pad{I2051} = $pos or 1 ) &&
               do{
                   my $hash = do {
                     my $bool = 1;
                     my $from = $pos;
                     my @match;
                     my %named;
                     $bool = 0 unless
                       ## <alt>
                       (
                           ( $pad{I2052} = $pos or 1 )
                           && (
                            (   ( $pad{I2053} = $pos or 1 ) &&
                             ## <constant>
                             ( ( substr( $s, $pos, 5 ) eq 'token' )
                                 ? ( $pos += 5 or 1 )
                                 : 0
                             )
                             ## </constant>
     ||    ( ( $pos = $pad{I2053} ) && 0 ) )
                           )
                         || (
                           ( ( $bool = 1 ) && ( $pos = $pad{I2052} ) or 1 )
                           &&                         (   ( $pad{I2054} = $pos or 1 ) &&
                             ## <constant>
                             ( ( substr( $s, $pos, 5 ) eq 'regex' )
                                 ? ( $pos += 5 or 1 )
                                 : 0
                             )
                             ## </constant>
     ||    ( ( $pos = $pad{I2054} ) && 0 ) )
                           )
                         || (
                           ( ( $bool = 1 ) && ( $pos = $pad{I2052} ) or 1 )
                           &&                         (   ( $pad{I2055} = $pos or 1 ) &&
                             ## <constant>
                             ( ( substr( $s, $pos, 4 ) eq 'rule' )
                                 ? ( $pos += 4 or 1 )
                                 : 0
                             )
                             ## </constant>
     ||    ( ( $pos = $pad{I2055} ) && 0 ) )
                         )
                       )
    ## </alt>
    ;
                     { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                   };
                   my $bool = ${$hash->{'bool'}};
                   $match[ 0 ] = Pugs::Runtime::Match->new( $hash );
                   $bool;
               } ||    ( ( $pos = $pad{I2051} ) && 0 ) )
           &&
              (   ( $pad{I2056} = $pos or 1 ) &&
               ## <metasyntax>
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                           $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    my $bool = (!$match != 1);
                    $pos = $match->to if $bool;
                    $match;
               }
               ## </metasyntax>
     ||    ( ( $pos = $pad{I2056} ) && 0 ) )
           &&
              (   ( $pad{I2057} = $pos or 1 ) &&
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                           $grammar->ident( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'ident'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I2057} ) && 0 ) )
           &&
             (
              (   ( $pad{I2058} = $pos or 1 ) &&
                 ## <metasyntax>
                 do {
                      my $prior = $::_V6_PRIOR_;
                      my $match =
                             $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                      $::_V6_PRIOR_ = $prior;
                      my $bool = (!$match != 1);
                      $pos = $match->to if $bool;
                      $match;
                 }
                 ## </metasyntax>
     ||    ( ( $pos = $pad{I2058} ) && 0 ) )
             || ( $bool = 1 )
             ) 
           &&
              (   ( $pad{I2059} = $pos or 1 ) &&
               ## <constant>
               ( ( substr( $s, $pos, 1 ) eq '{' )
                   ? ( $pos += 1 or 1 )
                   : 0
               )
               ## </constant>
     ||    ( ( $pos = $pad{I2059} ) && 0 ) )
           &&
             (
              (   ( $pad{I2060} = $pos or 1 ) &&
                 ## <metasyntax>
                 do {
                      my $prior = $::_V6_PRIOR_;
                      my $match =
                             $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                      $::_V6_PRIOR_ = $prior;
                      my $bool = (!$match != 1);
                      $pos = $match->to if $bool;
                      $match;
                 }
                 ## </metasyntax>
     ||    ( ( $pos = $pad{I2060} ) && 0 ) )
             || ( $bool = 1 )
             ) 
           &&
              (   ( $pad{I2061} = $pos or 1 ) &&
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                           $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'rule'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I2061} ) && 0 ) )
           &&
              (   ( $pad{I2062} = $pos or 1 ) &&
               ## <constant>
               ( ( substr( $s, $pos, 1 ) eq '}' )
                   ? ( $pos += 1 or 1 )
                   : 0
               )
               ## </constant>
     ||    ( ( $pos = $pad{I2062} ) && 0 ) )
           &&
             (
              (   ( $pad{I2063} = $pos or 1 ) &&
                 ## <constant>
                 ( ( substr( $s, $pos, 1 ) eq ';' )
                     ? ( $pos += 1 or 1 )
                     : 0
                 )
                 ## </constant>
     ||    ( ( $pos = $pad{I2063} ) && 0 ) )
             || ( $bool = 1 )
             ) 
           &&
              (   ( $pad{I2064} = $pos or 1 ) &&
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { return {
                type => ${ $_[0]->[0] },
                name => ${ $_[0]->{qw(ident)} },
                ast => ${ $_[0]->{qw(rule)} }
            };
        }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I2064} ) && 0 ) )
           );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# token verbatim
*verbatim =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           (
              (   ( $pad{I2065} = $pos or 1 ) &&
               ## <constant>
               ( ( substr( $s, $pos, 2 ) eq '%{' )
                   ? ( $pos += 2 or 1 )
                   : 0
               )
               ## </constant>
     ||    ( ( $pos = $pad{I2065} ) && 0 ) )
           &&
              (   ( $pad{I2066} = $pos or 1 ) &&
               do{
                   my $hash = do {
                     my $bool = 1;
                     my $from = $pos;
                     my @match;
                     my %named;
                     $bool = 0 unless
                       do { while (
                        (   ( $pad{I2067} = $pos or 1 ) &&
                           (
                              (   ( $pad{I2068} = $pos or 1 ) &&
                               do{
                                   my $pos1 = $pos;
                                   do {
                                     my $pos = $pos1;
                                     my $from = $pos;
                                     my @match;
                                     my %named;
                                     $bool =                                      do{
                                             my $pos1 = $pos;
                                             do {
                                               my $pos = $pos1;
                                               my $from = $pos;
                                               my @match;
                                               my %named;
                                               $bool = 0 unless
                                                   ## <constant>
                                                   ( ( substr( $s, $pos, 2 ) eq '%}' )
                                                       ? ( $pos += 2 or 1 )
                                                       : 0
                                                   )
                                                   ## </constant>
    ;
                                               $bool;
                                             };
                                         } ? 0 : 1;
                                     $bool;
                                   };
                               } ||    ( ( $pos = $pad{I2068} ) && 0 ) )
                           &&
                              (   ( $pad{I2069} = $pos or 1 ) &&
                               ( substr( $s, $pos++, 1 ) ne '' ) ||    ( ( $pos = $pad{I2069} ) && 0 ) )
                           ) ||    ( ( $pos = $pad{I2067} ) && 0 ) )) {}; $bool = 1 };
                     { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                   };
                   my $bool = ${$hash->{'bool'}};
                   $match[ 0 ] = Pugs::Runtime::Match->new( $hash );
                   $bool;
               } ||    ( ( $pos = $pad{I2066} ) && 0 ) )
           &&
              (   ( $pad{I2070} = $pos or 1 ) &&
               ## <constant>
               ( ( substr( $s, $pos, 2 ) eq '%}' )
                   ? ( $pos += 2 or 1 )
                   : 0
               )
               ## </constant>
     ||    ( ( $pos = $pad{I2070} ) && 0 ) )
           &&
              (   ( $pad{I2071} = $pos or 1 ) &&
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { return {
                type => 'block',
                value => ${ $_[0]->[0] }
            };
        }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I2071} ) && 0 ) )
           );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# token item
*item =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           ## <alt>
           (
               ( $pad{I2072} = $pos or 1 )
               && (
               (
                  (   ( $pad{I2073} = $pos or 1 ) &&
                   do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                               $grammar->verbatim( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'verbatim'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I2073} ) && 0 ) )
               &&
                  (   ( $pad{I2074} = $pos or 1 ) &&
                   do { 
                     local $::_V6_SUCCEED = 1;
                     $::_V6_MATCH_ = $m;
                     $m->data->{capture} = \( sub { return ${ $_[0]->{qw(verbatim)} }; }->( $m ) ); 
                     $bool = $::_V6_SUCCEED;
                     $::_V6_MATCH_ = $m if $bool; 
                     return $m if $bool; 
                   } ||    ( ( $pos = $pad{I2074} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I2072} ) or 1 )
               &&            (
                  (   ( $pad{I2075} = $pos or 1 ) &&
                   do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                               $grammar->named_regex( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'named_regex'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I2075} ) && 0 ) )
               &&
                  (   ( $pad{I2076} = $pos or 1 ) &&
                   do { 
                     local $::_V6_SUCCEED = 1;
                     $::_V6_MATCH_ = $m;
                     $m->data->{capture} = \( sub { return ${ $_[0]->{qw(named_regex)} }; }->( $m ) ); 
                     $bool = $::_V6_SUCCEED;
                     $::_V6_MATCH_ = $m if $bool; 
                     return $m if $bool; 
                   } ||    ( ( $pos = $pad{I2076} ) && 0 ) )
               )
             )
           )
    ## </alt>
    ;
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# token grammar
*grammar =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           (
             (
              (   ( $pad{I2077} = $pos or 1 ) &&
                 ## <metasyntax>
                 do {
                      my $prior = $::_V6_PRIOR_;
                      my $match =
                             $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                      $::_V6_PRIOR_ = $prior;
                      my $bool = (!$match != 1);
                      $pos = $match->to if $bool;
                      $match;
                 }
                 ## </metasyntax>
     ||    ( ( $pos = $pad{I2077} ) && 0 ) )
             || ( $bool = 1 )
             ) 
           &&
              (   ( $pad{I2078} = $pos or 1 ) &&
               ## <constant>
               ( ( substr( $s, $pos, 7 ) eq 'grammar' )
                   ? ( $pos += 7 or 1 )
                   : 0
               )
               ## </constant>
     ||    ( ( $pos = $pad{I2078} ) && 0 ) )
           &&
              (   ( $pad{I2079} = $pos or 1 ) &&
               ## <metasyntax>
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                           $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    my $bool = (!$match != 1);
                    $pos = $match->to if $bool;
                    $match;
               }
               ## </metasyntax>
     ||    ( ( $pos = $pad{I2079} ) && 0 ) )
           &&
              (   ( $pad{I2080} = $pos or 1 ) &&
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                           $grammar->ident( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { $named{'ident'} = $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I2080} ) && 0 ) )
           &&
             (
              (   ( $pad{I2081} = $pos or 1 ) &&
                 ## <metasyntax>
                 do {
                      my $prior = $::_V6_PRIOR_;
                      my $match =
                             $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                      $::_V6_PRIOR_ = $prior;
                      my $bool = (!$match != 1);
                      $pos = $match->to if $bool;
                      $match;
                 }
                 ## </metasyntax>
     ||    ( ( $pos = $pad{I2081} ) && 0 ) )
             || ( $bool = 1 )
             ) 
           &&
              (   ( $pad{I2082} = $pos or 1 ) &&
               ## <constant>
               ( ( substr( $s, $pos, 1 ) eq ';' )
                   ? ( $pos += 1 or 1 )
                   : 0
               )
               ## </constant>
     ||    ( ( $pos = $pad{I2082} ) && 0 ) )
           &&
             (
              (   ( $pad{I2083} = $pos or 1 ) &&
                 ## <metasyntax>
                 do {
                      my $prior = $::_V6_PRIOR_;
                      my $match =
                             $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                      $::_V6_PRIOR_ = $prior;
                      my $bool = (!$match != 1);
                      $pos = $match->to if $bool;
                      $match;
                 }
                 ## </metasyntax>
     ||    ( ( $pos = $pad{I2083} ) && 0 ) )
             || ( $bool = 1 )
             ) 
           &&
             do { while (
              (   ( $pad{I2084} = $pos or 1 ) &&
                 (
                    (   ( $pad{I2085} = $pos or 1 ) &&
                     do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                                 $grammar->item( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { push @{$named{'item'}}, $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I2085} ) && 0 ) )
                 &&
                   (
                    (   ( $pad{I2086} = $pos or 1 ) &&
                       ## <metasyntax>
                       do {
                            my $prior = $::_V6_PRIOR_;
                            my $match =
                                   $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                            $::_V6_PRIOR_ = $prior;
                            my $bool = (!$match != 1);
                            $pos = $match->to if $bool;
                            $match;
                       }
                       ## </metasyntax>
     ||    ( ( $pos = $pad{I2086} ) && 0 ) )
                   || ( $bool = 1 )
                   ) 
                 ) ||    ( ( $pos = $pad{I2084} ) && 0 ) )) {}; $bool = 1 }
           &&
              (   ( $pad{I2087} = $pos or 1 ) &&
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { return { ${ $_[0]->{qw(ident)} } => $_[0]->{qw(item)} } }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I2087} ) && 0 ) )
           );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;

# token spec
*spec =
    ## <global>
    ## sigspace: 0
    ## ratchet: 1
    do { my $rule; $rule = sub {
      my $grammar = $_[0];
      my $s = $_[1];
      $_[3] = $_[2] unless defined $_[3]; # backwards compat
      no warnings 'substr', 'uninitialized', 'syntax';
      my %pad;
      my $m;
      for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
            ? $_[3]{p}
            : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
        my %index;
        my @match;
        my %named;
        my $bool = 1;
        $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
        $m = Pugs::Runtime::Match->new( {
          str => \$s, from => \(0+$pos), to => \($pos),
          bool => \$bool, match => \@match, named => \%named, capture => undef,
        } );
        {
          my $prior = $::_V6_PRIOR_;
          local $::_V6_PRIOR_ = $prior;
          $bool = 0 unless
           (
             (
              (   ( $pad{I2088} = $pos or 1 ) &&
                 do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                             $grammar->verbatim( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { push @{$named{'verbatim'}}, $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I2088} ) && 0 ) )
             || ( $bool = 1 )
             ) 
           &&
             do { while (
              (   ( $pad{I2089} = $pos or 1 ) &&
                 do {
                    my $prior = $::_V6_PRIOR_;
                    my $match =
                             $grammar->grammar( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    if ( $match ) { push @{$named{'grammar'}}, $match;
                        $pos = $match->to;
                        1
                    }
                    else { 0 }
                } ||    ( ( $pos = $pad{I2089} ) && 0 ) )) {}; $bool = 1 }
           &&
              (   ( $pad{I2090} = $pos or 1 ) &&
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { return {
                block => $_[0]->{qw(verbatim)},
                'grammar' => $_[0]->{qw(grammar)} }
        }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I2090} ) && 0 ) )
           );
        }
        if ( $bool ) {
          my $prior = $::_V6_PRIOR_;
          $::_V6_PRIOR_ = sub {
            local $main::_V6_PRIOR_ = $prior;
            $rule->(@_);
          };
          #warn "pos2 = ", $pos, "\n";
          pos($_[1]) = $pos if $_[3]{continue};
          last;
        }
      } # /for
      $::_V6_MATCH_ = $m;
      return $m;
    } }
    ## </global>
;



1;
