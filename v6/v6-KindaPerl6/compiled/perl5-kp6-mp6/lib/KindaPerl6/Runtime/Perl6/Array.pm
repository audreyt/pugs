{

    package Array;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict "vars";
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }

    BEGIN {
        $_ =
          ::DISPATCH( $::Scalar, "new",
            { modified => $_MODIFIED, name => "$_" } );
    }
    do {
        do {
            if (
                ::DISPATCH(
                    ::DISPATCH(
                        ::DISPATCH(
                            $GLOBAL::Code_VAR_defined, 'APPLY', $::Array
                        ),
                        "true"
                    ),
                    "p5landish"
                )
              )
            {
            }
            else {
                do {
                    do {
                        ::MODIFIED($::Array);
                        $::Array = ::DISPATCH(
                            ::DISPATCH(
                                $::Class, 'new',
                                ::DISPATCH( $::Str, 'new', 'Array' )
                            ),
                            'PROTOTYPE',
                        );
                      }
                  }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Array, 'HOW', ),
            'add_parent',
            ::DISPATCH( $::Container, 'HOW', )
        );
        ::DISPATCH(
            ::DISPATCH( $::Array, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'perl' ),
            ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {
                        my $List__ =
                          ::DISPATCH( $::Array, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$self' } )
                          unless defined $self;

                        BEGIN {
                            $self =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$self' } );
                        }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;

                        BEGIN {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        ::DISPATCH(
                            $GLOBAL::Code_infix_58__60__126__62_,
                            'APPLY',
                            ::DISPATCH( $::Str, 'new', '[ ' ),
                            ::DISPATCH(
                                $GLOBAL::Code_infix_58__60__126__62_,
                                'APPLY',
                                ::DISPATCH(
                                    ::DISPATCH(
                                        $self, 'map',
                                        ::DISPATCH(
                                            $::Code, 'new',
                                            {
                                                code => sub {
                                                    my $List__ = ::DISPATCH(
                                                        $::Array, 'new',
                                                        {
                                                            modified =>
                                                              $_MODIFIED,
                                                            name => '$List__'
                                                        }
                                                    );
                                                    my $CAPTURE;
                                                    $CAPTURE = ::DISPATCH(
                                                        $::Scalar,
                                                        'new',
                                                        {
                                                            modified =>
                                                              $_MODIFIED,
                                                            name => '$CAPTURE'
                                                        }
                                                    ) unless defined $CAPTURE;

                                                    BEGIN {
                                                        $CAPTURE = ::DISPATCH(
                                                            $::Scalar,
                                                            'new',
                                                            {
                                                                modified =>
                                                                  $_MODIFIED,
                                                                name =>
                                                                  '$CAPTURE'
                                                            }
                                                        );
                                                    }
                                                    ::DISPATCH_VAR( $CAPTURE,
                                                        "STORE",
                                                        ::CAPTURIZE( \@_ ) );
                                                    do {
                                                        ::MODIFIED($List__);
                                                        $List__ =
                                                          ::DISPATCH( $CAPTURE,
                                                            'array', );
                                                    };
                                                    do {
                                                        ::MODIFIED($Hash__);
                                                        $Hash__ =
                                                          ::DISPATCH( $CAPTURE,
                                                            'hash', );
                                                    };
                                                    ::DISPATCH( $_, 'perl', );
                                                },
                                                signature => ::DISPATCH(
                                                    $::Signature,
                                                    "new",
                                                    {
                                                        invocant => $::Undef,
                                                        array    => ::DISPATCH(
                                                            $::Array,
                                                            "new",
                                                            { _array => [] }
                                                        ),
                                                        return => $::Undef,
                                                    }
                                                ),
                                            }
                                        )
                                    ),
                                    'join',
                                    ::DISPATCH( $::Str, 'new', ', ' )
                                ),
                                ::DISPATCH( $::Str, 'new', ' ]' )
                            )
                        );
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => bless(
                                {
                                    'namespace' => [],
                                    'name'      => 'self',
                                    'twigil'    => '',
                                    'sigil'     => '$'
                                },
                                'Var'
                            ),
                            array =>
                              ::DISPATCH( $::Array, "new", { _array => [] } ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
        ::DISPATCH(
            ::DISPATCH( $::Array, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'Str' ),
            ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {
                        my $List__ =
                          ::DISPATCH( $::Array, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$self' } )
                          unless defined $self;

                        BEGIN {
                            $self =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$self' } );
                        }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;

                        BEGIN {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        ::DISPATCH( $self, 'join',
                            ::DISPATCH( $::Str, 'new', ' ' ) );
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => bless(
                                {
                                    'namespace' => [],
                                    'name'      => 'self',
                                    'twigil'    => '',
                                    'sigil'     => '$'
                                },
                                'Var'
                            ),
                            array =>
                              ::DISPATCH( $::Array, "new", { _array => [] } ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
        ::DISPATCH(
            ::DISPATCH( $::Array, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'true' ),
            ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {
                        my $List__ =
                          ::DISPATCH( $::Array, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$self' } )
                          unless defined $self;

                        BEGIN {
                            $self =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$self' } );
                        }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;

                        BEGIN {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        ::DISPATCH(
                            $GLOBAL::Code_infix_58__60__33__61__62_,
                            'APPLY',
                            ::DISPATCH( $self, 'elems', ),
                            ::DISPATCH( $::Int, 'new', 0 )
                        );
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => bless(
                                {
                                    'namespace' => [],
                                    'name'      => 'self',
                                    'twigil'    => '',
                                    'sigil'     => '$'
                                },
                                'Var'
                            ),
                            array =>
                              ::DISPATCH( $::Array, "new", { _array => [] } ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
        ::DISPATCH(
            ::DISPATCH( $::Array, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'Int' ),
            ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {
                        my $List__ =
                          ::DISPATCH( $::Array, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$self' } )
                          unless defined $self;

                        BEGIN {
                            $self =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$self' } );
                        }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;

                        BEGIN {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        ::DISPATCH( $self, 'elems', );
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => bless(
                                {
                                    'namespace' => [],
                                    'name'      => 'self',
                                    'twigil'    => '',
                                    'sigil'     => '$'
                                },
                                'Var'
                            ),
                            array =>
                              ::DISPATCH( $::Array, "new", { _array => [] } ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
        ::DISPATCH(
            ::DISPATCH( $::Array, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'array' ),
            ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {
                        my $List__ =
                          ::DISPATCH( $::Array, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$self' } )
                          unless defined $self;

                        BEGIN {
                            $self =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$self' } );
                        }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;

                        BEGIN {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        $self;
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => bless(
                                {
                                    'namespace' => [],
                                    'name'      => 'self',
                                    'twigil'    => '',
                                    'sigil'     => '$'
                                },
                                'Var'
                            ),
                            array =>
                              ::DISPATCH( $::Array, "new", { _array => [] } ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
        ::DISPATCH(
            ::DISPATCH( $::Array, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'grep' ),
            ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {
                        my $List_result = ::DISPATCH( $::Array, 'new',
                            { modified => $_MODIFIED, name => '$List_result' }
                        );
                        my $List__ =
                          ::DISPATCH( $::Array, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $Code_test;
                        $Code_test =
                          ::DISPATCH( $::Routine, 'new',
                            { modified => $_MODIFIED, name => '$Code_test' } )
                          unless defined $Code_test;

                        BEGIN {
                            $Code_test = ::DISPATCH(
                                $::Routine,
                                'new',
                                {
                                    modified => $_MODIFIED,
                                    name     => '$Code_test'
                                }
                            );
                        }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;

                        BEGIN {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        if ( exists $List__->{_value}{_array}[0] ) {
                            do {
                                ::MODIFIED($Code_test);
                                $Code_test =
                                  ::DISPATCH( $List__, 'INDEX',
                                    ::DISPATCH( $::Int, 'new', 0 ) );
                              }
                        }
                        elsif ( exists $Hash__->{_value}{_hash}{'test'} ) {
                            do {
                                ::MODIFIED($Code_test);
                                $Code_test =
                                  ::DISPATCH( $Hash__, 'LOOKUP',
                                    ::DISPATCH( $::Str, 'new', 'test' ) );
                              }
                        }
                        $List_result;
                        ::DISPATCH(
                            ::DISPATCH(
                                $GLOBAL::Code_prefix_58__60__64__62_, 'APPLY',
                                $self
                            ),
                            'for',
                            ::DISPATCH(
                                $::Code, 'new',
                                {
                                    code => sub {
                                        my $List__ = ::DISPATCH(
                                            $::Array, 'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$List__'
                                            }
                                        );
                                        my $v;
                                        $v = ::DISPATCH(
                                            $::Scalar,
                                            'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$v'
                                            }
                                        ) unless defined $v;

                                        BEGIN {
                                            $v = ::DISPATCH(
                                                $::Scalar,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$v'
                                                }
                                            );
                                        }
                                        my $CAPTURE;
                                        $CAPTURE = ::DISPATCH(
                                            $::Scalar,
                                            'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$CAPTURE'
                                            }
                                        ) unless defined $CAPTURE;

                                        BEGIN {
                                            $CAPTURE = ::DISPATCH(
                                                $::Scalar,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$CAPTURE'
                                                }
                                            );
                                        }
                                        ::DISPATCH_VAR( $CAPTURE, "STORE",
                                            ::CAPTURIZE( \@_ ) );
                                        do {
                                            ::MODIFIED($List__);
                                            $List__ =
                                              ::DISPATCH( $CAPTURE, 'array', );
                                        };
                                        do {
                                            ::MODIFIED($Hash__);
                                            $Hash__ =
                                              ::DISPATCH( $CAPTURE, 'hash', );
                                        };
                                        if (
                                            exists $List__->{_value}{_array}[0]
                                          )
                                        {
                                            do {
                                                ::MODIFIED($v);
                                                $v = ::DISPATCH(
                                                    $List__, 'INDEX',
                                                    ::DISPATCH(
                                                        $::Int, 'new', 0
                                                    )
                                                );
                                              }
                                        }
                                        elsif (
                                            exists $Hash__->{_value}{_hash}
                                            {'v'} )
                                        {
                                            do {
                                                ::MODIFIED($v);
                                                $v = ::DISPATCH(
                                                    $Hash__, 'LOOKUP',
                                                    ::DISPATCH(
                                                        $::Str, 'new', 'v'
                                                    )
                                                );
                                              }
                                        }
                                        do {
                                            ::MODIFIED($_);
                                            $_ = $v;
                                        };
                                        do {
                                            if (
                                                ::DISPATCH(
                                                    ::DISPATCH(
                                                        ::DISPATCH(
                                                            $Code_test,
                                                            'APPLY',
                                                            $v
                                                        ),
                                                        "true"
                                                    ),
                                                    "p5landish"
                                                )
                                              )
                                            {
                                                do {
                                                    ::DISPATCH( $List_result,
                                                        'push', $v );
                                                  }
                                            }
                                            else {
                                                ::DISPATCH( $::Bit, "new", 0 );
                                            }
                                          }
                                    },
                                    signature => ::DISPATCH(
                                        $::Signature,
                                        "new",
                                        {
                                            invocant => $::Undef,
                                            array    => ::DISPATCH(
                                                $::Array, "new",
                                                {
                                                    _array => [
                                                        ::DISPATCH(
                                                            $::Signature::Item,
                                                            'new',
                                                            {
                                                                sigil  => '$',
                                                                twigil => '',
                                                                name   => 'v',
                                                                value =>
                                                                  $::Undef,
                                                                has_default =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_named_only =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_optional =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_slurpy =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_multidimensional =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_rw =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_copy =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                            }
                                                        ),
                                                    ]
                                                }
                                            ),
                                            return => $::Undef,
                                        }
                                    ),
                                }
                            )
                        );
                        return ($List_result);
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => $::Undef,
                            array    => ::DISPATCH(
                                $::Array, "new",
                                {
                                    _array => [
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '&',
                                                twigil      => '',
                                                name        => 'test',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                    ]
                                }
                            ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
        ::DISPATCH(
            ::DISPATCH( $::Array, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'map' ),
            ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {
                        my $List_result = ::DISPATCH( $::Array, 'new',
                            { modified => $_MODIFIED, name => '$List_result' }
                        );
                        my $List__ =
                          ::DISPATCH( $::Array, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $Code_proc;
                        $Code_proc =
                          ::DISPATCH( $::Routine, 'new',
                            { modified => $_MODIFIED, name => '$Code_proc' } )
                          unless defined $Code_proc;

                        BEGIN {
                            $Code_proc = ::DISPATCH(
                                $::Routine,
                                'new',
                                {
                                    modified => $_MODIFIED,
                                    name     => '$Code_proc'
                                }
                            );
                        }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;

                        BEGIN {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        if ( exists $List__->{_value}{_array}[0] ) {
                            do {
                                ::MODIFIED($Code_proc);
                                $Code_proc =
                                  ::DISPATCH( $List__, 'INDEX',
                                    ::DISPATCH( $::Int, 'new', 0 ) );
                              }
                        }
                        elsif ( exists $Hash__->{_value}{_hash}{'proc'} ) {
                            do {
                                ::MODIFIED($Code_proc);
                                $Code_proc =
                                  ::DISPATCH( $Hash__, 'LOOKUP',
                                    ::DISPATCH( $::Str, 'new', 'proc' ) );
                              }
                        }
                        $List_result;
                        ::DISPATCH(
                            ::DISPATCH(
                                $GLOBAL::Code_prefix_58__60__64__62_, 'APPLY',
                                $self
                            ),
                            'for',
                            ::DISPATCH(
                                $::Code, 'new',
                                {
                                    code => sub {
                                        my $List__ = ::DISPATCH(
                                            $::Array, 'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$List__'
                                            }
                                        );
                                        my $v;
                                        $v = ::DISPATCH(
                                            $::Scalar,
                                            'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$v'
                                            }
                                        ) unless defined $v;

                                        BEGIN {
                                            $v = ::DISPATCH(
                                                $::Scalar,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$v'
                                                }
                                            );
                                        }
                                        my $CAPTURE;
                                        $CAPTURE = ::DISPATCH(
                                            $::Scalar,
                                            'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$CAPTURE'
                                            }
                                        ) unless defined $CAPTURE;

                                        BEGIN {
                                            $CAPTURE = ::DISPATCH(
                                                $::Scalar,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$CAPTURE'
                                                }
                                            );
                                        }
                                        ::DISPATCH_VAR( $CAPTURE, "STORE",
                                            ::CAPTURIZE( \@_ ) );
                                        do {
                                            ::MODIFIED($List__);
                                            $List__ =
                                              ::DISPATCH( $CAPTURE, 'array', );
                                        };
                                        do {
                                            ::MODIFIED($Hash__);
                                            $Hash__ =
                                              ::DISPATCH( $CAPTURE, 'hash', );
                                        };
                                        if (
                                            exists $List__->{_value}{_array}[0]
                                          )
                                        {
                                            do {
                                                ::MODIFIED($v);
                                                $v = ::DISPATCH(
                                                    $List__, 'INDEX',
                                                    ::DISPATCH(
                                                        $::Int, 'new', 0
                                                    )
                                                );
                                              }
                                        }
                                        elsif (
                                            exists $Hash__->{_value}{_hash}
                                            {'v'} )
                                        {
                                            do {
                                                ::MODIFIED($v);
                                                $v = ::DISPATCH(
                                                    $Hash__, 'LOOKUP',
                                                    ::DISPATCH(
                                                        $::Str, 'new', 'v'
                                                    )
                                                );
                                              }
                                        }
                                        do {
                                            ::MODIFIED($_);
                                            $_ = $v;
                                        };
                                        ::DISPATCH(
                                            $List_result,
                                            'push',
                                            ::DISPATCH(
                                                $Code_proc, 'APPLY', $v
                                            )
                                        );
                                    },
                                    signature => ::DISPATCH(
                                        $::Signature,
                                        "new",
                                        {
                                            invocant => $::Undef,
                                            array    => ::DISPATCH(
                                                $::Array, "new",
                                                {
                                                    _array => [
                                                        ::DISPATCH(
                                                            $::Signature::Item,
                                                            'new',
                                                            {
                                                                sigil  => '$',
                                                                twigil => '',
                                                                name   => 'v',
                                                                value =>
                                                                  $::Undef,
                                                                has_default =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_named_only =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_optional =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_slurpy =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_multidimensional =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_rw =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_copy =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                            }
                                                        ),
                                                    ]
                                                }
                                            ),
                                            return => $::Undef,
                                        }
                                    ),
                                }
                            )
                        );
                        return ($List_result);
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => $::Undef,
                            array    => ::DISPATCH(
                                $::Array, "new",
                                {
                                    _array => [
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '&',
                                                twigil      => '',
                                                name        => 'proc',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                    ]
                                }
                            ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
        ::DISPATCH(
            ::DISPATCH( $::Array, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'join' ),
            ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {
                        my $result;
                        $result =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$result' } )
                          unless defined $result;

                        BEGIN {
                            $result =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$result' } );
                        }
                        my $s;
                        $s =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$s' } )
                          unless defined $s;

                        BEGIN {
                            $s =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$s' } );
                        }
                        my $List__ =
                          ::DISPATCH( $::Array, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $sep;
                        $sep =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$sep' } )
                          unless defined $sep;

                        BEGIN {
                            $sep =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$sep' } );
                        }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;

                        BEGIN {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        if ( exists $List__->{_value}{_array}[0] ) {
                            do {
                                ::MODIFIED($sep);
                                $sep =
                                  ::DISPATCH( $List__, 'INDEX',
                                    ::DISPATCH( $::Int, 'new', 0 ) );
                              }
                        }
                        elsif ( exists $Hash__->{_value}{_hash}{'sep'} ) {
                            do {
                                ::MODIFIED($sep);
                                $sep =
                                  ::DISPATCH( $Hash__, 'LOOKUP',
                                    ::DISPATCH( $::Str, 'new', 'sep' ) );
                              }
                        }
                        ::DISPATCH_VAR( $result, 'STORE',
                            ::DISPATCH( $::Str, 'new', '' ) );
                        ::DISPATCH_VAR( $s, 'STORE',
                            ::DISPATCH( $::Str, 'new', '' ) );
                        ::DISPATCH(
                            ::DISPATCH(
                                $GLOBAL::Code_prefix_58__60__64__62_, 'APPLY',
                                $self
                            ),
                            'for',
                            ::DISPATCH(
                                $::Code, 'new',
                                {
                                    code => sub {
                                        my $List__ = ::DISPATCH(
                                            $::Array, 'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$List__'
                                            }
                                        );
                                        my $v;
                                        $v = ::DISPATCH(
                                            $::Scalar,
                                            'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$v'
                                            }
                                        ) unless defined $v;

                                        BEGIN {
                                            $v = ::DISPATCH(
                                                $::Scalar,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$v'
                                                }
                                            );
                                        }
                                        my $CAPTURE;
                                        $CAPTURE = ::DISPATCH(
                                            $::Scalar,
                                            'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$CAPTURE'
                                            }
                                        ) unless defined $CAPTURE;

                                        BEGIN {
                                            $CAPTURE = ::DISPATCH(
                                                $::Scalar,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$CAPTURE'
                                                }
                                            );
                                        }
                                        ::DISPATCH_VAR( $CAPTURE, "STORE",
                                            ::CAPTURIZE( \@_ ) );
                                        do {
                                            ::MODIFIED($List__);
                                            $List__ =
                                              ::DISPATCH( $CAPTURE, 'array', );
                                        };
                                        do {
                                            ::MODIFIED($Hash__);
                                            $Hash__ =
                                              ::DISPATCH( $CAPTURE, 'hash', );
                                        };
                                        if (
                                            exists $List__->{_value}{_array}[0]
                                          )
                                        {
                                            do {
                                                ::MODIFIED($v);
                                                $v = ::DISPATCH(
                                                    $List__, 'INDEX',
                                                    ::DISPATCH(
                                                        $::Int, 'new', 0
                                                    )
                                                );
                                              }
                                        }
                                        elsif (
                                            exists $Hash__->{_value}{_hash}
                                            {'v'} )
                                        {
                                            do {
                                                ::MODIFIED($v);
                                                $v = ::DISPATCH(
                                                    $Hash__, 'LOOKUP',
                                                    ::DISPATCH(
                                                        $::Str, 'new', 'v'
                                                    )
                                                );
                                              }
                                        }
                                        ::DISPATCH_VAR(
                                            $result, 'STORE',
                                            ::DISPATCH(
                                                $GLOBAL::Code_infix_58__60__126__62_,
                                                'APPLY', $result,
                                                ::DISPATCH(
                                                    $GLOBAL::Code_infix_58__60__126__62_,
                                                    'APPLY', $s, $v
                                                )
                                            )
                                        );
                                        ::DISPATCH_VAR( $s, 'STORE', $sep );
                                    },
                                    signature => ::DISPATCH(
                                        $::Signature,
                                        "new",
                                        {
                                            invocant => $::Undef,
                                            array    => ::DISPATCH(
                                                $::Array, "new",
                                                {
                                                    _array => [
                                                        ::DISPATCH(
                                                            $::Signature::Item,
                                                            'new',
                                                            {
                                                                sigil  => '$',
                                                                twigil => '',
                                                                name   => 'v',
                                                                value =>
                                                                  $::Undef,
                                                                has_default =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_named_only =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_optional =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_slurpy =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_multidimensional =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_rw =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_copy =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                            }
                                                        ),
                                                    ]
                                                }
                                            ),
                                            return => $::Undef,
                                        }
                                    ),
                                }
                            )
                        );
                        return ($result);
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => $::Undef,
                            array    => ::DISPATCH(
                                $::Array, "new",
                                {
                                    _array => [
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'sep',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                    ]
                                }
                            ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
        ::DISPATCH(
            ::DISPATCH( $::Array, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'uniq' ),
            ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {
                        my $Hash_h =
                          ::DISPATCH( $::Hash, 'new',
                            { modified => $_MODIFIED, name => '$Hash_h' } );
                        my $List_res =
                          ::DISPATCH( $::Array, 'new',
                            { modified => $_MODIFIED, name => '$List_res' } );
                        my $List__ =
                          ::DISPATCH( $::Array, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$self' } )
                          unless defined $self;

                        BEGIN {
                            $self =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$self' } );
                        }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;

                        BEGIN {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        $Hash_h;
                        $List_res;
                        ::DISPATCH(
                            ::DISPATCH(
                                $GLOBAL::Code_prefix_58__60__64__62_, 'APPLY',
                                $self
                            ),
                            'for',
                            ::DISPATCH(
                                $::Code, 'new',
                                {
                                    code => sub {
                                        my $List__ = ::DISPATCH(
                                            $::Array, 'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$List__'
                                            }
                                        );
                                        my $v;
                                        $v = ::DISPATCH(
                                            $::Scalar,
                                            'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$v'
                                            }
                                        ) unless defined $v;

                                        BEGIN {
                                            $v = ::DISPATCH(
                                                $::Scalar,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$v'
                                                }
                                            );
                                        }
                                        my $CAPTURE;
                                        $CAPTURE = ::DISPATCH(
                                            $::Scalar,
                                            'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$CAPTURE'
                                            }
                                        ) unless defined $CAPTURE;

                                        BEGIN {
                                            $CAPTURE = ::DISPATCH(
                                                $::Scalar,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$CAPTURE'
                                                }
                                            );
                                        }
                                        ::DISPATCH_VAR( $CAPTURE, "STORE",
                                            ::CAPTURIZE( \@_ ) );
                                        do {
                                            ::MODIFIED($List__);
                                            $List__ =
                                              ::DISPATCH( $CAPTURE, 'array', );
                                        };
                                        do {
                                            ::MODIFIED($Hash__);
                                            $Hash__ =
                                              ::DISPATCH( $CAPTURE, 'hash', );
                                        };
                                        if (
                                            exists $List__->{_value}{_array}[0]
                                          )
                                        {
                                            do {
                                                ::MODIFIED($v);
                                                $v = ::DISPATCH(
                                                    $List__, 'INDEX',
                                                    ::DISPATCH(
                                                        $::Int, 'new', 0
                                                    )
                                                );
                                              }
                                        }
                                        elsif (
                                            exists $Hash__->{_value}{_hash}
                                            {'v'} )
                                        {
                                            do {
                                                ::MODIFIED($v);
                                                $v = ::DISPATCH(
                                                    $Hash__, 'LOOKUP',
                                                    ::DISPATCH(
                                                        $::Str, 'new', 'v'
                                                    )
                                                );
                                              }
                                        }
                                        do {
                                            if (
                                                ::DISPATCH(
                                                    ::DISPATCH(
                                                        ::DISPATCH(
                                                            $GLOBAL::Code_prefix_58__60__33__62_,
                                                            'APPLY',
                                                            ::DISPATCH(
                                                                $Hash_h,
                                                                'LOOKUP',
                                                                $v
                                                            )
                                                        ),
                                                        "true"
                                                    ),
                                                    "p5landish"
                                                )
                                              )
                                            {
                                                do {
                                                    ::DISPATCH( $List_res,
                                                        'push', $v );
                                                  }
                                            }
                                            else {
                                                ::DISPATCH( $::Bit, "new", 0 );
                                            }
                                        };
                                        ::DISPATCH_VAR(
                                            ::DISPATCH( $Hash_h, 'LOOKUP', $v ),
                                            'STORE',
                                            ::DISPATCH( $::Int, 'new', 1 )
                                        );
                                    },
                                    signature => ::DISPATCH(
                                        $::Signature,
                                        "new",
                                        {
                                            invocant => $::Undef,
                                            array    => ::DISPATCH(
                                                $::Array, "new",
                                                {
                                                    _array => [
                                                        ::DISPATCH(
                                                            $::Signature::Item,
                                                            'new',
                                                            {
                                                                sigil  => '$',
                                                                twigil => '',
                                                                name   => 'v',
                                                                value =>
                                                                  $::Undef,
                                                                has_default =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_named_only =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_optional =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_slurpy =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_multidimensional =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_rw =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_copy =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                            }
                                                        ),
                                                    ]
                                                }
                                            ),
                                            return => $::Undef,
                                        }
                                    ),
                                }
                            )
                        );
                        $List_res;
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => bless(
                                {
                                    'namespace' => [],
                                    'name'      => 'self',
                                    'twigil'    => '',
                                    'sigil'     => '$'
                                },
                                'Var'
                            ),
                            array =>
                              ::DISPATCH( $::Array, "new", { _array => [] } ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
    };
    1
}
