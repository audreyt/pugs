#!/usr/bin/env ruby
# WARNING - this file is mechanically generated.  Your changes will be overwritten.
# Usage: --help

require 'strscan'
require 'tempfile'


class Scrape
  attr_accessor :scanner,:string
  def initialize
  end
  def scrape(string)
    @string=string
    @scanner=StringScanner.new(string)
    eat(/"parse" => /)
    scrape_thing
  end
  def where
    pos = @scanner.pos
    fm = pos - 20; fm = 0 if fm < 0
    to = pos + 20; to = @string.length if to > @string.length
    sample = @string.slice(fm,to-fm).tr("\n\t\r",'NTR')
    arrow = ' '*(pos - fm - 1) + '^'
    before = @string.slice(0,pos)
    line = before.lines.to_a.size
    before =~ /(.*)\z/
    column = $1.length + 1
    "#{pos}  #{line}:#{column}\n>#{sample}<\n>#{arrow}\n"
  end
  def scan(re)
    @scanner.scan(re)
  end
  def eat(re)
    @scanner.scan(re) or raise "failed to eat #{re} at #{where}"
  end
  def scrape_thing
    if scan(/(?=PMC 'Perl6::Grammar')/)
      scrape_node
    elsif scan(/(?=PMC 'PGE::Match')/)
      scrape_node
    elsif scan(/(?=ResizablePMCArray)/)
      scrape_array
    elsif scan(/(?=Hash)/)
      scrape_hash
    elsif scan(/(?=\")/)
      scrape_string
    elsif scan(/(?=\d)/)
      scrape_int
    elsif scan(/(?=PMC 'Sub')/)
      scrape_rest_of_line
    elsif scan(/(?=\\parse)/)
      scrape_rest_of_line
    else
      raise "scrape failed at #{where}"
    end
  end
  def scrape_rest_of_line
    eat(/[^\n]+?(?=,?\n)/); :ignoredx
  end
  def scrape_int; eat(/\d+/) end
  def scrape_string
    p = @scanner.pos
    eat(/\"/); eat(/([^\\"]|\\.)*/); eat(/\"/)
    s = @string.slice(p+1,@scanner.pos-p-2)
    s
  end
  def scrape_hash
    h = {}
    eat(/Hash {\n/)
    indentation = eat(/ +/)
    while s= scan(/\"\w+\" => /)
      s =~ /^\"(\w+)/ or raise "bug"
      k = $1
      v = scrape_thing
      h[k]=v if v != :ignoredx
      eat(/,?\n/)
      eat(/ */) == indentation or scan(/(?=\})/) or raise "assert: maybe a bug #{@scanner.pos}"
    end
    eat(/\}/)
    h
  end
  def scrape_array
    a = []
    eat(/ResizablePMCArray \(size:\d+\) \[\n/)
    indentation = eat(/ +/)
    while not scan(/(?=\])/)
      a.push scrape_thing
      eat(/,?\n/)
      eat(/ */) == indentation or scan(/(?=\])/) or raise "assert: maybe a bug #{@scanner.pos}"
    end
    eat(/\]/)
    a
  end
  def scrape_node
    o = {}
    type = eat(/PMC 'Perl6::Grammar' => |PMC 'PGE::Match' => /)
    if type =~ /Match/
      o['_rakudo_type'] = 'match'
    end
    str = scrape_string
    eat(/ @ /)
    eat(/\d+/)
    if scan(/ {\n/)
      indentation = eat(/ +/)
      while s= scan(/<\w+> => |\[\d+\] => /)
        s =~ /^<(\w+)> => |\[(\d+)\] => / or raise "bug"
        k = $1 || $2
        v = scrape_thing
        o[k]=v if v != :ignoredx
        eat(/\n/)
        eat(/ */) == indentation or scan(/(?=\})/) or raise "assert: maybe a bug #{@scanner.pos}"
      end
      #KLUDGE - Include a bit of str, because otherwise the parse tree doesn't distinguish
      # between circumfix:() and :[] . :(
      o['op'] = str.slice(0,1)+str.slice(-1,1) if o.key? 'circumfix'
      eat(/\}/)
    else
      o['empty']=str
    end
    o
  end
end

class BuildIR
  attr_accessor :ast_data_file,:tag_map
  def initialize(ast_data_file)
    @ast_data_file=ast_data_file
    load_data_file
  end
  def tag_tree(tree)
    @saw_tags = {}
    tag_hash('parse',tree)
  end
  def tag_hash(name,h)
    tag = nil
    if h['_rakudo_type'] == 'match'
      h.delete '_rakudo_type'
      tag = "#{name}___match"
    else
      ks = h.keys.sort
      tag = "#{name}___#{ks.join('__')}"
    end
    h['_fields'] = h.keys.sort.join(' ')
    h['_tag'] = tag
    @saw_tags[tag] = true;
    h.each{|k,v|
      if v.is_a? Hash
        tag_hash(k,v)
      elsif v.is_a? Array
        v.each{|e| tag_hash(k,e) }
      end
    }
    h
  end
  def load_data_file
    @tag_map = {}
    lines = File.open(ast_data_file,'r'){|f| f.lines.to_a }
    lines = lines.select{|line| not line =~ /^\s*\#/ and not line =~ /^\s*$/ }
    lines.each{|line|
      line.sub!(/#.*$/,'')
      line =~ /^(\w+)\s+\|\s*(\S*)\s*$/ or raise "Broken line in #{ast_data_file}:\n#{line}"
      @tag_map[$1] = $2;
    }
  end
  def tag_report
    missing = @saw_tags.keys.select{|k| not tag_map.key? k}
    unspec = []
    tag_map.each{|k,v| unspec.push(k) if v == '' }
    out = ''
    out += "\nUnknown keys:\n"+missing.sort.join("\n")+"\n\n";
    out += "\nUnspeced keys:\n"+unspec.sort.join("\n")+"\n\n";
    out
  end
  def ir_from(tree)
    if tree.is_a? Array
      return tree.map{|e| ir_from(e)}
    elsif tree.is_a? String
      return tree
    end
    tag = tree['_tag']
    act = tag_map[tag]
    ret = nil
    debug = false
    if debug
      p "----"
      p tree
      p tag
      p act
    end
    if not act
      STDERR.print "# Warning: Faking tag #{tag} in #{tree}\n"
      ret = :faking
    else
      fields = tree['_fields'].split(/\s+/)
      if act == 'pass'
        STDERR.print "# Warning: passing only first field of #{tag}\n" if fields.size > 1
        ret = ir_from(tree[fields[0]])
      elsif act =~ /^pass(\d)$/
        ret = ir_from(tree[fields[$1.to_i]])
      elsif act == 'unimplemented'
        raise "Unimplemented ast tag: #{tag}\n"
      elsif act == 'unprocessed'
        ret = {}
        tree.each{|k,v| ret[k] = ir_from(v) }
      elsif act =~ /^:(\w+)$/
        ret = $1.to_sym
      elsif act == '[]'
        ret = []
      else
        method = "#{act}_from__#{fields.join('__')}".to_sym
        down = tree.values_at(*fields)
        args = down.map{|n| ir_from(n) }
        ret = BadIR.send(method,*args)
      end
    end
    p "#{tag} -->",ret if debug
    ret
  end
end

module BadIR
  class Base
    def to_term(obj=:x969867924)
      obj = self if obj == :x969867924
      if not obj
        'nil'
      elsif obj.is_a? Array
        '['+obj.map{|e|to_term(e)}.join(',')+']'
      elsif obj.is_a? String
           "'"+obj+"'"
      elsif obj.is_a? Symbol #XXX not a great idea
           ":"+obj.to_s+""
      else
        obj.node_name+'('+obj.field_values.map{|v| to_term(v) }.join(',') + ')'
      end
    end
  end
  class Val_Base < Base
  end
  class Lit_Base < Base
  end
  class Rule_Base < Base
  end

  class PackageDeclarator < Base
    attr_accessor :kind,:name,:block
    def initialize(kind,name,block)
      @kind,@name,@block = kind,name,block
    end
    def emit(emitter); emitter.emit_PackageDeclarator(self) end
    def node_name; 'PackageDeclarator' end
    def field_values; [@kind,@name,@block] end
  end
  class Block < Base
    attr_accessor :statements
    def initialize(statements)
      @statements = statements
    end
    def emit(emitter); emitter.emit_Block(self) end
    def node_name; 'Block' end
    def field_values; [@statements] end
  end
  class Quote < Base
    attr_accessor :concat
    def initialize(concat)
      @concat = concat
    end
    def emit(emitter); emitter.emit_Quote(self) end
    def node_name; 'Quote' end
    def field_values; [@concat] end
  end
  class CompUnit < Base
    attr_accessor :unit_type,:name,:traits,:attributes,:methods,:body
    def initialize(unit_type,name,traits,attributes,methods,body)
      @unit_type,@name,@traits,@attributes,@methods,@body = unit_type,name,traits,attributes,methods,body
    end
    def emit(emitter); emitter.emit_CompUnit(self) end
    def node_name; 'CompUnit' end
    def field_values; [@unit_type,@name,@traits,@attributes,@methods,@body] end
  end
  class Val_Int < Val_Base
    attr_accessor :int
    def initialize(int)
      @int = int
    end
    def emit(emitter); emitter.emit_Val_Int(self) end
    def node_name; 'Val_Int' end
    def field_values; [@int] end
  end
  class Val_Bit < Val_Base
    attr_accessor :bit
    def initialize(bit)
      @bit = bit
    end
    def emit(emitter); emitter.emit_Val_Bit(self) end
    def node_name; 'Val_Bit' end
    def field_values; [@bit] end
  end
  class Val_Num < Val_Base
    attr_accessor :num
    def initialize(num)
      @num = num
    end
    def emit(emitter); emitter.emit_Val_Num(self) end
    def node_name; 'Val_Num' end
    def field_values; [@num] end
  end
  class Val_Buf < Val_Base
    attr_accessor :buf
    def initialize(buf)
      @buf = buf
    end
    def emit(emitter); emitter.emit_Val_Buf(self) end
    def node_name; 'Val_Buf' end
    def field_values; [@buf] end
  end
  class Val_Char < Val_Base
    attr_accessor :char
    def initialize(char)
      @char = char
    end
    def emit(emitter); emitter.emit_Val_Char(self) end
    def node_name; 'Val_Char' end
    def field_values; [@char] end
  end
  class Val_Undef < Val_Base
    attr_accessor 
    def initialize()
      
    end
    def emit(emitter); emitter.emit_Val_Undef(self) end
    def node_name; 'Val_Undef' end
    def field_values; [] end
  end
  class Val_Object < Val_Base
    attr_accessor :clazz,:fields
    def initialize(clazz,fields)
      @clazz,@fields = clazz,fields
    end
    def emit(emitter); emitter.emit_Val_Object(self) end
    def node_name; 'Val_Object' end
    def field_values; [@clazz,@fields] end
  end
  class Lit_Seq < Lit_Base
    attr_accessor :seq
    def initialize(seq)
      @seq = seq
    end
    def emit(emitter); emitter.emit_Lit_Seq(self) end
    def node_name; 'Lit_Seq' end
    def field_values; [@seq] end
  end
  class Lit_Array < Lit_Base
    attr_accessor :array
    def initialize(array)
      @array = array
    end
    def emit(emitter); emitter.emit_Lit_Array(self) end
    def node_name; 'Lit_Array' end
    def field_values; [@array] end
  end
  class Lit_Hash < Lit_Base
    attr_accessor :hash
    def initialize(hash)
      @hash = hash
    end
    def emit(emitter); emitter.emit_Lit_Hash(self) end
    def node_name; 'Lit_Hash' end
    def field_values; [@hash] end
  end
  class Lit_Pair < Lit_Base
    attr_accessor :key,:value
    def initialize(key,value)
      @key,@value = key,value
    end
    def emit(emitter); emitter.emit_Lit_Pair(self) end
    def node_name; 'Lit_Pair' end
    def field_values; [@key,@value] end
  end
  class Lit_SigArgument < Lit_Base
    attr_accessor :key,:value,:type,:has_default,:is_named_only,:is_optional,:is_slurpy,:is_multidimensional,:is_rw,:is_copy
    def initialize(key,value,type,has_default,is_named_only,is_optional,is_slurpy,is_multidimensional,is_rw,is_copy)
      @key,@value,@type,@has_default,@is_named_only,@is_optional,@is_slurpy,@is_multidimensional,@is_rw,@is_copy = key,value,type,has_default,is_named_only,is_optional,is_slurpy,is_multidimensional,is_rw,is_copy
    end
    def emit(emitter); emitter.emit_Lit_SigArgument(self) end
    def node_name; 'Lit_SigArgument' end
    def field_values; [@key,@value,@type,@has_default,@is_named_only,@is_optional,@is_slurpy,@is_multidimensional,@is_rw,@is_copy] end
  end
  class Lit_NamedArgument < Lit_Base
    attr_accessor :key,:value
    def initialize(key,value)
      @key,@value = key,value
    end
    def emit(emitter); emitter.emit_Lit_NamedArgument(self) end
    def node_name; 'Lit_NamedArgument' end
    def field_values; [@key,@value] end
  end
  class Lit_Code < Lit_Base
    attr_accessor :pad,:state,:sig,:body,:catch
    def initialize(pad,state,sig,body,catch)
      @pad,@state,@sig,@body,@catch = pad,state,sig,body,catch
    end
    def emit(emitter); emitter.emit_Lit_Code(self) end
    def node_name; 'Lit_Code' end
    def field_values; [@pad,@state,@sig,@body,@catch] end
  end
  class Lit_Object < Lit_Base
    attr_accessor :clazz,:fields
    def initialize(clazz,fields)
      @clazz,@fields = clazz,fields
    end
    def emit(emitter); emitter.emit_Lit_Object(self) end
    def node_name; 'Lit_Object' end
    def field_values; [@clazz,@fields] end
  end
  class Var < Base
    attr_accessor :sigil,:twigil,:name,:namespace
    def initialize(sigil,twigil,name,namespace)
      @sigil,@twigil,@name,@namespace = sigil,twigil,name,namespace
    end
    def emit(emitter); emitter.emit_Var(self) end
    def node_name; 'Var' end
    def field_values; [@sigil,@twigil,@name,@namespace] end
  end
  class Bind < Base
    attr_accessor :parameters,:arguments
    def initialize(parameters,arguments)
      @parameters,@arguments = parameters,arguments
    end
    def emit(emitter); emitter.emit_Bind(self) end
    def node_name; 'Bind' end
    def field_values; [@parameters,@arguments] end
  end
  class Assign < Base
    attr_accessor :parameters,:arguments
    def initialize(parameters,arguments)
      @parameters,@arguments = parameters,arguments
    end
    def emit(emitter); emitter.emit_Assign(self) end
    def node_name; 'Assign' end
    def field_values; [@parameters,@arguments] end
  end
  class Proto < Base
    attr_accessor :name
    def initialize(name)
      @name = name
    end
    def emit(emitter); emitter.emit_Proto(self) end
    def node_name; 'Proto' end
    def field_values; [@name] end
  end
  class Call < Base
    attr_accessor :invocant,:hyper,:method,:arguments
    def initialize(invocant,hyper,method,arguments)
      @invocant,@hyper,@method,@arguments = invocant,hyper,method,arguments
    end
    def emit(emitter); emitter.emit_Call(self) end
    def node_name; 'Call' end
    def field_values; [@invocant,@hyper,@method,@arguments] end
  end
  class Apply < Base
    attr_accessor :code,:arguments
    def initialize(code,arguments)
      @code,@arguments = code,arguments
    end
    def emit(emitter); emitter.emit_Apply(self) end
    def node_name; 'Apply' end
    def field_values; [@code,@arguments] end
  end
  class Return < Base
    attr_accessor :result
    def initialize(result)
      @result = result
    end
    def emit(emitter); emitter.emit_Return(self) end
    def node_name; 'Return' end
    def field_values; [@result] end
  end
  class If < Base
    attr_accessor :cond,:body,:otherwise
    def initialize(cond,body,otherwise)
      @cond,@body,@otherwise = cond,body,otherwise
    end
    def emit(emitter); emitter.emit_If(self) end
    def node_name; 'If' end
    def field_values; [@cond,@body,@otherwise] end
  end
  class While < Base
    attr_accessor :cond,:body
    def initialize(cond,body)
      @cond,@body = cond,body
    end
    def emit(emitter); emitter.emit_While(self) end
    def node_name; 'While' end
    def field_values; [@cond,@body] end
  end
  class Decl < Base
    attr_accessor :decl,:type,:var
    def initialize(decl,type,var)
      @decl,@type,@var = decl,type,var
    end
    def emit(emitter); emitter.emit_Decl(self) end
    def node_name; 'Decl' end
    def field_values; [@decl,@type,@var] end
  end
  class Sig < Base
    attr_accessor :invocant,:positional
    def initialize(invocant,positional)
      @invocant,@positional = invocant,positional
    end
    def emit(emitter); emitter.emit_Sig(self) end
    def node_name; 'Sig' end
    def field_values; [@invocant,@positional] end
  end
  class Lit_Capture < Lit_Base
    attr_accessor :invocant,:array,:hash
    def initialize(invocant,array,hash)
      @invocant,@array,@hash = invocant,array,hash
    end
    def emit(emitter); emitter.emit_Lit_Capture(self) end
    def node_name; 'Lit_Capture' end
    def field_values; [@invocant,@array,@hash] end
  end
  class Lit_Subset < Lit_Base
    attr_accessor :name,:base_class,:block
    def initialize(name,base_class,block)
      @name,@base_class,@block = name,base_class,block
    end
    def emit(emitter); emitter.emit_Lit_Subset(self) end
    def node_name; 'Lit_Subset' end
    def field_values; [@name,@base_class,@block] end
  end
  class Method < Base
    attr_accessor :name,:sig,:block
    def initialize(name,sig,block)
      @name,@sig,@block = name,sig,block
    end
    def emit(emitter); emitter.emit_Method(self) end
    def node_name; 'Method' end
    def field_values; [@name,@sig,@block] end
  end
  class Sub < Base
    attr_accessor :name,:sig,:block
    def initialize(name,sig,block)
      @name,@sig,@block = name,sig,block
    end
    def emit(emitter); emitter.emit_Sub(self) end
    def node_name; 'Sub' end
    def field_values; [@name,@sig,@block] end
  end
  class Macro < Base
    attr_accessor :name,:sig,:block
    def initialize(name,sig,block)
      @name,@sig,@block = name,sig,block
    end
    def emit(emitter); emitter.emit_Macro(self) end
    def node_name; 'Macro' end
    def field_values; [@name,@sig,@block] end
  end
  class Coro < Base
    attr_accessor :name,:sig,:block
    def initialize(name,sig,block)
      @name,@sig,@block = name,sig,block
    end
    def emit(emitter); emitter.emit_Coro(self) end
    def node_name; 'Coro' end
    def field_values; [@name,@sig,@block] end
  end
  class P5Token < Base
    attr_accessor :regex
    def initialize(regex)
      @regex = regex
    end
    def emit(emitter); emitter.emit_P5Token(self) end
    def node_name; 'P5Token' end
    def field_values; [@regex] end
  end
  class Token < Base
    attr_accessor :name,:regex,:sym
    def initialize(name,regex,sym)
      @name,@regex,@sym = name,regex,sym
    end
    def emit(emitter); emitter.emit_Token(self) end
    def node_name; 'Token' end
    def field_values; [@name,@regex,@sym] end
  end
  class Do < Base
    attr_accessor :block
    def initialize(block)
      @block = block
    end
    def emit(emitter); emitter.emit_Do(self) end
    def node_name; 'Do' end
    def field_values; [@block] end
  end
  class Begin < Base
    attr_accessor :block
    def initialize(block)
      @block = block
    end
    def emit(emitter); emitter.emit_Begin(self) end
    def node_name; 'Begin' end
    def field_values; [@block] end
  end
  class Use < Base
    attr_accessor :mod,:perl5
    def initialize(mod,perl5)
      @mod,@perl5 = mod,perl5
    end
    def emit(emitter); emitter.emit_Use(self) end
    def node_name; 'Use' end
    def field_values; [@mod,@perl5] end
  end
  class Rule < Base
    attr_accessor 
    def initialize()
      
    end
    def emit(emitter); emitter.emit_Rule(self) end
    def node_name; 'Rule' end
    def field_values; [] end
  end
  class Rule_Quantifier < Rule_Base
    attr_accessor :term,:quant,:greedy,:ws1,:ws2,:ws3
    def initialize(term,quant,greedy,ws1,ws2,ws3)
      @term,@quant,@greedy,@ws1,@ws2,@ws3 = term,quant,greedy,ws1,ws2,ws3
    end
    def emit(emitter); emitter.emit_Rule_Quantifier(self) end
    def node_name; 'Rule_Quantifier' end
    def field_values; [@term,@quant,@greedy,@ws1,@ws2,@ws3] end
  end
  class Rule_Or < Rule_Base
    attr_accessor :terms
    def initialize(terms)
      @terms = terms
    end
    def emit(emitter); emitter.emit_Rule_Or(self) end
    def node_name; 'Rule_Or' end
    def field_values; [@terms] end
  end
  class Rule_Concat < Rule_Base
    attr_accessor :concat
    def initialize(concat)
      @concat = concat
    end
    def emit(emitter); emitter.emit_Rule_Concat(self) end
    def node_name; 'Rule_Concat' end
    def field_values; [@concat] end
  end
  class Rule_Subrule < Rule_Base
    attr_accessor :metasyntax,:ident,:capture_to_array
    def initialize(metasyntax,ident,capture_to_array)
      @metasyntax,@ident,@capture_to_array = metasyntax,ident,capture_to_array
    end
    def emit(emitter); emitter.emit_Rule_Subrule(self) end
    def node_name; 'Rule_Subrule' end
    def field_values; [@metasyntax,@ident,@capture_to_array] end
  end
  class Rule_SubruleNoCapture < Rule_Base
    attr_accessor :metasyntax
    def initialize(metasyntax)
      @metasyntax = metasyntax
    end
    def emit(emitter); emitter.emit_Rule_SubruleNoCapture(self) end
    def node_name; 'Rule_SubruleNoCapture' end
    def field_values; [@metasyntax] end
  end
  class Rule_Var < Rule_Base
    attr_accessor :sigil,:twigil,:name
    def initialize(sigil,twigil,name)
      @sigil,@twigil,@name = sigil,twigil,name
    end
    def emit(emitter); emitter.emit_Rule_Var(self) end
    def node_name; 'Rule_Var' end
    def field_values; [@sigil,@twigil,@name] end
  end
  class Rule_Constant < Rule_Base
    attr_accessor :constant
    def initialize(constant)
      @constant = constant
    end
    def emit(emitter); emitter.emit_Rule_Constant(self) end
    def node_name; 'Rule_Constant' end
    def field_values; [@constant] end
  end
  class Rule_Dot < Rule_Base
    attr_accessor 
    def initialize()
      
    end
    def emit(emitter); emitter.emit_Rule_Dot(self) end
    def node_name; 'Rule_Dot' end
    def field_values; [] end
  end
  class Rule_SpecialChar < Rule_Base
    attr_accessor :char
    def initialize(char)
      @char = char
    end
    def emit(emitter); emitter.emit_Rule_SpecialChar(self) end
    def node_name; 'Rule_SpecialChar' end
    def field_values; [@char] end
  end
  class Rule_Block < Rule_Base
    attr_accessor :closure
    def initialize(closure)
      @closure = closure
    end
    def emit(emitter); emitter.emit_Rule_Block(self) end
    def node_name; 'Rule_Block' end
    def field_values; [@closure] end
  end
  class Rule_InterpolateVar < Rule_Base
    attr_accessor :var
    def initialize(var)
      @var = var
    end
    def emit(emitter); emitter.emit_Rule_InterpolateVar(self) end
    def node_name; 'Rule_InterpolateVar' end
    def field_values; [@var] end
  end
  class Rule_NamedCapture < Rule_Base
    attr_accessor :rule,:ident,:capture_to_array
    def initialize(rule,ident,capture_to_array)
      @rule,@ident,@capture_to_array = rule,ident,capture_to_array
    end
    def emit(emitter); emitter.emit_Rule_NamedCapture(self) end
    def node_name; 'Rule_NamedCapture' end
    def field_values; [@rule,@ident,@capture_to_array] end
  end
  class Rule_Before < Rule_Base
    attr_accessor :rule,:assertion_modifier,:capture_to_array
    def initialize(rule,assertion_modifier,capture_to_array)
      @rule,@assertion_modifier,@capture_to_array = rule,assertion_modifier,capture_to_array
    end
    def emit(emitter); emitter.emit_Rule_Before(self) end
    def node_name; 'Rule_Before' end
    def field_values; [@rule,@assertion_modifier,@capture_to_array] end
  end
  class Rule_After < Rule_Base
    attr_accessor :rule,:assertion_modifier,:capture_to_array
    def initialize(rule,assertion_modifier,capture_to_array)
      @rule,@assertion_modifier,@capture_to_array = rule,assertion_modifier,capture_to_array
    end
    def emit(emitter); emitter.emit_Rule_After(self) end
    def node_name; 'Rule_After' end
    def field_values; [@rule,@assertion_modifier,@capture_to_array] end
  end
  class Rule_NegateCharClass < Rule_Base
    attr_accessor :chars
    def initialize(chars)
      @chars = chars
    end
    def emit(emitter); emitter.emit_Rule_NegateCharClass(self) end
    def node_name; 'Rule_NegateCharClass' end
    def field_values; [@chars] end
  end
  class Rule_CharClass < Rule_Base
    attr_accessor :chars
    def initialize(chars)
      @chars = chars
    end
    def emit(emitter); emitter.emit_Rule_CharClass(self) end
    def node_name; 'Rule_CharClass' end
    def field_values; [@chars] end
  end
  class Rule_Capture < Rule_Base
    attr_accessor :rule,:position,:capture_to_array
    def initialize(rule,position,capture_to_array)
      @rule,@position,@capture_to_array = rule,position,capture_to_array
    end
    def emit(emitter); emitter.emit_Rule_Capture(self) end
    def node_name; 'Rule_Capture' end
    def field_values; [@rule,@position,@capture_to_array] end
  end

# Constructors
def self.Apply_from__0__1__top__type(z,o,top,typ); Apply.new(typ,[z,o]) end
def self.Apply_from__ident__semilist(i,sl); Apply.new(i,sl) end
def self.Apply_from__circumfix__op(c,op); Apply.new('circumfix:'+op,c['statementlist']) end
def self.Block_from__statementlist(sl); Block.new(sl) end
def self.Call_from__noun__postfix__top__type(n,pf,to,ty); Call_from__noun__postfix__type(n,pf,ty) end
def self.Call_from__noun__postfix__type(n,pf,ty); Call.new(n,nil,pf[0]['ident'],pf[0]['semilist']) end
def self.Call_from__methodop(mo); Call.new('self',nil,mo['ident'],mo['semilist']) end
def self.CompUnit_from__statement_block(b); CompUnit.new(nil,nil,nil,nil,nil,b) end
def self.Decl_from__declarator__scoped(d,s); Decl.new(d,nil,s) end
#def self.Name_from__ident(i); Name.new(i) end
def self.PackageDeclarator_from__block__name__sym(b,n,k); PackageDeclarator.new(k,n[0],b) end
def self.Quote_from__quote_concat(qc); Quote.new(qc[0]) end
def self.Val_Int_from__empty(s); Val_Int.new(s) end
def self.Var_from__empty(s); Var.new(nil,nil,s,nil) end
def self.Var_from__ident__sigil(i,s); Var.new(s,nil,i,nil) end
def self.Var_from__name__sigil__twigil(n,s,t); Var.new(s,t[0],n[0],nil) end
def self.Var_from__name__sigil(n,s); Var.new(s,nil,n[0],nil) end
def self.VirtualParameter_from__named__param_var__quant(n,p,q)
  raise "unsupported: #{n}" if n != ""
  raise "unsupported: #{q}" if q != ""
  Lit_SigArgument.new(p,nil,nil,nil,nil,nil,nil,nil,nil,nil)
end
def self.VirtualRoutineDeclarator_from__method_def__sym(r,k)
  if k == 'method'
    Method.new(r['ident'][0],r['multisig'][0],r['block'])
  elsif k == 'sub'
    Sub.new(r['ident'][0],r['multisig'][0],r['block'])
  else raise "Routine type is unimplemented: #{k}
"
  end
end
def self.VirtualRoutineDeclarator_from__routine_def__sym(r,k)
  VirtualRoutineDeclarator_from__method_def__sym(r,k)
end
end
class EmitSimpleP5
  def emit(ir)
    if ir.is_a? String
      ir
    else
      ir.emit(self)
    end
  end
  def emit_Apply(n)
    args = n.arguments.map{|e|e.emit(self)}
    if n.code.is_a? String
      if n.code =~ /^infix:(.+)/
        op = $1
        case op
        when '~'; args.join(' . ')
        else; args.join(' '+op+' ')
        end
      elsif n.code =~ /^circumfix:(.+)/
        op = $1
        case op
	when 'a when clause is needed :(';
        else; op.slice(0,1)+args.join(',')+op.slice(-1,1)
        end
      else
        n.code+'('+args.join(',')+')'
      end
    else
      n.code.emit(self)+'('+args.join(',')+')'
    end
  end
  def emit_Block(n); n.statements.map{|statement| statement.emit(self)+";\n"}.join("") end
  def emit_Call(n)
    inv = n.invocant
    if inv == 'self'
      inv = '$self'
    else
      inv = inv.emit(self)
    end
    inv+'->'+emit(n.method)+'('+n.arguments.map{|a|emit(a)}.join(',')+')' end
  def emit_CompUnit(n); n.body.emit(self) end
  def emit_Decl(n)
    if n.decl == 'has'
      "has '#{n.var.name}' => (is => 'rw');\n"
    elsif n.decl == 'my' || n.decl == 'our'
      n.decl+' $'+n.var.name
    else
      raise "Unimplemented: decl: #{n.decl}\n"
    end
  end
  def emit_Lit_SigArgument(n); n.key.emit(self) end
  def emit_Method(n)
    init = 'my('+n.sig.map{|e|e.emit(self)}.join(",")+")=@_;\n"
    init = '' if(init =~ /my\(\)/);
    ('sub '+n.name+" {\n"+
     '  my $self = shift;'+"\n"+
     init+
     n.block.emit(self)+
     "}\n")
  end
  #def emit_Name(n); n.ident.map{|v| v.emit(self)}.join('::') end
  def emit_PackageDeclarator(n); '{package '+n.name+";\nuse Moose;\n"+n.block.emit(self)+"}\n" end
  def emit_Quote(n)
    n.concat.map{|q|
      q.is_a?(String) ? ('"'+emit(q).gsub(/([$@%&])/){|m|'\\'+m}+'"') : q.emit(self)
    }.join('.')
  end
  def emit_Sub(n)
    init = 'my('+n.sig.map{|e|e.emit(self)}.join(",")+")=@_;\n"
    init = '' if(init =~ /my\(\)/);
    ('sub '+n.name+" {\n"+
     init+
     n.block.emit(self)+
     "}\n")
  end
  def emit_Val_Int(n); n.int end
  def emit_Var(n)
    if n.twigil == '.'
      '$self->'+emit(n.name)
    else
      (n.sigil || '')+emit(n.name)
    end
  end
  def method_missing(m,*a,&b)
    STDERR.print "# WARNING: Can't #{m}: FAKING IT.\n"
    '(fake())'
  end
end
    
class Program
  def print_usage_and_exit
    STDERR.print <<'end'; exit(2)
Usage: OPTIONS [-c] [-o OUTPUT_FILE] [ P6_FILE | -e P6_CODE ]

OPTIONS are as yet undefined.
end
  end
  def main(argv)
    p6_code = nil
    compile = false
    output_file = nil
    print_usage_and_exit if argv.empty?
    while arg = argv.shift
      if arg == '-c'
        compile = true
      elsif arg == '-o'
        output_file = argv.shift or print_usage_and_exit
      elsif arg == '-e'
        p6_code = argv.shift or print_usage_and_exit
      elsif File.exists? arg
        p6_code = File.open(arg,'r'){|f|f.read}
      else
        print_usage_and_exit
      end
    end
    print "\n"
    build = BuildIR.new('rakudo_ast.data')
    dump = parse(nil,p6_code)
    print dump
    File.open('deleteme_dump','w'){|f|f.print dump}
    tree = Scrape.new.scrape(dump)
    p tree
    ast = build.tag_tree(tree)
    p ast
    print build.tag_report
    ir = build.ir_from(ast)
    p ir
    print "\n",ir.to_term,"\n"
    p5 = EmitSimpleP5.new.emit(ir)
    print "\n----\n"
    print p5
    print "\n"
    if compile and output_file
      File.new(output_file,'w'){|f|f.print p5}
    end
  end
  def parse(p6_file,p6_code)
    p6_code ||= File.open(p6_file,'r'){|f|f.read}
    parrot = ENV['PARROT_ROOT'] or
      raise "The environment variable PARROT_ROOT must be defined.\n"
    inp = Tempfile.new('p6')
    inp.print p6_code
    inp.close
    cmd = "cd #{parrot}/languages/perl6; ../../parrot perl6.pbc --target=parse #{inp.path}"
    dump = `#{cmd}`
  end
end

Program.new.main(ARGV)
