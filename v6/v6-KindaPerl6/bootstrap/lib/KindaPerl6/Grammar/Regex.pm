{ package KindaPerl6::Grammar::Regex; 
# Do not edit this file - Perl 5 generated by KindaPerl6
use v5;
use strict;
no strict 'vars';
use KindaPerl6::Runtime::Perl5::Runtime;
my $_MODIFIED; BEGIN { $_MODIFIED = {} }
BEGIN { $_ = ::DISPATCH($::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
my  $Hash_rule_terms = ::DISPATCH( $::Hash, 'new', { modified => $_MODIFIED, name => '$Hash_rule_terms' } ) ; 
;
do { if (::DISPATCH(::DISPATCH(::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::KindaPerl6::Grammar::Regex )
,"true"),"p5landish") ) { }  else { my  $Hash_rule_terms = ::DISPATCH( $::Hash, 'new', { modified => $_MODIFIED, name => '$Hash_rule_terms' } ) ; 
;
do {::MODIFIED($::KindaPerl6::Grammar::Regex);
$::KindaPerl6::Grammar::Regex = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'KindaPerl6::Grammar::Regex' )
 )
, 'PROTOTYPE',  )
} } }
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', 'ws' )
, ::DISPATCH( $::Method, 'new', sub  { my $MATCH; $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } )  unless defined $MATCH; BEGIN { $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } ) }
;
my  $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } ) ; 
;
my $str; $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } )  unless defined $str; BEGIN { $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } ) }
;
my $pos; $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } )  unless defined $pos; BEGIN { $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } ) }
;
$self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};do {::MODIFIED($str);
$str = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 )
 )
};do {::MODIFIED($pos);
$pos = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 )
 )
};do { if (::DISPATCH(::DISPATCH(::DISPATCH( $GLOBAL::Code_prefix_58__60__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_defined, 'APPLY', $str )
 )
,"true"),"p5landish") ) { ::DISPATCH_VAR( $str, 'STORE', $_ )
 }  }
; $MATCH; ::DISPATCH_VAR( $MATCH, 'STORE', ::DISPATCH( $::Match, 'new',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'match_str',  )
, 'STORE', $str )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'from',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', ::DISPATCH( $::Int, 'new', 1 )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; do { do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
do {::MODIFIED($m2);
$m2 = ::DISPATCH( $::KindaPerl6::Grammar, 'ws', $str, ::DISPATCH( $MATCH, 'to',  )
 )
}; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH( $MATCH, 'to', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
 }
 }
 )
; return($MATCH)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', 'ident' )
, ::DISPATCH( $::Method, 'new', sub  { my $MATCH; $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } )  unless defined $MATCH; BEGIN { $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } ) }
;
my  $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } ) ; 
;
my $str; $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } )  unless defined $str; BEGIN { $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } ) }
;
my $pos; $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } )  unless defined $pos; BEGIN { $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } ) }
;
$self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};do {::MODIFIED($str);
$str = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 )
 )
};do {::MODIFIED($pos);
$pos = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 )
 )
};do { if (::DISPATCH(::DISPATCH(::DISPATCH( $GLOBAL::Code_prefix_58__60__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_defined, 'APPLY', $str )
 )
,"true"),"p5landish") ) { ::DISPATCH_VAR( $str, 'STORE', $_ )
 }  }
; $MATCH; ::DISPATCH_VAR( $MATCH, 'STORE', ::DISPATCH( $::Match, 'new',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'match_str',  )
, 'STORE', $str )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'from',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', ::DISPATCH( $::Int, 'new', 1 )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
do {::MODIFIED($m2);
$m2 = ::DISPATCH( $::KindaPerl6::Grammar, 'full_ident', $str, ::DISPATCH( $MATCH, 'to',  )
 )
}; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH( $MATCH, 'to', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
 }
, do { ::DISPATCH( $MATCH, 'to', $pos1 )
; do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'digit', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'digit' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
 }
 )
 }
 )
; return($MATCH)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', 'any' )
, ::DISPATCH( $::Method, 'new', sub  { my $MATCH; $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } )  unless defined $MATCH; BEGIN { $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } ) }
;
my  $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } ) ; 
;
my $str; $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } )  unless defined $str; BEGIN { $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } ) }
;
my $pos; $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } )  unless defined $pos; BEGIN { $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } ) }
;
$self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};do {::MODIFIED($str);
$str = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 )
 )
};do {::MODIFIED($pos);
$pos = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 )
 )
};do { if (::DISPATCH(::DISPATCH(::DISPATCH( $GLOBAL::Code_prefix_58__60__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_defined, 'APPLY', $str )
 )
,"true"),"p5landish") ) { ::DISPATCH_VAR( $str, 'STORE', $_ )
 }  }
; $MATCH; ::DISPATCH_VAR( $MATCH, 'STORE', ::DISPATCH( $::Match, 'new',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'match_str',  )
, 'STORE', $str )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'from',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', ::DISPATCH( $::Int, 'new', 1 )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; do { ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_ne_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
 }
 }
 )
; return($MATCH)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', 'literal' )
, ::DISPATCH( $::Method, 'new', sub  { my $MATCH; $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } )  unless defined $MATCH; BEGIN { $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } ) }
;
my  $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } ) ; 
;
my $str; $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } )  unless defined $str; BEGIN { $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } ) }
;
my $pos; $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } )  unless defined $pos; BEGIN { $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } ) }
;
$self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};do {::MODIFIED($str);
$str = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 )
 )
};do {::MODIFIED($pos);
$pos = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 )
 )
};do { if (::DISPATCH(::DISPATCH(::DISPATCH( $GLOBAL::Code_prefix_58__60__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_defined, 'APPLY', $str )
 )
,"true"),"p5landish") ) { ::DISPATCH_VAR( $str, 'STORE', $_ )
 }  }
; $MATCH; ::DISPATCH_VAR( $MATCH, 'STORE', ::DISPATCH( $::Match, 'new',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'match_str',  )
, 'STORE', $str )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'from',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', ::DISPATCH( $::Int, 'new', 1 )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '\\\\' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_ne_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'literal', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'literal' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
 )
 )
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $MATCH; $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } )  unless defined $MATCH; BEGIN { $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } ) }
;
$MATCH; ::DISPATCH_VAR( $MATCH, 'STORE', ::DISPATCH( $::Match, 'new',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'match_str',  )
, 'STORE', $str )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'from',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', ::DISPATCH( $::Int, 'new', 1 )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', ::DISPATCH( $GLOBAL::Code_prefix_58__60__33__62_, 'APPLY', do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; do { ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '\\\'' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
 }
 }
 )
 )
; $MATCH }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_ne_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'literal', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'literal' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
 )
 )
 }
, do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 )
 }
 )
; return($MATCH)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', 'metasyntax' )
, ::DISPATCH( $::Method, 'new', sub  { my $MATCH; $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } )  unless defined $MATCH; BEGIN { $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } ) }
;
my  $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } ) ; 
;
my $str; $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } )  unless defined $str; BEGIN { $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } ) }
;
my $pos; $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } )  unless defined $pos; BEGIN { $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } ) }
;
$self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};do {::MODIFIED($str);
$str = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 )
 )
};do {::MODIFIED($pos);
$pos = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 )
 )
};do { if (::DISPATCH(::DISPATCH(::DISPATCH( $GLOBAL::Code_prefix_58__60__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_defined, 'APPLY', $str )
 )
,"true"),"p5landish") ) { ::DISPATCH_VAR( $str, 'STORE', $_ )
 }  }
; $MATCH; ::DISPATCH_VAR( $MATCH, 'STORE', ::DISPATCH( $::Match, 'new',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'match_str',  )
, 'STORE', $str )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'from',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', ::DISPATCH( $::Int, 'new', 1 )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; do { ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '\\\\' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_ne_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
 )
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '\\\'' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
do {::MODIFIED($m2);
$m2 = ::DISPATCH( $self, 'literal', $str, ::DISPATCH( $MATCH, 'to',  )
 )
}; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH( $MATCH, 'to', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '\\\'' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
 )
 )
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '{' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
do {::MODIFIED($m2);
$m2 = ::DISPATCH( $self, 'parsed_code', $str, ::DISPATCH( $MATCH, 'to',  )
 )
}; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH( $MATCH, 'to', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
 )
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '<' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
do {::MODIFIED($m2);
$m2 = ::DISPATCH( $self, 'metasyntax', $str, ::DISPATCH( $MATCH, 'to',  )
 )
}; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH( $MATCH, 'to', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '>' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
 )
 )
 }
, do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $MATCH; $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } )  unless defined $MATCH; BEGIN { $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } ) }
;
$MATCH; ::DISPATCH_VAR( $MATCH, 'STORE', ::DISPATCH( $::Match, 'new',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'match_str',  )
, 'STORE', $str )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'from',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', ::DISPATCH( $::Int, 'new', 1 )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', ::DISPATCH( $GLOBAL::Code_prefix_58__60__33__62_, 'APPLY', do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; do { ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '>' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
 }
 }
 )
 )
; $MATCH }
, ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_ne_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
 )
 }
 )
 )
 )
 )
 }
, do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'metasyntax', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'metasyntax' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
 }
, do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 }
 )
 }
 }
 )
; return($MATCH)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', 'char_range' )
, ::DISPATCH( $::Method, 'new', sub  { my $MATCH; $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } )  unless defined $MATCH; BEGIN { $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } ) }
;
my  $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } ) ; 
;
my $str; $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } )  unless defined $str; BEGIN { $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } ) }
;
my $pos; $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } )  unless defined $pos; BEGIN { $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } ) }
;
$self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};do {::MODIFIED($str);
$str = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 )
 )
};do {::MODIFIED($pos);
$pos = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 )
 )
};do { if (::DISPATCH(::DISPATCH(::DISPATCH( $GLOBAL::Code_prefix_58__60__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_defined, 'APPLY', $str )
 )
,"true"),"p5landish") ) { ::DISPATCH_VAR( $str, 'STORE', $_ )
 }  }
; $MATCH; ::DISPATCH_VAR( $MATCH, 'STORE', ::DISPATCH( $::Match, 'new',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'match_str',  )
, 'STORE', $str )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'from',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', ::DISPATCH( $::Int, 'new', 1 )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; do { ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '\\\\' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_ne_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
 )
 }
, do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $MATCH; $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } )  unless defined $MATCH; BEGIN { $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } ) }
;
$MATCH; ::DISPATCH_VAR( $MATCH, 'STORE', ::DISPATCH( $::Match, 'new',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'match_str',  )
, 'STORE', $str )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'from',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', ::DISPATCH( $::Int, 'new', 1 )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', ::DISPATCH( $GLOBAL::Code_prefix_58__60__33__62_, 'APPLY', do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; do { ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', ']' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
 }
 }
 )
 )
; $MATCH }
, ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_ne_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
 )
 }
 )
 }
, do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'char_range', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'char_range' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
 }
, do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 }
 )
 }
 }
 )
; return($MATCH)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', 'char_class' )
, ::DISPATCH( $::Method, 'new', sub  { my $MATCH; $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } )  unless defined $MATCH; BEGIN { $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } ) }
;
my  $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } ) ; 
;
my $str; $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } )  unless defined $str; BEGIN { $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } ) }
;
my $pos; $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } )  unless defined $pos; BEGIN { $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } ) }
;
$self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};do {::MODIFIED($str);
$str = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 )
 )
};do {::MODIFIED($pos);
$pos = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 )
 )
};do { if (::DISPATCH(::DISPATCH(::DISPATCH( $GLOBAL::Code_prefix_58__60__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_defined, 'APPLY', $str )
 )
,"true"),"p5landish") ) { ::DISPATCH_VAR( $str, 'STORE', $_ )
 }  }
; $MATCH; ::DISPATCH_VAR( $MATCH, 'STORE', ::DISPATCH( $::Match, 'new',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'match_str',  )
, 'STORE', $str )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'from',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', ::DISPATCH( $::Int, 'new', 1 )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
do {::MODIFIED($m2);
$m2 = ::DISPATCH( $self, 'ident', $str, ::DISPATCH( $MATCH, 'to',  )
 )
}; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH( $MATCH, 'to', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
 }
, do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '[' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
do {::MODIFIED($m2);
$m2 = ::DISPATCH( $self, 'char_range', $str, ::DISPATCH( $MATCH, 'to',  )
 )
}; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH( $MATCH, 'to', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', ']' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
 )
 )
 }
 )
 }
 )
; return($MATCH)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', 'parsed_code' )
, ::DISPATCH( $::Method, 'new', sub  { my $MATCH; $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } )  unless defined $MATCH; BEGIN { $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } ) }
;
my  $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } ) ; 
;
my $str; $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } )  unless defined $str; BEGIN { $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } ) }
;
my $pos; $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } )  unless defined $pos; BEGIN { $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } ) }
;
$self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};do {::MODIFIED($str);
$str = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 )
 )
};do {::MODIFIED($pos);
$pos = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 )
 )
};do { if (::DISPATCH(::DISPATCH(::DISPATCH( $GLOBAL::Code_prefix_58__60__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_defined, 'APPLY', $str )
 )
,"true"),"p5landish") ) { ::DISPATCH_VAR( $str, 'STORE', $_ )
 }  }
; $MATCH; ::DISPATCH_VAR( $MATCH, 'STORE', ::DISPATCH( $::Match, 'new',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'match_str',  )
, 'STORE', $str )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'from',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', ::DISPATCH( $::Int, 'new', 1 )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; do { ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
do {::MODIFIED($m2);
$m2 = ::DISPATCH( $::KindaPerl6::Grammar, 'opt_ws', $str, ::DISPATCH( $MATCH, 'to',  )
 )
}; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH( $MATCH, 'to', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block1',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $::KindaPerl6::Grammar, 'exp_stmts', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'KindaPerl6::Grammar.exp_stmts' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
do {::MODIFIED($m2);
$m2 = ::DISPATCH( $::KindaPerl6::Grammar, 'opt_ws', $str, ::DISPATCH( $MATCH, 'to',  )
 )
}; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH( $MATCH, 'to', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '}' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block2',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 )
 )
 )
 )
 }
 }
 )
; return($MATCH)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', 'named_capture_body' )
, ::DISPATCH( $::Method, 'new', sub  { my $MATCH; $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } )  unless defined $MATCH; BEGIN { $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } ) }
;
my  $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } ) ; 
;
my $str; $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } )  unless defined $str; BEGIN { $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } ) }
;
my $pos; $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } )  unless defined $pos; BEGIN { $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } ) }
;
$self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};do {::MODIFIED($str);
$str = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 )
 )
};do {::MODIFIED($pos);
$pos = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 )
 )
};do { if (::DISPATCH(::DISPATCH(::DISPATCH( $GLOBAL::Code_prefix_58__60__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_defined, 'APPLY', $str )
 )
,"true"),"p5landish") ) { ::DISPATCH_VAR( $str, 'STORE', $_ )
 }  }
; $MATCH; ::DISPATCH_VAR( $MATCH, 'STORE', ::DISPATCH( $::Match, 'new',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'match_str',  )
, 'STORE', $str )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'from',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', ::DISPATCH( $::Int, 'new', 1 )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '(' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'rule', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'rule' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', ')' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block3',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 )
 )
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '[' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'rule', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'rule' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', ']' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block4',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 )
 )
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '<' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'metasyntax', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'metasyntax' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '>' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block5',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 )
 )
 }
, do { ::DISPATCH( $MATCH, 'to', $pos1 )
; do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block6',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 }
 )
 )
 )
 }
 )
; return($MATCH)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', 'variables' )
, ::DISPATCH( $::Method, 'new', sub  { my $MATCH; $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } )  unless defined $MATCH; BEGIN { $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } ) }
;
my  $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } ) ; 
;
my $str; $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } )  unless defined $str; BEGIN { $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } ) }
;
my $pos; $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } )  unless defined $pos; BEGIN { $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } ) }
;
$self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};do {::MODIFIED($str);
$str = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 )
 )
};do {::MODIFIED($pos);
$pos = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 )
 )
};do { if (::DISPATCH(::DISPATCH(::DISPATCH( $GLOBAL::Code_prefix_58__60__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_defined, 'APPLY', $str )
 )
,"true"),"p5landish") ) { ::DISPATCH_VAR( $str, 'STORE', $_ )
 }  }
; $MATCH; ::DISPATCH_VAR( $MATCH, 'STORE', ::DISPATCH( $::Match, 'new',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'match_str',  )
, 'STORE', $str )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'from',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', ::DISPATCH( $::Int, 'new', 1 )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '$<' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 2 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 2 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'ident', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'ident' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '>' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block7',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 )
 )
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $::KindaPerl6::Grammar, 'sigil', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'KindaPerl6::Grammar.sigil' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $::KindaPerl6::Grammar, 'digits', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'KindaPerl6::Grammar.digits' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block8',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 )
 }
, do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $::KindaPerl6::Grammar, 'sigil', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'KindaPerl6::Grammar.sigil' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $::KindaPerl6::Grammar, 'twigil', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'KindaPerl6::Grammar.twigil' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $::KindaPerl6::Grammar, 'full_ident', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'KindaPerl6::Grammar.full_ident' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block9',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 )
 )
 }
 )
 )
 }
 )
; return($MATCH)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', 'assertion_modifier' )
, ::DISPATCH( $::Method, 'new', sub  { my $MATCH; $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } )  unless defined $MATCH; BEGIN { $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } ) }
;
my  $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } ) ; 
;
my $str; $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } )  unless defined $str; BEGIN { $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } ) }
;
my $pos; $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } )  unless defined $pos; BEGIN { $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } ) }
;
$self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};do {::MODIFIED($str);
$str = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 )
 )
};do {::MODIFIED($pos);
$pos = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 )
 )
};do { if (::DISPATCH(::DISPATCH(::DISPATCH( $GLOBAL::Code_prefix_58__60__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_defined, 'APPLY', $str )
 )
,"true"),"p5landish") ) { ::DISPATCH_VAR( $str, 'STORE', $_ )
 }  }
; $MATCH; ::DISPATCH_VAR( $MATCH, 'STORE', ::DISPATCH( $::Match, 'new',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'match_str',  )
, 'STORE', $str )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'from',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', ::DISPATCH( $::Int, 'new', 1 )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '!' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '?' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
 }
, do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 )
 }
 )
; return($MATCH)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', 'rule_terms' )
, ::DISPATCH( $::Method, 'new', sub  { my $MATCH; $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } )  unless defined $MATCH; BEGIN { $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } ) }
;
my  $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } ) ; 
;
my $str; $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } )  unless defined $str; BEGIN { $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } ) }
;
my $pos; $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } )  unless defined $pos; BEGIN { $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } ) }
;
$self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};do {::MODIFIED($str);
$str = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 )
 )
};do {::MODIFIED($pos);
$pos = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 )
 )
};do { if (::DISPATCH(::DISPATCH(::DISPATCH( $GLOBAL::Code_prefix_58__60__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_defined, 'APPLY', $str )
 )
,"true"),"p5landish") ) { ::DISPATCH_VAR( $str, 'STORE', $_ )
 }  }
; $MATCH; ::DISPATCH_VAR( $MATCH, 'STORE', ::DISPATCH( $::Match, 'new',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'match_str',  )
, 'STORE', $str )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'from',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', ::DISPATCH( $::Int, 'new', 1 )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '(' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'rule', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'rule' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', ')' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block10',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 )
 )
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '<(' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 2 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 2 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'rule', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'rule' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', ')>' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 2 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 2 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block11',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 )
 )
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '<' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'assertion_modifier', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'assertion_modifier' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', 'after' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 5 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 5 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
do {::MODIFIED($m2);
$m2 = ::DISPATCH( $self, 'ws', $str, ::DISPATCH( $MATCH, 'to',  )
 )
}; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH( $MATCH, 'to', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'rule', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'rule' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '>' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block12',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 )
 )
 )
 )
 )
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '<' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'assertion_modifier', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'assertion_modifier' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', 'before' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 6 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 6 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
do {::MODIFIED($m2);
$m2 = ::DISPATCH( $self, 'ws', $str, ::DISPATCH( $MATCH, 'to',  )
 )
}; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH( $MATCH, 'to', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'rule', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'rule' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '>' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block13',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 )
 )
 )
 )
 )
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '<!' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 2 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 2 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'metasyntax', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'metasyntax' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '>' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block14',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 )
 )
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '<+' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 2 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 2 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'char_class', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'char_class' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '>' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block15',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 )
 )
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '<-' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 2 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 2 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'char_class', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'char_class' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '>' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block16',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 )
 )
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '\\\'' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'literal', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'literal' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '\\\'' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block17',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 )
 )
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '<' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'variables', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'variables' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '>' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block18',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 )
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '?' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'metasyntax', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'metasyntax' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '>' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block19',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 )
 )
 }
, do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'metasyntax', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'metasyntax' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '>' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block20',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 )
 }
 )
 )
 }
 )
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '{' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'parsed_code', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'parsed_code' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block21',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 )
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $::KindaPerl6::Grammar, 'backslash', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'KindaPerl6::Grammar.backslash' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; do { ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'any', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'any' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block22',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 }
 }
 )
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '.' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block23',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 }
, do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '[' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'rule', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'rule' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', ']' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block24',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 )
 )
 }
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 }
 )
; return($MATCH)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', 'term' )
, ::DISPATCH( $::Method, 'new', sub  { my $MATCH; $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } )  unless defined $MATCH; BEGIN { $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } ) }
;
my  $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } ) ; 
;
my $str; $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } )  unless defined $str; BEGIN { $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } ) }
;
my $pos; $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } )  unless defined $pos; BEGIN { $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } ) }
;
$self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};do {::MODIFIED($str);
$str = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 )
 )
};do {::MODIFIED($pos);
$pos = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 )
 )
};do { if (::DISPATCH(::DISPATCH(::DISPATCH( $GLOBAL::Code_prefix_58__60__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_defined, 'APPLY', $str )
 )
,"true"),"p5landish") ) { ::DISPATCH_VAR( $str, 'STORE', $_ )
 }  }
; $MATCH; ::DISPATCH_VAR( $MATCH, 'STORE', ::DISPATCH( $::Match, 'new',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'match_str',  )
, 'STORE', $str )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'from',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', ::DISPATCH( $::Int, 'new', 1 )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '$<' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 2 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 2 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'ident', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'ident' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '>' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
do {::MODIFIED($m2);
$m2 = ::DISPATCH( $self, 'ws', $str, ::DISPATCH( $MATCH, 'to',  )
 )
}; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH( $MATCH, 'to', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', ':=' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 2 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 2 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
do {::MODIFIED($m2);
$m2 = ::DISPATCH( $self, 'ws', $str, ::DISPATCH( $MATCH, 'to',  )
 )
}; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH( $MATCH, 'to', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '(' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'rule', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'rule' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', ')' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block25',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 )
 )
 )
 )
 )
 )
 )
 )
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'variables', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'variables' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
do {::MODIFIED($m2);
$m2 = ::DISPATCH( $self, 'ws', $str, ::DISPATCH( $MATCH, 'to',  )
 )
}; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH( $MATCH, 'to', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', ':=' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 2 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 2 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
do {::MODIFIED($m2);
$m2 = ::DISPATCH( $self, 'ws', $str, ::DISPATCH( $MATCH, 'to',  )
 )
}; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH( $MATCH, 'to', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'named_capture_body', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'named_capture_body' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block26',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 )
 )
 )
 }
, do { ::DISPATCH( $MATCH, 'to', $pos1 )
; do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block27',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 }
 )
 }
 )
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'rule_terms', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'rule_terms' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block28',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 }
, do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $MATCH; $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } )  unless defined $MATCH; BEGIN { $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } ) }
;
$MATCH; ::DISPATCH_VAR( $MATCH, 'STORE', ::DISPATCH( $::Match, 'new',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'match_str',  )
, 'STORE', $str )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'from',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', ::DISPATCH( $::Int, 'new', 1 )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', ::DISPATCH( $GLOBAL::Code_prefix_58__60__33__62_, 'APPLY', do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', ']' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '}' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', ')' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '>' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', ':' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '?' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '+' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '*' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '|' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '&' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
 }
, do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '/' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
 }
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 }
 )
 )
; $MATCH }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'any', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'any' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block29',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 )
 }
 )
 )
 )
 }
 )
; return($MATCH)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', 'quant' )
, ::DISPATCH( $::Method, 'new', sub  { my $MATCH; $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } )  unless defined $MATCH; BEGIN { $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } ) }
;
my  $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } ) ; 
;
my $str; $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } )  unless defined $str; BEGIN { $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } ) }
;
my $pos; $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } )  unless defined $pos; BEGIN { $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } ) }
;
$self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};do {::MODIFIED($str);
$str = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 )
 )
};do {::MODIFIED($pos);
$pos = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 )
 )
};do { if (::DISPATCH(::DISPATCH(::DISPATCH( $GLOBAL::Code_prefix_58__60__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_defined, 'APPLY', $str )
 )
,"true"),"p5landish") ) { ::DISPATCH_VAR( $str, 'STORE', $_ )
 }  }
; $MATCH; ::DISPATCH_VAR( $MATCH, 'STORE', ::DISPATCH( $::Match, 'new',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'match_str',  )
, 'STORE', $str )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'from',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', ::DISPATCH( $::Int, 'new', 1 )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '**' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 2 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 2 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
do {::MODIFIED($m2);
$m2 = ::DISPATCH( $::KindaPerl6::Grammar, 'opt_ws', $str, ::DISPATCH( $MATCH, 'to',  )
 )
}; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH( $MATCH, 'to', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '{' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'parsed_code', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'parsed_code' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block30',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 )
 )
 )
 }
, do { ::DISPATCH( $MATCH, 'to', $pos1 )
; do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '?' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '*' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
 }
, do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '+' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
 }
 )
 )
 }
 }
 )
 }
 )
; return($MATCH)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', 'greedy' )
, ::DISPATCH( $::Method, 'new', sub  { my $MATCH; $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } )  unless defined $MATCH; BEGIN { $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } ) }
;
my  $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } ) ; 
;
my $str; $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } )  unless defined $str; BEGIN { $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } ) }
;
my $pos; $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } )  unless defined $pos; BEGIN { $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } ) }
;
$self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};do {::MODIFIED($str);
$str = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 )
 )
};do {::MODIFIED($pos);
$pos = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 )
 )
};do { if (::DISPATCH(::DISPATCH(::DISPATCH( $GLOBAL::Code_prefix_58__60__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_defined, 'APPLY', $str )
 )
,"true"),"p5landish") ) { ::DISPATCH_VAR( $str, 'STORE', $_ )
 }  }
; $MATCH; ::DISPATCH_VAR( $MATCH, 'STORE', ::DISPATCH( $::Match, 'new',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'match_str',  )
, 'STORE', $str )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'from',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', ::DISPATCH( $::Int, 'new', 1 )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '?' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '+' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
 }
, do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 )
 }
 )
; return($MATCH)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', 'quantifier' )
, ::DISPATCH( $::Method, 'new', sub  { my $MATCH; $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } )  unless defined $MATCH; BEGIN { $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } ) }
;
my  $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } ) ; 
;
my $str; $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } )  unless defined $str; BEGIN { $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } ) }
;
my $pos; $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } )  unless defined $pos; BEGIN { $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } ) }
;
$self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};do {::MODIFIED($str);
$str = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 )
 )
};do {::MODIFIED($pos);
$pos = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 )
 )
};do { if (::DISPATCH(::DISPATCH(::DISPATCH( $GLOBAL::Code_prefix_58__60__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_defined, 'APPLY', $str )
 )
,"true"),"p5landish") ) { ::DISPATCH_VAR( $str, 'STORE', $_ )
 }  }
; $MATCH; ::DISPATCH_VAR( $MATCH, 'STORE', ::DISPATCH( $::Match, 'new',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'match_str',  )
, 'STORE', $str )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'from',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', ::DISPATCH( $::Int, 'new', 1 )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; do { ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
do {::MODIFIED($m2);
$m2 = ::DISPATCH( $::KindaPerl6::Grammar, 'opt_ws', $str, ::DISPATCH( $MATCH, 'to',  )
 )
}; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH( $MATCH, 'to', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'term', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'term' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
do {::MODIFIED($m2);
$m2 = ::DISPATCH( $::KindaPerl6::Grammar, 'opt_ws2', $str, ::DISPATCH( $MATCH, 'to',  )
 )
}; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH( $MATCH, 'to', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'quant', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'quant' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'greedy', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'greedy' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
do {::MODIFIED($m2);
$m2 = ::DISPATCH( $::KindaPerl6::Grammar, 'opt_ws3', $str, ::DISPATCH( $MATCH, 'to',  )
 )
}; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH( $MATCH, 'to', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block31',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 )
 )
 }
, do { ::DISPATCH( $MATCH, 'to', $pos1 )
; do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block32',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 }
 )
 }
 )
 )
 )
 }
 }
 )
; return($MATCH)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', 'concat_list' )
, ::DISPATCH( $::Method, 'new', sub  { my $MATCH; $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } )  unless defined $MATCH; BEGIN { $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } ) }
;
my  $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } ) ; 
;
my $str; $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } )  unless defined $str; BEGIN { $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } ) }
;
my $pos; $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } )  unless defined $pos; BEGIN { $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } ) }
;
$self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};do {::MODIFIED($str);
$str = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 )
 )
};do {::MODIFIED($pos);
$pos = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 )
 )
};do { if (::DISPATCH(::DISPATCH(::DISPATCH( $GLOBAL::Code_prefix_58__60__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_defined, 'APPLY', $str )
 )
,"true"),"p5landish") ) { ::DISPATCH_VAR( $str, 'STORE', $_ )
 }  }
; $MATCH; ::DISPATCH_VAR( $MATCH, 'STORE', ::DISPATCH( $::Match, 'new',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'match_str',  )
, 'STORE', $str )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'from',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', ::DISPATCH( $::Int, 'new', 1 )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'quantifier', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'quantifier' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'concat_list', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'concat_list' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block33',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 }
, do { ::DISPATCH( $MATCH, 'to', $pos1 )
; do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block34',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 }
 )
 }
 )
 }
, do { ::DISPATCH( $MATCH, 'to', $pos1 )
; do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block35',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 }
 )
 }
 )
; return($MATCH)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', 'concat' )
, ::DISPATCH( $::Method, 'new', sub  { my $MATCH; $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } )  unless defined $MATCH; BEGIN { $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } ) }
;
my  $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } ) ; 
;
my $str; $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } )  unless defined $str; BEGIN { $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } ) }
;
my $pos; $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } )  unless defined $pos; BEGIN { $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } ) }
;
$self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};do {::MODIFIED($str);
$str = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 )
 )
};do {::MODIFIED($pos);
$pos = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 )
 )
};do { if (::DISPATCH(::DISPATCH(::DISPATCH( $GLOBAL::Code_prefix_58__60__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_defined, 'APPLY', $str )
 )
,"true"),"p5landish") ) { ::DISPATCH_VAR( $str, 'STORE', $_ )
 }  }
; $MATCH; ::DISPATCH_VAR( $MATCH, 'STORE', ::DISPATCH( $::Match, 'new',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'match_str',  )
, 'STORE', $str )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'from',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', ::DISPATCH( $::Int, 'new', 1 )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; do { ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'concat_list', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'concat_list' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block36',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 }
 }
 )
; return($MATCH)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', 'or_list' )
, ::DISPATCH( $::Method, 'new', sub  { my $MATCH; $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } )  unless defined $MATCH; BEGIN { $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } ) }
;
my  $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } ) ; 
;
my $str; $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } )  unless defined $str; BEGIN { $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } ) }
;
my $pos; $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } )  unless defined $pos; BEGIN { $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } ) }
;
$self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};do {::MODIFIED($str);
$str = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 )
 )
};do {::MODIFIED($pos);
$pos = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 )
 )
};do { if (::DISPATCH(::DISPATCH(::DISPATCH( $GLOBAL::Code_prefix_58__60__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_defined, 'APPLY', $str )
 )
,"true"),"p5landish") ) { ::DISPATCH_VAR( $str, 'STORE', $_ )
 }  }
; $MATCH; ::DISPATCH_VAR( $MATCH, 'STORE', ::DISPATCH( $::Match, 'new',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'match_str',  )
, 'STORE', $str )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'from',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', ::DISPATCH( $::Int, 'new', 1 )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'concat', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'concat' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '|' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'or_list', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'or_list' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block37',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 )
 }
, do { ::DISPATCH( $MATCH, 'to', $pos1 )
; do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block38',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 }
 )
 }
 )
 }
, do { ::DISPATCH( $MATCH, 'to', $pos1 )
; do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block39',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 }
 )
 }
 )
; return($MATCH)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', 'rule' )
, ::DISPATCH( $::Method, 'new', sub  { my $MATCH; $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } )  unless defined $MATCH; BEGIN { $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } ) }
;
my  $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } ) ; 
;
my $str; $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } )  unless defined $str; BEGIN { $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } ) }
;
my $pos; $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } )  unless defined $pos; BEGIN { $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } ) }
;
$self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};do {::MODIFIED($str);
$str = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 )
 )
};do {::MODIFIED($pos);
$pos = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 )
 )
};do { if (::DISPATCH(::DISPATCH(::DISPATCH( $GLOBAL::Code_prefix_58__60__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_defined, 'APPLY', $str )
 )
,"true"),"p5landish") ) { ::DISPATCH_VAR( $str, 'STORE', $_ )
 }  }
; $MATCH; ::DISPATCH_VAR( $MATCH, 'STORE', ::DISPATCH( $::Match, 'new',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'match_str',  )
, 'STORE', $str )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'from',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', ::DISPATCH( $::Int, 'new', 1 )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; do { ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
do {::MODIFIED($m2);
$m2 = ::DISPATCH( $self, 'ws', $str, ::DISPATCH( $MATCH, 'to',  )
 )
}; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH( $MATCH, 'to', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '|' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
 )
 }
, do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'or_list', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'or_list' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block40',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 )
 }
 }
 )
; return($MATCH)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block1' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};::DISPATCH( $GLOBAL::COMPILER::Code_add_pad, 'APPLY', $GLOBAL::KindaPerl6::Grammar::Class_name )
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block2' )
, ::DISPATCH( $::Method, 'new', sub  { my $env; $env = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$env' } )  unless defined $env; BEGIN { $env = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$env' } ) }
;
$self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};do {::MODIFIED($env);
$env = ::DISPATCH( $GLOBAL::COMPILER::List_PAD, 'INDEX', ::DISPATCH( $::Int, 'new', 0 )
 )
}; ::DISPATCH( $GLOBAL::COMPILER::Code_drop_pad, 'APPLY',  )
; return(::DISPATCH( $::Lit::Code, 'new', ::DISPATCH( $::Str, 'new', 'pad' )
 => $env,::DISPATCH( $::Str, 'new', 'state' )
 => ::DISPATCH( $::Hash, "new", { _hash => {  } } )
,::DISPATCH( $::Str, 'new', 'sig' )
 => ::DISPATCH( $::Sig, 'new', ::DISPATCH( $::Str, 'new', 'invocant' )
 => $::Undef,::DISPATCH( $::Str, 'new', 'positional' )
 => ::DISPATCH( $::Array, "new", { _array => [] } )
,::DISPATCH( $::Str, 'new', 'named' )
 => ::DISPATCH( $::Hash, "new", { _hash => {  } } )
, )
,::DISPATCH( $::Str, 'new', 'body' )
 => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'KindaPerl6::Grammar.exp_stmts' )
 )
 )
, )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block3' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $::Rule::Capture, 'new', ::DISPATCH( $::Str, 'new', 'rule' )
 => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'rule' )
 )
 )
, )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block4' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'rule' )
 )
 )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block5' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $::Rule::Subrule, 'new', ::DISPATCH( $::Str, 'new', 'metasyntax' )
 => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'metasyntax' )
 )
 )
, )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block6' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};::DISPATCH( $GLOBAL::Code_die, 'APPLY', ::DISPATCH( $::Str, 'new', 'invalid alias syntax' )
 )
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block7' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( $::Str, 'new', '$/{' )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( $::Str, 'new', '\\\'' )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'ident' )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( $::Str, 'new', '\\\'' )
, ::DISPATCH( $::Str, 'new', '}' )
 )
 )
 )
 )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block8' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'KindaPerl6::Grammar.sigil' )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( $::Str, 'new', '/[' )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'KindaPerl6::Grammar.digits' )
 )
, ::DISPATCH( $::Str, 'new', ']' )
 )
 )
 )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block9' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $::Rule::Var, 'new', ::DISPATCH( $::Str, 'new', 'sigil' )
 => ::DISPATCH( $GLOBAL::Code_prefix_58__60__126__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'KindaPerl6::Grammar.sigil' )
 )
 )
,::DISPATCH( $::Str, 'new', 'twigil' )
 => ::DISPATCH( $GLOBAL::Code_prefix_58__60__126__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'KindaPerl6::Grammar.twigil' )
 )
 )
,::DISPATCH( $::Str, 'new', 'name' )
 => ::DISPATCH( $GLOBAL::Code_prefix_58__60__126__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'KindaPerl6::Grammar.full_ident' )
 )
 )
, )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block10' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $::Rule::Capture, 'new', ::DISPATCH( $::Str, 'new', 'rule' )
 => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'rule' )
 )
 )
, )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block11' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $::Rule::CaptureResult, 'new', ::DISPATCH( $::Str, 'new', 'rule' )
 => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'rule' )
 )
 )
, )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block12' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $::Rule::After, 'new', ::DISPATCH( $::Str, 'new', 'rule' )
 => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'rule' )
 )
 )
,::DISPATCH( $::Str, 'new', 'assertion_modifier' )
 => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'assertion_modifier' )
 )
 )
, )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block13' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $::Rule::Before, 'new', ::DISPATCH( $::Str, 'new', 'rule' )
 => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'rule' )
 )
 )
,::DISPATCH( $::Str, 'new', 'assertion_modifier' )
 => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'assertion_modifier' )
 )
 )
, )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block14' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $::Hash, "new", { _hash => { ::DISPATCH( $::Str, 'new', 'negate' )
->{_value} => ::DISPATCH( $::Hash, "new", { _hash => { ::DISPATCH( $::Str, 'new', 'metasyntax' )
->{_value} => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'metasyntax' )
 )
 )
, } } )
, } } )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block15' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $::Rule::CharClass, 'new', ::DISPATCH( $::Str, 'new', 'chars' )
 => ::DISPATCH( $GLOBAL::Code_prefix_58__60__126__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'char_class' )
 )
 )
, )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block16' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $::Rule::NegateCharClass, 'new', ::DISPATCH( $::Str, 'new', 'chars' )
 => ::DISPATCH( $GLOBAL::Code_prefix_58__60__126__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'char_class' )
 )
 )
, )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block17' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $::Rule::Constant, 'new', ::DISPATCH( $::Str, 'new', 'constant' )
 => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'literal' )
 )
 )
, )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block18' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $::Rule::InterpolateVar, 'new', ::DISPATCH( $::Str, 'new', 'var' )
 => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'variables' )
 )
 )
, )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block19' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $::Rule::SubruleNoCapture, 'new', ::DISPATCH( $::Str, 'new', 'metasyntax' )
 => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'metasyntax' )
 )
 )
, )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block20' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $::Rule::Subrule, 'new', ::DISPATCH( $::Str, 'new', 'metasyntax' )
 => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'metasyntax' )
 )
 )
, )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block21' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $::Rule::Block, 'new', ::DISPATCH( $::Str, 'new', 'closure' )
 => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'parsed_code' )
 )
 )
, )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block22' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $::Rule::SpecialChar, 'new', ::DISPATCH( $::Str, 'new', 'char' )
 => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'any' )
 )
 )
, )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block23' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $::Rule::Dot, 'new', ::DISPATCH( $::Str, 'new', 'dot' )
 => ::DISPATCH( $::Int, 'new', 1 )
, )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block24' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'rule' )
 )
 )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block25' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $::Rule::NamedCapture, 'new', ::DISPATCH( $::Str, 'new', 'rule' )
 => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'rule' )
 )
 )
,::DISPATCH( $::Str, 'new', 'ident' )
 => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'ident' )
 )
 )
, )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block26' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $::Rule::NamedCapture, 'new', ::DISPATCH( $::Str, 'new', 'rule' )
 => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'named_capture_body' )
 )
 )
,::DISPATCH( $::Str, 'new', 'ident' )
 => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'variables' )
 )
 )
, )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block27' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'variables' )
 )
 )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block28' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'rule_terms' )
 )
 )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block29' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $::Rule::Constant, 'new', ::DISPATCH( $::Str, 'new', 'constant' )
 => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'any' )
 )
 )
, )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block30' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $::Hash, "new", { _hash => { ::DISPATCH( $::Str, 'new', 'closure' )
->{_value} => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'parsed_code' )
 )
 )
, } } )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block31' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $::Rule::Quantifier, 'new', ::DISPATCH( $::Str, 'new', 'term' )
 => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'term' )
 )
 )
,::DISPATCH( $::Str, 'new', 'quant' )
 => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'quant' )
 )
 )
,::DISPATCH( $::Str, 'new', 'greedy' )
 => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'greedy' )
 )
 )
,::DISPATCH( $::Str, 'new', 'ws1' )
 => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'KindaPerl6::Grammar.opt_ws' )
 )
 )
,::DISPATCH( $::Str, 'new', 'ws2' )
 => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'KindaPerl6::Grammar.opt_ws2' )
 )
 )
,::DISPATCH( $::Str, 'new', 'ws3' )
 => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'KindaPerl6::Grammar.opt_ws3' )
 )
 )
, )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block32' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'term' )
 )
 )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block33' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $::Array, "new", { _array => [::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'quantifier' )
 )
 )
, ::DISPATCH( $GLOBAL::Code_prefix_58__60__64__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'concat_list' )
 )
 )
 )
] } )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block34' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $::Array, "new", { _array => [::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'quantifier' )
 )
 )
] } )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block35' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $::Array, "new", { _array => [] } )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block36' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $::Rule::Concat, 'new', ::DISPATCH( $::Str, 'new', 'concat' )
 => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'concat_list' )
 )
 )
, )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block37' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $::Array, "new", { _array => [::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'concat' )
 )
 )
, ::DISPATCH( $GLOBAL::Code_prefix_58__60__64__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'or_list' )
 )
 )
 )
] } )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block38' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $::Array, "new", { _array => [::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'concat' )
 )
 )
] } )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block39' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $::Array, "new", { _array => [] } )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block40' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $::Rule::Or, 'new', ::DISPATCH( $::Str, 'new', 'or' )
 => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'or_list' )
 )
 )
, )
)
 }
 )
 )
; $Hash_rule_terms
; 1 }

