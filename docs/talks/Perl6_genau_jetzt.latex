\documentclass{beamer}
\usepackage{amsmath}
\usepackage{url}
\usepackage{ucs}
\usepackage[utf8]{inputenc}
\usepackage[ngerman]{babel}
% This is a not yet finished (German) talk I'll hold at the next meeting of the
% Linux User Group Augsburg (LUGA) (on 2005-05-04).
% 
% Compile to PDF using...
%   $ pdflatex Perl6_genau_jetzt.latex
% 
% Feel free to add/change contents (don't forget to add you to the author
% list)!
% This is an experiment -- I don't think many people have used Subversion to
% collaboratively create a talk. :)
% 
% As this talk is German, the following comments are German, too.

% Zielgruppe dieses Vortrags:
% Linux-Benutzer mit Programmiererfahrung in mindestens einer Sprache (bei den
% Codebeispielen unten sind überall auch Entsprechungen in anderen Sprachen als
% Perl 5 und 6 angegeben).

% \begin{langs}
%   Perl 5: \> ... \\
%   Perl 6: \> ... \\
%   \hr
%   Ruby: \> ... \\
%   (...)
% \end{langs}
\newenvironment{langs}{
  \begin{tabbing}
    Haskell: \= ... \kill
}{\end{tabbing}}

% Manual syntax highlighting
\newcommand{\synfunc}   [1]{\color{blue!50!black}#1\color{black}}
\newcommand{\synstr}    [1]{\color{red!50!black}#1\color{black}}
\newcommand{\synvar}    [1]{\color{purple!50!black}#1\color{black}}
\newcommand{\synclass}  [1]{\color{green!50!black}#1\color{black}}
\newcommand{\syncomment}[1]{\color{blue!20!black}#1\color{black}}
\newcommand{\synoder}      {\ \ \color{black}$\vee$\ \ }
\newcommand{\hr}        {\rule[4pt]{\textwidth}{0.1pt}\\}

\title{Perl 6, genau jetzt!}
\author{Ingo Blechschmidt \\\texttt{<iblech@web.de>}}
\institute{LUGA}
\date{4. Mai 2005}
% Outline:
%   - Perl 6
%     - Geschichte
%     - Code-Beispiele (mit Vergleichen zu vielen anderen Sprachen)
%     - Mitgestaltungsmöglichkeiten, etc.
%   - Parrot
%     - Entstehung
%     - Design
%   - Pugs
%     - Entstehung
%     - Überblick
%     - "Wie helfe ich?"
%   - Ausblick
%     - Perl 6 rockz
%     - Dank Pugs schon jetzt benutzbar
%     - "Man darf gespannt sein"

\usetheme{Warsaw}
\usecolortheme{seahorse}

\begin{document}

\frame{\titlepage}

\section{}
\frame{
  \frametitle{Inhalt}
  \tableofcontents
}

\section{Entstehung}
\frame{
  \frametitle{Entstehungsgeschichte}
  \begin{itemize}
    \item Aprilscherz: Kombination von Perl 5 und Python → Parrot
    \item ...
  \end{itemize}
}

\section{Einf"uhrungsbeispiele}
\subsection{"`Hello World"'}
\frame{
  \frametitle{"`Hello World"'}
  \begin{langs}
    Perl 6:  \> \texttt{\synfunc{say}\ \ \ "\synstr{Hello, World!}";} \\
    Perl 5:  \> \texttt{\synfunc{print}\ "\synstr{Hello, World!\textbackslash{}n}";} \\
    \hr
    C:       \> \texttt{\synfunc{printf}("\synstr{\%s}", "\synstr{Hello, World!\textbackslash{}n}");} \\
    Haskell: \> \texttt{\synfunc{putStrLn}\ "\synstr{Hello, World!}"} \\
    Lua:     \> \texttt{\synfunc{print}\ "\synstr{Hello, World!}";} \\
    PHP:     \> \texttt{\synfunc{print}("\synstr{Hello, World!\textbackslash{}n}");} \\
    Python:  \> \texttt{\synfunc{print}\ "\synstr{Hello, World!}"} \\
    Ruby:    \> \texttt{\synfunc{puts}\ \ "\synstr{Hello, World!}"} \\
    Shell:   \> \texttt{\synfunc{echo}\ \ "\synstr{Hello, World!}"} \\
    Tcl:     \> \texttt{\synfunc{puts}\ \ "\synstr{Hello, World!}"}
  \end{langs}
}

\subsection{Tastatureingabe}
\frame{
  \frametitle{Tastatureingabe}
  \begin{langs}
    Perl 6:  \> \texttt{\synfunc{my}\ \synvar{\${}text}\ = =\synvar{\${}*IN};} \\
    Perl 5:  \> \texttt{\synfunc{my}\ \synvar{\${}text}\ = <\synvar{STDIN}>;} \\
    \hr
    C:       \> \texttt{\synfunc{scanf}("\synstr{\%s}", \&{}\synvar{text});} \\
    Haskell: \> \texttt{\synvar{x}\ <- \synfunc{getLine}} \\
    Lua:     \> \texttt{\synvar{text}\ = \synfunc{io.read}()} \\
    PHP:     \> \texttt{\synvar{\${}text}\ = \synfunc{readline}();} \\
    Python:  \> \texttt{\synvar{text}\ = \synfunc{sys.stdin.readline}()} \\
    Ruby:    \> \texttt{\synvar{text}\ = \synfunc{gets}} \\
    Shell:   \> \texttt{\synfunc{read}\ \synvar{text}} \\
    Tcl:     \> \texttt{\synfunc{set}\ \synvar{text}\ [\synfunc{gets}\ \synvar{stdin}]}
  \end{langs}
}

\subsection{Subroutines}
\frame{
  \frametitle{Subroutines -- Definition}
  \begin{langs}
    Perl 6:  \> \texttt{\synfunc{sub}\ \synvar{foo}(\synclass{Num}\ \synvar{\${}i}) \{ \synfunc{say}\ \synvar{\$i}\ + 3 \}} \\
    Perl 5:  \> \texttt{\synfunc{sub}\ \synvar{foo}\ \{ \synfunc{my}\ \synvar{\${}i}\ = \synfunc{shift}; \synfunc{print}\ \synvar{\${}i}\ + 3, "\synstr{\textbackslash{}n}"\ \} } \\
    \hr
    C:       \> \texttt{\synclass{void}\ \synvar{foo}(\synclass{float}\ i) \{ \synfunc{printf}("\synstr{\%f\textbackslash{}n}", i + 3); \}} \\
    Haskell: \> \texttt{\synvar{foo}\ \synvar{i}\ = \synfunc{putStrLn}\ . \synfunc{show}\ \${} \synvar{i}\ + 3} \\
    Lua:     \> \texttt{\synfunc{function}\ \synvar{foo}(\synvar{i}) \synfunc{print}(\synvar{i}\ + 3) \synfunc{end}} \\
    PHP:     \> \texttt{\synfunc{function}\ \synvar{foo}(\synvar{\${}i}) \{ \synfunc{print}(\synvar{\${}i}\ + 3); \}} \\
    Python:  \> \texttt{\synfunc{def}\ \synvar{foo}(\synvar{i}): \synfunc{print}\ \synvar{i}\ + 3} \\
    Ruby:    \> \texttt{\synfunc{def}\ \synvar{foo}(\synvar{i}) \synfunc{puts}\ \synvar{i}\ + 3 \synfunc{end}} \\
    Shell:   \> \texttt{\synfunc{function}\ \synvar{foo}\ \{ \synfunc{echo}\ \${}((\${}1 + 3)); \}} \\
    Tcl:     \> \texttt{\synfunc{proc}\ \synvar{foo}\ \{\synvar{i}\} \{ \synfunc{puts}\ [\synfunc{expr}\ \${}\synvar{i}\ + 3] \}}
  \end{langs}
}

\frame{
  \frametitle{Subroutines -- Aufruf}
  \begin{langs}
    Perl 6:  \> \texttt{\synvar{foo}\ 42; \synoder \synvar{foo}\ \synstr{i}\ => 42; \synoder \synvar{foo}\ :\synstr{i}(42);} \\
    Perl 5:  \> \texttt{\synvar{foo}\ 42;}\\
    \hr
    C:       \> \texttt{\synvar{foo}(42);}\\
    Haskell: \> \texttt{\synvar{foo}\ 42}\\
    Lua:     \> \texttt{\synvar{foo}(42)}\\
    PHP:     \> \texttt{\synvar{foo}(42);}\\
    Python:  \> \texttt{\synvar{foo}(42)}\\
    Ruby:    \> \texttt{\synvar{foo}\ 42}\\
    Shell:   \> \texttt{\synvar{foo}\ 42}\\
    Tcl:     \> \texttt{\synvar{foo}\ 42}\\
  \end{langs}
}

\section{Objektorientierung}
\subsection{Klassendefinition und -instantiierung in anderen Sprachen}
\frame{
  \frametitle{Klassendefinition und -instantiierung in anderen Sprachen}
  \begin{block}{Perl 5}\texttt{%
    \synfunc{package}\ \synclass{Foo};\\
    \synfunc{sub}\ \synvar{new}\ \ \ \ \ \ \ \ \ \{ \synfunc{bless}\ \{\}, \synfunc{shift}\ \}\\
    \synfunc{sub}\ \synvar{hallo}\ \ \ \ \ \ \ \{ "\synstr{Hallo}\ "\ . \synvar{\$\_}[1] . "\synstr{!}"\ \}\\
    \synfunc{sub}\ \synvar{bar}\ :lvalue \{ \synvar{\$\_}[0]->\{\synstr{foo}\} \}\\
    \ \\
    \ \\
    \ \\
    \syncomment{\# Dann:}\\
    \synfunc{my}\ \synvar{\$obj}\ = \synclass{Foo}->\synvar{new};\\
    \synvar{\$obj}->\synvar{bar}\ = 42;\\
    \synfunc{print}\ \synvar{\$obj}->\synvar{hallo}("\synstr{Ingo}");\\
  }\end{block}
}

\frame{
  \frametitle{Klassendefinition und -instantiierung in anderen Sprachen}

  \begin{block}{PHP}\texttt{%
    \synfunc{class}\ \synclass{Foo}\ \{\\
    \ \ \synfunc{var}\ \synvar{\$bar};\\
    \ \ \synfunc{function}\ \synvar{hallo}(\synvar{\$name}) \{\\
    \ \ \ \ \synfunc{return}\ "\synstr{Hallo }\synvar{\$name}\synstr{!}";\\
    \ \ \}\\
    \}\\
    \ \\
    \syncomment{\# Dann:}\\
    \synvar{\$obj}\ = \synfunc{new}\ \synclass{Foo}();\\
    \synvar{\$obj}->\synvar{bar}\ = 42;\\
    \synfunc{print}\ \synvar{\$obj}->\synvar{hallo}("\synstr{Ingo}");\\
  }\end{block}
}

\frame{
  \frametitle{Klassendefinition und -instantiierung in anderen Sprachen}

  \begin{block}{Python}\texttt{%
    \synfunc{class}\ \synclass{Foo}:\\
    \ \ \synvar{bar}\ = \synvar{None}\\
    \ \ \synfunc{def}\ \synvar{hallo}(\synvar{self}, \synvar{name}):\\
    \ \ \ \ \synfunc{return}\ "\synstr{Hallo \%s!}"\ \% \synvar{name}\\
    \ \\
    \ \\
    \ \\
    \syncomment{\# Dann:}\\
    \synvar{obj}\ = \synclass{Foo}()\\
    \synvar{obj}.\synvar{bar}\ = 42\\
    \synfunc{print}\ \synvar{obj}.\synvar{hallo}("\synstr{Ingo}")\\
  }\end{block}
}

\frame{
  \frametitle{Klassendefinition und -instantiierung in anderen Sprachen}

  \begin{block}{Ruby}\texttt{%
    \synfunc{class}\ \synclass{Foo}\\
    \ \ \synfunc{attr\_accessor}\ :\synvar{bar}\\
    \ \ \synfunc{def}\ \synvar{hallo}(\synvar{name})\\
    \ \ \ \ \synfunc{return}\ "\synstr{Hallo \#\{}\synvar{name}\synstr{\}!}"\\
    \ \ \synfunc{end}\\
    \synfunc{end}\\
    \ \\
    \syncomment{\# Dann:}\\
    \synvar{obj}\ = \synclass{Foo}.\synvar{new}\\
    \synvar{obj}.\synvar{bar}\ = 42\\
    \synfunc{puts}\ \synvar{obj}.\synvar{hallo}("\synstr{Ingo}")\\
  }\end{block}
}

\subsection{Klassendefinition und -instantiierung in Perl 6}
\frame{
  \frametitle{Klassendefinition und -instantiierung in Perl 6}
  \begin{block}{Perl 6}\texttt{%
    \synfunc{class}\ \synclass{Foo}\ \only<4>{\synfunc{is}\ \synclass{Baz}\ }\{\\
      \only<1> {\ \ \synfunc{has}\ \synvar{\${}.bar};\\}
      \only<2->{\ \ \synfunc{has}\ \synvar{\${}.bar}\ \synfunc{is}\ \synvar{rw};\\}
      \ \ \synfunc{method}\ \synvar{hallo}(\synclass{Str}\ \synvar{\$name}) \{\\
      \ \ \ \ \synfunc{return}\ "\synstr{Hallo \{}\synvar{\$name}\synstr{\}!}";\\
      \ \ \}\\
    \}\\
    \ \\
    \syncomment{\# Dann:}\\
    \synfunc{my}\ \synvar{\$obj}\ = \synclass{Foo}.\synvar{new};\\
    \only<1> {\synfunc{say}\ \synvar{\$obj}.\synvar{bar};\\}
    \only<2->{\synvar{\$obj}.\synvar{bar}\ = 42;\\}
    \only<1-2>{\synfunc{say}\ \synvar{\$obj}.\synvar{hallo}("\synstr{Ingo}");\\}
    \only<3-> {\synfunc{say}\ \synvar{hallo}\ \synvar{\$obj}: "\synstr{Ingo}";\\}
  }\end{block}
}

\subsection{Rollen in Perl 6}
\frame{
  \frametitle{Rollen}

  \texttt{%
    \synfunc{role}\ \synclass{Num::Cool}\ \{\\
    \ \ \synfunc{method}\ \synvar{sei\_cool}(\synvar{\$self}:) \{\\
    \ \ \ \ \synvar{\$self}\ = 42;\\
    \ \ \}\\
    \}\\
    \ \\
    \syncomment{\# Dann:}\\
    \synfunc{my}\ \synvar{\$num}\ = 23;\\
    \only<1>{\synvar{\$num}\ \synfunc{does}\ \synclass{Num::Cool};\\}
    \only<2>{\synclass{Num}\ \synfunc{does}\ \synclass{Num::Cool};\\}
    \synvar{\$num}.\synvar{sei\_cool}();\\
    \synfunc{say}\ \synvar{\$num};\ \ \ \ \ \ \syncomment{\# 42}\\
  }
}


% In der bisher noch ungeschriebenen \section über Pugs unbedingt die Sachen
% von http://sial.org/pbot/9451 einbringen! Thanks nothingmuch!

\end{document}
