# Do not edit this file - Generated by MiniPerl6
use v5;
use strict;
use MiniPerl6::Perl5::Runtime;
use MiniPerl6::Perl5::Match;
package CompUnit; sub new { shift; bless { @_ }, "CompUnit" } sub name { @_ == 1 ? ( $_[0]->{name} ) : ( $_[0]->{name} = $_[1] ) }; sub attributes { @_ == 1 ? ( $_[0]->{attributes} ) : ( $_[0]->{attributes} = $_[1] ) }; sub methods { @_ == 1 ? ( $_[0]->{methods} ) : ( $_[0]->{methods} = $_[1] ) }; sub body { @_ == 1 ? ( $_[0]->{body} ) : ( $_[0]->{body} = $_[1] ) }; sub emit { my $self = $_[0]; ('package ' . ($_[0]->{name} . ('; ' . ('sub new { shift; bless { @_ }, "' . ($_[0]->{name} . ('" }' . (' ' . Main::join([ map { $_->emit() } @{ $_[0]->{body} } ], '; ')))))))) }
;
package Val::Int; sub new { shift; bless { @_ }, "Val::Int" } sub int { @_ == 1 ? ( $_[0]->{int} ) : ( $_[0]->{int} = $_[1] ) }; sub emit { my $self = $_[0]; $_[0]->{int} }
;
package Val::Bit; sub new { shift; bless { @_ }, "Val::Bit" } sub bit { @_ == 1 ? ( $_[0]->{bit} ) : ( $_[0]->{bit} = $_[1] ) }; sub emit { my $self = $_[0]; $_[0]->{bit} }
;
package Val::Num; sub new { shift; bless { @_ }, "Val::Num" } sub num { @_ == 1 ? ( $_[0]->{num} ) : ( $_[0]->{num} = $_[1] ) }; sub emit { my $self = $_[0]; $_[0]->{num} }
;
package Val::Buf; sub new { shift; bless { @_ }, "Val::Buf" } sub buf { @_ == 1 ? ( $_[0]->{buf} ) : ( $_[0]->{buf} = $_[1] ) }; sub emit { my $self = $_[0]; ('\'' . ($_[0]->{buf} . '\'')) }
;
package Val::Undef; sub new { shift; bless { @_ }, "Val::Undef" } sub emit { my $self = $_[0]; '(undef)' }
;
package Val::Object; sub new { shift; bless { @_ }, "Val::Object" } sub class { @_ == 1 ? ( $_[0]->{class} ) : ( $_[0]->{class} = $_[1] ) }; sub fields { @_ == 1 ? ( $_[0]->{fields} ) : ( $_[0]->{fields} = $_[1] ) }; sub emit { my $self = $_[0]; ('bless(' . (Main::perl($_[0]->{fields}, ) . (', ' . (Main::perl($_[0]->{class}, ) . ')')))) }
;
package Lit::Seq; sub new { shift; bless { @_ }, "Lit::Seq" } sub seq { @_ == 1 ? ( $_[0]->{seq} ) : ( $_[0]->{seq} = $_[1] ) }; sub emit { my $self = $_[0]; ('(' . (Main::join([ map { $_->emit() } @{ $_[0]->{seq} } ], ', ') . ')')) }
;
package Lit::Array; sub new { shift; bless { @_ }, "Lit::Array" } sub array { @_ == 1 ? ( $_[0]->{array} ) : ( $_[0]->{array} = $_[1] ) }; sub emit { my $self = $_[0]; ('[' . (Main::join([ map { $_->emit() } @{ $_[0]->{array} } ], ', ') . ']')) }
;
package Lit::Hash; sub new { shift; bless { @_ }, "Lit::Hash" } sub hash { @_ == 1 ? ( $_[0]->{hash} ) : ( $_[0]->{hash} = $_[1] ) }; sub emit { my $self = $_[0]; my  $fields = $_[0]->{hash}; my  $str = ''; do { for my $field ( @{$fields} ) { $str = ($str . ($field->[0]->emit() . (' => ' . ($field->[1]->emit() . ',')))) } }; ('{ ' . ($str . ' }')) }
;
package Lit::Code; sub new { shift; bless { @_ }, "Lit::Code" } 1
;
package Lit::Object; sub new { shift; bless { @_ }, "Lit::Object" } sub class { @_ == 1 ? ( $_[0]->{class} ) : ( $_[0]->{class} = $_[1] ) }; sub fields { @_ == 1 ? ( $_[0]->{fields} ) : ( $_[0]->{fields} = $_[1] ) }; sub emit { my $self = $_[0]; my  $fields = $_[0]->{fields}; my  $str = ''; do { for my $field ( @{$fields} ) { $str = ($str . ($field->[0]->emit() . (' => ' . ($field->[1]->emit() . ',')))) } }; ($_[0]->{class} . ('->new( ' . ($str . ' )'))) }
;
package Index; sub new { shift; bless { @_ }, "Index" } sub obj { @_ == 1 ? ( $_[0]->{obj} ) : ( $_[0]->{obj} = $_[1] ) }; sub index { @_ == 1 ? ( $_[0]->{index} ) : ( $_[0]->{index} = $_[1] ) }; sub emit { my $self = $_[0]; ($_[0]->{obj}->emit() . ('->[' . ($_[0]->{index}->emit() . ']'))) }
;
package Lookup; sub new { shift; bless { @_ }, "Lookup" } sub obj { @_ == 1 ? ( $_[0]->{obj} ) : ( $_[0]->{obj} = $_[1] ) }; sub index { @_ == 1 ? ( $_[0]->{index} ) : ( $_[0]->{index} = $_[1] ) }; sub emit { my $self = $_[0]; ($_[0]->{obj}->emit() . ('->{' . ($_[0]->{index}->emit() . '}'))) }
;
package Var; sub new { shift; bless { @_ }, "Var" } sub sigil { @_ == 1 ? ( $_[0]->{sigil} ) : ( $_[0]->{sigil} = $_[1] ) }; sub twigil { @_ == 1 ? ( $_[0]->{twigil} ) : ( $_[0]->{twigil} = $_[1] ) }; sub name { @_ == 1 ? ( $_[0]->{name} ) : ( $_[0]->{name} = $_[1] ) }; sub emit { my $self = $_[0]; my  $table = { '$' => '$','@' => '$List_','%' => '$Hash_','&' => '$Code_', }; (($_[0]->{twigil} eq '.') ? ('$_[0]->{' . ($_[0]->{name} . '}')) : (($_[0]->{name} eq '/') ? ($table->{$_[0]->{sigil}} . 'MATCH') : ($table->{$_[0]->{sigil}} . $_[0]->{name}))) }; sub name { my $self = $_[0]; $_[0]->{name} }
;
package Bind; sub new { shift; bless { @_ }, "Bind" } sub parameters { @_ == 1 ? ( $_[0]->{parameters} ) : ( $_[0]->{parameters} = $_[1] ) }; sub arguments { @_ == 1 ? ( $_[0]->{arguments} ) : ( $_[0]->{arguments} = $_[1] ) }; sub emit { my $self = $_[0]; do { if (Main::isa($_[0]->{parameters}, 'Lit::Array')) { my  $a = $_[0]->{parameters}->array();my  $b = $_[0]->{arguments}->array();my  $str = 'do { ';my  $i = 0;do { for my $var ( @{$a} ) { my  $bind = Bind->new( 'parameters' => $var,'arguments' => $b->[$i], );$str = ($str . (' ' . ($bind->emit() . '; ')));$i = ($i + 1) } };return(($str . ($_[0]->{parameters}->emit() . ' }'))) } else {  } }; do { if (Main::isa($_[0]->{parameters}, 'Lit::Hash')) { my  $a = $_[0]->{parameters}->hash();my  $b = $_[0]->{arguments}->hash();my  $str = 'do { ';my  $i = 0;do { for my $var ( @{$a} ) { my  $bind = Bind->new( 'parameters' => $var->[0],'arguments' => $b->[$i]->[1], );$str = ($str . (' ' . ($bind->emit() . '; ')));$i = ($i + 1) } };return(($str . ($_[0]->{parameters}->emit() . ' }'))) } else {  } }; ($_[0]->{parameters}->emit() . (' = ' . $_[0]->{arguments}->emit())) }
;
package Proto; sub new { shift; bless { @_ }, "Proto" } sub name { @_ == 1 ? ( $_[0]->{name} ) : ( $_[0]->{name} = $_[1] ) }; sub emit { my $self = $_[0]; ("" . $_[0]->{name}) }
;
package Call; sub new { shift; bless { @_ }, "Call" } sub invocant { @_ == 1 ? ( $_[0]->{invocant} ) : ( $_[0]->{invocant} = $_[1] ) }; sub hyper { @_ == 1 ? ( $_[0]->{hyper} ) : ( $_[0]->{hyper} = $_[1] ) }; sub method { @_ == 1 ? ( $_[0]->{method} ) : ( $_[0]->{method} = $_[1] ) }; sub arguments { @_ == 1 ? ( $_[0]->{arguments} ) : ( $_[0]->{arguments} = $_[1] ) }; sub hyper { @_ == 1 ? ( $_[0]->{hyper} ) : ( $_[0]->{hyper} = $_[1] ) }; sub emit { my $self = $_[0]; do { if ((($_[0]->{method} eq 'perl') || (($_[0]->{method} eq 'yaml') || (($_[0]->{method} eq 'say') || (($_[0]->{method} eq 'join') || (($_[0]->{method} eq 'chars') || ($_[0]->{method} eq 'isa'))))))) { do { if ($_[0]->{hyper}) { return(('[ map { Main::' . ($_[0]->{method} . ('( $_, ' . (', ' . (Main::join([ map { $_->emit() } @{ $_[0]->{arguments} } ], ', ') . (')' . (' } @{ ' . ($_[0]->{invocant}->emit() . ' } ]'))))))))) } else { return(('Main::' . ($_[0]->{method} . ('(' . ($_[0]->{invocant}->emit() . (', ' . (Main::join([ map { $_->emit() } @{ $_[0]->{arguments} } ], ', ') . ')'))))))) } } } else {  } }; my  $meth = $_[0]->{method}; do { if (($meth eq 'postcircumfix:<( )>')) { $meth = '' } else {  } }; my  $call = ('->' . ($meth . ('(' . (Main::join([ map { $_->emit() } @{ $_[0]->{arguments} } ], ', ') . ')')))); do { if ($_[0]->{hyper}) { ('[ map { $_' . ($call . (' } @{ ' . ($_[0]->{invocant}->emit() . ' } ]')))) } else { ($_[0]->{invocant}->emit() . $call) } } }
;
package Apply; sub new { shift; bless { @_ }, "Apply" } sub code { @_ == 1 ? ( $_[0]->{code} ) : ( $_[0]->{code} = $_[1] ) }; sub arguments { @_ == 1 ? ( $_[0]->{arguments} ) : ( $_[0]->{arguments} = $_[1] ) }; sub emit { my $self = $_[0]; my  $code = $_[0]->{code}; do { if (($code eq 'say')) { return(('Main::say(' . (Main::join([ map { $_->emit() } @{ $_[0]->{arguments} } ], ', ') . ')'))) } else {  } }; do { if (($code eq 'print')) { return(('Main::print(' . (Main::join([ map { $_->emit() } @{ $_[0]->{arguments} } ], ', ') . ')'))) } else {  } }; do { if (($code eq 'array')) { return(('@{' . (Main::join([ map { $_->emit() } @{ $_[0]->{arguments} } ], ' ') . '}'))) } else {  } }; do { if (($code eq 'prefix:<~>')) { return(('("" . ' . (Main::join([ map { $_->emit() } @{ $_[0]->{arguments} } ], ' ') . ')'))) } else {  } }; do { if (($code eq 'prefix:<!>')) { return(('(' . (Main::join([ map { $_->emit() } @{ $_[0]->{arguments} } ], ' ') . ' ? 0 : 1)'))) } else {  } }; do { if (($code eq 'prefix:<?>')) { return(('(' . (Main::join([ map { $_->emit() } @{ $_[0]->{arguments} } ], ' ') . ' ? 1 : 0)'))) } else {  } }; do { if (($code eq 'prefix:<$>')) { return(('${' . (Main::join([ map { $_->emit() } @{ $_[0]->{arguments} } ], ' ') . '}'))) } else {  } }; do { if (($code eq 'prefix:<@>')) { return(('@{' . (Main::join([ map { $_->emit() } @{ $_[0]->{arguments} } ], ' ') . '}'))) } else {  } }; do { if (($code eq 'prefix:<%>')) { return(('%{' . (Main::join([ map { $_->emit() } @{ $_[0]->{arguments} } ], ' ') . '}'))) } else {  } }; do { if (($code eq 'infix:<~>')) { return(('(' . (Main::join([ map { $_->emit() } @{ $_[0]->{arguments} } ], ' . ') . ')'))) } else {  } }; do { if (($code eq 'infix:<+>')) { return(('(' . (Main::join([ map { $_->emit() } @{ $_[0]->{arguments} } ], ' + ') . ')'))) } else {  } }; do { if (($code eq 'infix:<->')) { return(('(' . (Main::join([ map { $_->emit() } @{ $_[0]->{arguments} } ], ' - ') . ')'))) } else {  } }; do { if (($code eq 'infix:<&&>')) { return(('(' . (Main::join([ map { $_->emit() } @{ $_[0]->{arguments} } ], ' && ') . ')'))) } else {  } }; do { if (($code eq 'infix:<||>')) { return(('(' . (Main::join([ map { $_->emit() } @{ $_[0]->{arguments} } ], ' || ') . ')'))) } else {  } }; do { if (($code eq 'infix:<eq>')) { return(('(' . (Main::join([ map { $_->emit() } @{ $_[0]->{arguments} } ], ' eq ') . ')'))) } else {  } }; do { if (($code eq 'infix:<ne>')) { return(('(' . (Main::join([ map { $_->emit() } @{ $_[0]->{arguments} } ], ' ne ') . ')'))) } else {  } }; do { if (($code eq 'infix:<==>')) { return(('(' . (Main::join([ map { $_->emit() } @{ $_[0]->{arguments} } ], ' == ') . ')'))) } else {  } }; do { if (($code eq 'infix:<!=>')) { return(('(' . (Main::join([ map { $_->emit() } @{ $_[0]->{arguments} } ], ' != ') . ')'))) } else {  } }; do { if (($code eq 'ternary:<?? ::>')) { return(('(' . ($_[0]->{arguments}->[0]->emit() . (' ? ' . ($_[0]->{arguments}->[1]->emit() . (' : ' . ($_[0]->{arguments}->[2]->emit() . ')'))))))) } else {  } }; ($_[0]->{code} . ('(' . (Main::join([ map { $_->emit() } @{ $_[0]->{arguments} } ], ', ') . ')'))) }
;
package Return; sub new { shift; bless { @_ }, "Return" } sub result { @_ == 1 ? ( $_[0]->{result} ) : ( $_[0]->{result} = $_[1] ) }; sub emit { my $self = $_[0]; ('return(' . ($_[0]->{result}->emit() . ')')) }
;
package If; sub new { shift; bless { @_ }, "If" } sub cond { @_ == 1 ? ( $_[0]->{cond} ) : ( $_[0]->{cond} = $_[1] ) }; sub body { @_ == 1 ? ( $_[0]->{body} ) : ( $_[0]->{body} = $_[1] ) }; sub otherwise { @_ == 1 ? ( $_[0]->{otherwise} ) : ( $_[0]->{otherwise} = $_[1] ) }; sub emit { my $self = $_[0]; ('do { if (' . ($_[0]->{cond}->emit() . (') { ' . (Main::join([ map { $_->emit() } @{ $_[0]->{body} } ], ';') . (' } else { ' . (Main::join([ map { $_->emit() } @{ $_[0]->{otherwise} } ], ';') . ' } }')))))) }
;
package For; sub new { shift; bless { @_ }, "For" } sub cond { @_ == 1 ? ( $_[0]->{cond} ) : ( $_[0]->{cond} = $_[1] ) }; sub body { @_ == 1 ? ( $_[0]->{body} ) : ( $_[0]->{body} = $_[1] ) }; sub topic { @_ == 1 ? ( $_[0]->{topic} ) : ( $_[0]->{topic} = $_[1] ) }; sub emit { my $self = $_[0]; my  $cond = $_[0]->{cond}; do { if ((Main::isa($cond, 'Var') && ($cond->sigil() eq '@'))) { $cond = Apply->new( 'code' => 'prefix:<@>','arguments' => [$cond], ) } else {  } }; ('do { for my ' . ($_[0]->{topic}->emit() . (' ( ' . ($cond->emit() . (' ) { ' . (Main::join([ map { $_->emit() } @{ $_[0]->{body} } ], ';') . ' } }')))))) }
;
package Decl; sub new { shift; bless { @_ }, "Decl" } sub decl { @_ == 1 ? ( $_[0]->{decl} ) : ( $_[0]->{decl} = $_[1] ) }; sub type { @_ == 1 ? ( $_[0]->{type} ) : ( $_[0]->{type} = $_[1] ) }; sub var { @_ == 1 ? ( $_[0]->{var} ) : ( $_[0]->{var} = $_[1] ) }; sub emit { my $self = $_[0]; my  $decl = $_[0]->{decl}; my  $name = $_[0]->{var}->name(); (($decl eq 'has') ? ('sub ' . ($name . (' { ' . ('@_ == 1 ' . ('? ( $_[0]->{' . ($name . ('} ) ' . (': ( $_[0]->{' . ($name . ('} = $_[1] ) ' . '}')))))))))) : ($_[0]->{decl} . (' ' . ($_[0]->{type} . (' ' . $_[0]->{var}->emit()))))) }
;
package Sig; sub new { shift; bless { @_ }, "Sig" } sub invocant { @_ == 1 ? ( $_[0]->{invocant} ) : ( $_[0]->{invocant} = $_[1] ) }; sub positional { @_ == 1 ? ( $_[0]->{positional} ) : ( $_[0]->{positional} = $_[1] ) }; sub named { @_ == 1 ? ( $_[0]->{named} ) : ( $_[0]->{named} = $_[1] ) }; sub emit { my $self = $_[0]; ' print \'Signature - TODO\'; die \'Signature - TODO\'; ' }; sub invocant { my $self = $_[0]; $_[0]->{invocant} }; sub positional { my $self = $_[0]; $_[0]->{positional} }
;
package Method; sub new { shift; bless { @_ }, "Method" } sub name { @_ == 1 ? ( $_[0]->{name} ) : ( $_[0]->{name} = $_[1] ) }; sub sig { @_ == 1 ? ( $_[0]->{sig} ) : ( $_[0]->{sig} = $_[1] ) }; sub block { @_ == 1 ? ( $_[0]->{block} ) : ( $_[0]->{block} = $_[1] ) }; sub emit { my $self = $_[0]; my  $sig = $_[0]->{sig}; my  $invocant = $sig->invocant(); my  $pos = $sig->positional(); my  $str = ''; my  $i = 1; do { for my $field ( @{$pos} ) { $str = ($str . ('my ' . ($field->emit() . (' = $_[' . ($i . ']; ')))));$i = ($i + 1) } }; ('sub ' . ($_[0]->{name} . (' { ' . ('my ' . ($invocant->emit() . (' = $_[0]; ' . ($str . (Main::join([ map { $_->emit() } @{ $_[0]->{block} } ], '; ') . ' }')))))))) }
;
package Sub; sub new { shift; bless { @_ }, "Sub" } sub name { @_ == 1 ? ( $_[0]->{name} ) : ( $_[0]->{name} = $_[1] ) }; sub sig { @_ == 1 ? ( $_[0]->{sig} ) : ( $_[0]->{sig} = $_[1] ) }; sub block { @_ == 1 ? ( $_[0]->{block} ) : ( $_[0]->{block} = $_[1] ) }; sub emit { my $self = $_[0]; my  $sig = $_[0]->{sig}; my  $pos = $sig->positional(); my  $str = ''; my  $i = 0; do { for my $field ( @{$pos} ) { $str = ($str . ('my ' . ($field->emit() . (' = $_[' . ($i . ']; ')))));$i = ($i + 1) } }; ('sub ' . ($_[0]->{name} . (' { ' . ($str . (Main::join([ map { $_->emit() } @{ $_[0]->{block} } ], '; ') . ' }'))))) }
;
package Do; sub new { shift; bless { @_ }, "Do" } sub block { @_ == 1 ? ( $_[0]->{block} ) : ( $_[0]->{block} = $_[1] ) }; sub emit { my $self = $_[0]; ('do { ' . (Main::join([ map { $_->emit() } @{ $_[0]->{block} } ], '; ') . ' }')) }
;
package Use; sub new { shift; bless { @_ }, "Use" } sub mod { @_ == 1 ? ( $_[0]->{mod} ) : ( $_[0]->{mod} = $_[1] ) }; sub emit { my $self = $_[0]; ('use ' . $_[0]->{mod}) }
;
1;
