::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Token(
                regex => ::Rule::Or(
                    or => [
                        ::Rule::Concat(
                            concat => [
                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'full_ident', ident => '', ),
                                ::Rule::SubruleNoCapture( metasyntax => 'dot', ),
                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'hyper_op', ident => '', ),
                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'ident',    ident => '', ),
                                ::Rule::Or(
                                    or => [
                                        ::Rule::Concat(
                                            concat => [
                                                ::Rule::SpecialChar( char => '(', ),
                                                ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'exp_parameter_list', ident => '', ),
                                                ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                                ::Rule::SpecialChar( char => ')', ),
                                            ],
                                        ),
                                        ::Rule::Concat(
                                            concat => [
                                                ::Rule::SpecialChar( char => ':', ),
                                                ::Rule::SubruleNoCapture( metasyntax => 'ws', ),
                                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'exp_parameter_list', ident => '', ),
                                                ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                            ],
                                        ),
                                        ::Rule::Concat(
                                            concat => [
                                                ::Rule::Block(
                                                    closure => ::Lit::Code(
                                                        body => [
                                                            ::Apply(
                                                                arguments => [
                                                                    ::Call(
                                                                        hyper     => '',
                                                                        arguments => [
                                                                            ::Lit::Pair(
                                                                                value => ::Call(
                                                                                    hyper     => '',
                                                                                    arguments => [
                                                                                        ::Lit::Pair(
                                                                                            value => ::Apply(
                                                                                                arguments => [
                                                                                                    ::Call(
                                                                                                        hyper     => '',
                                                                                                        arguments => [ ::Val::Buf( buf => 'full_ident', ), ],
                                                                                                        method    => 'LOOKUP',
                                                                                                        invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                                    ),
                                                                                                ],
                                                                                                code => ::Var( namespace => [], name => 'prefix:<~>', twigil => '', sigil => '&', ),
                                                                                            ),
                                                                                            key => ::Val::Buf( buf => 'name', ),
                                                                                        ),
                                                                                    ],
                                                                                    method   => 'new',
                                                                                    invocant => ::Proto( name => 'Proto', ),
                                                                                ),
                                                                                key => ::Val::Buf( buf => 'invocant', ),
                                                                            ),
                                                                            ::Lit::Pair(
                                                                                value => ::Apply(
                                                                                    arguments => [
                                                                                        ::Call(
                                                                                            hyper     => '',
                                                                                            arguments => [ ::Val::Buf( buf => 'ident', ), ],
                                                                                            method    => 'LOOKUP',
                                                                                            invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                        ),
                                                                                    ],
                                                                                    code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                                ),
                                                                                key => ::Val::Buf( buf => 'method', ),
                                                                            ),
                                                                            ::Lit::Pair( value => ::Val::Undef(), key => ::Val::Buf( buf => 'arguments', ), ),
                                                                            ::Lit::Pair(
                                                                                value => ::Apply(
                                                                                    arguments => [
                                                                                        ::Call(
                                                                                            hyper     => '',
                                                                                            arguments => [ ::Val::Buf( buf => 'hyper_op', ), ],
                                                                                            method    => 'LOOKUP',
                                                                                            invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                        ),
                                                                                    ],
                                                                                    code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                                ),
                                                                                key => ::Val::Buf( buf => 'hyper', ),
                                                                            ),
                                                                        ],
                                                                        method   => 'new',
                                                                        invocant => ::Proto( name => 'Call', ),
                                                                    ),
                                                                ],
                                                                code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                                            ),
                                                        ],
                                                        sig => ::Sig( invocant => '', positional => [], ),
                                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                        CATCH => '',
                                                        state => {},
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ],
                                ),
                                ::Rule::Block(
                                    closure => ::Lit::Code(
                                        body => [
                                            ::Apply(
                                                arguments => [
                                                    ::Call(
                                                        hyper     => '',
                                                        arguments => [
                                                            ::Lit::Pair(
                                                                value => ::Call(
                                                                    hyper     => '',
                                                                    arguments => [
                                                                        ::Lit::Pair(
                                                                            value => ::Apply(
                                                                                arguments => [
                                                                                    ::Call(
                                                                                        hyper     => '',
                                                                                        arguments => [ ::Val::Buf( buf => 'full_ident', ), ],
                                                                                        method    => 'LOOKUP',
                                                                                        invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                    ),
                                                                                ],
                                                                                code => ::Var( namespace => [], name => 'prefix:<~>', twigil => '', sigil => '&', ),
                                                                            ),
                                                                            key => ::Val::Buf( buf => 'name', ),
                                                                        ),
                                                                    ],
                                                                    method   => 'new',
                                                                    invocant => ::Proto( name => 'Proto', ),
                                                                ),
                                                                key => ::Val::Buf( buf => 'invocant', ),
                                                            ),
                                                            ::Lit::Pair(
                                                                value => ::Apply(
                                                                    arguments =>
                                                                        [ ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'ident', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ), ],
                                                                    code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                ),
                                                                key => ::Val::Buf( buf => 'method', ),
                                                            ),
                                                            ::Lit::Pair(
                                                                value => ::Apply(
                                                                    arguments => [
                                                                        ::Call(
                                                                            hyper     => '',
                                                                            arguments => [ ::Val::Buf( buf => 'exp_parameter_list', ), ],
                                                                            method    => 'LOOKUP',
                                                                            invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                        ),
                                                                    ],
                                                                    code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                ),
                                                                key => ::Val::Buf( buf => 'arguments', ),
                                                            ),
                                                            ::Lit::Pair(
                                                                value => ::Apply(
                                                                    arguments => [
                                                                        ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'hyper_op', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ),
                                                                    ],
                                                                    code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                ),
                                                                key => ::Val::Buf( buf => 'hyper', ),
                                                            ),
                                                        ],
                                                        method   => 'new',
                                                        invocant => ::Proto( name => 'Call', ),
                                                    ),
                                                ],
                                                code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                            ),
                                        ],
                                        sig => ::Sig( invocant => '', positional => [], ),
                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                        CATCH => '',
                                        state => {},
                                    ),
                                ),
                            ],
                        ),
                        ::Rule::Concat(
                            concat => [
                                ::Rule::Constant( constant => '...', ),
                                ::Rule::Block(
                                    closure => ::Lit::Code(
                                        body => [
                                            ::Apply(
                                                arguments => [
                                                    ::Call(
                                                        hyper     => '',
                                                        arguments => [
                                                            ::Lit::Pair(
                                                                value => ::Call(
                                                                    hyper     => '',
                                                                    arguments => [
                                                                        ::Lit::Pair( value => ::Val::Buf( buf => '&', ),   key => ::Val::Buf( buf => 'sigil', ), ),
                                                                        ::Lit::Pair( value => ::Val::Buf( buf => '', ),    key => ::Val::Buf( buf => 'twigil', ), ),
                                                                        ::Lit::Pair( value => ::Val::Buf( buf => 'die', ), key => ::Val::Buf( buf => 'name', ), ),
                                                                        ::Lit::NamedArgument(
                                                                            value => ::Call( hyper   => '', arguments => [ ::Lit::Array( array => [], ), ], method => 'new', invocant => ::Proto( name => 'Array', ), ),
                                                                            key   => ::Val::Buf( buf => 'namespace', ),
                                                                        ),
                                                                    ],
                                                                    method   => 'new',
                                                                    invocant => ::Proto( name => 'Var', ),
                                                                ),
                                                                key => ::Val::Buf( buf => 'code', ),
                                                            ),
                                                            ::Lit::Pair(
                                                                value => ::Call( hyper   => '', arguments => [ ::Lit::Array( array => [], ), ], method => 'new', invocant => ::Proto( name => 'Array', ), ),
                                                                key   => ::Val::Buf( buf => 'arguments', ),
                                                            ),
                                                        ],
                                                        method   => 'new',
                                                        invocant => ::Proto( name => 'Apply', ),
                                                    ),
                                                ],
                                                code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                            ),
                                        ],
                                        sig => ::Sig( invocant => '', positional => [], ),
                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                        CATCH => '',
                                        state => {},
                                    ),
                                ),
                            ],
                        ),
                        ::Rule::Concat(
                            concat => [
                                ::Rule::Constant( constant => 'I', ),
                                ::Rule::Constant( constant => 'n', ),
                                ::Rule::Constant( constant => 'f', ),
                                ::Rule::Before(
                                    assertion_modifier => '!',
                                    capture_to_array   => '',
                                    rule               => ::Rule::Or(
                                        or => [
                                            ::Rule::Concat( concat => [ ::Rule::SubruleNoCapture( metasyntax => 'word', ), ], ),
                                            ::Rule::Concat( concat => [ ::Rule::Constant( constant           => '_', ), ], ),
                                            ::Rule::Concat( concat => [ ::Rule::SubruleNoCapture( metasyntax => 'digit', ), ], ),
                                        ],
                                    ),
                                ),
                                ::Rule::Block(
                                    closure => ::Lit::Code(
                                        body => [
                                            ::Apply(
                                                arguments => [
                                                    ::Call(
                                                        hyper     => '',
                                                        arguments => [
                                                            ::Lit::Pair(
                                                                value => ::Call(
                                                                    hyper     => '',
                                                                    arguments => [
                                                                        ::Lit::Pair( value => ::Val::Buf( buf => '&', ),   key => ::Val::Buf( buf => 'sigil', ), ),
                                                                        ::Lit::Pair( value => ::Val::Buf( buf => '', ),    key => ::Val::Buf( buf => 'twigil', ), ),
                                                                        ::Lit::Pair( value => ::Val::Buf( buf => 'Inf', ), key => ::Val::Buf( buf => 'name', ), ),
                                                                        ::Lit::NamedArgument(
                                                                            value => ::Call( hyper   => '', arguments => [ ::Lit::Array( array => [], ), ], method => 'new', invocant => ::Proto( name => 'Array', ), ),
                                                                            key   => ::Val::Buf( buf => 'namespace', ),
                                                                        ),
                                                                    ],
                                                                    method   => 'new',
                                                                    invocant => ::Proto( name => 'Var', ),
                                                                ),
                                                                key => ::Val::Buf( buf => 'code', ),
                                                            ),
                                                            ::Lit::Pair(
                                                                value => ::Call( hyper   => '', arguments => [ ::Lit::Array( array => [], ), ], method => 'new', invocant => ::Proto( name => 'Array', ), ),
                                                                key   => ::Val::Buf( buf => 'arguments', ),
                                                            ),
                                                        ],
                                                        method   => 'new',
                                                        invocant => ::Proto( name => 'Apply', ),
                                                    ),
                                                ],
                                                code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                            ),
                                        ],
                                        sig => ::Sig( invocant => '', positional => [], ),
                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                        CATCH => '',
                                        state => {},
                                    ),
                                ),
                            ],
                        ),
                        ::Rule::Concat(
                            concat => [
                                ::Rule::Constant( constant => 'N', ),
                                ::Rule::Constant( constant => 'a', ),
                                ::Rule::Constant( constant => 'N', ),
                                ::Rule::Before(
                                    assertion_modifier => '!',
                                    capture_to_array   => '',
                                    rule               => ::Rule::Or(
                                        or => [
                                            ::Rule::Concat( concat => [ ::Rule::SubruleNoCapture( metasyntax => 'word', ), ], ),
                                            ::Rule::Concat( concat => [ ::Rule::Constant( constant           => '_', ), ], ),
                                            ::Rule::Concat( concat => [ ::Rule::SubruleNoCapture( metasyntax => 'digit', ), ], ),
                                        ],
                                    ),
                                ),
                                ::Rule::Block(
                                    closure => ::Lit::Code(
                                        body => [
                                            ::Apply(
                                                arguments => [
                                                    ::Call(
                                                        hyper     => '',
                                                        arguments => [
                                                            ::Lit::Pair(
                                                                value => ::Call(
                                                                    hyper     => '',
                                                                    arguments => [
                                                                        ::Lit::Pair( value => ::Val::Buf( buf => '&', ),   key => ::Val::Buf( buf => 'sigil', ), ),
                                                                        ::Lit::Pair( value => ::Val::Buf( buf => '', ),    key => ::Val::Buf( buf => 'twigil', ), ),
                                                                        ::Lit::Pair( value => ::Val::Buf( buf => 'NaN', ), key => ::Val::Buf( buf => 'name', ), ),
                                                                        ::Lit::NamedArgument(
                                                                            value => ::Call( hyper   => '', arguments => [ ::Lit::Array( array => [], ), ], method => 'new', invocant => ::Proto( name => 'Array', ), ),
                                                                            key   => ::Val::Buf( buf => 'namespace', ),
                                                                        ),
                                                                    ],
                                                                    method   => 'new',
                                                                    invocant => ::Proto( name => 'Var', ),
                                                                ),
                                                                key => ::Val::Buf( buf => 'code', ),
                                                            ),
                                                            ::Lit::Pair(
                                                                value => ::Call( hyper   => '', arguments => [ ::Lit::Array( array => [], ), ], method => 'new', invocant => ::Proto( name => 'Array', ), ),
                                                                key   => ::Val::Buf( buf => 'arguments', ),
                                                            ),
                                                        ],
                                                        method   => 'new',
                                                        invocant => ::Proto( name => 'Apply', ),
                                                    ),
                                                ],
                                                code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                            ),
                                        ],
                                        sig => ::Sig( invocant => '', positional => [], ),
                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                        CATCH => '',
                                        state => {},
                                    ),
                                ),
                            ],
                        ),
                        ::Rule::Concat(
                            concat => [
                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'var', ident => '', ),
                                ::Rule::Block(
                                    closure => ::Lit::Code(
                                        body => [
                                            ::Apply(
                                                arguments => [
                                                    ::Apply(
                                                        arguments => [ ::Call( hyper  => '', arguments => [ ::Val::Buf( buf => 'var', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ), ],
                                                        code      => ::Var( namespace => [], name      => 'prefix:<$>',     twigil          => '', sigil        => '&', ),
                                                    ),
                                                ],
                                                code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                            ),
                                        ],
                                        sig => ::Sig( invocant => '', positional => [], ),
                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                        CATCH => '',
                                        state => {},
                                    ),
                                ),
                            ],
                        ),
                        ::Rule::Concat(
                            concat => [
                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'arrow_sub', ident => '', ),
                                ::Rule::Block(
                                    closure => ::Lit::Code(
                                        body => [
                                            ::Apply(
                                                arguments => [
                                                    ::Apply(
                                                        arguments => [ ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'arrow_sub', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ), ],
                                                        code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                    ),
                                                ],
                                                code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                            ),
                                        ],
                                        sig => ::Sig( invocant => '', positional => [], ),
                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                        CATCH => '',
                                        state => {},
                                    ),
                                ),
                            ],
                        ),
                        ::Rule::Concat(
                            concat => [
                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'prefix_op', ident => '', ),
                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'exp',       ident => '', ),
                                ::Rule::Block(
                                    closure => ::Lit::Code(
                                        body => [
                                            ::Apply(
                                                arguments => [
                                                    ::Call(
                                                        hyper     => '',
                                                        arguments => [
                                                            ::Lit::Pair(
                                                                value => ::Call(
                                                                    hyper     => '',
                                                                    arguments => [
                                                                        ::Lit::Pair( value => ::Val::Buf( buf => '&', ), key => ::Val::Buf( buf => 'sigil', ), ),
                                                                        ::Lit::Pair( value => ::Val::Buf( buf => '', ),  key => ::Val::Buf( buf => 'twigil', ), ),
                                                                        ::Lit::Pair(
                                                                            value => ::Apply(
                                                                                arguments => [
                                                                                    ::Val::Buf( buf => 'prefix:<', ),
                                                                                    ::Apply(
                                                                                        arguments => [
                                                                                            ::Call(
                                                                                                hyper     => '',
                                                                                                arguments => [ ::Val::Buf( buf => 'prefix_op', ), ],
                                                                                                method    => 'LOOKUP',
                                                                                                invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                            ),
                                                                                            ::Val::Buf( buf => '>', ),
                                                                                        ],
                                                                                        code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                    ),
                                                                                ],
                                                                                code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                            ),
                                                                            key => ::Val::Buf( buf => 'name', ),
                                                                        ),
                                                                        ::Lit::NamedArgument(
                                                                            value => ::Call( hyper   => '', arguments => [ ::Lit::Array( array => [], ), ], method => 'new', invocant => ::Proto( name => 'Array', ), ),
                                                                            key   => ::Val::Buf( buf => 'namespace', ),
                                                                        ),
                                                                    ],
                                                                    method   => 'new',
                                                                    invocant => ::Proto( name => 'Var', ),
                                                                ),
                                                                key => ::Val::Buf( buf => 'code', ),
                                                            ),
                                                            ::Lit::Pair(
                                                                value => ::Call(
                                                                    hyper     => '',
                                                                    arguments => [
                                                                        ::Lit::Array(
                                                                            array => [
                                                                                ::Apply(
                                                                                    arguments => [
                                                                                        ::Call(
                                                                                            hyper     => '',
                                                                                            arguments => [ ::Val::Buf( buf => 'exp', ), ],
                                                                                            method    => 'LOOKUP',
                                                                                            invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                        ),
                                                                                    ],
                                                                                    code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                                ),
                                                                            ],
                                                                        ),
                                                                    ],
                                                                    method   => 'new',
                                                                    invocant => ::Proto( name => 'Array', ),
                                                                ),
                                                                key => ::Val::Buf( buf => 'arguments', ),
                                                            ),
                                                        ],
                                                        method   => 'new',
                                                        invocant => ::Proto( name => 'Apply', ),
                                                    ),
                                                ],
                                                code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                            ),
                                        ],
                                        sig => ::Sig( invocant => '', positional => [], ),
                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                        CATCH => '',
                                        state => {},
                                    ),
                                ),
                            ],
                        ),
                        ::Rule::Concat(
                            concat => [
                                ::Rule::SpecialChar( char => '(', ),
                                ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                ::Rule::Or(
                                    or => [
                                        ::Rule::Concat(
                                            concat => [
                                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'exp', ident => '', ),
                                                ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                                ::Rule::SpecialChar( char => ')', ),
                                                ::Rule::Block(
                                                    closure => ::Lit::Code(
                                                        body => [
                                                            ::Apply(
                                                                arguments => [
                                                                    ::Apply(
                                                                        arguments => [
                                                                            ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'exp', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ),
                                                                        ],
                                                                        code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                    ),
                                                                ],
                                                                code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                                            ),
                                                        ],
                                                        sig => ::Sig( invocant => '', positional => [], ),
                                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                        CATCH => '',
                                                        state => {},
                                                    ),
                                                ),
                                            ],
                                        ),
                                        ::Rule::Concat(
                                            concat => [
                                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'pair', ident => '', ),
                                                ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                                ::Rule::Or(
                                                    or => [
                                                        ::Rule::Concat( concat => [ ::Rule::Constant( constant => ',', ), ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ), ], ),
                                                        ::Rule::Concat( concat => [ ::Rule::Constant( constant => '', ), ], ),
                                                    ],
                                                ),
                                                ::Rule::SpecialChar( char => ')', ),
                                                ::Rule::Block(
                                                    closure => ::Lit::Code(
                                                        body => [
                                                            ::Apply(
                                                                arguments => [
                                                                    ::Call(
                                                                        hyper     => '',
                                                                        arguments => [
                                                                            ::Lit::NamedArgument(
                                                                                value => ::Call(
                                                                                    hyper     => '',
                                                                                    arguments => [ ::Val::Int( int => '0', ), ],
                                                                                    method    => 'INDEX',
                                                                                    invocant  => ::Apply(
                                                                                        arguments => [
                                                                                            ::Call(
                                                                                                hyper     => '',
                                                                                                arguments => [ ::Val::Buf( buf => 'pair', ), ],
                                                                                                method    => 'LOOKUP',
                                                                                                invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                            ),
                                                                                        ],
                                                                                        code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                                    ),
                                                                                ),
                                                                                key => ::Val::Buf( buf => 'key', ),
                                                                            ),
                                                                            ::Lit::NamedArgument(
                                                                                value => ::Call(
                                                                                    hyper     => '',
                                                                                    arguments => [ ::Val::Int( int => '1', ), ],
                                                                                    method    => 'INDEX',
                                                                                    invocant  => ::Apply(
                                                                                        arguments => [
                                                                                            ::Call(
                                                                                                hyper     => '',
                                                                                                arguments => [ ::Val::Buf( buf => 'pair', ), ],
                                                                                                method    => 'LOOKUP',
                                                                                                invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                            ),
                                                                                        ],
                                                                                        code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                                    ),
                                                                                ),
                                                                                key => ::Val::Buf( buf => 'value', ),
                                                                            ),
                                                                        ],
                                                                        method   => 'new',
                                                                        invocant => ::Proto( name => 'Lit::Pair', ),
                                                                    ),
                                                                ],
                                                                code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                                            ),
                                                        ],
                                                        sig => ::Sig( invocant => '', positional => [], ),
                                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                        CATCH => '',
                                                        state => {},
                                                    ),
                                                ),
                                            ],
                                        ),
                                        ::Rule::Concat(
                                            concat => [
                                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'exp_seq', ident => '', ),
                                                ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                                ::Rule::SpecialChar( char => ')', ),
                                                ::Rule::Block(
                                                    closure => ::Lit::Code(
                                                        body => [
                                                            ::Return(
                                                                result => ::Call(
                                                                    hyper     => '',
                                                                    arguments => [
                                                                        ::Lit::Pair(
                                                                            value => ::Call(
                                                                                hyper     => '',
                                                                                arguments => [ ::Lit::NamedArgument( value => ::Val::Buf( buf => 'List', ), key => ::Val::Buf( buf => 'name', ), ), ],
                                                                                method    => 'new',
                                                                                invocant => ::Proto( name => 'Proto', ),
                                                                            ),
                                                                            key => ::Val::Buf( buf => 'invocant', ),
                                                                        ),
                                                                        ::Lit::Pair( value => ::Val::Buf( buf => '', ),    key => ::Val::Buf( buf => 'hyper', ), ),
                                                                        ::Lit::Pair( value => ::Val::Buf( buf => 'new', ), key => ::Val::Buf( buf => 'method', ), ),
                                                                        ::Lit::Pair(
                                                                            value => ::Call(
                                                                                hyper     => '',
                                                                                arguments => [
                                                                                    ::Lit::Array(
                                                                                        array => [
                                                                                            ::Call(
                                                                                                hyper     => '',
                                                                                                arguments => [
                                                                                                    ::Lit::Pair(
                                                                                                        value => ::Apply(
                                                                                                            arguments => [
                                                                                                                ::Call(
                                                                                                                    hyper     => '',
                                                                                                                    arguments => [ ::Val::Buf( buf => 'exp_seq', ), ],
                                                                                                                    method    => 'LOOKUP',
                                                                                                                    invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                                                ),
                                                                                                            ],
                                                                                                            code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                                                        ),
                                                                                                        key => ::Val::Buf( buf => 'array', ),
                                                                                                    ),
                                                                                                ],
                                                                                                method   => 'new',
                                                                                                invocant => ::Proto( name => 'Lit::Array', ),
                                                                                            ),
                                                                                        ],
                                                                                    ),
                                                                                ],
                                                                                method   => 'new',
                                                                                invocant => ::Proto( name => 'Array', ),
                                                                            ),
                                                                            key => ::Val::Buf( buf => 'arguments', ),
                                                                        ),
                                                                    ],
                                                                    method   => 'new',
                                                                    invocant => ::Proto( name => 'Call', ),
                                                                ),
                                                            ),
                                                        ],
                                                        sig => ::Sig( invocant => '', positional => [], ),
                                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                        CATCH => '',
                                                        state => {},
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ::Rule::Concat(
                            concat => [
                                ::Rule::SpecialChar( char => '{', ),
                                ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                ::Rule::Or(
                                    or => [
                                        ::Rule::Concat(
                                            concat => [
                                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'pair', ident => '', ),
                                                ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                                ::Rule::Constant( constant => ',', ),
                                                ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                                ::Rule::SpecialChar( char => '}', ),
                                                ::Rule::Block(
                                                    closure => ::Lit::Code(
                                                        body => [
                                                            ::Apply(
                                                                arguments => [
                                                                    ::Call(
                                                                        hyper     => '',
                                                                        arguments => [
                                                                            ::Lit::NamedArgument(
                                                                                value => ::Call(
                                                                                    hyper     => '',
                                                                                    arguments => [ ::Val::Int( int => '0', ), ],
                                                                                    method    => 'INDEX',
                                                                                    invocant  => ::Apply(
                                                                                        arguments => [
                                                                                            ::Call(
                                                                                                hyper     => '',
                                                                                                arguments => [ ::Val::Buf( buf => 'pair', ), ],
                                                                                                method    => 'LOOKUP',
                                                                                                invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                            ),
                                                                                        ],
                                                                                        code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                                    ),
                                                                                ),
                                                                                key => ::Val::Buf( buf => 'key', ),
                                                                            ),
                                                                            ::Lit::NamedArgument(
                                                                                value => ::Call(
                                                                                    hyper     => '',
                                                                                    arguments => [ ::Val::Int( int => '1', ), ],
                                                                                    method    => 'INDEX',
                                                                                    invocant  => ::Apply(
                                                                                        arguments => [
                                                                                            ::Call(
                                                                                                hyper     => '',
                                                                                                arguments => [ ::Val::Buf( buf => 'pair', ), ],
                                                                                                method    => 'LOOKUP',
                                                                                                invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                            ),
                                                                                        ],
                                                                                        code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                                    ),
                                                                                ),
                                                                                key => ::Val::Buf( buf => 'value', ),
                                                                            ),
                                                                        ],
                                                                        method   => 'new',
                                                                        invocant => ::Proto( name => 'Lit::Pair', ),
                                                                    ),
                                                                ],
                                                                code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                                            ),
                                                        ],
                                                        sig => ::Sig( invocant => '', positional => [], ),
                                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                        CATCH => '',
                                                        state => {},
                                                    ),
                                                ),
                                            ],
                                        ),
                                        ::Rule::Concat(
                                            concat => [
                                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'pair', ident => '', ),
                                                ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                                ::Rule::SpecialChar( char => '}', ),
                                                ::Rule::Block(
                                                    closure => ::Lit::Code(
                                                        body => [
                                                            ::Apply(
                                                                arguments => [
                                                                    ::Call(
                                                                        hyper     => '',
                                                                        arguments => [
                                                                            ::Lit::NamedArgument(
                                                                                value => ::Apply( arguments => [], code => ::Var( namespace => [ 'COMPILER', ], name => 'current_pad', twigil => '', sigil => '&', ), ),
                                                                                key   => ::Val::Buf( buf    => 'pad', ),
                                                                            ),
                                                                            ::Lit::NamedArgument(
                                                                                value => ::Call( hyper   => '', arguments => [ ::Lit::Hash( hash => [], ), ], method => 'new', invocant => ::Proto( name => 'Hash', ), ),
                                                                                key   => ::Val::Buf( buf => 'state', ),
                                                                            ),
                                                                            ::Lit::NamedArgument(
                                                                                value => ::Call(
                                                                                    hyper     => '',
                                                                                    arguments => [
                                                                                        ::Lit::Pair( value => ::Val::Undef(), key => ::Val::Buf( buf => 'invocant', ), ),
                                                                                        ::Lit::Pair(
                                                                                            value => ::Call( hyper   => '', arguments => [ ::Lit::Array( array => [], ), ], method => 'new', invocant => ::Proto( name => 'Array', ), ),
                                                                                            key   => ::Val::Buf( buf => 'positional', ),
                                                                                        ),
                                                                                    ],
                                                                                    method   => 'new',
                                                                                    invocant => ::Proto( name => 'Sig', ),
                                                                                ),
                                                                                key => ::Val::Buf( buf => 'sig', ),
                                                                            ),
                                                                            ::Lit::NamedArgument(
                                                                                value => ::Call(
                                                                                    hyper     => '',
                                                                                    arguments => [
                                                                                        ::Lit::Array(
                                                                                            array => [
                                                                                                ::Call(
                                                                                                    hyper     => '',
                                                                                                    arguments => [
                                                                                                        ::Lit::NamedArgument(
                                                                                                            value => ::Call(
                                                                                                                hyper     => '',
                                                                                                                arguments => [ ::Val::Int( int => '0', ), ],
                                                                                                                method    => 'INDEX',
                                                                                                                invocant  => ::Apply(
                                                                                                                    arguments => [
                                                                                                                        ::Call(
                                                                                                                            hyper     => '',
                                                                                                                            arguments => [ ::Val::Buf( buf => 'pair', ), ],
                                                                                                                            method    => 'LOOKUP',
                                                                                                                            invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                                                        ),
                                                                                                                    ],
                                                                                                                    code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                                                                ),
                                                                                                            ),
                                                                                                            key => ::Val::Buf( buf => 'key', ),
                                                                                                        ),
                                                                                                        ::Lit::NamedArgument(
                                                                                                            value => ::Call(
                                                                                                                hyper     => '',
                                                                                                                arguments => [ ::Val::Int( int => '1', ), ],
                                                                                                                method    => 'INDEX',
                                                                                                                invocant  => ::Apply(
                                                                                                                    arguments => [
                                                                                                                        ::Call(
                                                                                                                            hyper     => '',
                                                                                                                            arguments => [ ::Val::Buf( buf => 'pair', ), ],
                                                                                                                            method    => 'LOOKUP',
                                                                                                                            invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                                                        ),
                                                                                                                    ],
                                                                                                                    code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                                                                ),
                                                                                                            ),
                                                                                                            key => ::Val::Buf( buf => 'value', ),
                                                                                                        ),
                                                                                                    ],
                                                                                                    method   => 'new',
                                                                                                    invocant => ::Proto( name => 'Lit::Pair', ),
                                                                                                ),
                                                                                            ],
                                                                                        ),
                                                                                    ],
                                                                                    method   => 'new',
                                                                                    invocant => ::Proto( name => 'Array', ),
                                                                                ),
                                                                                key => ::Val::Buf( buf => 'body', ),
                                                                            ),
                                                                        ],
                                                                        method   => 'new',
                                                                        invocant => ::Proto( name => 'Lit::Code', ),
                                                                    ),
                                                                ],
                                                                code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                                            ),
                                                        ],
                                                        sig => ::Sig( invocant => '', positional => [], ),
                                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                        CATCH => '',
                                                        state => {},
                                                    ),
                                                ),
                                            ],
                                        ),
                                        ::Rule::Concat(
                                            concat => [
                                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'exp_mapping', ident => '', ),
                                                ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                                ::Rule::SpecialChar( char => '}', ),
                                                ::Rule::Block(
                                                    closure => ::Lit::Code(
                                                        body => [
                                                            ::Return(
                                                                result => ::Call(
                                                                    hyper     => '',
                                                                    arguments => [
                                                                        ::Lit::Pair(
                                                                            value => ::Call(
                                                                                hyper     => '',
                                                                                arguments => [ ::Lit::NamedArgument( value => ::Val::Buf( buf => 'Hash', ), key => ::Val::Buf( buf => 'name', ), ), ],
                                                                                method    => 'new',
                                                                                invocant => ::Proto( name => 'Proto', ),
                                                                            ),
                                                                            key => ::Val::Buf( buf => 'invocant', ),
                                                                        ),
                                                                        ::Lit::Pair( value => ::Val::Buf( buf => '', ),    key => ::Val::Buf( buf => 'hyper', ), ),
                                                                        ::Lit::Pair( value => ::Val::Buf( buf => 'new', ), key => ::Val::Buf( buf => 'method', ), ),
                                                                        ::Lit::Pair(
                                                                            value => ::Call(
                                                                                hyper     => '',
                                                                                arguments => [
                                                                                    ::Lit::Array(
                                                                                        array => [
                                                                                            ::Call(
                                                                                                hyper     => '',
                                                                                                arguments => [
                                                                                                    ::Lit::Pair(
                                                                                                        value => ::Apply(
                                                                                                            arguments => [
                                                                                                                ::Call(
                                                                                                                    hyper     => '',
                                                                                                                    arguments => [ ::Val::Buf( buf => 'exp_mapping', ), ],
                                                                                                                    method    => 'LOOKUP',
                                                                                                                    invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                                                ),
                                                                                                            ],
                                                                                                            code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                                                        ),
                                                                                                        key => ::Val::Buf( buf => 'hash', ),
                                                                                                    ),
                                                                                                ],
                                                                                                method   => 'new',
                                                                                                invocant => ::Proto( name => 'Lit::Hash', ),
                                                                                            ),
                                                                                        ],
                                                                                    ),
                                                                                ],
                                                                                method   => 'new',
                                                                                invocant => ::Proto( name => 'Array', ),
                                                                            ),
                                                                            key => ::Val::Buf( buf => 'arguments', ),
                                                                        ),
                                                                    ],
                                                                    method   => 'new',
                                                                    invocant => ::Proto( name => 'Call', ),
                                                                ),
                                                            ),
                                                        ],
                                                        sig => ::Sig( invocant => '', positional => [], ),
                                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                        CATCH => '',
                                                        state => {},
                                                    ),
                                                ),
                                            ],
                                        ),
                                        ::Rule::Concat(
                                            concat => [
                                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'bare_block', ident => '', ),
                                                ::Rule::Block(
                                                    closure => ::Lit::Code(
                                                        body => [
                                                            ::Apply(
                                                                arguments => [
                                                                    ::Apply(
                                                                        arguments => [
                                                                            ::Call(
                                                                                hyper     => '',
                                                                                arguments => [ ::Val::Buf( buf => 'bare_block', ), ],
                                                                                method    => 'LOOKUP',
                                                                                invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                            ),
                                                                        ],
                                                                        code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                    ),
                                                                ],
                                                                code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                                            ),
                                                        ],
                                                        sig => ::Sig( invocant => '', positional => [], ),
                                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                        CATCH => '',
                                                        state => {},
                                                    ),
                                                ),
                                            ],
                                        ),
                                        ::Rule::Concat(
                                            concat => [
                                                ::Rule::Block(
                                                    closure => ::Lit::Code(
                                                        body => [ ::Apply( arguments => [ ::Val::Buf( buf => 'syntax error inside bare block', ), ], code => ::Var( namespace => [], name => 'die', twigil => '', sigil => '&', ), ), ],
                                                        sig  => ::Sig( invocant      => '',               positional                                 => [], ),
                                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                        CATCH => '',
                                                        state => {},
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ::Rule::Concat(
                            concat => [
                                ::Rule::SpecialChar( char => '[', ),
                                ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'exp_seq', ident => '', ),
                                ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                ::Rule::SpecialChar( char => ']', ),
                                ::Rule::Block(
                                    closure => ::Lit::Code(
                                        body => [
                                            ::Return(
                                                result => ::Call(
                                                    hyper     => '',
                                                    arguments => [
                                                        ::Lit::Pair(
                                                            value => ::Call(
                                                                hyper     => '',
                                                                arguments => [ ::Lit::NamedArgument( value => ::Val::Buf( buf => 'Array', ), key => ::Val::Buf( buf => 'name', ), ), ],
                                                                method    => 'new',
                                                                invocant => ::Proto( name => 'Proto', ),
                                                            ),
                                                            key => ::Val::Buf( buf => 'invocant', ),
                                                        ),
                                                        ::Lit::Pair( value => ::Val::Buf( buf => '', ),    key => ::Val::Buf( buf => 'hyper', ), ),
                                                        ::Lit::Pair( value => ::Val::Buf( buf => 'new', ), key => ::Val::Buf( buf => 'method', ), ),
                                                        ::Lit::Pair(
                                                            value => ::Call(
                                                                hyper     => '',
                                                                arguments => [
                                                                    ::Lit::Array(
                                                                        array => [
                                                                            ::Call(
                                                                                hyper     => '',
                                                                                arguments => [
                                                                                    ::Lit::Pair(
                                                                                        value => ::Apply(
                                                                                            arguments => [
                                                                                                ::Call(
                                                                                                    hyper     => '',
                                                                                                    arguments => [ ::Val::Buf( buf => 'exp_seq', ), ],
                                                                                                    method    => 'LOOKUP',
                                                                                                    invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                                ),
                                                                                            ],
                                                                                            code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                                        ),
                                                                                        key => ::Val::Buf( buf => 'array', ),
                                                                                    ),
                                                                                ],
                                                                                method   => 'new',
                                                                                invocant => ::Proto( name => 'Lit::Array', ),
                                                                            ),
                                                                        ],
                                                                    ),
                                                                ],
                                                                method   => 'new',
                                                                invocant => ::Proto( name => 'Array', ),
                                                            ),
                                                            key => ::Val::Buf( buf => 'arguments', ),
                                                        ),
                                                    ],
                                                    method   => 'new',
                                                    invocant => ::Proto( name => 'Call', ),
                                                ),
                                            ),
                                        ],
                                        sig => ::Sig( invocant => '', positional => [], ),
                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                        CATCH => '',
                                        state => {},
                                    ),
                                ),
                            ],
                        ),
                        ::Rule::Concat(
                            concat => [
                                ::Rule::SpecialChar(
                                    char => '\', ) , ::Rule::SpecialChar(  char => ' (
                                        ', ) , ::Rule::SubruleNoCapture(  metasyntax => ' opt_ws ', ) , ::Rule::Subrule(  capture_to_array => '',  metasyntax => ' capture ',  ident => '', ) , ::Rule::SubruleNoCapture(  metasyntax => ' opt_ws
                                            ', ) , ::Rule::SpecialChar(  char => '
                                        ) ', ) , ::Rule::Block(  closure => ::Lit::Code(  body => [ ::Apply(  arguments => [ ::Apply(  arguments => [ ::Call(  hyper => '',  arguments => [ ::Val::Buf(  buf => ' capture ', ) ,  ],  method => ' LOOKUP
                                        ',  invocant => ::Var(  namespace => [  ],  name => ' / ',  twigil => '',  sigil => '$',
                                ),
                            ),
                            ],
                        code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ), ),
                ],
                code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    ),
    ], ), ::Rule::Concat( concat => [ ::Rule::SpecialChar(
                char => '\', ) , ::Rule::SpecialChar(  char => ' (
                    ', ) , ::Rule::SubruleNoCapture(  metasyntax => ' opt_ws ', ) , ::Rule::Subrule(  capture_to_array => '',  metasyntax => ' exp_seq ',  ident => '', ) , ::Rule::SubruleNoCapture(  metasyntax => ' opt_ws
                        ', ) , ::Rule::SpecialChar(  char => '
                    ) ', ) , ::Rule::Block(  closure => ::Lit::Code(  body => [ ::Apply(  arguments => [ ::Call(  hyper => '',  arguments => [ ::Lit::Pair(  value => ::Val::Undef( ) ,  key => ::Val::Buf(  buf => ' invocant
                    ', ) , ) , ::Lit::Pair(  value => ::Apply(  arguments => [ ::Call(  hyper => '',  arguments => [ ::Val::Buf(  buf => ' exp_seq ', ) ,  ],  method => ' LOOKUP ',  invocant => ::Var(  namespace => [  ],  name => ' / ',  twigil => '
                    ',  sigil => '$',
        ),
            ), ], code => ::Var(
        namespace => [],
        name      => 'prefix:<$>',
        twigil    => '',
        sigil     => '&',
            ), ), key => ::Val::Buf( buf => 'array', ), ), ::Lit::Pair( value => ::Call(
            hyper     => '',
            arguments => [ ::Lit::Array( array => [], ), ],
            method    => 'new',
            invocant  => ::Proto( name => 'Array', ),
            ), key => ::Val::Buf( buf => 'hash', ), ), ],
    method   => 'new',
    invocant => ::Proto( name => 'Lit::Capture', ), ), ], code => ::Var(
        namespace => [],
        name      => 'make',
        twigil    => '',
        sigil     => '&',
    ), ), ], sig => ::Sig(
        invocant   => '',
        positional => [],
    ), pad => ::Pad(
        lexicals  => [],
        namespace => "KindaPerl6::Grammar",
        parent    => ::Pad(...),
        evaluator => ::Sub(...),
    ),
    CATCH => '',
    state => {}, ), ), ], ),
    ::Rule::Concat( concat => [ ::Rule::SpecialChar( char => '\', ) , ::Rule::Subrule(  capture_to_array => '',  metasyntax => ' var ',  ident => '', ) , ::Rule::Block(  closure => ::Lit::Code(  body => [ ::Apply(  arguments => [ ::Call(  hyper => '
                    ',  arguments => [ ::Lit::Pair(  value => ::Val::Undef( ) ,  key => ::Val::Buf(  buf => ' invocant ', ) , ) , ::Lit::Pair(  value => ::Call(  hyper => '
                    ',  arguments => [ ::Lit::Array(  array => [ ::Apply(  arguments => [ ::Call(  hyper => '',  arguments => [ ::Val::Buf(  buf => ' var ', ) ,  ],  method => ' LOOKUP ',  invocant => ::Var(  namespace => [  ],  name => ' /
                    ',  twigil => '',  sigil => '$', ), ), ], code => ::Var(
        namespace => [],
        name      => 'prefix:<$>',
        twigil    => '',
        sigil     => '&',
                    ), ), ], ), ],
    method   => 'new',
    invocant => ::Proto( name => 'Array', ), ), key => ::Val::Buf( buf => 'array', ), ), ::Lit::Pair( value => ::Call(
            hyper     => '',
            arguments => [ ::Lit::Array( array => [], ), ],
            method    => 'new',
            invocant  => ::Proto( name => 'Array', ),
            ), key => ::Val::Buf( buf => 'hash', ), ), ],
    method   => 'new',
    invocant => ::Proto( name => 'Lit::Capture', ), ), ], code => ::Var(
        namespace => [],
        name      => 'make',
        twigil    => '',
        sigil     => '&',
    ), ), ], sig => ::Sig(
        invocant   => '',
        positional => [],
    ), pad => ::Pad(
        lexicals  => [],
        namespace => "KindaPerl6::Grammar",
        parent    => ::Pad(...),
        evaluator => ::Sub(...),
    ),
    CATCH => '',
    state => {}, ), ), ], ), ::Rule::Concat( concat => [ ::Rule::SpecialChar( char => '$', ), ::Rule::SpecialChar( char => '<', ), ::Rule::Subrule(
                capture_to_array => '',
                metasyntax       => 'sub_or_method_name',
                ident            => '',
                ), ::Rule::SpecialChar( char => '>', ), ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Call(
                                    hyper     => '',
                                    arguments => [ ::Lit::Pair( value => ::Call(
                                                hyper     => '',
                                                arguments => [ ::Lit::Pair( value => ::Val::Buf( buf => '$', ), key => ::Val::Buf( buf => 'sigil', ), ), ::Lit::Pair( value => ::Val::Buf( buf => '', ), key => ::Val::Buf( buf => 'twigil', ), ),
                                                    ::Lit::Pair( value => ::Val::Buf( buf => '/', ), key => ::Val::Buf( buf => 'name', ), ), ::Lit::NamedArgument( value => ::Call(
                                                            hyper     => '',
                                                            arguments => [ ::Lit::Array( array => [], ), ],
                                                            method    => 'new',
                                                            invocant  => ::Proto( name => 'Array', ),
                                                            ), key => ::Val::Buf( buf => 'namespace', ), ), ],
                                                method   => 'new',
                                                invocant => ::Proto( name => 'Var', ),
                                                ), key => ::Val::Buf( buf => 'invocant', ), ), ::Lit::Pair( value => ::Val::Buf( buf => '', ), key => ::Val::Buf( buf => 'hyper', ), ), ::Lit::Pair( value => ::Val::Buf( buf => 'LOOKUP', ),
                                            key => ::Val::Buf( buf => 'method', ), ), ::Lit::Pair( value => ::Call(
                                                hyper     => '',
                                                arguments => [ ::Lit::Array( array => [ ::Call(
                                                                hyper     => '',
                                                                arguments => [ ::Lit::Pair( value => ::Apply( arguments => [ ::Call(
                                                                                    hyper     => '',
                                                                                    arguments => [ ::Val::Buf( buf => 'sub_or_method_name', ), ],
                                                                                    method    => 'LOOKUP',
                                                                                    invocant  => ::Var(
                                                                                        namespace => [],
                                                                                        name      => '/',
                                                                                        twigil    => '',
                                                                                        sigil     => '$',
                                                                                    ),
                                                                                    ), ], code => ::Var(
                                                                                namespace => [],
                                                                                name      => 'prefix:<$>',
                                                                                twigil    => '',
                                                                                sigil     => '&',
                                                                                    ), ), key => ::Val::Buf( buf => 'buf', ), ), ],
                                                                method   => 'new',
                                                                invocant => ::Proto( name => 'Val::Buf', ),
                                                                ), ], ), ],
                                                method   => 'new',
                                                invocant => ::Proto( name => 'Array', ),
                                                ), key => ::Val::Buf( buf => 'arguments', ), ), ],
                                    method   => 'new',
                                    invocant => ::Proto( name => 'Call', ),
                                    ), ], code => ::Var(
                                namespace => [],
                                name      => 'make',
                                twigil    => '',
                                sigil     => '&',
                                    ), ), ], sig => ::Sig(
                        invocant   => '',
                        positional => [],
                                    ), pad => ::Pad(
                        lexicals  => [],
                        namespace => "KindaPerl6::Grammar",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                                    ),
                    CATCH => '',
                    state => {}, ), ), ], ), ::Rule::Concat( concat => [ ::Rule::Constant( constant => 'd', ), ::Rule::Constant( constant => 'o', ), ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ), ::Rule::Subrule(
                capture_to_array => '',
                metasyntax       => 'block1',
                ident            => '',
                    ), ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Call(
                                    hyper     => '',
                                    arguments => [ ::Lit::Pair( value => ::Apply( arguments => [ ::Call(
                                                        hyper     => '',
                                                        arguments => [ ::Val::Buf( buf => 'block1', ), ],
                                                        method    => 'LOOKUP',
                                                        invocant  => ::Var(
                                                            namespace => [],
                                                            name      => '/',
                                                            twigil    => '',
                                                            sigil     => '$',
                                                        ),
                                                        ), ], code => ::Var(
                                                    namespace => [],
                                                    name      => 'prefix:<$>',
                                                    twigil    => '',
                                                    sigil     => '&',
                                                        ), ), key => ::Val::Buf( buf => 'block', ), ), ],
                                    method   => 'new',
                                    invocant => ::Proto( name => 'Do', ),
                                    ), ], code => ::Var(
                                namespace => [],
                                name      => 'make',
                                twigil    => '',
                                sigil     => '&',
                                    ), ), ], sig => ::Sig(
                        invocant   => '',
                        positional => [],
                                    ), pad => ::Pad(
                        lexicals  => [],
                        namespace => "KindaPerl6::Grammar",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                                    ),
                    CATCH => '',
                    state => {}, ), ), ], ), ::Rule::Concat( concat => [ ::Rule::Constant( constant => '::', ), ::Rule::Subrule(
                capture_to_array => '',
                metasyntax       => 'full_ident',
                ident            => '',
                    ), ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Call(
                                    hyper     => '',
                                    arguments => [ ::Lit::Pair( value => ::Apply( arguments => [ ::Call(
                                                        hyper     => '',
                                                        arguments => [ ::Val::Buf( buf => 'full_ident', ), ],
                                                        method    => 'LOOKUP',
                                                        invocant  => ::Var(
                                                            namespace => [],
                                                            name      => '/',
                                                            twigil    => '',
                                                            sigil     => '$',
                                                        ),
                                                        ), ], code => ::Var(
                                                    namespace => [],
                                                    name      => 'prefix:<$>',
                                                    twigil    => '',
                                                    sigil     => '&',
                                                        ), ), key => ::Val::Buf( buf => 'name', ), ), ],
                                    method   => 'new',
                                    invocant => ::Proto( name => 'Proto', ),
                                    ), ], code => ::Var(
                                namespace => [],
                                name      => 'make',
                                twigil    => '',
                                sigil     => '&',
                                    ), ), ], sig => ::Sig(
                        invocant   => '',
                        positional => [],
                                    ), pad => ::Pad(
                        lexicals  => [],
                        namespace => "KindaPerl6::Grammar",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                                    ),
                    CATCH => '',
                    state => {}, ), ), ], ), ::Rule::Concat( concat => [ ::Rule::Constant( constant => 'u', ), ::Rule::Constant( constant => 's', ), ::Rule::Constant( constant => 'e', ), ::Rule::SubruleNoCapture( metasyntax => 'ws', ),
            ::Rule::Subrule(
                capture_to_array => '',
                metasyntax       => 'full_ident',
                ident            => '',
                ), ::Rule::Subrule(
                capture_to_array => '',
                metasyntax       => 'use_from_perl5',
                ident            => '',
                ), ::Rule::Or( or => [ ::Rule::Concat( concat => [ ::Rule::Constant( constant => '-', ), ::Rule::Subrule(
                                capture_to_array => '',
                                metasyntax       => 'ident',
                                ident            => '',
                                ), ], ), ::Rule::Concat( concat => [ ::Rule::Constant( constant => '', ), ], ), ], ), ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Call(
                                    hyper     => '',
                                    arguments => [ ::Lit::Pair( value => ::Apply( arguments => [ ::Call(
                                                        hyper     => '',
                                                        arguments => [ ::Val::Buf( buf => 'full_ident', ), ],
                                                        method    => 'LOOKUP',
                                                        invocant  => ::Var(
                                                            namespace => [],
                                                            name      => '/',
                                                            twigil    => '',
                                                            sigil     => '$',
                                                        ),
                                                        ), ], code => ::Var(
                                                    namespace => [],
                                                    name      => 'prefix:<$>',
                                                    twigil    => '',
                                                    sigil     => '&',
                                                        ), ), key => ::Val::Buf( buf => 'mod', ), ), ::Lit::Pair( value => ::Apply( arguments => [ ::Call(
                                                        hyper     => '',
                                                        arguments => [ ::Val::Buf( buf => 'use_from_perl5', ), ],
                                                        method    => 'LOOKUP',
                                                        invocant  => ::Var(
                                                            namespace => [],
                                                            name      => '/',
                                                            twigil    => '',
                                                            sigil     => '$',
                                                        ),
                                                        ), ], code => ::Var(
                                                    namespace => [],
                                                    name      => 'prefix:<$>',
                                                    twigil    => '',
                                                    sigil     => '&',
                                                        ), ), key => ::Val::Buf( buf => 'perl5', ), ), ],
                                    method   => 'new',
                                    invocant => ::Proto( name => 'Use', ),
                                    ), ], code => ::Var(
                                namespace => [],
                                name      => 'make',
                                twigil    => '',
                                sigil     => '&',
                                    ), ), ], sig => ::Sig(
                        invocant   => '',
                        positional => [],
                                    ), pad => ::Pad(
                        lexicals  => [],
                        namespace => "KindaPerl6::Grammar",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                                    ),
                    CATCH => '',
                    state => {}, ), ), ], ), ::Rule::Concat( concat => [ ::Rule::Subrule(
                capture_to_array => '',
                metasyntax       => 'val',
                ident            => '',
                    ), ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Apply( arguments => [ ::Call(
                                            hyper     => '',
                                            arguments => [ ::Val::Buf( buf => 'val', ), ],
                                            method    => 'LOOKUP',
                                            invocant  => ::Var(
                                                namespace => [],
                                                name      => '/',
                                                twigil    => '',
                                                sigil     => '$',
                                            ),
                                            ), ], code => ::Var(
                                        namespace => [],
                                        name      => 'prefix:<$>',
                                        twigil    => '',
                                        sigil     => '&',
                                            ), ), ], code => ::Var(
                                namespace => [],
                                name      => 'make',
                                twigil    => '',
                                sigil     => '&',
                                            ), ), ], sig => ::Sig(
                        invocant   => '',
                        positional => [],
                                            ), pad => ::Pad(
                        lexicals  => [],
                        namespace => "KindaPerl6::Grammar",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                                            ),
                    CATCH => '',
                    state => {}, ), ), ], ), ::Rule::Concat( concat => [ ::Rule::Subrule(
                capture_to_array => '',
                metasyntax       => 'token_sym',
                ident            => '',
                    ), ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Apply( arguments => [ ::Call(
                                            hyper     => '',
                                            arguments => [ ::Val::Buf( buf => 'token_sym', ), ],
                                            method    => 'LOOKUP',
                                            invocant  => ::Var(
                                                namespace => [],
                                                name      => '/',
                                                twigil    => '',
                                                sigil     => '$',
                                            ),
                                            ), ], code => ::Var(
                                        namespace => [],
                                        name      => 'prefix:<$>',
                                        twigil    => '',
                                        sigil     => '&',
                                            ), ), ], code => ::Var(
                                namespace => [],
                                name      => 'make',
                                twigil    => '',
                                sigil     => '&',
                                            ), ), ], sig => ::Sig(
                        invocant   => '',
                        positional => [],
                                            ), pad => ::Pad(
                        lexicals  => [],
                        namespace => "KindaPerl6::Grammar",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                                            ),
                    CATCH => '',
                    state => {}, ), ), ], ), ::Rule::Concat( concat => [ ::Rule::Subrule(
                capture_to_array => '',
                metasyntax       => 'token',
                ident            => '',
                    ), ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Apply( arguments => [ ::Call(
                                            hyper     => '',
                                            arguments => [ ::Val::Buf( buf => 'token', ), ],
                                            method    => 'LOOKUP',
                                            invocant  => ::Var(
                                                namespace => [],
                                                name      => '/',
                                                twigil    => '',
                                                sigil     => '$',
                                            ),
                                            ), ], code => ::Var(
                                        namespace => [],
                                        name      => 'prefix:<$>',
                                        twigil    => '',
                                        sigil     => '&',
                                            ), ), ], code => ::Var(
                                namespace => [],
                                name      => 'make',
                                twigil    => '',
                                sigil     => '&',
                                            ), ), ], sig => ::Sig(
                        invocant   => '',
                        positional => [],
                                            ), pad => ::Pad(
                        lexicals  => [],
                        namespace => "KindaPerl6::Grammar",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                                            ),
                    CATCH => '',
                    state => {}, ), ), ], ), ::Rule::Concat( concat => [ ::Rule::Subrule(
                capture_to_array => '',
                metasyntax       => 'token_P5',
                ident            => '',
                    ), ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Apply( arguments => [ ::Call(
                                            hyper     => '',
                                            arguments => [ ::Val::Buf( buf => 'token_P5', ), ],
                                            method    => 'LOOKUP',
                                            invocant  => ::Var(
                                                namespace => [],
                                                name      => '/',
                                                twigil    => '',
                                                sigil     => '$',
                                            ),
                                            ), ], code => ::Var(
                                        namespace => [],
                                        name      => 'prefix:<$>',
                                        twigil    => '',
                                        sigil     => '&',
                                            ), ), ], code => ::Var(
                                namespace => [],
                                name      => 'make',
                                twigil    => '',
                                sigil     => '&',
                                            ), ), ], sig => ::Sig(
                        invocant   => '',
                        positional => [],
                                            ), pad => ::Pad(
                        lexicals  => [],
                        namespace => "KindaPerl6::Grammar",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                                            ),
                    CATCH => '',
                    state => {}, ), ), ], ), ::Rule::Concat( concat => [ ::Rule::Subrule(
                capture_to_array => '',
                metasyntax       => 'proto',
                ident            => '',
                    ), ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Apply( arguments => [ ::Call(
                                            hyper     => '',
                                            arguments => [ ::Val::Buf( buf => 'proto', ), ],
                                            method    => 'LOOKUP',
                                            invocant  => ::Var(
                                                namespace => [],
                                                name      => '/',
                                                twigil    => '',
                                                sigil     => '$',
                                            ),
                                            ), ], code => ::Var(
                                        namespace => [],
                                        name      => 'prefix:<$>',
                                        twigil    => '',
                                        sigil     => '&',
                                            ), ), ], code => ::Var(
                                namespace => [],
                                name      => 'make',
                                twigil    => '',
                                sigil     => '&',
                                            ), ), ], sig => ::Sig(
                        invocant   => '',
                        positional => [],
                                            ), pad => ::Pad(
                        lexicals  => [],
                        namespace => "KindaPerl6::Grammar",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                                            ),
                    CATCH => '',
                    state => {}, ), ), ], ), ::Rule::Concat( concat => [ ::Rule::Subrule(
                capture_to_array => '',
                metasyntax       => 'multi_method',
                ident            => '',
                    ), ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Apply( arguments => [ ::Call(
                                            hyper     => '',
                                            arguments => [ ::Val::Buf( buf => 'multi_method', ), ],
                                            method    => 'LOOKUP',
                                            invocant  => ::Var(
                                                namespace => [],
                                                name      => '/',
                                                twigil    => '',
                                                sigil     => '$',
                                            ),
                                            ), ], code => ::Var(
                                        namespace => [],
                                        name      => 'prefix:<$>',
                                        twigil    => '',
                                        sigil     => '&',
                                            ), ), ], code => ::Var(
                                namespace => [],
                                name      => 'make',
                                twigil    => '',
                                sigil     => '&',
                                            ), ), ], sig => ::Sig(
                        invocant   => '',
                        positional => [],
                                            ), pad => ::Pad(
                        lexicals  => [],
                        namespace => "KindaPerl6::Grammar",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                                            ),
                    CATCH => '',
                    state => {}, ), ), ], ), ::Rule::Concat( concat => [ ::Rule::Subrule(
                capture_to_array => '',
                metasyntax       => 'method',
                ident            => '',
                    ), ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Apply( arguments => [ ::Call(
                                            hyper     => '',
                                            arguments => [ ::Val::Buf( buf => 'method', ), ],
                                            method    => 'LOOKUP',
                                            invocant  => ::Var(
                                                namespace => [],
                                                name      => '/',
                                                twigil    => '',
                                                sigil     => '$',
                                            ),
                                            ), ], code => ::Var(
                                        namespace => [],
                                        name      => 'prefix:<$>',
                                        twigil    => '',
                                        sigil     => '&',
                                            ), ), ], code => ::Var(
                                namespace => [],
                                name      => 'make',
                                twigil    => '',
                                sigil     => '&',
                                            ), ), ], sig => ::Sig(
                        invocant   => '',
                        positional => [],
                                            ), pad => ::Pad(
                        lexicals  => [],
                        namespace => "KindaPerl6::Grammar",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                                            ),
                    CATCH => '',
                    state => {}, ), ), ], ), ::Rule::Concat( concat => [ ::Rule::Subrule(
                capture_to_array => '',
                metasyntax       => 'multi_sub',
                ident            => '',
                    ), ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Apply( arguments => [ ::Call(
                                            hyper     => '',
                                            arguments => [ ::Val::Buf( buf => 'multi_sub', ), ],
                                            method    => 'LOOKUP',
                                            invocant  => ::Var(
                                                namespace => [],
                                                name      => '/',
                                                twigil    => '',
                                                sigil     => '$',
                                            ),
                                            ), ], code => ::Var(
                                        namespace => [],
                                        name      => 'prefix:<$>',
                                        twigil    => '',
                                        sigil     => '&',
                                            ), ), ], code => ::Var(
                                namespace => [],
                                name      => 'make',
                                twigil    => '',
                                sigil     => '&',
                                            ), ), ], sig => ::Sig(
                        invocant   => '',
                        positional => [],
                                            ), pad => ::Pad(
                        lexicals  => [],
                        namespace => "KindaPerl6::Grammar",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                                            ),
                    CATCH => '',
                    state => {}, ), ), ], ), ::Rule::Concat( concat => [ ::Rule::Subrule(
                capture_to_array => '',
                metasyntax       => 'subset',
                ident            => '',
                    ), ::Rule::Block( closure => ::Lit::Code( body => [ ::If( body => ::Lit::Code( body => [ ::Bind( parameters => ::Var(
                                            namespace => [],
                                            name      => 'bind',
                                            twigil    => '',
                                            sigil     => '$',
                                            ), arguments => ::Call(
                                            hyper     => '',
                                            arguments => [ ::Lit::NamedArgument( value => ::Call(
                                                        hyper     => '',
                                                        arguments => [ ::Lit::NamedArgument( value => ::Call(
                                                                    hyper     => '',
                                                                    arguments => '',
                                                                    method    => 'name',
                                                                    invocant  => ::Apply( arguments => [ ::Call(
                                                                                hyper     => '',
                                                                                arguments => [ ::Val::Buf( buf => 'subset', ), ],
                                                                                method    => 'LOOKUP',
                                                                                invocant  => ::Var(
                                                                                    namespace => [],
                                                                                    name      => '/',
                                                                                    twigil    => '',
                                                                                    sigil     => '$',
                                                                                ),
                                                                                ), ], code => ::Var(
                                                                            namespace => [],
                                                                            name      => 'prefix:<$>',
                                                                            twigil    => '',
                                                                            sigil     => '&',
                                                                                ), ),
                                                                    ), key => ::Val::Buf( buf => 'name', ), ), ],
                                                        method   => 'new',
                                                        invocant => ::Proto( name => 'Proto', ),
                                                        ), key => ::Val::Buf( buf => 'parameters', ), ), ::Lit::NamedArgument( value => ::Call(
                                                        hyper     => '',
                                                        arguments => [ ::Lit::NamedArgument( value => ::Val::Buf( buf => '', ), key => ::Val::Buf( buf => 'name', ), ), ::Lit::NamedArgument( value => ::Call(
                                                                    hyper     => '',
                                                                    arguments => '',
                                                                    method    => 'base_class',
                                                                    invocant  => ::Apply( arguments => [ ::Call(
                                                                                hyper     => '',
                                                                                arguments => [ ::Val::Buf( buf => 'subset', ), ],
                                                                                method    => 'LOOKUP',
                                                                                invocant  => ::Var(
                                                                                    namespace => [],
                                                                                    name      => '/',
                                                                                    twigil    => '',
                                                                                    sigil     => '$',
                                                                                ),
                                                                                ), ], code => ::Var(
                                                                            namespace => [],
                                                                            name      => 'prefix:<$>',
                                                                            twigil    => '',
                                                                            sigil     => '&',
                                                                                ), ),
                                                                    ), key => ::Val::Buf( buf => 'base_class', ), ), ::Lit::NamedArgument( value => ::Call(
                                                                    hyper     => '',
                                                                    arguments => '',
                                                                    method    => 'block',
                                                                    invocant  => ::Apply( arguments => [ ::Call(
                                                                                hyper     => '',
                                                                                arguments => [ ::Val::Buf( buf => 'subset', ), ],
                                                                                method    => 'LOOKUP',
                                                                                invocant  => ::Var(
                                                                                    namespace => [],
                                                                                    name      => '/',
                                                                                    twigil    => '',
                                                                                    sigil     => '$',
                                                                                ),
                                                                                ), ], code => ::Var(
                                                                            namespace => [],
                                                                            name      => 'prefix:<$>',
                                                                            twigil    => '',
                                                                            sigil     => '&',
                                                                                ), ),
                                                                    ), key => ::Val::Buf( buf => 'block', ), ), ],
                                                        method   => 'new',
                                                        invocant => ::Proto( name => 'Lit::Subset', ),
                                                        ), key => ::Val::Buf( buf => 'arguments', ), ), ],
                                            method   => 'new',
                                            invocant => ::Proto( name => 'Bind', ),
                                            ), ), ::Apply( arguments => [ ::Var(
                                                namespace => [],
                                                name      => 'bind',
                                                twigil    => '',
                                                sigil     => '$',
                                                ), ], code => ::Var( namespace => [ 'COMPILER', ],
                                            name   => 'begin_block',
                                            twigil => '',
                                            sigil  => '&', ), ), ::Apply( arguments => [ ::Var(
                                                namespace => [],
                                                name      => 'bind',
                                                twigil    => '',
                                                sigil     => '$',
                                                ), ], code => ::Var(
                                            namespace => [],
                                            name      => 'make',
                                            twigil    => '',
                                            sigil     => '&',
                                                ), ), ], sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                                ), pad => ::Pad( lexicals => [ ::Decl(
                                            decl => 'my',
                                            var  => ::Var(
                                                namespace => [],
                                                name      => 'bind',
                                                twigil    => '',
                                                sigil     => '$',
                                                ), type => '',
                                                ) ],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...), ),
                                CATCH => '',
                                state => {}, ), cond => ::Apply( arguments => [ ::Call(
                                        hyper     => '',
                                        arguments => '',
                                        method    => 'name',
                                        invocant  => ::Apply( arguments => [ ::Call(
                                                    hyper     => '',
                                                    arguments => [ ::Val::Buf( buf => 'subset', ), ],
                                                    method    => 'LOOKUP',
                                                    invocant  => ::Var(
                                                        namespace => [],
                                                        name      => '/',
                                                        twigil    => '',
                                                        sigil     => '$',
                                                    ),
                                                    ), ], code => ::Var(
                                                namespace => [],
                                                name      => 'prefix:<$>',
                                                twigil    => '',
                                                sigil     => '&',
                                                    ), ),
                                        ), ::Val::Buf( buf => '', ), ], code => ::Var(
                                    namespace => [],
                                    name      => 'infix:<ne>',
                                    twigil    => '',
                                    sigil     => '&',
                                        ), ), otherwise => '', ), ::Apply( arguments => [ ::Apply( arguments => [ ::Call(
                                            hyper     => '',
                                            arguments => [ ::Val::Buf( buf => 'subset', ), ],
                                            method    => 'LOOKUP',
                                            invocant  => ::Var(
                                                namespace => [],
                                                name      => '/',
                                                twigil    => '',
                                                sigil     => '$',
                                            ),
                                            ), ], code => ::Var(
                                        namespace => [],
                                        name      => 'prefix:<$>',
                                        twigil    => '',
                                        sigil     => '&',
                                            ), ), ], code => ::Var(
                                namespace => [],
                                name      => 'make',
                                twigil    => '',
                                sigil     => '&',
                                            ), ), ], sig => ::Sig(
                        invocant   => '',
                        positional => [],
                                            ), pad => ::Pad(
                        lexicals  => [],
                        namespace => "KindaPerl6::Grammar",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                                            ),
                    CATCH => '',
                    state => {}, ), ), ], ), ::Rule::Concat( concat => [ ::Rule::Subrule(
                capture_to_array => '',
                metasyntax       => 'opt_declarator',
                ident            => '',
                    ), ::Rule::Subrule(
                capture_to_array => '',
                metasyntax       => 'sub',
                ident            => '',
                    ), ::Rule::Block( closure => ::Lit::Code( body => [ ::If( body => ::Lit::Code( body => [ ::If( body => ::Lit::Code( body => [ ::Apply( arguments => [ ::Apply( arguments => [ ::Call(
                                                                    hyper     => '',
                                                                    arguments => [ ::Val::Buf( buf => 'sub', ), ],
                                                                    method    => 'LOOKUP',
                                                                    invocant  => ::Var(
                                                                        namespace => [],
                                                                        name      => '/',
                                                                        twigil    => '',
                                                                        sigil     => '$',
                                                                    ),
                                                                    ), ], code => ::Var(
                                                                namespace => [],
                                                                name      => 'prefix:<$>',
                                                                twigil    => '',
                                                                sigil     => '&',
                                                                    ), ), ], code => ::Var(
                                                        namespace => [],
                                                        name      => 'make',
                                                        twigil    => '',
                                                        sigil     => '&',
                                                                    ), ), ], sig => ::Sig(
                                                invocant   => '',
                                                positional => [],
                                                                    ), pad => ::Pad(
                                                lexicals  => [],
                                                namespace => "KindaPerl6::Grammar",
                                                parent    => ::Pad(...),
                                                evaluator => ::Sub(...),
                                                                    ),
                                            CATCH => '',
                                            state => {}, ), cond => ::Apply( arguments => [ ::Apply( arguments => [ ::Call(
                                                            hyper     => '',
                                                            arguments => [ ::Val::Buf( buf => 'opt_declarator', ), ],
                                                            method    => 'LOOKUP',
                                                            invocant  => ::Var(
                                                                namespace => [],
                                                                name      => '/',
                                                                twigil    => '',
                                                                sigil     => '$',
                                                            ),
                                                            ), ], code => ::Var(
                                                        namespace => [],
                                                        name      => 'prefix:<$>',
                                                        twigil    => '',
                                                        sigil     => '&',
                                                            ), ), ::Val::Buf( buf => '', ), ], code => ::Var(
                                                namespace => [],
                                                name      => 'infix:<eq>',
                                                twigil    => '',
                                                sigil     => '&',
                                                            ), ), otherwise => ::Lit::Code( body => [ ::Apply( arguments => [ ::Val::Buf( buf => 'Error: subroutines with declarators should have a name', ), ], code => ::Var(
                                                        namespace => [],
                                                        name      => 'print',
                                                        twigil    => '',
                                                        sigil     => '&',
                                                            ), ), ::Apply( arguments => [ ::Val::Buf( buf => 'Error: subroutines with declarators should have a name', ), ], code => ::Var(
                                                        namespace => [],
                                                        name      => 'die',
                                                        twigil    => '',
                                                        sigil     => '&',
                                                            ), ), ], sig => ::Sig(
                                                invocant   => '',
                                                positional => [],
                                                            ), pad => ::Pad(
                                                lexicals  => [],
                                                namespace => "KindaPerl6::Grammar",
                                                parent    => ::Pad(...),
                                                evaluator => ::Sub(...),
                                                            ),
                                            CATCH => '',
                                            state => {}, ), ), ], sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                            ), pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                            ),
                                CATCH => '',
                                state => {}, ), cond => ::Apply( arguments => [ ::Call(
                                        hyper     => '',
                                        arguments => '',
                                        method    => 'name',
                                        invocant  => ::Apply( arguments => [ ::Call(
                                                    hyper     => '',
                                                    arguments => [ ::Val::Buf( buf => 'sub', ), ],
                                                    method    => 'LOOKUP',
                                                    invocant  => ::Var(
                                                        namespace => [],
                                                        name      => '/',
                                                        twigil    => '',
                                                        sigil     => '$',
                                                    ),
                                                    ), ], code => ::Var(
                                                namespace => [],
                                                name      => 'prefix:<$>',
                                                twigil    => '',
                                                sigil     => '&',
                                                    ), ),
                                        ), ::Val::Buf( buf => '', ), ], code => ::Var(
                                    namespace => [],
                                    name      => 'infix:<eq>',
                                    twigil    => '',
                                    sigil     => '&',
                                        ), ), otherwise => '', ), ::Var(
                            namespace => [],
                            name      => 'decl',
                            twigil    => '',
                            sigil     => '$',
                                        ), ::If( body => ::Lit::Code( body => [ ::Bind( parameters => ::Var(
                                            namespace => [],
                                            name      => 'decl',
                                            twigil    => '',
                                            sigil     => '$',
                                            ), arguments => ::Val::Buf( buf => 'our', ), ), ], sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                            ), pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                            ),
                                CATCH => '',
                                state => {}, ), cond => ::Apply( arguments => [ ::Apply( arguments => [ ::Call(
                                                hyper     => '',
                                                arguments => [ ::Val::Buf( buf => 'opt_declarator', ), ],
                                                method    => 'LOOKUP',
                                                invocant  => ::Var(
                                                    namespace => [],
                                                    name      => '/',
                                                    twigil    => '',
                                                    sigil     => '$',
                                                ),
                                                ), ], code => ::Var(
                                            namespace => [],
                                            name      => 'prefix:<$>',
                                            twigil    => '',
                                            sigil     => '&',
                                                ), ), ::Val::Buf( buf => '', ), ], code => ::Var(
                                    namespace => [],
                                    name      => 'infix:<eq>',
                                    twigil    => '',
                                    sigil     => '&',
                                                ), ), otherwise => ::Lit::Code( body => [ ::Bind( parameters => ::Var(
                                            namespace => [],
                                            name      => 'decl',
                                            twigil    => '',
                                            sigil     => '$',
                                                ), arguments => ::Apply( arguments => [ ::Call(
                                                    hyper     => '',
                                                    arguments => [ ::Val::Buf( buf => 'opt_declarator', ), ],
                                                    method    => 'LOOKUP',
                                                    invocant  => ::Var(
                                                        namespace => [],
                                                        name      => '/',
                                                        twigil    => '',
                                                        sigil     => '$',
                                                    ),
                                                    ), ], code => ::Var(
                                                namespace => [],
                                                name      => 'prefix:<$>',
                                                twigil    => '',
                                                sigil     => '&',
                                                    ), ), ), ], sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                                    ), pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                                    ),
                                CATCH => '',
                                state => {}, ), ), ::Call(
                            hyper     => '',
                            arguments => [ ::Call(
                                    hyper     => '',
                                    arguments => [ ::Lit::Array( array => [ ::Call(
                                                    hyper     => '',
                                                    arguments => [ ::Lit::NamedArgument( value => ::Var(
                                                                namespace => [],
                                                                name      => 'decl',
                                                                twigil    => '',
                                                                sigil     => '$',
                                                                ), key => ::Val::Buf( buf => 'decl', ), ), ::Lit::NamedArgument( value => ::Call(
                                                                hyper     => '',
                                                                arguments => [ ::Lit::NamedArgument( value => ::Call(
                                                                            hyper     => '',
                                                                            arguments => '',
                                                                            method    => 'name',
                                                                            invocant  => ::Apply( arguments => [ ::Call(
                                                                                        hyper     => '',
                                                                                        arguments => [ ::Val::Buf( buf => 'sub', ), ],
                                                                                        method    => 'LOOKUP',
                                                                                        invocant  => ::Var(
                                                                                            namespace => [],
                                                                                            name      => '/',
                                                                                            twigil    => '',
                                                                                            sigil     => '$',
                                                                                        ),
                                                                                        ), ], code => ::Var(
                                                                                    namespace => [],
                                                                                    name      => 'prefix:<$>',
                                                                                    twigil    => '',
                                                                                    sigil     => '&',
                                                                                        ), ),
                                                                            ), key => ::Val::Buf( buf => 'name', ), ), ::Lit::NamedArgument( value => ::Val::Buf( buf => '', ), key => ::Val::Buf( buf => 'twigil', ), ),
                                                                    ::Lit::NamedArgument( value => ::Val::Buf( buf => '&', ), key => ::Val::Buf( buf => 'sigil', ), ), ::Lit::NamedArgument( value => ::Call(
                                                                            hyper     => '',
                                                                            arguments => [ ::Lit::Array( array => [], ), ],
                                                                            method    => 'new',
                                                                            invocant  => ::Proto( name => 'Array', ),
                                                                            ), key => ::Val::Buf( buf => 'namespace', ), ), ],
                                                                method   => 'new',
                                                                invocant => ::Proto( name => 'Var', ),
                                                                ), key => ::Val::Buf( buf => 'var', ), ), ::Lit::NamedArgument( value => ::Val::Buf( buf => '', ), key => ::Val::Buf( buf => 'type', ), ), ],
                                                    method   => 'new',
                                                    invocant => ::Proto( name => 'Decl', ),
                                                    ), ], ), ],
                                    method   => 'new',
                                    invocant => ::Proto( name => 'Array', ),
                                    ), ],
                            method   => 'add_lexicals',
                            invocant => ::Apply(
                                arguments => [],
                                code      => ::Var( namespace => [ 'COMPILER', ],
                                    name   => 'current_pad',
                                    twigil => '',
                                    sigil  => '&', ),
                            ),
                                ), ::Bind( parameters => ::Var(
                                namespace => [],
                                name      => 'bind',
                                twigil    => '',
                                sigil     => '$',
                                ), arguments => ::Call(
                                hyper     => '',
                                arguments => [ ::Lit::NamedArgument( value => ::Call(
                                            hyper     => '',
                                            arguments => [ ::Lit::NamedArgument( value => ::Call(
                                                        hyper     => '',
                                                        arguments => '',
                                                        method    => 'name',
                                                        invocant  => ::Apply( arguments => [ ::Call(
                                                                    hyper     => '',
                                                                    arguments => [ ::Val::Buf( buf => 'sub', ), ],
                                                                    method    => 'LOOKUP',
                                                                    invocant  => ::Var(
                                                                        namespace => [],
                                                                        name      => '/',
                                                                        twigil    => '',
                                                                        sigil     => '$',
                                                                    ),
                                                                    ), ], code => ::Var(
                                                                namespace => [],
                                                                name      => 'prefix:<$>',
                                                                twigil    => '',
                                                                sigil     => '&',
                                                                    ), ),
                                                        ), key => ::Val::Buf( buf => 'name', ), ), ::Lit::NamedArgument( value => ::Val::Buf( buf => '', ), key => ::Val::Buf( buf => 'twigil', ), ),
                                                ::Lit::NamedArgument( value => ::Val::Buf( buf => '&', ), key => ::Val::Buf( buf => 'sigil', ), ), ::Lit::NamedArgument( value => ::Call(
                                                        hyper     => '',
                                                        arguments => [ ::Lit::Array( array => [], ), ],
                                                        method    => 'new',
                                                        invocant  => ::Proto( name => 'Array', ),
                                                        ), key => ::Val::Buf( buf => 'namespace', ), ), ],
                                            method   => 'new',
                                            invocant => ::Proto( name => 'Var', ),
                                            ), key => ::Val::Buf( buf => 'parameters', ), ), ::Lit::NamedArgument( value => ::Apply( arguments => [ ::Call(
                                                    hyper     => '',
                                                    arguments => [ ::Val::Buf( buf => 'sub', ), ],
                                                    method    => 'LOOKUP',
                                                    invocant  => ::Var(
                                                        namespace => [],
                                                        name      => '/',
                                                        twigil    => '',
                                                        sigil     => '$',
                                                    ),
                                                    ), ], code => ::Var(
                                                namespace => [],
                                                name      => 'prefix:<$>',
                                                twigil    => '',
                                                sigil     => '&',
                                                    ), ), key => ::Val::Buf( buf => 'arguments', ), ), ],
                                method   => 'new',
                                invocant => ::Proto( name => 'Bind', ),
                                ), ), ::Apply( arguments => [ ::Var(
                                    namespace => [],
                                    name      => 'bind',
                                    twigil    => '',
                                    sigil     => '$',
                                    ), ], code => ::Var(
                                namespace => [],
                                name      => 'make',
                                twigil    => '',
                                sigil     => '&',
                                    ), ), ], sig => ::Sig(
                        invocant   => '',
                        positional => [],
                                    ), pad => ::Pad( lexicals => [ ::Decl(
                                decl => 'my',
                                var  => ::Var(
                                    namespace => [],
                                    name      => 'decl',
                                    twigil    => '',
                                    sigil     => '$',
                                    ), type => '',
                                    ), ::Decl(
                                decl => 'my',
                                var  => ::Var(
                                    namespace => [],
                                    name      => 'bind',
                                    twigil    => '',
                                    sigil     => '$',
                                    ), type => '',
                                    ) ],
                        namespace => "KindaPerl6::Grammar",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...), ),
                    CATCH => '',
                    state => {}, ), ), ], ), ::Rule::Concat( concat => [ ::Rule::Subrule(
                capture_to_array => '',
                metasyntax       => 'opt_declarator',
                ident            => '',
                    ), ::Rule::Subrule(
                capture_to_array => '',
                metasyntax       => 'macro',
                ident            => '',
                    ), ::Rule::Block( closure => ::Lit::Code( body => [ ::If( body => ::Lit::Code( body => [ ::If( body => ::Lit::Code( body => [ ::Apply( arguments => [ ::Apply( arguments => [ ::Call(
                                                                    hyper     => '',
                                                                    arguments => [ ::Val::Buf( buf => 'macro', ), ],
                                                                    method    => 'LOOKUP',
                                                                    invocant  => ::Var(
                                                                        namespace => [],
                                                                        name      => '/',
                                                                        twigil    => '',
                                                                        sigil     => '$',
                                                                    ),
                                                                    ), ], code => ::Var(
                                                                namespace => [],
                                                                name      => 'prefix:<$>',
                                                                twigil    => '',
                                                                sigil     => '&',
                                                                    ), ), ], code => ::Var(
                                                        namespace => [],
                                                        name      => 'make',
                                                        twigil    => '',
                                                        sigil     => '&',
                                                                    ), ), ], sig => ::Sig(
                                                invocant   => '',
                                                positional => [],
                                                                    ), pad => ::Pad(
                                                lexicals  => [],
                                                namespace => "KindaPerl6::Grammar",
                                                parent    => ::Pad(...),
                                                evaluator => ::Sub(...),
                                                                    ),
                                            CATCH => '',
                                            state => {}, ), cond => ::Apply( arguments => [ ::Apply( arguments => [ ::Call(
                                                            hyper     => '',
                                                            arguments => [ ::Val::Buf( buf => 'opt_declarator', ), ],
                                                            method    => 'LOOKUP',
                                                            invocant  => ::Var(
                                                                namespace => [],
                                                                name      => '/',
                                                                twigil    => '',
                                                                sigil     => '$',
                                                            ),
                                                            ), ], code => ::Var(
                                                        namespace => [],
                                                        name      => 'prefix:<$>',
                                                        twigil    => '',
                                                        sigil     => '&',
                                                            ), ), ::Val::Buf( buf => '', ), ], code => ::Var(
                                                namespace => [],
                                                name      => 'infix:<eq>',
                                                twigil    => '',
                                                sigil     => '&',
                                                            ), ), otherwise => ::Lit::Code( body => [ ::Apply( arguments => [ ::Val::Buf( buf => 'Error: macros with declarators should have a name', ), ], code => ::Var(
                                                        namespace => [],
                                                        name      => 'print',
                                                        twigil    => '',
                                                        sigil     => '&',
                                                            ), ), ::Apply( arguments => [ ::Val::Buf( buf => 'Error: macros with declarators should have a name', ), ], code => ::Var(
                                                        namespace => [],
                                                        name      => 'die',
                                                        twigil    => '',
                                                        sigil     => '&',
                                                            ), ), ], sig => ::Sig(
                                                invocant   => '',
                                                positional => [],
                                                            ), pad => ::Pad(
                                                lexicals  => [],
                                                namespace => "KindaPerl6::Grammar",
                                                parent    => ::Pad(...),
                                                evaluator => ::Sub(...),
                                                            ),
                                            CATCH => '',
                                            state => {}, ), ), ], sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                            ), pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                            ),
                                CATCH => '',
                                state => {}, ), cond => ::Apply( arguments => [ ::Call(
                                        hyper     => '',
                                        arguments => '',
                                        method    => 'name',
                                        invocant  => ::Apply( arguments => [ ::Call(
                                                    hyper     => '',
                                                    arguments => [ ::Val::Buf( buf => 'macro', ), ],
                                                    method    => 'LOOKUP',
                                                    invocant  => ::Var(
                                                        namespace => [],
                                                        name      => '/',
                                                        twigil    => '',
                                                        sigil     => '$',
                                                    ),
                                                    ), ], code => ::Var(
                                                namespace => [],
                                                name      => 'prefix:<$>',
                                                twigil    => '',
                                                sigil     => '&',
                                                    ), ),
                                        ), ::Val::Buf( buf => '', ), ], code => ::Var(
                                    namespace => [],
                                    name      => 'infix:<eq>',
                                    twigil    => '',
                                    sigil     => '&',
                                        ), ), otherwise => '', ), ::Var(
                            namespace => [],
                            name      => 'decl',
                            twigil    => '',
                            sigil     => '$',
                                        ), ::If( body => ::Lit::Code( body => [ ::Bind( parameters => ::Var(
                                            namespace => [],
                                            name      => 'decl',
                                            twigil    => '',
                                            sigil     => '$',
                                            ), arguments => ::Val::Buf( buf => 'our', ), ), ], sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                            ), pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                            ),
                                CATCH => '',
                                state => {}, ), cond => ::Apply( arguments => [ ::Apply( arguments => [ ::Call(
                                                hyper     => '',
                                                arguments => [ ::Val::Buf( buf => 'opt_declarator', ), ],
                                                method    => 'LOOKUP',
                                                invocant  => ::Var(
                                                    namespace => [],
                                                    name      => '/',
                                                    twigil    => '',
                                                    sigil     => '$',
                                                ),
                                                ), ], code => ::Var(
                                            namespace => [],
                                            name      => 'prefix:<$>',
                                            twigil    => '',
                                            sigil     => '&',
                                                ), ), ::Val::Buf( buf => '', ), ], code => ::Var(
                                    namespace => [],
                                    name      => 'infix:<eq>',
                                    twigil    => '',
                                    sigil     => '&',
                                                ), ), otherwise => ::Lit::Code( body => [ ::Bind( parameters => ::Var(
                                            namespace => [],
                                            name      => 'decl',
                                            twigil    => '',
                                            sigil     => '$',
                                                ), arguments => ::Apply( arguments => [ ::Call(
                                                    hyper     => '',
                                                    arguments => [ ::Val::Buf( buf => 'opt_declarator', ), ],
                                                    method    => 'LOOKUP',
                                                    invocant  => ::Var(
                                                        namespace => [],
                                                        name      => '/',
                                                        twigil    => '',
                                                        sigil     => '$',
                                                    ),
                                                    ), ], code => ::Var(
                                                namespace => [],
                                                name      => 'prefix:<$>',
                                                twigil    => '',
                                                sigil     => '&',
                                                    ), ), ), ], sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                                    ), pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                                    ),
                                CATCH => '',
                                state => {}, ), ), ::Call(
                            hyper     => '',
                            arguments => [ ::Call(
                                    hyper     => '',
                                    arguments => [ ::Lit::Array( array => [ ::Call(
                                                    hyper     => '',
                                                    arguments => [ ::Lit::NamedArgument( value => ::Var(
                                                                namespace => [],
                                                                name      => 'decl',
                                                                twigil    => '',
                                                                sigil     => '$',
                                                                ), key => ::Val::Buf( buf => 'decl', ), ), ::Lit::NamedArgument( value => ::Call(
                                                                hyper     => '',
                                                                arguments => [ ::Lit::NamedArgument( value => ::Call(
                                                                            hyper     => '',
                                                                            arguments => '',
                                                                            method    => 'name',
                                                                            invocant  => ::Apply( arguments => [ ::Call(
                                                                                        hyper     => '',
                                                                                        arguments => [ ::Val::Buf( buf => 'macro', ), ],
                                                                                        method    => 'LOOKUP',
                                                                                        invocant  => ::Var(
                                                                                            namespace => [],
                                                                                            name      => '/',
                                                                                            twigil    => '',
                                                                                            sigil     => '$',
                                                                                        ),
                                                                                        ), ], code => ::Var(
                                                                                    namespace => [],
                                                                                    name      => 'prefix:<$>',
                                                                                    twigil    => '',
                                                                                    sigil     => '&',
                                                                                        ), ),
                                                                            ), key => ::Val::Buf( buf => 'name', ), ), ::Lit::NamedArgument( value => ::Val::Buf( buf => '', ), key => ::Val::Buf( buf => 'twigil', ), ),
                                                                    ::Lit::NamedArgument( value => ::Val::Buf( buf => '&', ), key => ::Val::Buf( buf => 'sigil', ), ), ::Lit::NamedArgument( value => ::Call(
                                                                            hyper     => '',
                                                                            arguments => [ ::Lit::Array( array => [], ), ],
                                                                            method    => 'new',
                                                                            invocant  => ::Proto( name => 'Array', ),
                                                                            ), key => ::Val::Buf( buf => 'namespace', ), ), ],
                                                                method   => 'new',
                                                                invocant => ::Proto( name => 'Var', ),
                                                                ), key => ::Val::Buf( buf => 'var', ), ), ::Lit::NamedArgument( value => ::Val::Buf( buf => '', ), key => ::Val::Buf( buf => 'type', ), ), ],
                                                    method   => 'new',
                                                    invocant => ::Proto( name => 'Decl', ),
                                                    ), ], ), ],
                                    method   => 'new',
                                    invocant => ::Proto( name => 'Array', ),
                                    ), ],
                            method   => 'add_lexicals',
                            invocant => ::Apply(
                                arguments => [],
                                code      => ::Var( namespace => [ 'COMPILER', ],
                                    name   => 'current_pad',
                                    twigil => '',
                                    sigil  => '&', ),
                            ),
                                ), ::Bind( parameters => ::Var(
                                namespace => [],
                                name      => 'bind',
                                twigil    => '',
                                sigil     => '$',
                                ), arguments => ::Call(
                                hyper     => '',
                                arguments => [ ::Lit::NamedArgument( value => ::Call(
                                            hyper     => '',
                                            arguments => [ ::Lit::NamedArgument( value => ::Call(
                                                        hyper     => '',
                                                        arguments => '',
                                                        method    => 'name',
                                                        invocant  => ::Apply( arguments => [ ::Call(
                                                                    hyper     => '',
                                                                    arguments => [ ::Val::Buf( buf => 'macro', ), ],
                                                                    method    => 'LOOKUP',
                                                                    invocant  => ::Var(
                                                                        namespace => [],
                                                                        name      => '/',
                                                                        twigil    => '',
                                                                        sigil     => '$',
                                                                    ),
                                                                    ), ], code => ::Var(
                                                                namespace => [],
                                                                name      => 'prefix:<$>',
                                                                twigil    => '',
                                                                sigil     => '&',
                                                                    ), ),
                                                        ), key => ::Val::Buf( buf => 'name', ), ), ::Lit::NamedArgument( value => ::Val::Buf( buf => '', ), key => ::Val::Buf( buf => 'twigil', ), ),
                                                ::Lit::NamedArgument( value => ::Val::Buf( buf => '&', ), key => ::Val::Buf( buf => 'sigil', ), ), ::Lit::NamedArgument( value => ::Call(
                                                        hyper     => '',
                                                        arguments => [ ::Lit::Array( array => [], ), ],
                                                        method    => 'new',
                                                        invocant  => ::Proto( name => 'Array', ),
                                                        ), key => ::Val::Buf( buf => 'namespace', ), ), ],
                                            method   => 'new',
                                            invocant => ::Proto( name => 'Var', ),
                                            ), key => ::Val::Buf( buf => 'parameters', ), ), ::Lit::NamedArgument( value => ::Apply( arguments => [ ::Call(
                                                    hyper     => '',
                                                    arguments => [ ::Val::Buf( buf => 'macro', ), ],
                                                    method    => 'LOOKUP',
                                                    invocant  => ::Var(
                                                        namespace => [],
                                                        name      => '/',
                                                        twigil    => '',
                                                        sigil     => '$',
                                                    ),
                                                    ), ], code => ::Var(
                                                namespace => [],
                                                name      => 'prefix:<$>',
                                                twigil    => '',
                                                sigil     => '&',
                                                    ), ), key => ::Val::Buf( buf => 'arguments', ), ), ],
                                method   => 'new',
                                invocant => ::Proto( name => 'Bind', ),
                                ), ), ::Apply( arguments => [ ::Var(
                                    namespace => [],
                                    name      => 'bind',
                                    twigil    => '',
                                    sigil     => '$',
                                    ), ], code => ::Var(
                                namespace => [],
                                name      => 'make',
                                twigil    => '',
                                sigil     => '&',
                                    ), ), ], sig => ::Sig(
                        invocant   => '',
                        positional => [],
                                    ), pad => ::Pad( lexicals => [ ::Decl(
                                decl => 'my',
                                var  => ::Var(
                                    namespace => [],
                                    name      => 'decl',
                                    twigil    => '',
                                    sigil     => '$',
                                    ), type => '',
                                    ), ::Decl(
                                decl => 'my',
                                var  => ::Var(
                                    namespace => [],
                                    name      => 'bind',
                                    twigil    => '',
                                    sigil     => '$',
                                    ), type => '',
                                    ) ],
                        namespace => "KindaPerl6::Grammar",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...), ),
                    CATCH => '',
                    state => {}, ), ), ], ), ::Rule::Concat( concat => [ ::Rule::Subrule(
                capture_to_array => '',
                metasyntax       => 'opt_declarator',
                ident            => '',
                    ), ::Rule::Subrule(
                capture_to_array => '',
                metasyntax       => 'coro',
                ident            => '',
                    ), ::Rule::Block( closure => ::Lit::Code( body => [ ::If( body => ::Lit::Code( body => [ ::If( body => ::Lit::Code( body => [ ::Apply( arguments => [ ::Apply( arguments => [ ::Call(
                                                                    hyper     => '',
                                                                    arguments => [ ::Val::Buf( buf => 'coro', ), ],
                                                                    method    => 'LOOKUP',
                                                                    invocant  => ::Var(
                                                                        namespace => [],
                                                                        name      => '/',
                                                                        twigil    => '',
                                                                        sigil     => '$',
                                                                    ),
                                                                    ), ], code => ::Var(
                                                                namespace => [],
                                                                name      => 'prefix:<$>',
                                                                twigil    => '',
                                                                sigil     => '&',
                                                                    ), ), ], code => ::Var(
                                                        namespace => [],
                                                        name      => 'make',
                                                        twigil    => '',
                                                        sigil     => '&',
                                                                    ), ), ], sig => ::Sig(
                                                invocant   => '',
                                                positional => [],
                                                                    ), pad => ::Pad(
                                                lexicals  => [],
                                                namespace => "KindaPerl6::Grammar",
                                                parent    => ::Pad(...),
                                                evaluator => ::Sub(...),
                                                                    ),
                                            CATCH => '',
                                            state => {}, ), cond => ::Apply( arguments => [ ::Apply( arguments => [ ::Call(
                                                            hyper     => '',
                                                            arguments => [ ::Val::Buf( buf => 'opt_declarator', ), ],
                                                            method    => 'LOOKUP',
                                                            invocant  => ::Var(
                                                                namespace => [],
                                                                name      => '/',
                                                                twigil    => '',
                                                                sigil     => '$',
                                                            ),
                                                            ), ], code => ::Var(
                                                        namespace => [],
                                                        name      => 'prefix:<$>',
                                                        twigil    => '',
                                                        sigil     => '&',
                                                            ), ), ::Val::Buf( buf => '', ), ], code => ::Var(
                                                namespace => [],
                                                name      => 'infix:<eq>',
                                                twigil    => '',
                                                sigil     => '&',
                                                            ), ), otherwise => ::Lit::Code( body => [ ::Apply( arguments => [ ::Val::Buf( buf => 'Error: subroutines with declarators should have a name', ), ], code => ::Var(
                                                        namespace => [],
                                                        name      => 'print',
                                                        twigil    => '',
                                                        sigil     => '&',
                                                            ), ), ::Apply( arguments => [ ::Val::Buf( buf => 'Error: subroutines with declarators should have a name', ), ], code => ::Var(
                                                        namespace => [],
                                                        name      => 'die',
                                                        twigil    => '',
                                                        sigil     => '&',
                                                            ), ), ], sig => ::Sig(
                                                invocant   => '',
                                                positional => [],
                                                            ), pad => ::Pad(
                                                lexicals  => [],
                                                namespace => "KindaPerl6::Grammar",
                                                parent    => ::Pad(...),
                                                evaluator => ::Sub(...),
                                                            ),
                                            CATCH => '',
                                            state => {}, ), ), ], sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                            ), pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                            ),
                                CATCH => '',
                                state => {}, ), cond => ::Apply( arguments => [ ::Call(
                                        hyper     => '',
                                        arguments => '',
                                        method    => 'name',
                                        invocant  => ::Apply( arguments => [ ::Call(
                                                    hyper     => '',
                                                    arguments => [ ::Val::Buf( buf => 'coro', ), ],
                                                    method    => 'LOOKUP',
                                                    invocant  => ::Var(
                                                        namespace => [],
                                                        name      => '/',
                                                        twigil    => '',
                                                        sigil     => '$',
                                                    ),
                                                    ), ], code => ::Var(
                                                namespace => [],
                                                name      => 'prefix:<$>',
                                                twigil    => '',
                                                sigil     => '&',
                                                    ), ),
                                        ), ::Val::Buf( buf => '', ), ], code => ::Var(
                                    namespace => [],
                                    name      => 'infix:<eq>',
                                    twigil    => '',
                                    sigil     => '&',
                                        ), ), otherwise => '', ), ::Var(
                            namespace => [],
                            name      => 'decl',
                            twigil    => '',
                            sigil     => '$',
                                        ), ::If( body => ::Lit::Code( body => [ ::Bind( parameters => ::Var(
                                            namespace => [],
                                            name      => 'decl',
                                            twigil    => '',
                                            sigil     => '$',
                                            ), arguments => ::Val::Buf( buf => 'our', ), ), ], sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                            ), pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                            ),
                                CATCH => '',
                                state => {}, ), cond => ::Apply( arguments => [ ::Apply( arguments => [ ::Call(
                                                hyper     => '',
                                                arguments => [ ::Val::Buf( buf => 'opt_declarator', ), ],
                                                method    => 'LOOKUP',
                                                invocant  => ::Var(
                                                    namespace => [],
                                                    name      => '/',
                                                    twigil    => '',
                                                    sigil     => '$',
                                                ),
                                                ), ], code => ::Var(
                                            namespace => [],
                                            name      => 'prefix:<$>',
                                            twigil    => '',
                                            sigil     => '&',
                                                ), ), ::Val::Buf( buf => '', ), ], code => ::Var(
                                    namespace => [],
                                    name      => 'infix:<eq>',
                                    twigil    => '',
                                    sigil     => '&',
                                                ), ), otherwise => ::Lit::Code( body => [ ::Bind( parameters => ::Var(
                                            namespace => [],
                                            name      => 'decl',
                                            twigil    => '',
                                            sigil     => '$',
                                                ), arguments => ::Apply( arguments => [ ::Call(
                                                    hyper     => '',
                                                    arguments => [ ::Val::Buf( buf => 'opt_declarator', ), ],
                                                    method    => 'LOOKUP',
                                                    invocant  => ::Var(
                                                        namespace => [],
                                                        name      => '/',
                                                        twigil    => '',
                                                        sigil     => '$',
                                                    ),
                                                    ), ], code => ::Var(
                                                namespace => [],
                                                name      => 'prefix:<$>',
                                                twigil    => '',
                                                sigil     => '&',
                                                    ), ), ), ], sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                                    ), pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                                    ),
                                CATCH => '',
                                state => {}, ), ), ::Call(
                            hyper     => '',
                            arguments => [ ::Call(
                                    hyper     => '',
                                    arguments => [ ::Lit::Array( array => [ ::Call(
                                                    hyper     => '',
                                                    arguments => [ ::Lit::NamedArgument( value => ::Var(
                                                                namespace => [],
                                                                name      => 'decl',
                                                                twigil    => '',
                                                                sigil     => '$',
                                                                ), key => ::Val::Buf( buf => 'decl', ), ), ::Lit::NamedArgument( value => ::Call(
                                                                hyper     => '',
                                                                arguments => [ ::Lit::NamedArgument( value => ::Call(
                                                                            hyper     => '',
                                                                            arguments => '',
                                                                            method    => 'name',
                                                                            invocant  => ::Apply( arguments => [ ::Call(
                                                                                        hyper     => '',
                                                                                        arguments => [ ::Val::Buf( buf => 'coro', ), ],
                                                                                        method    => 'LOOKUP',
                                                                                        invocant  => ::Var(
                                                                                            namespace => [],
                                                                                            name      => '/',
                                                                                            twigil    => '',
                                                                                            sigil     => '$',
                                                                                        ),
                                                                                        ), ], code => ::Var(
                                                                                    namespace => [],
                                                                                    name      => 'prefix:<$>',
                                                                                    twigil    => '',
                                                                                    sigil     => '&',
                                                                                        ), ),
                                                                            ), key => ::Val::Buf( buf => 'name', ), ), ::Lit::NamedArgument( value => ::Val::Buf( buf => '', ), key => ::Val::Buf( buf => 'twigil', ), ),
                                                                    ::Lit::NamedArgument( value => ::Val::Buf( buf => '&', ), key => ::Val::Buf( buf => 'sigil', ), ), ::Lit::NamedArgument( value => ::Call(
                                                                            hyper     => '',
                                                                            arguments => [ ::Lit::Array( array => [], ), ],
                                                                            method    => 'new',
                                                                            invocant  => ::Proto( name => 'Array', ),
                                                                            ), key => ::Val::Buf( buf => 'namespace', ), ), ],
                                                                method   => 'new',
                                                                invocant => ::Proto( name => 'Var', ),
                                                                ), key => ::Val::Buf( buf => 'var', ), ), ::Lit::NamedArgument( value => ::Val::Buf( buf => '', ), key => ::Val::Buf( buf => 'type', ), ), ],
                                                    method   => 'new',
                                                    invocant => ::Proto( name => 'Decl', ),
                                                    ), ], ), ],
                                    method   => 'new',
                                    invocant => ::Proto( name => 'Array', ),
                                    ), ],
                            method   => 'add_lexicals',
                            invocant => ::Apply(
                                arguments => [],
                                code      => ::Var( namespace => [ 'COMPILER', ],
                                    name   => 'current_pad',
                                    twigil => '',
                                    sigil  => '&', ),
                            ),
                                ), ::Bind( parameters => ::Var(
                                namespace => [],
                                name      => 'bind',
                                twigil    => '',
                                sigil     => '$',
                                ), arguments => ::Call(
                                hyper     => '',
                                arguments => [ ::Lit::NamedArgument( value => ::Call(
                                            hyper     => '',
                                            arguments => [ ::Lit::NamedArgument( value => ::Call(
                                                        hyper     => '',
                                                        arguments => '',
                                                        method    => 'name',
                                                        invocant  => ::Apply( arguments => [ ::Call(
                                                                    hyper     => '',
                                                                    arguments => [ ::Val::Buf( buf => 'coro', ), ],
                                                                    method    => 'LOOKUP',
                                                                    invocant  => ::Var(
                                                                        namespace => [],
                                                                        name      => '/',
                                                                        twigil    => '',
                                                                        sigil     => '$',
                                                                    ),
                                                                    ), ], code => ::Var(
                                                                namespace => [],
                                                                name      => 'prefix:<$>',
                                                                twigil    => '',
                                                                sigil     => '&',
                                                                    ), ),
                                                        ), key => ::Val::Buf( buf => 'name', ), ), ::Lit::NamedArgument( value => ::Val::Buf( buf => '', ), key => ::Val::Buf( buf => 'twigil', ), ),
                                                ::Lit::NamedArgument( value => ::Val::Buf( buf => '&', ), key => ::Val::Buf( buf => 'sigil', ), ), ::Lit::NamedArgument( value => ::Call(
                                                        hyper     => '',
                                                        arguments => [ ::Lit::Array( array => [], ), ],
                                                        method    => 'new',
                                                        invocant  => ::Proto( name => 'Array', ),
                                                        ), key => ::Val::Buf( buf => 'namespace', ), ), ],
                                            method   => 'new',
                                            invocant => ::Proto( name => 'Var', ),
                                            ), key => ::Val::Buf( buf => 'parameters', ), ), ::Lit::NamedArgument( value => ::Apply( arguments => [ ::Call(
                                                    hyper     => '',
                                                    arguments => [ ::Val::Buf( buf => 'coro', ), ],
                                                    method    => 'LOOKUP',
                                                    invocant  => ::Var(
                                                        namespace => [],
                                                        name      => '/',
                                                        twigil    => '',
                                                        sigil     => '$',
                                                    ),
                                                    ), ], code => ::Var(
                                                namespace => [],
                                                name      => 'prefix:<$>',
                                                twigil    => '',
                                                sigil     => '&',
                                                    ), ), key => ::Val::Buf( buf => 'arguments', ), ), ],
                                method   => 'new',
                                invocant => ::Proto( name => 'Bind', ),
                                ), ), ::Apply( arguments => [ ::Var(
                                    namespace => [],
                                    name      => 'bind',
                                    twigil    => '',
                                    sigil     => '$',
                                    ), ], code => ::Var(
                                namespace => [],
                                name      => 'make',
                                twigil    => '',
                                sigil     => '&',
                                    ), ), ], sig => ::Sig(
                        invocant   => '',
                        positional => [],
                                    ), pad => ::Pad( lexicals => [ ::Decl(
                                decl => 'my',
                                var  => ::Var(
                                    namespace => [],
                                    name      => 'decl',
                                    twigil    => '',
                                    sigil     => '$',
                                    ), type => '',
                                    ), ::Decl(
                                decl => 'my',
                                var  => ::Var(
                                    namespace => [],
                                    name      => 'bind',
                                    twigil    => '',
                                    sigil     => '$',
                                    ), type => '',
                                    ) ],
                        namespace => "KindaPerl6::Grammar",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...), ),
                    CATCH => '',
                    state => {}, ), ), ], ), ::Rule::Concat( concat => [ ::Rule::Subrule(
                capture_to_array => '',
                metasyntax       => 'declarator',
                ident            => '',
                    ), ::Rule::SubruleNoCapture( metasyntax => 'ws', ), ::Rule::Subrule(
                capture_to_array => '',
                metasyntax       => 'opt_type',
                ident            => '',
                    ), ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ), ::Rule::Subrule(
                capture_to_array => '',
                metasyntax       => 'undeclared_var',
                ident            => '',
                    ), ::Rule::Block( closure => ::Lit::Code( body => [ ::If( body => ::Lit::Code( body => [ ::Call(
                                        hyper     => '',
                                        arguments => [ ::Call(
                                                hyper     => '',
                                                arguments => [ ::Lit::Array( array => [ ::Call(
                                                                hyper     => '',
                                                                arguments => [ ::Lit::Pair( value => ::Apply( arguments => [ ::Call(
                                                                                    hyper     => '',
                                                                                    arguments => [ ::Val::Buf( buf => 'declarator', ), ],
                                                                                    method    => 'LOOKUP',
                                                                                    invocant  => ::Var(
                                                                                        namespace => [],
                                                                                        name      => '/',
                                                                                        twigil    => '',
                                                                                        sigil     => '$',
                                                                                    ),
                                                                                    ), ], code => ::Var(
                                                                                namespace => [],
                                                                                name      => 'prefix:<$>',
                                                                                twigil    => '',
                                                                                sigil     => '&',
                                                                                    ), ), key => ::Val::Buf( buf => 'decl', ), ), ::Lit::Pair( value => ::Apply( arguments => [ ::Call(
                                                                                    hyper     => '',
                                                                                    arguments => [ ::Val::Buf( buf => 'opt_type', ), ],
                                                                                    method    => 'LOOKUP',
                                                                                    invocant  => ::Var(
                                                                                        namespace => [],
                                                                                        name      => '/',
                                                                                        twigil    => '',
                                                                                        sigil     => '$',
                                                                                    ),
                                                                                    ), ], code => ::Var(
                                                                                namespace => [],
                                                                                name      => 'prefix:<$>',
                                                                                twigil    => '',
                                                                                sigil     => '&',
                                                                                    ), ), key => ::Val::Buf( buf => 'type', ), ), ::Lit::Pair( value => ::Apply( arguments => [ ::Call(
                                                                                    hyper     => '',
                                                                                    arguments => [ ::Val::Buf( buf => 'undeclared_var', ), ],
                                                                                    method    => 'LOOKUP',
                                                                                    invocant  => ::Var(
                                                                                        namespace => [],
                                                                                        name      => '/',
                                                                                        twigil    => '',
                                                                                        sigil     => '$',
                                                                                    ),
                                                                                    ), ], code => ::Var(
                                                                                namespace => [],
                                                                                name      => 'prefix:<$>',
                                                                                twigil    => '',
                                                                                sigil     => '&',
                                                                                    ), ), key => ::Val::Buf( buf => 'var', ), ), ],
                                                                method   => 'new',
                                                                invocant => ::Proto( name => 'Decl', ),
                                                                ), ], ), ],
                                                method   => 'new',
                                                invocant => ::Proto( name => 'Array', ),
                                                ), ],
                                        method   => 'add_lexicals',
                                        invocant => ::Apply(
                                            arguments => [],
                                            code      => ::Var( namespace => [ 'COMPILER', ],
                                                name   => 'current_pad',
                                                twigil => '',
                                                sigil  => '&', ),
                                        ),
                                        ), ::Apply( arguments => [ ::Apply( arguments => [ ::Call(
                                                        hyper     => '',
                                                        arguments => [ ::Val::Buf( buf => 'undeclared_var', ), ],
                                                        method    => 'LOOKUP',
                                                        invocant  => ::Var(
                                                            namespace => [],
                                                            name      => '/',
                                                            twigil    => '',
                                                            sigil     => '$',
                                                        ),
                                                        ), ], code => ::Var(
                                                    namespace => [],
                                                    name      => 'prefix:<$>',
                                                    twigil    => '',
                                                    sigil     => '&',
                                                        ), ), ], code => ::Var(
                                            namespace => [],
                                            name      => 'make',
                                            twigil    => '',
                                            sigil     => '&',
                                                        ), ), ], sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                                        ), pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                                        ),
                                CATCH => '',
                                state => {}, ), cond => ::Apply( arguments => [ ::Apply( arguments => [ ::Call(
                                                hyper     => '',
                                                arguments => [ ::Val::Buf( buf => 'declarator', ), ],
                                                method    => 'LOOKUP',
                                                invocant  => ::Var(
                                                    namespace => [],
                                                    name      => '/',
                                                    twigil    => '',
                                                    sigil     => '$',
                                                ),
                                                ), ], code => ::Var(
                                            namespace => [],
                                            name      => 'prefix:<$>',
                                            twigil    => '',
                                            sigil     => '&',
                                                ), ), ::Val::Buf( buf => 'my', ), ], code => ::Var(
                                    namespace => [],
                                    name      => 'infix:<eq>',
                                    twigil    => '',
                                    sigil     => '&',
                                                ), ), otherwise => '', ), ::If( body => ::Lit::Code( body => [ ::Call(
                                        hyper     => '',
                                        arguments => [ ::Call(
                                                hyper     => '',
                                                arguments => [ ::Lit::Array( array => [ ::Call(
                                                                hyper     => '',
                                                                arguments => [ ::Lit::Pair( value => ::Apply( arguments => [ ::Call(
                                                                                    hyper     => '',
                                                                                    arguments => [ ::Val::Buf( buf => 'declarator', ), ],
                                                                                    method    => 'LOOKUP',
                                                                                    invocant  => ::Var(
                                                                                        namespace => [],
                                                                                        name      => '/',
                                                                                        twigil    => '',
                                                                                        sigil     => '$',
                                                                                    ),
                                                                                    ), ], code => ::Var(
                                                                                namespace => [],
                                                                                name      => 'prefix:<$>',
                                                                                twigil    => '',
                                                                                sigil     => '&',
                                                                                    ), ), key => ::Val::Buf( buf => 'decl', ), ), ::Lit::Pair( value => ::Apply( arguments => [ ::Call(
                                                                                    hyper     => '',
                                                                                    arguments => [ ::Val::Buf( buf => 'opt_type', ), ],
                                                                                    method    => 'LOOKUP',
                                                                                    invocant  => ::Var(
                                                                                        namespace => [],
                                                                                        name      => '/',
                                                                                        twigil    => '',
                                                                                        sigil     => '$',
                                                                                    ),
                                                                                    ), ], code => ::Var(
                                                                                namespace => [],
                                                                                name      => 'prefix:<$>',
                                                                                twigil    => '',
                                                                                sigil     => '&',
                                                                                    ), ), key => ::Val::Buf( buf => 'type', ), ), ::Lit::Pair( value => ::Apply( arguments => [ ::Call(
                                                                                    hyper     => '',
                                                                                    arguments => [ ::Val::Buf( buf => 'undeclared_var', ), ],
                                                                                    method    => 'LOOKUP',
                                                                                    invocant  => ::Var(
                                                                                        namespace => [],
                                                                                        name      => '/',
                                                                                        twigil    => '',
                                                                                        sigil     => '$',
                                                                                    ),
                                                                                    ), ], code => ::Var(
                                                                                namespace => [],
                                                                                name      => 'prefix:<$>',
                                                                                twigil    => '',
                                                                                sigil     => '&',
                                                                                    ), ), key => ::Val::Buf( buf => 'var', ), ), ],
                                                                method   => 'new',
                                                                invocant => ::Proto( name => 'Decl', ),
                                                                ), ], ), ],
                                                method   => 'new',
                                                invocant => ::Proto( name => 'Array', ),
                                                ), ],
                                        method   => 'add_lexicals',
                                        invocant => ::Apply(
                                            arguments => [],
                                            code      => ::Var( namespace => [ 'COMPILER', ],
                                                name   => 'current_pad',
                                                twigil => '',
                                                sigil  => '&', ),
                                        ),
                                                ), ::Apply( arguments => [ ::Apply( arguments => [ ::Call(
                                                        hyper     => '',
                                                        arguments => [ ::Val::Buf( buf => 'undeclared_var', ), ],
                                                        method    => 'LOOKUP',
                                                        invocant  => ::Var(
                                                            namespace => [],
                                                            name      => '/',
                                                            twigil    => '',
                                                            sigil     => '$',
                                                        ),
                                                        ), ], code => ::Var(
                                                    namespace => [],
                                                    name      => 'prefix:<$>',
                                                    twigil    => '',
                                                    sigil     => '&',
                                                        ), ), ], code => ::Var(
                                            namespace => [],
                                            name      => 'make',
                                            twigil    => '',
                                            sigil     => '&',
                                                        ), ), ], sig => ::Sig(
                                    invocant   => '',
                                    positional => [],
                                                        ), pad => ::Pad(
                                    lexicals  => [],
                                    namespace => "KindaPerl6::Grammar",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                                        ),
                                CATCH => '',
                                state => {}, ), cond => ::Apply( arguments => [ ::Apply( arguments => [ ::Call(
                                                hyper     => '',
                                                arguments => [ ::Val::Buf( buf => 'declarator', ), ],
                                                method    => 'LOOKUP',
                                                invocant  => ::Var(
                                                    namespace => [],
                                                    name      => '/',
                                                    twigil    => '',
                                                    sigil     => '$',
                                                ),
                                                ), ], code => ::Var(
                                            namespace => [],
                                            name      => 'prefix:<$>',
                                            twigil    => '',
                                            sigil     => '&',
                                                ), ), ::Val::Buf( buf => 'our', ), ], code => ::Var(
                                    namespace => [],
                                    name      => 'infix:<eq>',
                                    twigil    => '',
                                    sigil     => '&',
                                                ), ), otherwise => '', ), ::Apply( arguments => [ ::Call(
                                    hyper     => '',
                                    arguments => [ ::Lit::Pair( value => ::Apply( arguments => [ ::Call(
                                                        hyper     => '',
                                                        arguments => [ ::Val::Buf( buf => 'declarator', ), ],
                                                        method    => 'LOOKUP',
                                                        invocant  => ::Var(
                                                            namespace => [],
                                                            name      => '/',
                                                            twigil    => '',
                                                            sigil     => '$',
                                                        ),
                                                        ), ], code => ::Var(
                                                    namespace => [],
                                                    name      => 'prefix:<$>',
                                                    twigil    => '',
                                                    sigil     => '&',
                                                        ), ), key => ::Val::Buf( buf => 'decl', ), ), ::Lit::Pair( value => ::Apply( arguments => [ ::Call(
                                                        hyper     => '',
                                                        arguments => [ ::Val::Buf( buf => 'opt_type', ), ],
                                                        method    => 'LOOKUP',
                                                        invocant  => ::Var(
                                                            namespace => [],
                                                            name      => '/',
                                                            twigil    => '',
                                                            sigil     => '$',
                                                        ),
                                                        ), ], code => ::Var(
                                                    namespace => [],
                                                    name      => 'prefix:<$>',
                                                    twigil    => '',
                                                    sigil     => '&',
                                                        ), ), key => ::Val::Buf( buf => 'type', ), ), ::Lit::Pair( value => ::Apply( arguments => [ ::Call(
                                                        hyper     => '',
                                                        arguments => [ ::Val::Buf( buf => 'undeclared_var', ), ],
                                                        method    => 'LOOKUP',
                                                        invocant  => ::Var(
                                                            namespace => [],
                                                            name      => '/',
                                                            twigil    => '',
                                                            sigil     => '$',
                                                        ),
                                                        ), ], code => ::Var(
                                                    namespace => [],
                                                    name      => 'prefix:<$>',
                                                    twigil    => '',
                                                    sigil     => '&',
                                                        ), ), key => ::Val::Buf( buf => 'var', ), ), ],
                                    method   => 'new',
                                    invocant => ::Proto( name => 'Decl', ),
                                                ), ], code => ::Var(
                                namespace => [],
                                name      => 'make',
                                twigil    => '',
                                sigil     => '&',
                                                ), ), ], sig => ::Sig(
                        invocant   => '',
                        positional => [],
                                                ), pad => ::Pad(
                        lexicals  => [],
                        namespace => "KindaPerl6::Grammar",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                                                ),
                    CATCH => '',
                    state => {}, ), ), ], ), ::Rule::Concat( concat => [ ::Rule::Subrule(
                capture_to_array => '',
                metasyntax       => 'begin_block',
                ident            => '',
                    ), ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Apply( arguments => [ ::Call(
                                            hyper     => '',
                                            arguments => [ ::Val::Buf( buf => 'begin_block', ), ],
                                            method    => 'LOOKUP',
                                            invocant  => ::Var(
                                                namespace => [],
                                                name      => '/',
                                                twigil    => '',
                                                sigil     => '$',
                                            ),
                                            ), ], code => ::Var(
                                        namespace => [],
                                        name      => 'prefix:<$>',
                                        twigil    => '',
                                        sigil     => '&',
                                            ), ), ], code => ::Var(
                                namespace => [],
                                name      => 'make',
                                twigil    => '',
                                sigil     => '&',
                                            ), ), ], sig => ::Sig(
                        invocant   => '',
                        positional => [],
                                            ), pad => ::Pad(
                        lexicals  => [],
                        namespace => "KindaPerl6::Grammar",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                                            ),
                    CATCH => '',
                    state => {}, ), ), ], ), ::Rule::Concat( concat => [ ::Rule::Subrule(
                capture_to_array => '',
                metasyntax       => 'check_block',
                ident            => '',
                    ), ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Apply( arguments => [ ::Call(
                                            hyper     => '',
                                            arguments => [ ::Val::Buf( buf => 'check_block', ), ],
                                            method    => 'LOOKUP',
                                            invocant  => ::Var(
                                                namespace => [],
                                                name      => '/',
                                                twigil    => '',
                                                sigil     => '$',
                                            ),
                                            ), ], code => ::Var(
                                        namespace => [],
                                        name      => 'prefix:<$>',
                                        twigil    => '',
                                        sigil     => '&',
                                            ), ), ], code => ::Var(
                                namespace => [],
                                name      => 'make',
                                twigil    => '',
                                sigil     => '&',
                                            ), ), ], sig => ::Sig(
                        invocant   => '',
                        positional => [],
                                            ), pad => ::Pad(
                        lexicals  => [],
                        namespace => "KindaPerl6::Grammar",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                                            ),
                    CATCH => '',
                    state => {}, ), ), ], ), ::Rule::Concat( concat => [ ::Rule::Constant( constant => 'g', ), ::Rule::Constant( constant => 'a', ), ::Rule::Constant( constant => 't', ), ::Rule::Constant( constant => 'h', ),
            ::Rule::Constant( constant => 'e', ), ::Rule::Constant( constant => 'r', ), ::Rule::SubruleNoCapture( metasyntax => 'ws', ), ::Rule::SpecialChar( char => '{', ), ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ), ::Rule::Subrule(
                capture_to_array => '',
                metasyntax       => 'bare_block',
                ident            => '',
                ), ::Rule::Block( closure => ::Lit::Code( body => [ ::Return( result => ::Call(
                                hyper     => '',
                                arguments => [ ::Lit::NamedArgument( value => ::Val::Buf( buf => '', ), key => ::Val::Buf( buf => 'hyper', ), ), ::Lit::NamedArgument( value => ::Call(
                                            hyper     => '',
                                            arguments => [ ::Lit::Array( array => [ ::Call(
                                                            hyper     => '',
                                                            arguments => [ ::Lit::Pair(
                                                                    value => ::Val::Undef(),
                                                                    key   => ::Val::Buf( buf => 'name', ),
                                                                    ), ::Lit::Pair( value => ::Apply( arguments => [ ::Call(
                                                                                hyper     => '',
                                                                                arguments => [ ::Val::Buf( buf => 'bare_block', ), ],
                                                                                method    => 'LOOKUP',
                                                                                invocant  => ::Var(
                                                                                    namespace => [],
                                                                                    name      => '/',
                                                                                    twigil    => '',
                                                                                    sigil     => '$',
                                                                                ),
                                                                                ), ], code => ::Var(
                                                                            namespace => [],
                                                                            name      => 'prefix:<$>',
                                                                            twigil    => '',
                                                                            sigil     => '&',
                                                                                ), ), key => ::Val::Buf( buf => 'block', ), ), ],
                                                            method   => 'new',
                                                            invocant => ::Proto( name => 'Sub', ),
                                                            ), ], ), ],
                                            method   => 'new',
                                            invocant => ::Proto( name => 'Array', ),
                                            ), key => ::Val::Buf( buf => 'arguments', ), ), ::Lit::NamedArgument( value => ::Val::Buf( buf => 'new', ), key => ::Val::Buf( buf => 'method', ), ), ::Lit::NamedArgument( value => ::Call(
                                            hyper     => '',
                                            arguments => [ ::Lit::NamedArgument( value => ::Val::Buf( buf => 'Gather', ), key => ::Val::Buf( buf => 'name', ), ), ],
                                            method    => 'new',
                                            invocant => ::Proto( name => 'Proto', ),
                                            ), key => ::Val::Buf( buf => 'invocant', ), ), ],
                                method   => 'new',
                                invocant => ::Proto( name => 'Call', ),
                                ), ), ], sig => ::Sig(
                        invocant   => '',
                        positional => [],
                                ), pad => ::Pad(
                        lexicals  => [],
                        namespace => "KindaPerl6::Grammar",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                                ),
                    CATCH => '',
                    state => {}, ), ), ], ), ::Rule::Concat( concat => [ ::Rule::Constant( constant => 'i', ), ::Rule::Constant( constant => 's', ), ::Rule::SubruleNoCapture( metasyntax => 'ws', ), ::Rule::Subrule(
                capture_to_array => '',
                metasyntax       => 'full_ident',
                ident            => '',
                    ), ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Val::Buf( buf => '<is> not implemented', ), ], code => ::Var(
                                namespace => [],
                                name      => 'die',
                                twigil    => '',
                                sigil     => '&',
                                ), ), ], sig => ::Sig(
                        invocant   => '',
                        positional => [],
                                ), pad => ::Pad(
                        lexicals  => [],
                        namespace => "KindaPerl6::Grammar",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                                ),
                    CATCH => '',
                    state => {}, ), ), ], ), ::Rule::Concat( concat => [ ::Rule::Constant( constant => 'd', ), ::Rule::Constant( constant => 'o', ), ::Rule::Constant( constant => 'e', ), ::Rule::Constant( constant => 's', ),
            ::Rule::SubruleNoCapture( metasyntax => 'ws', ), ::Rule::Subrule(
                capture_to_array => '',
                metasyntax       => 'full_ident',
                ident            => '',
                ), ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Val::Buf( buf => '<does> not implemented', ), ], code => ::Var(
                                namespace => [],
                                name      => 'die',
                                twigil    => '',
                                sigil     => '&',
                                ), ), ], sig => ::Sig(
                        invocant   => '',
                        positional => [],
                                ), pad => ::Pad(
                        lexicals  => [],
                        namespace => "KindaPerl6::Grammar",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                                ),
                    CATCH => '',
                    state => {}, ), ), ], ), ::Rule::Concat( concat => [ ::Rule::Subrule(
                capture_to_array => '',
                metasyntax       => 'control',
                ident            => '',
                    ), ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Apply( arguments => [ ::Call(
                                            hyper     => '',
                                            arguments => [ ::Val::Buf( buf => 'control', ), ],
                                            method    => 'LOOKUP',
                                            invocant  => ::Var(
                                                namespace => [],
                                                name      => '/',
                                                twigil    => '',
                                                sigil     => '$',
                                            ),
                                            ), ], code => ::Var(
                                        namespace => [],
                                        name      => 'prefix:<$>',
                                        twigil    => '',
                                        sigil     => '&',
                                            ), ), ], code => ::Var(
                                namespace => [],
                                name      => 'make',
                                twigil    => '',
                                sigil     => '&',
                                            ), ), ], sig => ::Sig(
                        invocant   => '',
                        positional => [],
                                            ), pad => ::Pad(
                        lexicals  => [],
                        namespace => "KindaPerl6::Grammar",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                                            ),
                    CATCH => '',
                    state => {}, ), ), ], ), ::Rule::Concat( concat => [ ::Rule::Subrule(
                capture_to_array => '',
                metasyntax       => 'apply',
                ident            => '',
                    ), ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Apply( arguments => [ ::Call(
                                            hyper     => '',
                                            arguments => [ ::Val::Buf( buf => 'apply', ), ],
                                            method    => 'LOOKUP',
                                            invocant  => ::Var(
                                                namespace => [],
                                                name      => '/',
                                                twigil    => '',
                                                sigil     => '$',
                                            ),
                                            ), ], code => ::Var(
                                        namespace => [],
                                        name      => 'prefix:<$>',
                                        twigil    => '',
                                        sigil     => '&',
                                            ), ), ], code => ::Var(
                                namespace => [],
                                name      => 'make',
                                twigil    => '',
                                sigil     => '&',
                                            ), ), ], sig => ::Sig(
                        invocant   => '',
                        positional => [],
                                            ), pad => ::Pad(
                        lexicals  => [],
                        namespace => "KindaPerl6::Grammar",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                                            ),
                    CATCH => '',
                    state => {}, ), ), ], ), ::Rule::Concat( concat => [ ::Rule::SpecialChar( char => '<', ), ::Rule::Subrule(
                capture_to_array => '',
                metasyntax       => 'angle_quoted',
                ident            => '',
                    ), ::Rule::SpecialChar( char => '>', ), ::Rule::Block( closure => ::Lit::Code( body => [ ::Apply( arguments => [ ::Call(
                                    hyper     => '',
                                    arguments => [ ::Lit::Pair( value => ::Call(
                                                hyper     => '',
                                                arguments => [ ::Lit::Pair( value => ::Val::Buf( buf => '&', ), key => ::Val::Buf( buf => 'sigil', ), ), ::Lit::Pair( value => ::Val::Buf( buf => '', ), key => ::Val::Buf( buf => 'twigil', ), ),
                                                    ::Lit::Pair( value => ::Val::Buf( buf => 'qw', ), key => ::Val::Buf( buf => 'name', ), ), ::Lit::NamedArgument( value => ::Call(
                                                            hyper     => '',
                                                            arguments => [ ::Lit::Array( array => [], ), ],
                                                            method    => 'new',
                                                            invocant  => ::Proto( name => 'Array', ),
                                                            ), key => ::Val::Buf( buf => 'namespace', ), ), ],
                                                method   => 'new',
                                                invocant => ::Proto( name => 'Var', ),
                                                ), key => ::Val::Buf( buf => 'code', ), ), ::Lit::Pair( value => ::Call(
                                                hyper     => '',
                                                arguments => [ ::Lit::Array( array => [ ::Call(
                                                                hyper     => '',
                                                                arguments => [ ::Lit::NamedArgument( value => ::Apply( arguments => [ ::Call(
                                                                                    hyper     => '',
                                                                                    arguments => [ ::Val::Buf( buf => 'angle_quoted', ), ],
                                                                                    method    => 'LOOKUP',
                                                                                    invocant  => ::Var(
                                                                                        namespace => [],
                                                                                        name      => '/',
                                                                                        twigil    => '',
                                                                                        sigil     => '$',
                                                                                    ),
                                                                                    ), ], code => ::Var(
                                                                                namespace => [],
                                                                                name      => 'prefix:<~>',
                                                                                twigil    => '',
                                                                                sigil     => '&',
                                                                                    ), ), key => ::Val::Buf( buf => 'buf', ), ), ],
                                                                method   => 'new',
                                                                invocant => ::Proto( name => 'Val::Buf', ),
                                                                ), ], ), ],
                                                method   => 'new',
                                                invocant => ::Proto( name => 'Array', ),
                                                ), key => ::Val::Buf( buf => 'arguments', ), ), ],
                                    method   => 'new',
                                    invocant => ::Proto( name => 'Apply', ),
                                    ), ], code => ::Var(
                                namespace => [],
                                name      => 'make',
                                twigil    => '',
                                sigil     => '&',
                                    ), ), ], sig => ::Sig(
                        invocant   => '',
                        positional => [],
                                    ), pad => ::Pad(
                        lexicals  => [],
                        namespace => "KindaPerl6::Grammar",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                                    ),
                    CATCH => '',
                    state => {}, ), ), ], ), ], ),
    sym  => '',
    name => 'term', ), ], sig => ::Sig(
        invocant   => '',
        positional => [],
    ), pad => ::Pad(
        lexicals  => [],
        namespace => "KindaPerl6::Grammar",
        parent    => ::Pad(...),
        evaluator => ::Sub(...),
    ),
    CATCH      => '',
    state      => {}, ),
    methods    => {},
    name       => 'KindaPerl6::Grammar',
    attributes => {},
    traits     => [],
    unit_type  => 'grammar', )
