# Do not edit this file - Generated by MiniPerl6
use v5;
use strict;
use MiniPerl6::Perl5::Runtime;
use MiniPerl6::Perl5::Match;

package KindaPerl6::Grammar;
sub new { shift; bless {@_}, "KindaPerl6::Grammar" }

sub infix_op {
    my $grammar = shift;
    my $List__  = \@_;
    my $str;
    my $pos;
    do { $str = $List__->[0]; $pos = $List__->[1]; [ $str, $pos ] };
    my $MATCH;
    $MATCH = MiniPerl6::Perl5::Match->new( 'str' => $str, 'from' => $pos, 'to' => $pos, 'bool' => 1, );
    $MATCH->bool(
        do {
            my $pos1 = $MATCH->to();
            (   do { ( ( '+' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) }
                    || (
                    do { $MATCH->to($pos1); ( ( '-' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) }
                    || (do { $MATCH->to($pos1); ( ( '*' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) }
                        || (do { $MATCH->to($pos1); ( ( '//' eq substr( $str, $MATCH->to(), 2 ) ) ? ( 1 + $MATCH->to( ( 2 + $MATCH->to() ) ) ) : 0 ) }
                            || (do { $MATCH->to($pos1); ( ( '/' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) }
                                || (do {
                                        $MATCH->to($pos1);
                                        ( ( ( 'e' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && ( ( 'q' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) );
                                    }
                                    || (do {
                                            $MATCH->to($pos1);
                                            ( ( ( 'n' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && ( ( 'e' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) );
                                        }
                                        || (do { $MATCH->to($pos1); ( ( '==' eq substr( $str, $MATCH->to(), 2 ) ) ? ( 1 + $MATCH->to( ( 2 + $MATCH->to() ) ) ) : 0 ) }
                                            || (do { $MATCH->to($pos1); ( ( '!=' eq substr( $str, $MATCH->to(), 2 ) ) ? ( 1 + $MATCH->to( ( 2 + $MATCH->to() ) ) ) : 0 ) }
                                                || (do { $MATCH->to($pos1); ( ( '&&' eq substr( $str, $MATCH->to(), 2 ) ) ? ( 1 + $MATCH->to( ( 2 + $MATCH->to() ) ) ) : 0 ) }
                                                    || (do { $MATCH->to($pos1); ( ( '||' eq substr( $str, $MATCH->to(), 2 ) ) ? ( 1 + $MATCH->to( ( 2 + $MATCH->to() ) ) ) : 0 ) }
                                                        || (do { $MATCH->to($pos1); ( ( '~~' eq substr( $str, $MATCH->to(), 2 ) ) ? ( 1 + $MATCH->to( ( 2 + $MATCH->to() ) ) ) : 0 ) }
                                                            || (do { $MATCH->to($pos1); ( ( '~' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) }
                                                                || (do { $MATCH->to($pos1); ( ( '<=>' eq substr( $str, $MATCH->to(), 3 ) ) ? ( 1 + $MATCH->to( ( 3 + $MATCH->to() ) ) ) : 0 ) }
                                                                    || (do { $MATCH->to($pos1); ( ( '<=' eq substr( $str, $MATCH->to(), 2 ) ) ? ( 1 + $MATCH->to( ( 2 + $MATCH->to() ) ) ) : 0 ) }
                                                                        || (do { $MATCH->to($pos1); ( ( '>=' eq substr( $str, $MATCH->to(), 2 ) ) ? ( 1 + $MATCH->to( ( 2 + $MATCH->to() ) ) ) : 0 ) }
                                                                            || (do { $MATCH->to($pos1); ( ( '<' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) }
                                                                                || (do { $MATCH->to($pos1); ( ( '>' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) }
                                                                                    || (do { $MATCH->to($pos1); ( ( '&' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) }
                                                                                        || (do { $MATCH->to($pos1); ( ( '^' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) }
                                                                                            || (do { $MATCH->to($pos1); ( ( '|' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) }
                                                                                                || (do { $MATCH->to($pos1); ( ( '..' eq substr( $str, $MATCH->to(), 2 ) ) ? ( 1 + $MATCH->to( ( 2 + $MATCH->to() ) ) ) : 0 ) }
                                                                                                    || (do    { $MATCH->to($pos1); ( ( 'but' eq substr( $str, $MATCH->to(), 3 ) ) ? ( 1 + $MATCH->to( ( 3 + $MATCH->to() ) ) ) : 0 ) }
                                                                                                        || do { $MATCH->to($pos1); ( ( 'x'   eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) }
                                                                                                    )
                                                                                                )
                                                                                            )
                                                                                        )
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                    )
            );
            }
    );
    return ($MATCH);
}

sub hyper_op {
    my $grammar = shift;
    my $List__  = \@_;
    my $str;
    my $pos;
    do { $str = $List__->[0]; $pos = $List__->[1]; [ $str, $pos ] };
    my $MATCH;
    $MATCH = MiniPerl6::Perl5::Match->new( 'str' => $str, 'from' => $pos, 'to' => $pos, 'bool' => 1, );
    $MATCH->bool(
        do {
            my $pos1 = $MATCH->to();
            (   do { ( ( '>>' eq substr( $str, $MATCH->to(), 2 ) ) ? ( 1 + $MATCH->to( ( 2 + $MATCH->to() ) ) ) : 0 ) }
                    || do { $MATCH->to($pos1); 1 }
            );
            }
    );
    return ($MATCH);
}

sub prefix_op {
    my $grammar = shift;
    my $List__  = \@_;
    my $str;
    my $pos;
    do { $str = $List__->[0]; $pos = $List__->[1]; [ $str, $pos ] };
    my $MATCH;
    $MATCH = MiniPerl6::Perl5::Match->new( 'str' => $str, 'from' => $pos, 'to' => $pos, 'bool' => 1, );
    $MATCH->bool(
        do {
            my $pos1 = $MATCH->to();
            do {
                (   do {
                        my $pos1 = $MATCH->to();
                        (   do { ( ( '$' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) }
                                || (
                                do { $MATCH->to($pos1); ( ( '@' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) }
                                || (do { $MATCH->to($pos1); ( ( '%' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) }
                                    || (do { $MATCH->to($pos1); ( ( '?' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) }
                                        || (do { $MATCH->to($pos1); ( ( '!' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) }
                                            || (do { $MATCH->to($pos1); ( ( '++' eq substr( $str, $MATCH->to(), 2 ) ) ? ( 1 + $MATCH->to( ( 2 + $MATCH->to() ) ) ) : 0 ) }
                                                || (do { $MATCH->to($pos1); ( ( '--' eq substr( $str, $MATCH->to(), 2 ) ) ? ( 1 + $MATCH->to( ( 2 + $MATCH->to() ) ) ) : 0 ) }
                                                    || (do { $MATCH->to($pos1); ( ( '+' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) }
                                                        || (do { $MATCH->to($pos1); ( ( '-' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) }
                                                            || (do    { $MATCH->to($pos1); ( ( '~' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) }
                                                                || do { $MATCH->to($pos1); ( ( '|' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) }
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                                )
                        );
                        }
                        && do {
                        my $tmp = $MATCH;
                        $MATCH = MiniPerl6::Perl5::Match->new( 'str' => $str, 'from' => $tmp->to(), 'to' => $tmp->to(), 'bool' => 1, );
                        $MATCH->bool(
                            do {
                                my $pos1 = $MATCH->to();
                                (   do { ( ( '$' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) }
                                        || (
                                        do { $MATCH->to($pos1); ( ( '@' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) }
                                        || (do { $MATCH->to($pos1); ( ( '%' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) }
                                            || (do { $MATCH->to($pos1); ( ( '(' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) }
                                                || (do    { $MATCH->to($pos1); ( ( '{' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) }
                                                    || do { $MATCH->to($pos1); ( ( '[' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) }
                                                )
                                            )
                                        )
                                        )
                                );
                                }
                        );
                        $tmp->bool( ( $MATCH ? 1 : 0 ) );
                        $MATCH = $tmp;
                        ( $MATCH ? 1 : 0 );
                        }
                );
                }
            }
    );
    return ($MATCH);
}

sub term_meth {
    my $grammar = shift;
    my $List__  = \@_;
    my $str;
    my $pos;
    do { $str = $List__->[0]; $pos = $List__->[1]; [ $str, $pos ] };
    my $MATCH;
    $MATCH = MiniPerl6::Perl5::Match->new( 'str' => $str, 'from' => $pos, 'to' => $pos, 'bool' => 1, );
    $MATCH->bool(
        do {
            my $pos1 = $MATCH->to();
            (   do {
                    (   do {
                            my $m2 = $grammar->full_ident( $str, $MATCH->to() );
                            do {
                                if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'full_ident'} = $m2; 1 }
                                else     {0}
                                }
                            }
                            && do {
                            my $pos1 = $MATCH->to();
                            do {
                                (   do {
                                        my $m2 = $grammar->dot( $str, $MATCH->to() );
                                        do {
                                            if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                            else     {0}
                                            }
                                        }
                                        && (
                                        do {
                                            my $m2 = $grammar->hyper_op( $str, $MATCH->to() );
                                            do {
                                                if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'hyper_op'} = $m2; 1 }
                                                else     {0}
                                                }
                                        }
                                        && (do {
                                                my $m2 = $grammar->ident( $str, $MATCH->to() );
                                                do {
                                                    if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'ident'} = $m2; 1 }
                                                    else     {0}
                                                    }
                                            }
                                            && (do {
                                                    my $pos1 = $MATCH->to();
                                                    (   do {
                                                            (   ( ( '(' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                                                                    do {
                                                                        my $m2 = $grammar->opt_ws( $str, $MATCH->to() );
                                                                        do {
                                                                            if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                                            else     {0}
                                                                            }
                                                                    }
                                                                    && (do {
                                                                            my $m2 = $grammar->exp_parameter_list( $str, $MATCH->to() );
                                                                            do {
                                                                                if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'exp_parameter_list'} = $m2; 1 }
                                                                                else     {0}
                                                                                }
                                                                        }
                                                                        && (do {
                                                                                my $m2 = $grammar->opt_ws( $str, $MATCH->to() );
                                                                                do {
                                                                                    if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                                                    else     {0}
                                                                                    }
                                                                            }
                                                                            && ( ( ')' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 )
                                                                        )
                                                                    )
                                                                )
                                                            );
                                                            }
                                                            || (
                                                            do {
                                                                $MATCH->to($pos1);
                                                                (   ( ( ':' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                                                                        do {
                                                                            my $m2 = $grammar->ws( $str, $MATCH->to() );
                                                                            do {
                                                                                if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                                                else     {0}
                                                                                }
                                                                        }
                                                                        && (do {
                                                                                my $m2 = $grammar->exp_parameter_list( $str, $MATCH->to() );
                                                                                do {
                                                                                    if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'exp_parameter_list'} = $m2; 1 }
                                                                                    else     {0}
                                                                                    }
                                                                            }
                                                                            && do {
                                                                                my $m2 = $grammar->opt_ws( $str, $MATCH->to() );
                                                                                do {
                                                                                    if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                                                    else     {0}
                                                                                    }
                                                                            }
                                                                        )
                                                                    )
                                                                );
                                                            }
                                                            || do {
                                                                $MATCH->to($pos1);
                                                                do {
                                                                    my $ret = sub {
                                                                        my $List__ = \@_;
                                                                        do { [] };
                                                                        do {
                                                                            return (
                                                                                Call->new(
                                                                                    'invocant'  => Proto->new( 'name' => ( "" . $MATCH->{'full_ident'} ), ),
                                                                                    'method'    => ${ $MATCH->{'ident'} },
                                                                                    'arguments' => (undef),
                                                                                    'hyper'     => ${ $MATCH->{'hyper_op'} },
                                                                                )
                                                                            );
                                                                        };
                                                                        '974^213';
                                                                        }
                                                                        ->();
                                                                    do {
                                                                        if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                                                        else                         { }
                                                                    };
                                                                    1;
                                                                    }
                                                            }
                                                            )
                                                    );
                                                }
                                                && do {
                                                    my $ret = sub {
                                                        my $List__ = \@_;
                                                        do { [] };
                                                        do {
                                                            return (
                                                                Call->new(
                                                                    'invocant'  => Proto->new( 'name' => ( "" . $MATCH->{'full_ident'} ), ),
                                                                    'method'    => ${ $MATCH->{'ident'} },
                                                                    'arguments' => ${ $MATCH->{'exp_parameter_list'} },
                                                                    'hyper'     => ${ $MATCH->{'hyper_op'} },
                                                                )
                                                            );
                                                        };
                                                        '974^213';
                                                        }
                                                        ->();
                                                    do {
                                                        if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                                        else                         { }
                                                    };
                                                    1;
                                                }
                                            )
                                        )
                                        )
                                );
                                }
                            }
                    );
                    }
                    || do {
                    $MATCH->to($pos1);
                    (   do {
                            my $m2 = $grammar->term( $str, $MATCH->to() );
                            do {
                                if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'term'} = $m2; 1 }
                                else     {0}
                                }
                            }
                            && do {
                            my $pos1 = $MATCH->to();
                            (   do {
                                    (   do {
                                            my $pos1 = $MATCH->to();
                                            (   do { ( ( '[' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) }
                                                    || do { $MATCH->to($pos1); ( ( '.[' eq substr( $str, $MATCH->to(), 2 ) ) ? ( 1 + $MATCH->to( ( 2 + $MATCH->to() ) ) ) : 0 ) }
                                            );
                                            }
                                            && (
                                            do {
                                                my $m2 = $grammar->opt_ws( $str, $MATCH->to() );
                                                do {
                                                    if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                    else     {0}
                                                    }
                                            }
                                            && (do {
                                                    my $m2 = $grammar->exp( $str, $MATCH->to() );
                                                    do {
                                                        if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'exp'} = $m2; 1 }
                                                        else     {0}
                                                        }
                                                }
                                                && (do {
                                                        my $m2 = $grammar->opt_ws( $str, $MATCH->to() );
                                                        do {
                                                            if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                            else     {0}
                                                            }
                                                    }
                                                    && (( ( ']' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && do {
                                                            my $ret = sub {
                                                                my $List__ = \@_;
                                                                do { [] };
                                                                do { return ( Call->new( 'invocant' => ${ $MATCH->{'term'} }, 'arguments' => [ ${ $MATCH->{'exp'} } ], 'method' => 'INDEX', 'hyper' => '', ) ) };
                                                                '974^213';
                                                                }
                                                                ->();
                                                            do {
                                                                if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                                                else                         { }
                                                            };
                                                            1;
                                                        }
                                                    )
                                                )
                                            )
                                            )
                                    );
                                    }
                                    || (
                                    do {
                                        $MATCH->to($pos1);
                                        (   do {
                                                my $pos1 = $MATCH->to();
                                                (   do { ( ( '{' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) }
                                                        || do { $MATCH->to($pos1); ( ( '.{' eq substr( $str, $MATCH->to(), 2 ) ) ? ( 1 + $MATCH->to( ( 2 + $MATCH->to() ) ) ) : 0 ) }
                                                );
                                                }
                                                && (
                                                do {
                                                    my $m2 = $grammar->opt_ws( $str, $MATCH->to() );
                                                    do {
                                                        if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                        else     {0}
                                                        }
                                                }
                                                && (do {
                                                        my $m2 = $grammar->exp( $str, $MATCH->to() );
                                                        do {
                                                            if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'exp'} = $m2; 1 }
                                                            else     {0}
                                                            }
                                                    }
                                                    && (do {
                                                            my $m2 = $grammar->opt_ws( $str, $MATCH->to() );
                                                            do {
                                                                if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                                else     {0}
                                                                }
                                                        }
                                                        && (( ( '}' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && do {
                                                                my $ret = sub {
                                                                    my $List__ = \@_;
                                                                    do { [] };
                                                                    do { return ( Call->new( 'invocant' => ${ $MATCH->{'term'} }, 'arguments' => [ ${ $MATCH->{'exp'} } ], 'method' => 'LOOKUP', 'hyper' => '', ) ) };
                                                                    '974^213';
                                                                    }
                                                                    ->();
                                                                do {
                                                                    if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                                                    else                         { }
                                                                };
                                                                1;
                                                            }
                                                        )
                                                    )
                                                )
                                                )
                                        );
                                    }
                                    || (do {
                                            $MATCH->to($pos1);
                                            (   do {
                                                    my $m2 = $grammar->dot( $str, $MATCH->to() );
                                                    do {
                                                        if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                        else     {0}
                                                        }
                                                    }
                                                    && (
                                                    do {
                                                        my $m2 = $grammar->hyper_op( $str, $MATCH->to() );
                                                        do {
                                                            if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'hyper_op'} = $m2; 1 }
                                                            else     {0}
                                                            }
                                                    }
                                                    && (do {
                                                            my $m2 = $grammar->opt_ident( $str, $MATCH->to() );
                                                            do {
                                                                if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'opt_ident'} = $m2; 1 }
                                                                else     {0}
                                                                }
                                                        }
                                                        && (do {
                                                                my $pos1 = $MATCH->to();
                                                                (   do {
                                                                        (   ( ( '(' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                                                                                do {
                                                                                    my $m2 = $grammar->opt_ws( $str, $MATCH->to() );
                                                                                    do {
                                                                                        if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                                                        else     {0}
                                                                                        }
                                                                                }
                                                                                && (do {
                                                                                        my $m2 = $grammar->exp_parameter_list( $str, $MATCH->to() );
                                                                                        do {
                                                                                            if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'exp_parameter_list'} = $m2; 1 }
                                                                                            else     {0}
                                                                                            }
                                                                                    }
                                                                                    && (do {
                                                                                            my $m2 = $grammar->opt_ws( $str, $MATCH->to() );
                                                                                            do {
                                                                                                if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                                                                else     {0}
                                                                                                }
                                                                                        }
                                                                                        && ( ( ')' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 )
                                                                                    )
                                                                                )
                                                                            )
                                                                        );
                                                                        }
                                                                        || (
                                                                        do {
                                                                            $MATCH->to($pos1);
                                                                            (   ( ( ':' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                                                                                    do {
                                                                                        my $m2 = $grammar->ws( $str, $MATCH->to() );
                                                                                        do {
                                                                                            if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                                                            else     {0}
                                                                                            }
                                                                                    }
                                                                                    && (do {
                                                                                            my $m2 = $grammar->exp_parameter_list( $str, $MATCH->to() );
                                                                                            do {
                                                                                                if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'exp_parameter_list'} = $m2; 1 }
                                                                                                else     {0}
                                                                                                }
                                                                                        }
                                                                                        && do {
                                                                                            my $m2 = $grammar->opt_ws( $str, $MATCH->to() );
                                                                                            do {
                                                                                                if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                                                                else     {0}
                                                                                                }
                                                                                        }
                                                                                    )
                                                                                )
                                                                            );
                                                                        }
                                                                        || do {
                                                                            $MATCH->to($pos1);
                                                                            do {
                                                                                my $ret = sub {
                                                                                    my $List__ = \@_;
                                                                                    do { [] };
                                                                                    do {
                                                                                        return (
                                                                                            Call->new( 'invocant' => ${ $MATCH->{'term'} }, 'method' => ${ $MATCH->{'opt_ident'} }, 'arguments' => (undef), 'hyper' => ${ $MATCH->{'hyper_op'} }, ) );
                                                                                    };
                                                                                    '974^213';
                                                                                    }
                                                                                    ->();
                                                                                do {
                                                                                    if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                                                                    else                         { }
                                                                                };
                                                                                1;
                                                                                }
                                                                        }
                                                                        )
                                                                );
                                                            }
                                                            && do {
                                                                my $ret = sub {
                                                                    my $List__ = \@_;
                                                                    do { [] };
                                                                    do {
                                                                        return (
                                                                            Call->new(
                                                                                'invocant'  => ${ $MATCH->{'term'} },
                                                                                'method'    => ${ $MATCH->{'opt_ident'} },
                                                                                'arguments' => ${ $MATCH->{'exp_parameter_list'} },
                                                                                'hyper'     => ${ $MATCH->{'hyper_op'} },
                                                                            )
                                                                        );
                                                                    };
                                                                    '974^213';
                                                                    }
                                                                    ->();
                                                                do {
                                                                    if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                                                    else                         { }
                                                                };
                                                                1;
                                                            }
                                                        )
                                                    )
                                                    )
                                            );
                                        }
                                        || (do {
                                                $MATCH->to($pos1);
                                                (   ( ( '<' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                                                        do {
                                                            my $m2 = $grammar->angle_quoted( $str, $MATCH->to() );
                                                            do {
                                                                if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'angle_quoted'} = $m2; 1 }
                                                                else     {0}
                                                                }
                                                        }
                                                        && (( ( '>' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && do {
                                                                my $ret = sub {
                                                                    my $List__ = \@_;
                                                                    do { [] };
                                                                    do {
                                                                        return (
                                                                            Call->new( 'invocant' => ${ $MATCH->{'term'} }, 'arguments' => [ Val::Buf->new( 'buf' => ( "" . $MATCH->{'angle_quoted'} ), ) ], 'method' => 'LOOKUP', 'hyper' => '', ) );
                                                                    };
                                                                    '974^213';
                                                                    }
                                                                    ->();
                                                                do {
                                                                    if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                                                    else                         { }
                                                                };
                                                                1;
                                                            }
                                                        )
                                                    )
                                                );
                                            }
                                            || do {
                                                $MATCH->to($pos1);
                                                do {
                                                    my $ret = sub {
                                                        my $List__ = \@_;
                                                        do { [] };
                                                        do { return ( ${ $MATCH->{'term'} } ) };
                                                        '974^213';
                                                        }
                                                        ->();
                                                    do {
                                                        if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                                        else                         { }
                                                    };
                                                    1;
                                                    }
                                            }
                                        )
                                    )
                                    )
                            );
                            }
                    );
                    }
            );
            }
    );
    return ($MATCH);
}

sub exp2 {
    my $grammar = shift;
    my $List__  = \@_;
    my $str;
    my $pos;
    do { $str = $List__->[0]; $pos = $List__->[1]; [ $str, $pos ] };
    my $MATCH;
    $MATCH = MiniPerl6::Perl5::Match->new( 'str' => $str, 'from' => $pos, 'to' => $pos, 'bool' => 1, );
    $MATCH->bool(
        do {
            my $pos1 = $MATCH->to();
            do {
                (   do {
                        my $m2 = $grammar->exp( $str, $MATCH->to() );
                        do {
                            if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'exp'} = $m2; 1 }
                            else     {0}
                            }
                        }
                        && do {
                        my $ret = sub {
                            my $List__ = \@_;
                            do { [] };
                            do { return ( ${ $MATCH->{'exp'} } ) };
                            '974^213';
                            }
                            ->();
                        do {
                            if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                            else                         { }
                        };
                        1;
                        }
                );
                }
            }
    );
    return ($MATCH);
}

sub exp {
    my $grammar = shift;
    my $List__  = \@_;
    my $str;
    my $pos;
    do { $str = $List__->[0]; $pos = $List__->[1]; [ $str, $pos ] };
    my $MATCH;
    $MATCH = MiniPerl6::Perl5::Match->new( 'str' => $str, 'from' => $pos, 'to' => $pos, 'bool' => 1, );
    $MATCH->bool(
        do {
            my $pos1 = $MATCH->to();
            do {
                (   do {
                        my $m2 = $grammar->term_meth( $str, $MATCH->to() );
                        do {
                            if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'term_meth'} = $m2; 1 }
                            else     {0}
                            }
                        }
                        && do {
                        my $pos1 = $MATCH->to();
                        (   do {
                                (   do {
                                        my $m2 = $grammar->opt_ws( $str, $MATCH->to() );
                                        do {
                                            if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                            else     {0}
                                            }
                                        }
                                        && (
                                        ( ( '??' eq substr( $str, $MATCH->to(), 2 ) ) ? ( 1 + $MATCH->to( ( 2 + $MATCH->to() ) ) ) : 0 ) && do {
                                            my $pos1 = $MATCH->to();
                                            (   do {
                                                    (   do {
                                                            my $m2 = $grammar->opt_ws( $str, $MATCH->to() );
                                                            do {
                                                                if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                                else     {0}
                                                                }
                                                            }
                                                            && (
                                                            do {
                                                                my $m2 = $grammar->exp( $str, $MATCH->to() );
                                                                do {
                                                                    if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'exp'} = $m2; 1 }
                                                                    else     {0}
                                                                    }
                                                            }
                                                            && (do {
                                                                    my $m2 = $grammar->opt_ws( $str, $MATCH->to() );
                                                                    do {
                                                                        if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                                        else     {0}
                                                                        }
                                                                }
                                                                && (do {
                                                                        my $pos1 = $MATCH->to();
                                                                        (   do {
                                                                                (   ( ( '::' eq substr( $str, $MATCH->to(), 2 ) ) ? ( 1 + $MATCH->to( ( 2 + $MATCH->to() ) ) ) : 0 ) && do {
                                                                                        my $ret = sub {
                                                                                            my $List__ = \@_;
                                                                                            do { [] };
                                                                                            do { die('maybe you mean ternary:<?? !!>') };
                                                                                            '974^213';
                                                                                            }
                                                                                            ->();
                                                                                        do {
                                                                                            if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                                                                            else                         { }
                                                                                        };
                                                                                        1;
                                                                                        }
                                                                                );
                                                                                }
                                                                                || do { $MATCH->to($pos1); ( ( '!!' eq substr( $str, $MATCH->to(), 2 ) ) ? ( 1 + $MATCH->to( ( 2 + $MATCH->to() ) ) ) : 0 ) }
                                                                        );
                                                                    }
                                                                    && (do {
                                                                            my $m2 = $grammar->opt_ws( $str, $MATCH->to() );
                                                                            do {
                                                                                if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                                                else     {0}
                                                                                }
                                                                        }
                                                                        && (do {
                                                                                my $m2 = $grammar->exp2( $str, $MATCH->to() );
                                                                                do {
                                                                                    if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'exp2'} = $m2; 1 }
                                                                                    else     {0}
                                                                                    }
                                                                            }
                                                                            && do {
                                                                                my $ret = sub {
                                                                                    my $List__ = \@_;
                                                                                    do { [] };
                                                                                    do {
                                                                                        my $macro_ast = Var->new( 'sigil' => '&', 'twigil' => '', 'name' => 'ternary:<?? !!>', 'namespace' => [], );
                                                                                        my $macro = COMPILER::get_var($macro_ast);
                                                                                        do {
                                                                                            if ( defined($macro) ) {
                                                                                                my $sub = COMPILER::current_pad()->eval_ast($macro_ast);
                                                                                                Main::expand_macro( $sub, ${ $MATCH->{'term_meth'} }, ${ $MATCH->{'exp'} }, ${ $MATCH->{'exp2'} } );
                                                                                            }
                                                                                            else { }
                                                                                        };
                                                                                        return (
                                                                                            Apply->new(
                                                                                                'code'      => Var->new( 'sigil'             => '&',               'twigil' => '', 'name' => 'ternary:<?? !!>', 'namespace' => [], ),
                                                                                                'arguments' => [ ${ $MATCH->{'term_meth'} }, ${ $MATCH->{'exp'} }, ${ $MATCH->{'exp2'} } ],
                                                                                            )
                                                                                        );
                                                                                    };
                                                                                    '974^213';
                                                                                    }
                                                                                    ->();
                                                                                do {
                                                                                    if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                                                                    else                         { }
                                                                                };
                                                                                1;
                                                                            }
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                            )
                                                    );
                                                    }
                                                    || do {
                                                    $MATCH->to($pos1);
                                                    do {
                                                        my $ret = sub {
                                                            my $List__ = \@_;
                                                            do { [] };
                                                            do { Main::say('*** Syntax error in ternary operation') };
                                                            '974^213';
                                                            }
                                                            ->();
                                                        do {
                                                            if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                                            else                         { }
                                                        };
                                                        1;
                                                        }
                                                    }
                                            );
                                        }
                                        )
                                );
                                }
                                || (
                                do {
                                    $MATCH->to($pos1);
                                    (   do {
                                            my $m2 = $grammar->opt_ws( $str, $MATCH->to() );
                                            do {
                                                if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                else     {0}
                                                }
                                            }
                                            && (
                                            do {
                                                my $m2 = $grammar->infix_op( $str, $MATCH->to() );
                                                do {
                                                    if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'infix_op'} = $m2; 1 }
                                                    else     {0}
                                                    }
                                            }
                                            && (do {
                                                    my $m2 = $grammar->opt_ws( $str, $MATCH->to() );
                                                    do {
                                                        if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                        else     {0}
                                                        }
                                                }
                                                && (do {
                                                        my $m2 = $grammar->exp( $str, $MATCH->to() );
                                                        do {
                                                            if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'exp'} = $m2; 1 }
                                                            else     {0}
                                                            }
                                                    }
                                                    && do {
                                                        my $ret = sub {
                                                            my $List__ = \@_;
                                                            do { [] };
                                                            do {
                                                                return (
                                                                    Apply->new(
                                                                        'code' => Var->new( 'sigil' => '&', 'twigil' => '', 'name' => ( 'infix:<' . ( $MATCH->{'infix_op'} . '>' ) ), 'namespace' => [], ),
                                                                        'arguments' => [ ${ $MATCH->{'term_meth'} }, ${ $MATCH->{'exp'} } ],
                                                                    )
                                                                );
                                                            };
                                                            '974^213';
                                                            }
                                                            ->();
                                                        do {
                                                            if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                                            else                         { }
                                                        };
                                                        1;
                                                    }
                                                )
                                            )
                                            )
                                    );
                                }
                                || (do {
                                        $MATCH->to($pos1);
                                        (   do {
                                                my $m2 = $grammar->opt_ws( $str, $MATCH->to() );
                                                do {
                                                    if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                    else     {0}
                                                    }
                                                }
                                                && (
                                                ( ( '::=' eq substr( $str, $MATCH->to(), 3 ) ) ? ( 1 + $MATCH->to( ( 3 + $MATCH->to() ) ) ) : 0 ) && (
                                                    do {
                                                        my $m2 = $grammar->opt_ws( $str, $MATCH->to() );
                                                        do {
                                                            if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                            else     {0}
                                                            }
                                                    }
                                                    && (do {
                                                            my $m2 = $grammar->exp( $str, $MATCH->to() );
                                                            do {
                                                                if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'exp'} = $m2; 1 }
                                                                else     {0}
                                                                }
                                                        }
                                                        && do {
                                                            my $ret = sub {
                                                                my $List__ = \@_;
                                                                do { [] };
                                                                do { my $bind = Bind->new( 'parameters' => ${ $MATCH->{'term_meth'} }, 'arguments' => ${ $MATCH->{'exp'} }, ); COMPILER::begin_block($bind); return ($bind) };
                                                                '974^213';
                                                                }
                                                                ->();
                                                            do {
                                                                if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                                                else                         { }
                                                            };
                                                            1;
                                                        }
                                                    )
                                                )
                                                )
                                        );
                                    }
                                    || (do {
                                            $MATCH->to($pos1);
                                            (   do {
                                                    my $m2 = $grammar->opt_ws( $str, $MATCH->to() );
                                                    do {
                                                        if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                        else     {0}
                                                        }
                                                    }
                                                    && (
                                                    ( ( ':=' eq substr( $str, $MATCH->to(), 2 ) ) ? ( 1 + $MATCH->to( ( 2 + $MATCH->to() ) ) ) : 0 ) && (
                                                        do {
                                                            my $m2 = $grammar->opt_ws( $str, $MATCH->to() );
                                                            do {
                                                                if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                                else     {0}
                                                                }
                                                        }
                                                        && (do {
                                                                my $m2 = $grammar->exp( $str, $MATCH->to() );
                                                                do {
                                                                    if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'exp'} = $m2; 1 }
                                                                    else     {0}
                                                                    }
                                                            }
                                                            && do {
                                                                my $ret = sub {
                                                                    my $List__ = \@_;
                                                                    do { [] };
                                                                    do { return ( Bind->new( 'parameters' => ${ $MATCH->{'term_meth'} }, 'arguments' => ${ $MATCH->{'exp'} }, ) ) };
                                                                    '974^213';
                                                                    }
                                                                    ->();
                                                                do {
                                                                    if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                                                    else                         { }
                                                                };
                                                                1;
                                                            }
                                                        )
                                                    )
                                                    )
                                            );
                                        }
                                        || (do {
                                                $MATCH->to($pos1);
                                                (   do {
                                                        my $m2 = $grammar->opt_ws( $str, $MATCH->to() );
                                                        do {
                                                            if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                            else     {0}
                                                            }
                                                        }
                                                        && (
                                                        ( ( '=' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                                                            do {
                                                                my $m2 = $grammar->opt_ws( $str, $MATCH->to() );
                                                                do {
                                                                    if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                                    else     {0}
                                                                    }
                                                            }
                                                            && (do {
                                                                    my $m2 = $grammar->exp( $str, $MATCH->to() );
                                                                    do {
                                                                        if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'exp'} = $m2; 1 }
                                                                        else     {0}
                                                                        }
                                                                }
                                                                && do {
                                                                    my $ret = sub {
                                                                        my $List__ = \@_;
                                                                        do { [] };
                                                                        do { return ( Assign->new( 'parameters' => ${ $MATCH->{'term_meth'} }, 'arguments' => ${ $MATCH->{'exp'} }, ) ) };
                                                                        '974^213';
                                                                        }
                                                                        ->();
                                                                    do {
                                                                        if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                                                        else                         { }
                                                                    };
                                                                    1;
                                                                }
                                                            )
                                                        )
                                                        )
                                                );
                                            }
                                            || do {
                                                $MATCH->to($pos1);
                                                do {
                                                    my $ret = sub {
                                                        my $List__ = \@_;
                                                        do { [] };
                                                        do { return ( ${ $MATCH->{'term_meth'} } ) };
                                                        '974^213';
                                                        }
                                                        ->();
                                                    do {
                                                        if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                                        else                         { }
                                                    };
                                                    1;
                                                    }
                                            }
                                        )
                                    )
                                )
                                )
                        );
                        }
                );
                }
            }
    );
    return ($MATCH);
}

1;
