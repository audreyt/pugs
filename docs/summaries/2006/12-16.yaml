---
extra:
  footer:
    - body: |-
        This summary was prepared using
        [Mail::Summary::Tools](http://search.cpan.org/dist/Mail-Summary-Tools/),
        available on CPAN.
        
        If you appreciate Perl, consider [contributing to the Perl
        Foundation](http://donate.perlfoundation.org) to help support the
        development of Perl.
        
        Thank you to everyone who has pointed out mistakes and offered
        suggestions for improving this series.  Comments on this summary can be
        sent to Ann Barcomb, <kudra@domaintje.com>.
      title: Acknowlegements
    - body: |-
        This summary can be found in the following places:
        
        * [use.perl.org](http://use.perl.org/)
        * [The Pugs blog](http://pugs.blogs.com/)
        * [The perl6-announce mailing
          list](http://lists.cpan.org/showlist.cgi?name=perl6-announce)
        * [ONLamp](http://www.oreillynet.com/onlamp/blog/)
      title: Distribution
  header:
    - body: |-
        "With the little sense of smell I have left, this smells like INTERCAL's
        'COME FROM' statement to me..."
        
        -- Larry Wall, who has a cold, in '<msgid:457D965C.2010701@barco.com>'
      title: This week on the Perl 6 mailing lists
  see_also:
    - name: Perl Foundation activities
      uri: http://blog.perlfoundation.org
    - name: Perl 6 Development
      uri: http://dev.perl.org/perl6
    - name: Planet Perl Six
      uri: http://planetsix.perlfoundation.org/
lists:
  - name: perl6-language
    threads:
      - date_from: 1165858433
        date_to: 1166316817
        hidden: ~
        message_id: 457D965C.2010701@barco.com
        messages:
          - ef30550b0612111115n13181057ib8b27b2585c9cfd7@mail.gmail.com
          - 457E6B53.2060006@barco.com
        posters:
          - email: Thomas.Sandlass@barco.com
            name: TSa
          - email: dataweaver@gmail.com
            name: Jonathan Lang
          - email: lrpalmer@gmail.com
            name: Luke Palmer
          - email: larry@wall.org
            name: Larry Wall
          - email: Smylers@stripey.com
            name: Smylers
          - email: rvtol@isolution.nl
            name: Ruud H.G. van Tol
        subject: supertyping
        summary: |-
          In this thread, TSa brought up the concept of supertyping again.  The
          example of `Square <: Rectangle` was included, along with others.  TSa's
          question involved an example where the object's type was changed while
          its identity was preserved.  Additionally, TSa asked if supertyping will
          exist in Perl 6, and if so, how would 'superdoes' and 'superis' concepts
          be expressed.
          
          Jonathan Lang attempted to rewrite the question for a larger audience.
          He explained that the suggestion was to go from specific to general,
          rather than the other way around.
          
          Jonathan then noted that there are four approaches to code reuse,
          three which add functionality, and one which restricts it.  This led
          him to see supertyping in terms of exemptions for the fourth case.
          Luke Palmer responded with an equation to express the relationship,
          and his answers to the questions of whether it should be illegal
          to add a required method to A if B does not implement it, given
          `role A superdoes B`, and if a required method for A should
          automatically become a required method for B.
          
          There was some discussion on how 'superdoes' would be written,
          with 'done_by', 'bequeath', and 'by' being proposed.  Ruud H.G. van Tol
          offered more suggestions than a thesaurus.
          
          Larry Wall first wanted to see use cases which go beyond the number
          examples in order to see the value of the proposal to those who aren't
          interested in type theory.  Luke Palmer, on the other hand, expressed
          his interest in continuing to consider the idea until it is solid enough
          that he would be comfortable with it.  Larry added his thoughts concerning
          namespace issues.  There was a great deal more discussion formulating
          the specifics of the proposal.
      - date_from: 1165452276
        date_to: 1166036968
        hidden: ~
        message_id: 001e01c71998$e1f4f900$45084447@JoeGottman1
        messages:
          - 20061213180719.GA4631@wall.org
          - 20061213190110.GC4631@wall.org
          - 20061213190756.GA14637@wall.org
        posters:
          - email: jgottman@carolina.rr.com
            name: Joe Gottman
          - email: larry@wall.org
            name: Larry Wall
        subject: Gather/Take and threads
        summary: |-
          Given a gather block which spawns multiple threads,
          Joe Gottman wanted to know if it is guaranteed that no object returned
          is lost, given that the relative order of items returned is
          indeterminate.
          
          This week, Larry Wall responded that gather/take is defined over a
          dynamic scope, and each thread is a different dynamic scope, so by
          default there would be no results from other threads.  He also entertained
          the converse, that gather/take is a normal way to set up inter-thread
          queuing.  The short answer seemed to be that this has not yet been
          decided.
      - date_from: 1166057461
        date_to: 1166057461
        hidden: commit
        message_id: 20061214015042.2158ACBA1B@x12.develooper.com
        posters:
          - email: larry@cvs.perl.org
            name: larry
        subject: '[svn:perl6-synopsis] r13490 - doc/trunk/design/syn'
        summary: ''
    title: Language
  - name: perl6-internals
    threads:
      - date_from: 1163386647
        date_to: 1166066444
        hidden: ~
        message_id: 17751.57028.857483.568233@rgrjr.dyndns.org
        messages:
          - 455D1095.1070704@perl.org
          - 17757.8593.340295.932814@rgrjr.dyndns.org
          - 456A4A04.5040605@perl.org
          - 17771.43711.219921.948002@rgrjr.dyndns.org
          - 457793E5.7070108@perl.org
          - 17784.55404.703631.256678@rgrjr.dyndns.org
          - 457BA157.40600@perl.org
          - 17767.15610.126503.955485@rgrjr.dyndns.org
          - 17752.26881.872165.542999@rgrjr.dyndns.org
          - 200611132119.26409.lt@toetsch.at
          - 17753.16342.844756.184556@rgrjr.dyndns.org
          - 17759.56391.712650.895123@rgrjr.dyndns.org
        posters:
          - email: rogers-perl6@rgrjr.dyndns.org
            name: Bob Rogers
          - email: allison@perl.org
            name: Allison Randal
          - email: lt@toetsch.at
            name: Leopold Toetsch
        subject: 'RFC:  Proposal for dynamic binding'
        summary: |-
          This thread was started by Bob Roger's proposal for dynamic binding.
          To date, it has included an extended discussion between Bob and Allison
          Randal, plus a request from Leopold Toetsch.
          
          Allison began this week by explaining her understanding of the terms
          dynamic scoping, assignment and binding.  Her view of the proposal
          is that it offers a textbook definition of dynamic scoping.  The discussion
          has included dynamic binding, dynamic scoping, and temporization, however.
          With the terms defined, she went on to propose that Bob create a new
          proposal for implementing dynamic scope which does not contain any
          references to temporization.  Bob agreed to do this, but asked for a few
          clarifications first.
      - date_from: 1164061270
        date_to: 1165815382
        hidden: ~
        message_id: rt-3.5.HEAD-25797-1164061227-723.40958-72-0@perl.org
        messages:
          - 200612062022.51499.chromatic@wgz.org
          - 200612102136.11848.chromatic@wgz.org
        posters:
          - email: parrotbug-followup@parrotcode.org
            name: Patrick R . Michaud
          - email: chromatic@wgz.org
            name: chromatic
        rt_ticket: 'perl #40958'
        subject: "[perl #40958] [BUG] - can't iterate subclass of ResizablePMCArray "
        summary: |-
          chromatic responded to ticket <rt://perl/40958> with a second patch,
          which improves upon his earlier attempt.  However, he noted that it
          seems to work poorly with Data::Dumper and that his solution, while
          non-invasive, was not ideal.  He described his preferred fix.
      - date_from: 1165578932
        date_to: 1165827662
        hidden: ~
        message_id: rt-3.6.HEAD-13126-1165578920-639.41055-72-0@perl.org
        messages:
          - da43c2e0612110100l4e3b169ag9a7c3885bdce958@mail.gmail.com
        posters:
          - email: parrotbug-followup@parrotcode.org
            name: James Keenan
          - email: lee.duhem@gmail.com
            name: Lee Duhem
        rt_ticket: 'perl #41055'
        subject: "[perl #41055] [BUG]:  'Argument is not numeric' warning in Darwin configuration "
        summary: |-
          Last week, in ticket <rt://perl/41055>, James Keenan registered a bug
          with running `perl Configure.pl`, which seemed to be related to having
          a 3-level version number.
          
          This week, Lee Duhem commented that it would probably be enough to get
          the major OS version.
      - date_from: 1165721240
        date_to: 1165890115
        hidden: ~
        message_id: rt-3.6.HEAD-13138-1165721213-1892.41064-72-0@perl.org
        messages:
          - D5A3CC71-D3C4-44D4-BBA7-A77803A8AAD9@coleda.com
          - 5B71008B-1343-4B31-9E20-5DD89B9BA9F1@verizon.net
          - 471DE908-39DF-4D52-A8A6-552F56B05C75@coleda.com
          - 457C9D5B.4010008@yahoo.com
          - 92794675-C277-4025-88B8-501BD3B34D13@coleda.com
          - 457CAEEC.8060909@yahoo.com
          - 457CB308.5030104@yahoo.com
          - 457CB69A.6000103@yahoo.com
          - DB3882F2-ADF7-4013-B6A0-B36FC1A705C1@coleda.com
          - 1d9a3f400612110642t2441be37nfc815f40505c82d8@mail.gmail.com
          - 200612111813.47880.chromatic@wgz.org
          - F1DE116B-2B3E-449A-ADC9-4076A7CB7E34@coleda.com
          - 0B915649-3A3F-4258-A82D-5631EEE30226@coleda.com
          - 457CB69A.6000103@yahoo.com
          - DB3882F2-ADF7-4013-B6A0-B36FC1A705C1@coleda.com
          - 1d9a3f400612110642t2441be37nfc815f40505c82d8@mail.gmail.com
          - 200612111813.47880.chromatic@wgz.org
          - F1DE116B-2B3E-449A-ADC9-4076A7CB7E34@coleda.com
          - 0B915649-3A3F-4258-A82D-5631EEE30226@coleda.com
          - D5A3CC71-D3C4-44D4-BBA7-A77803A8AAD9@coleda.com
          - 5B71008B-1343-4B31-9E20-5DD89B9BA9F1@verizon.net
          - 471DE908-39DF-4D52-A8A6-552F56B05C75@coleda.com
          - 457C9D5B.4010008@yahoo.com
          - 92794675-C277-4025-88B8-501BD3B34D13@coleda.com
          - 457CAEEC.8060909@yahoo.com
          - 457CB308.5030104@yahoo.com
          - 457CB69A.6000103@yahoo.com
          - DB3882F2-ADF7-4013-B6A0-B36FC1A705C1@coleda.com
          - 1d9a3f400612110642t2441be37nfc815f40505c82d8@mail.gmail.com
          - 200612111813.47880.chromatic@wgz.org
          - F1DE116B-2B3E-449A-ADC9-4076A7CB7E34@coleda.com
          - 0B915649-3A3F-4258-A82D-5631EEE30226@coleda.com
          - rt-3.6.HEAD-13138-1165759631-1006.41064-15-0@perl.org
        posters:
          - email: parrotbug-followup@parrotcode.org
            name: James Keenan
          - email: will@coleda.com
            name: Will Coleda
          - email: jkeen_via_google@yahoo.com
            name: James E Keenan
          - email: jerry.gay@gmail.com
            name: jerry gay
          - email: chromatic@wgz.org
            name: chromatic
        rt_ticket: 'perl #41064'
        subject: "[perl #41064] Not-so-new 'make' failures on Darwin "
        summary: |-
          Ticket <rt://perl/41064> was created by James Keenan to report another
          failure to make Parrot on Darwin.  He expressed frustration that he is
          still seeing the same problem which he encountered at the Chicago
          Hackathon and described the measures he has taken to resolve it.
          
          Will Coleda found a possible file ownership problem, and suggested
          trying a new checkout.  After determining that this was not the cause,
          Will asked several questions in an attempt to pinpoint the cause.
          Several further posts were made by both James and Will as they tried
          to determine the source of the problem.  Eventually Will concluded that
          the most likely culprit was James using another compiler, rather than
          the Apple version of gcc/g++.
      - date_from: 1165846573
        date_to: 1165846573
        hidden: summary
        message_id: 20061211141500.5326.qmail@x1.develooper.com
        posters:
          - email: perlbug-summary@perl.org
            name: Parrot Bug Summary
        subject: Parrot Bug Summary
        summary: ''
      - date_from: 1165611719
        date_to: 1165904505
        hidden: ~
        message_id: 20061208210037.25637.qmail@spout.spiders.net
        messages:
          - 17785.63776.241884.592723@rgrjr.dyndns.org
          - 30AE1D76-6853-44D8-9C3C-0E6227A4AE9E@coleda.com
          - 17786.8496.663605.883219@rgrjr.dyndns.org
          - 457E4A63.4010605@perl.org
        posters:
          - email: will@coleda.com
            name: Will Coleda
          - email: rogers-perl6@rgrjr.dyndns.org
            name: Bob Rogers
          - email: allison@perl.org
            name: Allison Randal
        subject: yield from a method
        summary: |-
          Will Coleda showed how the current `:method` and `.yield` implementations
          and asked if it was desirable for them to work in this way.  He was
          working on the 'Range' object and encountered this problem.  
          
          Bob Rogers
          thought the proper fix would be to build Coroutine on Continuation instead
          of Sub.  He also suggested storing the coroutine state explicitly in the
          object, and emulating yielding the method.
          
          Allison Randal responded that the current functionality is desired for class
          methods, although it makes no sense for instance methods.  She advised
          making yield object-specific within methods.
      - date_from: 1165909793
        date_to: 1165909793
        hidden: ~
        message_id: 5.1.0.14.2.20061212084536.0277dff0@pop.besancon.parkeon.com
        posters:
          - email: francois.perrad@gadz.org
            name: François PERRAD
        subject: Side effect between exit & .HLL
        summary: |-
          François Perrad
          showed some example code where an error of 'no exception handler' was seen
          when a .HLL directive was added before a simple subroutine.  He wondered
          if that was a feature or a bug.
      - date_from: 1165943637
        date_to: 1165943637
        hidden: in thread 457EEB24.8040009@kasuku.org
        message_id: 457EE33E.9090706@oreilly.com
        posters:
          - email: allison@oreilly.com
            name: Allison Randal
        subject: Past-pm printing the return value of the main routine
        summary: ''
      - date_from: 1165945465
        date_to: 1166046852
        hidden: ~
        message_id: 457EEA4B.1030902@kasuku.org
        messages:
          - 20061212212013.GI28002@host.pmichaud.com
          - 457F25C0.5020302@kasuku.org
          - 20061213215247.GF8177@host.pmichaud.com
        posters:
          - email: allison@kasuku.org
            name: Allison Randal
          - email: pmichaud@pobox.com
            name: Patrick R. Michaud
        subject: Past-pm basic string types
        summary: |-
          Allison Randal asked how to best pass-through string types from a compiler
          to Parrot without doing string processing.  Patrick R. Michaud replied
          that it is expected that it will be rare for a HLL string literal format
          to exactly match a string literal in PIR.  Consequently, it expects that
          the HLL will have decoded the strong constant according to the HLL rules,
          and PAST-pm will re-encode the string to work in Parrot.  He offered to
          modify PAST-pm to provide a "send literal" option.
          
          Allison thought that
          was a good idea, and appreciated that the current system makes no assumptions
          about what constitutes a string.  Later Patrick realized that the
          functionality already exists, if the `ctype` isn't set.  This is subject
          to change, however, so he included more specific instructions for performing
          the task.
      - date_from: 1165945659
        date_to: 1165948982
        hidden: ~
        message_id: 457EEB24.8040009@kasuku.org
        messages:
          - 20061212183539.GA28002@host.pmichaud.com
          - 457EF82C.3040500@kasuku.org
        posters:
          - email: allison@kasuku.org
            name: Allison Randal
          - email: pmichaud@pobox.com
            name: Patrick R. Michaud
        subject: Past-pm printing the return value of the main routine
        summary: |-
          Allison Randal cited an example of printing a simple statement, '2', which
          would actually print '21' because the main routine is returning the value
          of the last statement (true), which is correct for Perl but not all languages.
          Also, the HLLCompiler is printing out this return value, and she
          wanted to know why that was happening.  Patrick R. Michaud reported
          that this has since been fixed.
      - date_from: 1166031519
        date_to: 1166031519
        hidden: ~
        message_id: rt-3.6.HEAD-1814-1166029775-65.41082-72-0@perl.org
        posters:
          - email: parrotbug-followup@parrotcode.org
            name: Greg Bacon
        rt_ticket: 'perl #41082'
        subject: '[perl #41082] [PATCH] Cygwin: conflicting types for _LIB_VERSION '
        summary: |-
          Greg Bacon opened ticket <rt://perl/41082> to report a failure with
          building r16097 on Cygwin.  He supplied a patch.  After Jerry Gay
          closed the ticket, he asked if it was a known issue, and what the
          solution was.
      - date_from: 1166037891
        date_to: 1166037891
        hidden: child of rt-3.6.HEAD-1814-1166029775-65.41082-72-0@perl.org
        message_id: 200612131923.kBDJNjsj704175@ant.hiwaay.net
        posters:
          - email: gbacon@ant.hiwaay.net
            name: Greg Bacon
        subject: 'Re: [perl #41082] [RESOLVED] [PATCH] Cygwin: conflicting types for _LIB_VERSION '
        summary: ''
      - date_from: 1166190421
        date_to: 1166190421
        hidden: ~
        message_id: 20061215134525.71859.qmail@spout.spiders.net
        posters:
          - email: will@coleda.com
            name: Will Coleda
        subject: Bug Day
        summary: |-
          Will Coleda created a page to prepare for
          [bug day](http://rakudo.org/parrot/index.cgi?bug_day_december_dec_16_2006).
          December 16th was bug day.
    title: Parrot Porters
  - name: perl6-users
    threads:
      - date_from: 1165918496
        date_to: 1165958608
        hidden: ~
        message_id: 20061212101442.9808.qmail@web60821.mail.yahoo.com
        messages:
          - 20061212120057.GM29200@sike.forum2.org
          - 730032.89497.qm@web60816.mail.yahoo.com
        posters:
          - email: publiustemp-perl6users@yahoo.com
            name: Ovid
          - email: gaal@forum2.org
            name: Gaal Yahas
        subject: Error running Pugs tests
        summary: |-
          Ovid reported that Pugs r15881 gave some errors with his new GHC 6.6
          if he ran a test without `-lblib6/lib`.  He wondered why it would generate
          a syntax error if he left out that portion of the line.  Gaal Yahas suggested
          that it was due to an old version of Test.pm from the earlier installation.
      - date_from: 1165962075
        date_to: 1166039327
        hidden: ~
        message_id: 94339.38297.qm@web60815.mail.yahoo.com
        messages:
          - 1d9a3f400612121726n1d8efbddn9d162c9a0df6aaa@mail.gmail.com
          - 20061213085528.GP29200@sike.forum2.org
          - 20061213194758.GA16416@wall.org
        posters:
          - email: publiustemp-perl6users@yahoo.com
            name: Ovid
          - email: jerry.gay@gmail.com
            name: jerry gay
          - email: gaal@forum2.org
            name: Gaal Yahas
          - email: larry@wall.org
            name: Larry Wall
        subject: Introspection and list question
        summary: |-
          Ovid had a quick question on how to do introspection in Pugs.  He also
          wanted to know how to flatten nested lists in Perl6.  Jerry Gay responded
          that introspection is mostly unimplemented.  He also pointed Ovid to S02
          for the answer to his other question.  Gaal Yahas suggested that
          the [Official Perl 6 Documentation](http://spec.pugscode.org/) was the
          best place to look for updated synopses.  He proposed `gather` to flatten
          a list, but noted that it was not yet implemented.  Larry Wall replied
          that that would only flatten a recursive structure with help, and noted
          that Pugs implements the block form of `gather`.
          jerry gay
          Gaal Yahas
          Larry Wall
      - date_from: 1166038339
        date_to: 1166041436
        hidden: ~
        message_id: 93187.85261.qm@web60823.mail.yahoo.com
        messages:
          - 20061213200006.GB16416@wall.org
          - 20061213201954.GA22797@sike.forum2.org
        posters:
          - email: publiustemp-perl6users@yahoo.com
            name: Ovid
          - email: larry@wall.org
            name: Larry Wall
          - email: gaal@forum2.org
            name: Gaal Yahas
        subject: Strange error message with anon subroutine
        summary: |-
          Ovid showed some code he had written to compress a list.  He showed that
          once he had added some return statements inside an anonymous subroutine,
          he received an error message about using a control structure outside
          a routine.  Ovid wondered if he had made a mistake or if there was a bug.
          
          Larry Wall replied that it was expected to work that way.  He quoted
          a section of S06, and also referenced S04.  He advised changing the pointy
          block in to an official sub.  Gaal Yahas also gave similar advice.
    title: Users
  - name: perl6-compiler
    threads:
      - date_from: 1166049735
        date_to: 1166202697
        hidden: ~
        message_id: 20061213224148.GC6402@plum.flirble.org
        messages:
          - be740eb90612131517t26a05a7cwb447ed321a269f4e@mail.gmail.com
          - 4582D737.7090308@landgren.net
        posters:
          - email: nick@ccl4.org
            name: Nicholas Clark
          - email: mydublinaddress@gmail.com
            name: Kevin Z
          - email: david@landgren.net
            name: David Landgren
        subject: 6-on-5 and read only aliasing
        summary: |-
          Nicholas Clark announced a placeholder named BIND for 6-on-5 aliasing,
          which should replace the need for the Perl 5 internal type PVBM as of
          r29544.  He included a list of features he thought were needed for
          6-on-5, and asked for other 4-letter (or shorter) words which were
          better than BIND.
          
          David Nicol noted that increasing internal types to 32 instead of
          keeping them at 16 would allow the top ones to accelerate tied and overloaded
          types.  Nicholas replied that there were too many switch statements in
          the core, and he would prefer switching to vtables.
          
          David Landgren thought BIND was an alias, which was like a nickname,
          and therefore proposed NICK.
    title: Compiler
title: Weekly Perl 6 mailing list summary
