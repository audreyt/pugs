#include <stdio.h>
#include <smop.h>
#include <smop_s1p.h>
#include <smop_slime.h>
#include <smop_oo.h>
#include <smop_lowlevel.h>


SMOP__Object* test_code(SMOP__Object* interpreter,
                        SMOP__Object* code,
                        SMOP__Object* capture) {
  printf("ok 3 - method call.\n");
  SMOP_RELEASE(interpreter,capture);
  return SMOP__NATIVE__bool_false;
}

int main() {
  smop_init();

  printf("1..4\n");


  SMOP__Object* interpreter = SMOP_DISPATCH(SMOP__INTPTR__InterpreterInstance, SMOP_RI(SMOP__INTPTR__InterpreterInstance),
                                            SMOP__ID__new, 
                                            SMOP__NATIVE__capture_create(SMOP__INTPTR__InterpreterInstance,
                                                                         SMOP__INTPTR__InterpreterInstance,NULL,NULL));
  SMOP__Object* frame;

  SMOP__Object* tcode = SMOP__S1P__CCode_create(test_code);
  SMOP__Object* method = SMOP__S1P__Method_create(interpreter,0,SMOP__ID__new,
                                                  SMOP__NATIVE__bool_false,
                                                  tcode);


  // This sm0p block will create a p6opaque, set the how, push a
  // method into the list of methods and call some method. The how
  // implemented here will take the first method to call.

  SMOP__Object* continuation = SMOP__NATIVE__bool_false;

  frame = q:v6-sm0p {
    $*object.STORE($SMOP__p6opaque__RI.^!CREATE());
    $*object.FETCH().^!how().STORE($SMOP__S1P__PurePrototypeHow);
    $*object.FETCH().^!methods.{"foo"}.STORE($method);
    $*object.FETCH().foo();
    $*object.STORE($SMOP__NATIVE__bool_false);
  };

  if (!frame) printf("not ");
  printf("ok 1 - frame created.\n");

  SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
                SMOP__ID__goto,
                frame);

  printf("ok 2 - goto frame.\n");

  SMOP_RELEASE(interpreter,continuation);

  SMOP_RELEASE(interpreter,method);

  SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
                SMOP__ID__loop, SMOP__NATIVE__capture_create(interpreter,
                                                             SMOP_REFERENCE(interpreter,interpreter),
                                                             NULL, NULL));

  printf("ok 4 - end interpreter loop.\n");

  SMOP_RELEASE(SMOP__INTPTR__InterpreterInstance,interpreter);

  smop_destr();
  return 0;
}
