#!/usr/local/bin/perl
use lib '../../src/perl6';
use lib 'src';
use STD;
package Mildew;
do 'viv';
use AST;
use AST::Helpers;
use DumpMatch;
use utf8;
use YAML::XS;
use Encode;
use strict;
use warnings;
use Getopt::Long;
use Carp 'confess';

my ($desugar,$debug,$file,$exec);
GetOptions("exec"=>\$exec,"file=s"=>\$file,"debug"=>\$debug,"desugar"=>\$desugar);

sub XXX {
    confess join ' ', 'unimplemented: ', @_;
}
sub FETCH {
    my $arg = shift;
    AST::Call->new(capture=>AST::Capture->new(invocant=>$arg),identifier=>string 'FETCH');
}
sub lookup {
    my $thing = shift;
    AST::Call->new(
        identifier=>string 'lookup',
        capture=>AST::Capture->new(invocant=>reg '$scope',positional=>[string $thing]),
    );
}
{ package VAST::Base;
    sub as_constant_string {
        my $m = shift;
        use YAML::XS;
        die Dump($m)." can't be represented as a constant string\n";
    }
}
sub VAST::longname::canonical {
    my $m = shift;
    my $name = $m->{name}{identifier}{TEXT};
    my $v = $m->{colonpair}[0]{v}{nibble}{nibbles}[0];
    if ($v) {
        $name . ':' . $v;
    } else {
        $name;
    }
}
sub VAST::integer::emit_m0ld {
    my $m = shift;
    #XXX non-base 10
    integer($m->{TEXT});
}
sub VAST::scope_declarator::emit_m0ld {
    my $m = shift;
    if ($m->{'sym'} eq 'my') {
        if (my $decl = $m->{scoped}{declarator}) {
            if (my $var_decl = $decl->{variable_declarator}) {
                AST::Call->new(
                    identifier => string 'BIND',
                    capture => AST::Capture->new(
                        invocant => AST::Call->new(
                            identifier => string 'postcircumfix:{ }',
                            capture => AST::Capture->new(invocant=>reg '$scope',positional=>[string varname($var_decl->{variable})])
                        ),
                        positional => [
                            AST::Call->new(
                                identifier => string 'new',
                                capture => AST::Capture->new(invocant => FETCH(lookup 'Scalar')),
                            )
                        ]
                    ),
                );
            }
        }
    } else {
        XXX;
    }
}
sub VAST::noun::emit_m0ld {
    my $m = shift;
    if ($m->{variable}) {
        $m->{variable}->emit_m0ld;
    } elsif ($m->{value}) {
        $m->{value}->emit_m0ld;
    } elsif ($m->{routine_declarator}) {
        if ($m->{routine_declarator}{routine_def}) {
            $m->{routine_declarator}{routine_def}->emit_m0ld;
        } else {
            XXX;
        }
    } elsif ($m->{term}) {
        $m->{term}->emit_m0ld;
    } elsif ($m->{scope_declarator}) {
        $m->{scope_declarator}->emit_m0ld;
    } else {
        XXX;
    }
}
sub VAST::term::emit_m0ld {
    my $m = shift;
    if ($m->{identifier} && $m->{args}) {
        my $func = lookup('&'.$m->{identifier}{TEXT});
        AST::Call->new(identifier=>string 'postcircumfix:( )',capture=>AST::Capture->new(
            invocant=>FETCH($func),
            positional => [AST::Call->new(
                identifier => string "capturize",
                capture => AST::Capture->new(
                    invocant => reg 'Â¢SMOP__S1P__Capturize',
                    positional => $m->{args}->emit_m0ld
                )
            )]
        ));
    } elsif (my $name = $m->{longname}->{name}) {
        if ($name->{morename} and !$name->{identifier}) {
            lookup join '',map {$_->{identifier}[0]{TEXT}} @{$name->{morename}};
            
        }
    }
}
sub VAST::identifier::emit_m0ld {
    my $m = shift;
}
sub VAST::Terminator::emit_m0ld {
    my $m = shift;
    if ($m->{noun}) {
        $m->{noun}->emit_m0ld;
    } else {
        XXX;
    }
}
sub VAST::args::emit_m0ld {
    my $m = shift;
    if ($m->{listopargs}) {
        [map {$_->{EXPR}->emit_m0ld} @{$m->{listopargs}}];
    } else {
        XXX;
    }
}
sub VAST::routine_def::emit_m0ld {
    my $m = shift;
    AST::Call->new(identifier=>string 'new',
        capture => AST::Capture->new(
            invocant => FETCH(lookup('Code')),
            positional => [],
            named => [
                string 'mold' => $m->{block}->emit_m0ld,
                string 'outer' => reg '$scope'
            ]
        ),
    );
}
sub trailing_return {
    my ($stmts,) = @_;
    [@{$stmts},AST::Call->new(identifier=>string 'goto',capture=>AST::Capture->new(invocant=>reg '$interpreter',positional => [AST::Call->new(identifier=>string 'back',capture=>AST::Capture->new(invocant=>AST::Call->new(identifier=>string 'continuation',capture=>AST::Capture->new(invocant=>reg '$interpreter'))))]))];
}
sub VAST::block::emit_m0ld {
    my $m = shift;
    AST::Block->new(regs=>['interpreter','scope'],stmts=>trailing_return($m->{statementlist}->emit_m0ld));
}
sub VAST::value::emit_m0ld {
    my $m = shift;
    if ($m->{number}) {
        $m->{number}->emit_m0ld;
    } elsif ($m->{quote}) {
        $m->{quote}->emit_m0ld;
    } else {
        warn Dump($m);
        XXX;
    }
}
sub VAST::quote::emit_m0ld {
    my $m = shift;
    # XXX escapes
    string join '',map {ref $_ ? $_->as_constant_string : $_} @{$m->{nibble}{nibbles}};
}
sub VAST::escape::as_constant_string {
    my $m = shift;
    $m->{item}->as_constant_string;
}
sub VAST::backslash::as_constant_string {
    my $m = shift;
    if ($m->{TEXT} =~ /^[n]$/) {
        '\\' . $m->{TEXT};
    } elsif ($m->{TEXT} =~ /^\W$/) {
        $m->{TEXT};
    } else {
        XXX;
    }
}
sub VAST::number::emit_m0ld {
    my $m = shift;
    if ($m->{integer}) {
        $m->{integer}->emit_m0ld;
    } else {
        XXX;
    }
}
sub VAST::sublongname::canonical {
    my $m = shift;
}
sub varname {
    my $m = shift;
    if ($m->{desigilname}) {
        $m->{sigil}{TEXT}.$m->{desigilname}{longname}->canonical;
    } elsif ($m->{sublongname}) {
        $m->{sigil}{TEXT}.$m->{sublongname}{subshortname}{desigilname}{longname}->canonical;
    } else {
        XXX;
    }
}
sub VAST::variable::emit_m0ld {
    my $m = shift;
    AST::Call->new(
        identifier=>string 'lookup',
        capture=>AST::Capture->new(invocant=>reg '$scope',positional=>[string varname($m)]),
    );
}

#returns a list of nodes
sub VAST::Comma::emit_m0ld {
    my $m = shift;
    map {$_->emit_m0ld} @{$m->{list}};
}
sub VAST::nulltermish::emit_m0ld {
    my $m = shift;
    $m->{termish}[0] ? $m->{termish}[0]->emit_m0ld : ();
}

sub VAST::dotty::emit_m0ld {
    my ($m,$noun) = @_;
    if (my $methodop = $m->{dottyop}{methodop}) {
        if ($methodop->{longname}) {
            my $positional = $methodop->{semilist}[0]{statement}[0];
            my @positional = $positional ? $positional->emit_m0ld : ();
            my $ident = $methodop->{longname}->canonical;
            if ($m->{sym} eq '^!') {
                $ident = '^!' . $ident;
            }
            AST::Call->new(
                identifier=>string $ident,
                capture=>AST::Capture->new(invocant=>FETCH($noun),positional=>[@positional]),
            );
        } else {
            XXX('unknown methodop');
        }
    } elsif (my $postop = $m->{dottyop}{postop}) {
        if (my $postcircumfix = $postop->{postcircumfix}) {
            my $positional = $methodop->{semilist}[0]{statement}[0];
            my @positional = $positional ? $positional->emit_m0ld : ();
            AST::Call->new(
                identifier => string 'postcircumfix:'.$postcircumfix->{FIRST}.' '.$postcircumfix->{LAST},
                capture => AST::Capture->new(invocant=>FETCH($noun),positional=>[@positional]),
            );
        } else {
            XXX('unknown postop');
        }
    } else {
        XXX('unknown dotty');
    }
}
sub EXPR {
    my $m = shift;
    if ($m->{noun}) {
        my $noun = $m->{noun}->emit_m0ld;
        if ($m->{POST}) {
            for (@{$m->{POST}}) {
                if ($_->{dotty}) {
                    $noun = $_->{dotty}->emit_m0ld($noun);
                } else {
                    XXX
                }
            }
            $noun;
        } else {
            $noun;
        }
    } else {
        XXX;
    }
} 
sub VAST::EXPR::emit_m0ld {
    EXPR(shift);
}
sub VAST::termish::emit_m0ld {
    EXPR(shift);
}
sub VAST::Methodcall::emit_m0ld {
    my $m = shift;
    $m->{arg}->emit_m0ld;
}
sub VAST::List_assignment::emit_m0ld {
    my $m = shift;
    if ($m->{infix}{TEXT} eq '=') {
        AST::Call->new(
            identifier=>string 'STORE',
            capture=>AST::Capture->new(invocant=>$m->{left}->emit_m0ld,positional=>[FETCH($m->{right}->emit_m0ld)]),
        );
    } else {
        XXX;
    }
}
sub VAST::Item_assignment::emit_m0ld {
    my $m = shift;
    if ($m->{infix}{TEXT} eq ':=') {
        AST::Call->new(
            identifier=>string 'BIND',
            capture=>AST::Capture->new(invocant=>$m->{left}->emit_m0ld,positional=>[$m->{right}->emit_m0ld]),
        );
    } else {
        XXX;
    }
}
sub VAST::statement::emit_m0ld {
    my $m = shift;
    if ($m->{label}) {
        AST::Label->new(label=>label($m->{label}),stmt=>statement($m->{statement}));
    } elsif ($m->{statement_control}) {
        XXX('statement_control')
    } elsif ($m->{EXPR}) {
        $m->{EXPR}->emit_m0ld;
    } else {
        XXX('unknown statement')
    }
}
sub VAST::comp_unit::emit_m0ld {
    my $m = shift;
    AST::Block->new(regs=>['interpreter','scope'],stmts=>$m->{statementlist}->emit_m0ld);
}
sub VAST::statementlist::emit_m0ld {
    my $m = shift;
    [map {$_->emit_m0ld} @{$m->{statement}}]
}
my $m;
if ($file) {
    $m = STD->parsefile($file,'comp_unit');
} else {
    $m = STD->parse(join('', <STDIN>), 'comp_unit');
}

print dump_match('comp_unit'=>$m,{vertical=>1,mark_arrays=>1,visit_twice=>1}),"\n" if $debug;
print "#################\n" if $debug;
print Dump($m->item) if $debug;
print Dump($m->item->emit_m0ld) if $debug;
print "#################\n" if $debug;
my $mold = $m->item->emit_m0ld;
use YAML::XS;
print $mold->pretty,"\n" if $desugar;
exit if $desugar;
my $m0ld = <<'BOILERPLATE'.$mold->emit_('$main').<<'CALL_MAIN';
my $void;
BOILERPLATE
my $scope = ?SMOP__S1P__LexicalPrelude;
my $Code_scalar = $scope."lookup"("Code");
my $Code = $Code_scalar."FETCH"();
my $main_code = $Code."new"(:"outer"($scope),:"mold"($main));
my $capture = Â¢SMOP__S1P__Capturize."capturize"();
my $void = $main_code."postcircumfix:( )"($capture);
CALL_MAIN
if ($exec) {
    local $ENV{LD_LIBRARY_PATH} = '../smop/build';
    open(my $m0ld_exe,"|../smop/m0ld/dist/build/m0ld/m0ld --exec");
    print $m0ld_exe encode('utf8',$m0ld);
} else {
    print $m0ld;#encode('utf8',$m0ld);
}
