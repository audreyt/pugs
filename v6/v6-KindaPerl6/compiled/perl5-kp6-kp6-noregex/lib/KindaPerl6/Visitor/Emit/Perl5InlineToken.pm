{

    package KindaPerl6::Visitor::Emit::Perl5InlineToken;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    # AUTHORS, COPYRIGHT: Please look at the source file.
    use v5;
    use strict;
    no strict "vars";
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    INIT { $_MODIFIED = {} }
    INIT {
        $_ =
          ::DISPATCH( $::Scalar, "new",
            { modified => $_MODIFIED, name => "$_" } );
    }
    do {
        do {
            if (
                ::DISPATCH(
                    ::DISPATCH(
                        ::DISPATCH(
                            (
                                $GLOBAL::Code_VAR_defined =
                                  $GLOBAL::Code_VAR_defined
                                  || ::DISPATCH( $::Routine, "new", )
                            ),
                            'APPLY',
                            $::KindaPerl6::Visitor::Emit::Perl5InlineToken
                        ),
                        "true"
                    ),
                    "p5landish"
                )
              )
            {
            }
            else {
                do {
                    do {
                        ::MODIFIED(
                            $::KindaPerl6::Visitor::Emit::Perl5InlineToken);
                        $::KindaPerl6::Visitor::Emit::Perl5InlineToken =
                          ::DISPATCH(
                            ::DISPATCH(
                                $::Class, 'new',
                                ::DISPATCH(
                                    $::Str,
                                    'new',
'KindaPerl6::Visitor::Emit::Perl5InlineToken'
                                )
                            ),
                            'PROTOTYPE',
                          );
                      }
                  }
            }
        };
        ::DISPATCH(
            ::DISPATCH(
                $::KindaPerl6::Visitor::Emit::Perl5InlineToken, 'HOW',
            ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'visit' ),
            ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {

                        # emit_declarations
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $node;
                        $node =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$node' } )
                          unless defined $node;
                        INIT {
                            $node =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$node' } );
                        }

                        # get $self
                        $self = shift;

                        # emit_arguments
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;
                        INIT {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        ::DISPATCH_VAR( $List__, 'STORE',
                            ::DISPATCH( $CAPTURE, 'array', ) );
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        {
                            my $_param_index = 0;
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'node' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($node);
                                    $node =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'node' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $node = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                        }

                        # emit_body
                        ::DISPATCH( $node, 'emit_perl5_and_c', );
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => $::Undef,
                            array    => ::DISPATCH(
                                $::List, "new",
                                {
                                    _array => [
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'node',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                    ]
                                }
                            ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
        use KindaPerl6::Visitor::Emit::Perl5;
        use KindaPerl6::Visitor::Emit::TokenC;
    };
    1
}
{

    package CompUnit;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    # AUTHORS, COPYRIGHT: Please look at the source file.
    use v5;
    use strict;
    no strict "vars";
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    INIT { $_MODIFIED = {} }
    INIT {
        $_ =
          ::DISPATCH( $::Scalar, "new",
            { modified => $_MODIFIED, name => "$_" } );
    }
    do {
        do {
            if (
                ::DISPATCH(
                    ::DISPATCH(
                        ::DISPATCH(
                            (
                                $GLOBAL::Code_VAR_defined =
                                  $GLOBAL::Code_VAR_defined
                                  || ::DISPATCH( $::Routine, "new", )
                            ),
                            'APPLY',
                            $::CompUnit
                        ),
                        "true"
                    ),
                    "p5landish"
                )
              )
            {
            }
            else {
                do {
                    do {
                        ::MODIFIED($::CompUnit);
                        $::CompUnit = ::DISPATCH(
                            ::DISPATCH(
                                $::Class, 'new',
                                ::DISPATCH( $::Str, 'new', 'CompUnit' )
                            ),
                            'PROTOTYPE',
                        );
                      }
                  }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::CompUnit, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'emit_perl5_and_c' ),
            ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {

                        # emit_declarations
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$self' } )
                          unless defined $self;
                        INIT {
                            $self =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$self' } );
                        }

                        # get $self
                        $self = shift;

                        # emit_arguments
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;
                        INIT {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        ::DISPATCH_VAR( $List__, 'STORE',
                            ::DISPATCH( $CAPTURE, 'array', ) );
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        { my $_param_index = 0; }

                        # emit_body
                        ::DISPATCH(
                            (
                                $GLOBAL::Code_infix_58__60__126__62_ =
                                  $GLOBAL::Code_infix_58__60__126__62_
                                  || ::DISPATCH( $::Routine, "new", )
                            ),
                            'APPLY',
                            ::DISPATCH( $::Str, 'new', '{package ' ),
                            ::DISPATCH(
                                (
                                    $GLOBAL::Code_infix_58__60__126__62_ =
                                      $GLOBAL::Code_infix_58__60__126__62_
                                      || ::DISPATCH( $::Routine, "new", )
                                ),
                                'APPLY',
                                ::DISPATCH( $self, "name" ),
                                ::DISPATCH(
                                    (
                                        $GLOBAL::Code_infix_58__60__126__62_ =
                                          $GLOBAL::Code_infix_58__60__126__62_
                                          || ::DISPATCH( $::Routine, "new", )
                                    ),
                                    'APPLY',
                                    ::DISPATCH(
                                        (
                                            $GLOBAL::Code_infix_58__60__126__62_
                                              = $GLOBAL::Code_infix_58__60__126__62_
                                              || ::DISPATCH( $::Routine, "new",
                                              )
                                        ),
                                        'APPLY',
                                        ::DISPATCH(
                                            $::Str,
                                            'new',
';use Inline C => Config,STRUCTS=>["match"];use Inline C => `cat "lib/KindaPerl6/Runtime/C/match.h"`.<<'
                                        ),
                                        ::DISPATCH(
                                            (
                                                $GLOBAL::Code_infix_58__60__126__62_
                                                  = $GLOBAL::Code_infix_58__60__126__62_
                                                  || ::DISPATCH(
                                                    $::Routine, "new",
                                                  )
                                            ),
                                            'APPLY',
                                            ::DISPATCH(
                                                $::Str, 'new', chr(39)
                                            ),
                                            ::DISPATCH(
                                                (
                                                    $GLOBAL::Code_infix_58__60__126__62_
                                                      = $GLOBAL::Code_infix_58__60__126__62_
                                                      || ::DISPATCH(
                                                        $::Routine, "new",
                                                      )
                                                ),
                                                'APPLY',
                                                ::DISPATCH(
                                                    $::Str, 'new', 'END'
                                                ),
                                                ::DISPATCH(
                                                    (
                                                        $GLOBAL::Code_infix_58__60__126__62_
                                                          = $GLOBAL::Code_infix_58__60__126__62_
                                                          || ::DISPATCH(
                                                            $::Routine, "new",
                                                          )
                                                    ),
                                                    'APPLY',
                                                    ::DISPATCH(
                                                        $::Str, 'new',
                                                        chr(39)
                                                    ),
                                                    ::DISPATCH(
                                                        $::Str, 'new', ';'
                                                    )
                                                )
                                            )
                                        )
                                    ),
                                    ::DISPATCH(
                                        (
                                            $GLOBAL::Code_infix_58__60__126__62_
                                              = $GLOBAL::Code_infix_58__60__126__62_
                                              || ::DISPATCH( $::Routine, "new",
                                              )
                                        ),
                                        'APPLY',
                                        ::DISPATCH(
                                            (
                                                $Main::Code_newline =
                                                  $Main::Code_newline
                                                  || ::DISPATCH(
                                                    $::Routine, "new",
                                                  )
                                            ),
                                            'APPLY',
                                        ),
                                        ::DISPATCH(
                                            (
                                                $GLOBAL::Code_infix_58__60__126__62_
                                                  = $GLOBAL::Code_infix_58__60__126__62_
                                                  || ::DISPATCH(
                                                    $::Routine, "new",
                                                  )
                                            ),
                                            'APPLY',
                                            ::DISPATCH( $self, 'emit_c', ),
                                            ::DISPATCH(
                                                (
                                                    $GLOBAL::Code_infix_58__60__126__62_
                                                      = $GLOBAL::Code_infix_58__60__126__62_
                                                      || ::DISPATCH(
                                                        $::Routine, "new",
                                                      )
                                                ),
                                                'APPLY',
                                                ::DISPATCH(
                                                    (
                                                        $Main::Code_newline =
                                                          $Main::Code_newline
                                                          || ::DISPATCH(
                                                            $::Routine, "new",
                                                          )
                                                    ),
                                                    'APPLY',
                                                ),
                                                ::DISPATCH(
                                                    (
                                                        $GLOBAL::Code_infix_58__60__126__62_
                                                          = $GLOBAL::Code_infix_58__60__126__62_
                                                          || ::DISPATCH(
                                                            $::Routine, "new",
                                                          )
                                                    ),
                                                    'APPLY',
                                                    ::DISPATCH(
                                                        $::Str, 'new',
                                                        'END'
                                                    ),
                                                    ::DISPATCH(
                                                        (
                                                            $GLOBAL::Code_infix_58__60__126__62_
                                                              = $GLOBAL::Code_infix_58__60__126__62_
                                                              || ::DISPATCH(
                                                                $::Routine,
                                                                "new",
                                                              )
                                                        ),
                                                        'APPLY',
                                                        ::DISPATCH(
                                                            (
                                                                $Main::Code_newline
                                                                  = $Main::Code_newline
                                                                  || ::DISPATCH(
                                                                    $::Routine,
                                                                    "new",
                                                                  )
                                                            ),
                                                            'APPLY',
                                                        ),
                                                        ::DISPATCH(
                                                            (
                                                                $GLOBAL::Code_infix_58__60__126__62_
                                                                  = $GLOBAL::Code_infix_58__60__126__62_
                                                                  || ::DISPATCH(
                                                                    $::Routine,
                                                                    "new",
                                                                  )
                                                            ),
                                                            'APPLY',
                                                            ::DISPATCH(
                                                                $::Str, 'new',
                                                                '}'
                                                            ),
                                                            ::DISPATCH(
                                                                $self,
                                                                'emit_perl5',
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        );
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => bless(
                                {
                                    'namespace' => [],
                                    'name'      => 'self',
                                    'twigil'    => '',
                                    'sigil'     => '$'
                                },
                                'Var'
                            ),
                            array =>
                              ::DISPATCH( $::List, "new", { _array => [] } ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
    };
    1
}
{

    package Token;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    # AUTHORS, COPYRIGHT: Please look at the source file.
    use v5;
    use strict;
    no strict "vars";
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    INIT { $_MODIFIED = {} }
    INIT {
        $_ =
          ::DISPATCH( $::Scalar, "new",
            { modified => $_MODIFIED, name => "$_" } );
    }
    do {
        do {
            if (
                ::DISPATCH(
                    ::DISPATCH(
                        ::DISPATCH(
                            (
                                $GLOBAL::Code_VAR_defined =
                                  $GLOBAL::Code_VAR_defined
                                  || ::DISPATCH( $::Routine, "new", )
                            ),
                            'APPLY', $::Token
                        ),
                        "true"
                    ),
                    "p5landish"
                )
              )
            {
            }
            else {
                do {
                    do {
                        ::MODIFIED($::Token);
                        $::Token = ::DISPATCH(
                            ::DISPATCH(
                                $::Class, 'new',
                                ::DISPATCH( $::Str, 'new', 'Token' )
                            ),
                            'PROTOTYPE',
                        );
                      }
                  }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Token, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'emit_perl5' ),
            ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {

                        # emit_declarations
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$self' } )
                          unless defined $self;
                        INIT {
                            $self =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$self' } );
                        }

                        # get $self
                        $self = shift;

                        # emit_arguments
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;
                        INIT {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        ::DISPATCH_VAR( $List__, 'STORE',
                            ::DISPATCH( $CAPTURE, 'array', ) );
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        { my $_param_index = 0; }

                        # emit_body
                        ::DISPATCH(
                            (
                                $GLOBAL::Code_infix_58__60__126__62_ =
                                  $GLOBAL::Code_infix_58__60__126__62_
                                  || ::DISPATCH( $::Routine, "new", )
                            ),
                            'APPLY',
                            ::DISPATCH(
                                $::Str, 'new', '::DISPATCH(::DISPATCH($::'
                            ),
                            ::DISPATCH(
                                (
                                    $GLOBAL::Code_infix_58__60__126__62_ =
                                      $GLOBAL::Code_infix_58__60__126__62_
                                      || ::DISPATCH( $::Routine, "new", )
                                ),
                                'APPLY',
                                (
                                    $KindaPerl6::Visitor::Emit::Perl5::current_compunit
                                      = $KindaPerl6::Visitor::Emit::Perl5::current_compunit
                                      || ::DISPATCH( $::Scalar, "new", )
                                ),
                                ::DISPATCH(
                                    (
                                        $GLOBAL::Code_infix_58__60__126__62_ =
                                          $GLOBAL::Code_infix_58__60__126__62_
                                          || ::DISPATCH( $::Routine, "new", )
                                    ),
                                    'APPLY',
                                    ::DISPATCH(
                                        (
                                            $GLOBAL::Code_infix_58__60__126__62_
                                              = $GLOBAL::Code_infix_58__60__126__62_
                                              || ::DISPATCH( $::Routine, "new",
                                              )
                                        ),
                                        'APPLY',
                                        ::DISPATCH(
                                            $::Str,
                                            'new',
',"HOW"),"add_method",::DISPATCH($::Str,"new",'
                                        ),
                                        ::DISPATCH( $::Str, 'new', chr(39) )
                                    ),
                                    ::DISPATCH(
                                        (
                                            $GLOBAL::Code_infix_58__60__126__62_
                                              = $GLOBAL::Code_infix_58__60__126__62_
                                              || ::DISPATCH( $::Routine, "new",
                                              )
                                        ),
                                        'APPLY',
                                        ::DISPATCH( $self, "name" ),
                                        ::DISPATCH(
                                            (
                                                $GLOBAL::Code_infix_58__60__126__62_
                                                  = $GLOBAL::Code_infix_58__60__126__62_
                                                  || ::DISPATCH(
                                                    $::Routine, "new",
                                                  )
                                            ),
                                            'APPLY',
                                            ::DISPATCH(
                                                (
                                                    $GLOBAL::Code_infix_58__60__126__62_
                                                      = $GLOBAL::Code_infix_58__60__126__62_
                                                      || ::DISPATCH(
                                                        $::Routine, "new",
                                                      )
                                                ),
                                                'APPLY',
                                                ::DISPATCH(
                                                    $::Str, 'new', chr(39)
                                                ),
                                                ::DISPATCH(
                                                    $::Str,
                                                    'new',
'),::DISPATCH($::Method,"new",sub {my $match = '
                                                )
                                            ),
                                            ::DISPATCH(
                                                (
                                                    $GLOBAL::Code_infix_58__60__126__62_
                                                      = $GLOBAL::Code_infix_58__60__126__62_
                                                      || ::DISPATCH(
                                                        $::Routine, "new",
                                                      )
                                                ),
                                                'APPLY',
                                                ::DISPATCH(
                                                    (
                                                        $Main::Code_mangle_ident
                                                          = $Main::Code_mangle_ident
                                                          || ::DISPATCH(
                                                            $::Routine, "new",
                                                          )
                                                    ),
                                                    'APPLY',
                                                    ::DISPATCH(
                                                        (
                                                            $GLOBAL::Code_infix_58__60__126__62_
                                                              = $GLOBAL::Code_infix_58__60__126__62_
                                                              || ::DISPATCH(
                                                                $::Routine,
                                                                "new",
                                                              )
                                                        ),
                                                        'APPLY',
                                                        (
                                                            $KindaPerl6::Visitor::Emit::Perl5::current_compunit
                                                              = $KindaPerl6::Visitor::Emit::Perl5::current_compunit
                                                              || ::DISPATCH(
                                                                $::Scalar,
                                                                "new",
                                                              )
                                                        ),
                                                        ::DISPATCH(
                                                            (
                                                                $GLOBAL::Code_infix_58__60__126__62_
                                                                  = $GLOBAL::Code_infix_58__60__126__62_
                                                                  || ::DISPATCH(
                                                                    $::Routine,
                                                                    "new",
                                                                  )
                                                            ),
                                                            'APPLY',
                                                            ::DISPATCH(
                                                                $::Str, 'new',
                                                                '::'
                                                            ),
                                                            ::DISPATCH(
                                                                $self, "name"
                                                            )
                                                        )
                                                    )
                                                ),
                                                ::DISPATCH(
                                                    $::Str,
                                                    'new',
'(GLOBAL::_str($_[1]),GLOBAL::_int($_[2]));::DISPATCH($::Match,"new",{match_str=>$_[1],bool=>::DISPATCH($::Bit,"new",$match->boolean),from=>::DISPATCH($::Int,"new",$match->from),to=>::DISPATCH($::Int,"new",$match->to)})}))'
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        );
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => bless(
                                {
                                    'namespace' => [],
                                    'name'      => 'self',
                                    'twigil'    => '',
                                    'sigil'     => '$'
                                },
                                'Var'
                            ),
                            array =>
                              ::DISPATCH( $::List, "new", { _array => [] } ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
    };
    1
}
