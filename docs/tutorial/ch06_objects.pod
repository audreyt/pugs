# Copyright (C) 2003-2007, The Perl Foundation.

=pod

=head0 Objects

Z<CHP-6>

X<objects>
Objects are encapsulated chunks of data and functionality. Over the
years a host of concepts have sprung up around objects, such as data
abstraction, code reuse, encapsulation, single and multiple
inheritance, composition, delegation, mixins, polymorphism, and
multiple dispatch. Every language with object-oriented syntax selects
a subset of these ideas and combines them in different ways. With Perl
6 we want to provide a cleaner and simpler syntax for working with
objects, but we also want to support a larger set of object-oriented
ideas. Does that sound impossible? The solution is a classically
Perl-ish one: make the easy things easy and the hard things possible.

With the release of Apocalypse 12, the syntax in this chapter is
fairly solid, though it's still likely to change somewhat before the
final implementation. This chapter is only an introduction to the
concepts. For complete coverage you should read the Apocalypse itself.

=head1 Using Objects

Z<CHP-6-SECT-1>

X<declarations, class>
X<classes;declarations> 
X<class keyword>
You can declare a class in one of two ways. The most familiar syntax
for class declaration ends in a semicolon. The rest of the file after
the declaration defines the class. With this syntax there can be only
one C<class> or C<module> declaration in a file. 

  class Heart::Gold;
  # class definition follows
  ...

The other syntax for class declaration wraps the definition in a
block. You can have as many of these as you like in a file, and even
embed one class within the block of another.

  class Heart::Gold {
      # class definition enclosed
      ...
  }

X<namespaces>
X<classes;namespaces>
With a file definition, all code that follows the class declaration is
defined in the C<Heart::Gold> namespace. With a block definition,
everything within the block is defined in the class's namespace. 

X<objects;creating new>
X<Object base class>
To create a new object from a class, simply call its C<new> method. The
default C<new> X<new method> method in the universal base class
C<Object> creates and initializes an object.

  $ship = Heart::Gold.new(length => 150);

There's a shortcut for typed variables so you don't have to give the
name of the class twice:

  my Heart::Gold $ship .= new(length => 150);

=head1 Classes

Z<CHP-6-SECT-2>

X<classes>
Classes are the "cookie cutters" that build objects. Just as a
C<module> groups subroutines in a package, a C<class> groups methods
in a package. Classes can also contain subroutines, submethods, and
multimethods. Classes are significantly different than modules,
though, primarily because they construct objects. Objects don't just
define functionality, they also hold data. In Perl 5 objects were
simply hashes (or arrays, or...) bestowed with special powers by
C<bless>. Perl 6 objects can still be simple blessed data structures,
but the default is now an object that hides the details of its
internal representation--a true opaque object.

=head2 Attributes

Z<CHP-6-SECT-2.1>

X<classes;attributes>
X<attributes>
X<$ (dollar sign);$. in attribute names>
Attributes are the data at the core of an opaque object. Other
languages have called them instance variables, data members, or
instance attributes. Attributes are declared with the C<has> keyword,
and generally have a "." after the sigil:

  class Heart::Gold {
      has int $.length;
      has int $.height is rw;
      has @.cargo;
      has %.crew;
      ...
  }

Attributes aren't directly accessible outside the class, but inside
the class they act just like ordinary variables.

  print $.length;
  $.length = 140;

X<attributes;accessors>
X<accessors, attribute>
Attributes also automatically generate their own accessor method with
the same name as the attribute. Accessor methods are accessible inside
or outside the class. By default, accessors are read-only, but the
C<is rw>X<rw property;on accessors> property marks an accessor as
read-write.

  $value = $obj.height; # returns the value of $.height
  $obj.height = 90;     # sets the value of $.height

=head2 Methods

Z<CHP-6-SECT-2.2>

X<classes;methods>
X<methods>
Methods are similar to subroutines, but different enough to merit
their own keyword, C<method>. The most obvious differences are that
they're invoked on an object (or class), and they pass their invocant
X<invocants> (that is, the object or class on which they were invoked)
as an implicit argument. The invocant is marked off from the other
parameters in the list by a colon:

  method initiate_drive ($self: $power, $tea) {
      ...
  }

X<$ (dollar sign);$_ (topic)>
X<topic ($_)>
Methods topicalize their invocant, so it's always accessible as C<$_>,
even if the method doesn't include it in the parameter list. This is
particularly handy since any method called without an explicit object
defaults to C<$_>:

  method shut_down ($drive) {
      if .safe {
          .powerdown($drive);
      }
      return .status;
  }

Method declarations support the same syntax as subroutines for
optional, named, variadic, and typed parameters, default values for
parameters, properties on parameters, and return values. Method calls
support positional and named argument passing just like subroutines.
See A<CHP-5>Chapter 5 for more details on this syntax. 

X<. (dot);. (method call);operator>
X<methods;calling (. operator)>
You can call a method in one of two ways. The standard method call is
connected to the object with the C<.> operator.

  $ship.shut_down($infinity);

X<: (colon);to mark invocant>
An I<indirect object> call is an alternative to the standard method
call. This syntax looks like an ordinary subroutine call, except that
the invocant is separated from the other arguments by a colon:

  shut_down($ship: $infinity);

The parentheses are optional unless the method call is ambiguous
without them.

  shut_down $ship: $infinity;

=head2 Inheritance

Z<CHP-6-SECT-2.3>

X<classes;inheritance>
X<inheritance>
X<is keyword>
Any class can inherit methods from another class using the C<is>
keyword in the class declaration. You may have noticed that this is
the same keyword as compile-time properties. The fact that a class
inherits from some other class is really just a trait of the
inheriting class.

  use Ship;
  class Heart::Gold is Ship {
      ....
  }

X<multiple inheritance>
Any class can inherit from multiple parent classes.

  class Heart::Gold is Ship is Improbable {
      ....
  }

X<inherited attributes>
Within a derived class, inherited attributes are accessible only
through their accessor methods:

  class Ship {
      has $.height;
      has $.length;
      ...
  }
  
  class Heart::Gold is Ship {
      method dimensions ($self:){
          print "$self.length x $self.height \n";
      }
  }

=head2 Construction, Initialization, and Destruction

Z<CHP-6-SECT-2.4>

X<CREATE method>
X<BUILDALL method>
X<BUILD method>
X<bless method>
X<new method>
X<objects;construction>
X<objects;initialization>
X<initializing objects>
X<constructing objects>
The default C<new> method provided by the C<Object> base class
constructs and initializes opaque objects. It does this by calling
C<bless>, which calls the C<CREATE> and C<BUILDALL> methods. The
C<CREATE> method constructs an opaque object. The C<BUILDALL> method
calls the initializers for all inherited classes and finally the
class's own initializer. C<BUILDALL> actually calls the parent's
C<BUILDALL> method, which calls its parent's C<BUILDALL> method, etc.
The initializer for each class is C<BUILD>. The default C<BUILD>
initializes the attributes of the object with named arguments to
C<new>, matching the name of the argument to the name of the
attribute.

There are a number of ways to change the default object construction
and initialization behavior. If you override C<new> so that it passes
a data structure as the first argument to C<bless>, it will construct
a traditional blessed hash (or array, or...) object instead of calling
C<CREATE> to construct an opaque object:

  $class.bless({answer => '42'});

If you override the C<CREATE> method you can alter the way objects are
constructed. If you override the C<BUILDALL> method you can change how
the initializers for inherited classes are called. If you override the
C<BUILD> method you can change how the current class initializes
objects and their attributes. Overriding C<BUILD> will be common.
Overriding C<CREATE> and C<BUILDALL> will be rare, since their default
behavior is designed to handle everything from the simple opaque
object to inheriting from classes written in other languages.

X<DESTROYALL method>
X<DESTROY method>
Object destruction traverses the inheritance hierarchy in the reverse
order of object initialization. Objects are created from least derived
to most derived and destroyed from most derived to least derived. The
C<DESTROYALL> method first calls the C<DESTROY> method of the current
class, and then calls the C<DESTROYALL> method of the parent class
(which calls its own C<DESTROY> and then its own parent's
C<DESTROYALL>, etc). You will rarely need to define a C<DESTROY>
method, since the interpreter handles memory deallocation. It can be
useful for class-specific cleanup, like closing a socket or
filehandle.

=head2 Lexically Scoped Classes

Z<CHP-6-SECT-2.5>

X<classes;lexically scoped>
X<lexically scoped;classes>
X<: (colon);:: sigil for class and package names>
Classes in Perl 6 are first class entities with entries in symbol
tables or lexical scratchpads.N<If you're curious, C<::> is the sigil
for classes and packages, though it's rarely needed in code.> This
means classes can be lexically scoped, just like variables or
subroutines:

  my class Infinite::Improbablity {
      ...
  }
  
  $drive = Infinite::Improbability.new();

A lexical class works just like any other class, but is accessible by
name only within the lexical scope where it's defined.

=head2 Anonymous Classes

Z<CHP-6-SECT-2.6>

X<classes;anonymous>
X<anonymous classes>
You can also define anonymous classes and create objects from them:

  $class = class {
     ...
  }
  
  $object = $class.new();

A class's block is a closure, just like every other block, so it has
access to variables from its defining scope, no matter where it's
actually used.

=head1 Roles

Z<CHP-6-SECT-3>

X<roles>
X<classes;roles>
A role is a reusable unit of class code. Much like a module exports
subroutines into your program or another module, a role exports
methods and attributes into a class. If your first thought on reading
this is "Isn't that just inheritance?", then welcome to a whole new
world. Inheritance is one way to reuse code, but many relationships
other than C<isa> are possible. Various languages pick an alternative
and provide syntax for it: Ruby has I<mixins>, Java has I<interfaces>,
and some versions of Smalltalk have I<traits>. Perl I<roles> go a bit
beyond all of them.

You define a role using the C<role> keyword:

  role Hitchhiker {...}

X<does keyword>
You pull a role into a class using the C<does> keyword:

  class Arthur does Hitchhiker {...}

Roles cannot instantiate objects directly. To create an object that
makes use of a role, you make a C<new> object from a class that uses
that role:

  $person = Arthur.new(...);

=head2 Composition

Z<CHP-6-SECT-3.1>

X<classes;composition>
X<composition>
Like classes, roles can define both attributes and methods:

  role Hitchhiker {
    has $.towel;
    method thumb_ride ($self: $ship) {...}
    ...
  }

Unlike classes, when you pull a role's methods and attributes into a
class they aren't maintained in an inheritance hierarchy to be
searched later. Instead, they are composed into the class almost as if
they had been defined in that class. All methods defined in the role
are accessible in the composed class, even if they wouldn't be
inherited. All attributes defined in the role are accessible in the
composed class by their direct C<$.name>, not just by their accessor
method.N<Though you'll probably want to use the accessor methods
anyway, just on the principles of encapsulation and ease of
refactoring.>

One advantage of composition is that classes can reuse behavior, even
if they have no connection that would justify an inheritance relation.
Let's say you want to define two classes: C<Arthur> and C<Ford>.
C<Arthur> inherits from C<Human> and has all the behaviors and
qualities of a human creature. C<Ford>, on the other hand, has the
behaviors and qualities of a creature from Betelgeuse:

  class Arthur is Human does Hitchhiker {...}
  class Ford is Betelgeusian does Hitchhiker {...}

Inheritance makes sense in this case--the inherited classes are core,
defining characteristics of the resulting class. But the C<Hitchhiker>
role isn't a defining part of Ford and Arthur--they weren't always
hitchhikers. The role just adds some useful behavior to the class.

=head3 Mixins

Z<CHP-6-SECT-3.1.1>

X<roles;at run time>
X<mixins>
In some situations you may want to add a role at run time instead of
at compile time. Perhaps you want to choose different roles based on
how the object is used, or perhaps the role's behavior shouldn't be
available until part-way through the life of an object. The same
C<does>X<does keyword> keyword adds roles at run time, but operates on
an object instead of a class. In this example, C<Arthur> starts as an
ordinary human, and only adds the C<Hitchhiker> role later in life
(after the Vogons destroy his home planet):

  class Arthur is Human {...}

  $person = Arthur.new;
  $person.live_quietly until $vogon_ship.arrive;

  $person does Hitchhiker;
  $person.thumb_ride($vogon_ship);

=head3 Interfaces

Z<CHP-6-SECT-3.1.2>

X<classes;interfaces>
X<interfaces>
An I<interface> is a reusable unit that defines what methods a class
should support, but doesn't provide any implementations for those
methods. In Perl 6, interfaces are just roles that define only method
stubs and no attributes. This example defines an interface for
products shipped by the Sirius Cybernetics corporation: 

  role Sirius::Cybernetics {
      method share {...}
      method enjoy {...}
  }

No matter whether the product is an elevator, a nutrimatic machine, or
an automatic door, it must support the C<share> and C<enjoy> methods.
Now, since these products are so very different, none will implement
the methods in quite the same way, but you're guaranteed the products
will be able to "Share and Enjoy" in one way or another (generally an
irritating way).

=head2 Conflicts

Z<CHP-6-SECT-3.2>

X<roles;composition conflicts>
X<conflicts in role composition>
Since a class pulls in roles by composition instead of inheritance, a
conflict results when two roles both have a method with the same name.
So, the C<Hitchhiker> and C<Writer> roles both define a C<lunch_break>
method (lunch breaks being vitally important in both the publishing
and footslogging industries):

  role Hitchhiker {
      method lunch_break {
          .suck($.towel); 
          .drink($old_janx);
      }
      ...
  }

  role Writer {
      method lunch_break {
          my $restaurant = Jolly::Nice::Restaurant.new;
          .dine($restaurant);
      }
      ...
  }

If the C<Ford> class does the C<Writer> role as well as the
C<Hitchhiker> role, which kind of lunch break should he take? Since
roles are composed without hierarchy or priority, both methods are
equally valid choices. Rather than randomly selecting an
implementation for you, Perl 6 simply requires you to choose one.
There are several ways to do this. One is to define a method of the
same name in the class itself. This method might simply call the
method from one of the roles:

  class Ford does Hitchhiker does Writer {
      method lunch_break { .Writer::lunch_break(@_); }
  }

Or the method might select between the possible implementations based
on one of the arguments or some condition in the object. This example
checks the string value returned by the C<.location> method to find
out which lunch break is appropriate:

  class Ford does Hitchhiker does Writer {
      method lunch_break ($self: $arg) {
          given (.location) {
              when "Megadodo Office" { $self.Writer::lunch_break($arg); }
              when "Ship Cargo Hold" { $self.Hitchhiker::lunch_break($arg); }
          }
      }
  }

You can also get a finer-grained control over method conflict
resolution using delegation syntax (explained in the next section).
This example renames C<Hitchhiker>'s C<lunch_break> method to C<snack>
in the composed class:

  class Ford does Hitchhiker handles :snackE<laquo>lunch_breakE<raquo> does Writer {...}


=head1 Delegation

Z<CHP-6-SECT-4>

X<classes;delegation>
X<delegation>
Delegation is yet another possible relationship between an object and
another body of code. Rather than pull methods into a class, you call
methods in another object as if they were methods of the class. In
Perl 6, delegation can be done in either a class or a role. A
delegated object is simply an attribute defined in the class or role.
The C<handles>X<handles keyword> keyword specifies which methods of
the delegated object will act as methods of the class. This example
declares that any calls to the C<thumb_ride> method on an object with
the C<Hitchhiker> role, will actually call the method on its
C<$.thumb> attribute:

  role Hitchhiker {
      ...
      has Electronic::Thumb $.thumb handles 'thumb_ride';
      ...
  }

The C<handles> keyword accepts many variations in the syntax to
delegate methods. You can pass it an array reference of multiple
method names:

  has Electronic::Thumb $.thumb handles ['thumb_ride', 'sub_etha'];

Or a quoted list:

  has Electronic::Thumb $.thumb handles E<laquo>thumb_ride sub_ethaE<raquo>;

A pair in place of a string method name gives the method a different
name in the class. This example declares a method named C<hitch> in
the class, but any calls to it are delegated to the C<thumb_ride>
method on the C<$.thumb> object:

  has Electronic::Thumb $.thumb handles :hitchE<laquo>thumb_rideE<raquo>;

If the method name is given as a pattern, it's a wildcard delegation
and all methods that match that pattern will be delegated to the
attribute. This example delegates all methods that start with "thumb"
to C<$.thumb>:

  has Electronic::Thumb $.thumb handles /^thumb/;

If the method name is a substitution, it does wildcard method
renaming. This example would delegate a method call to C<hitch_ride>
to a method named C<thumb_ride> in C<$.thumb>:

  has Electronic::Thumb $.thumb handles (s/^hitch/thumb/);

=head1 Private and Public

Z<CHP-6-SECT-5>

X<public methods>
X<private methods>
X<methods;public>
X<methods;private>
X<: (colon);private methods and attributes>
X<$ (dollar sign);$: in private attribute names>
By default, all methods and attribute accessors are I<public> methods,
so they can be called anywhere. You can also declare I<private>
methods or accessors, which can be called only within the class where
they're defined, or from certain trusted classes. A private method is
declared with a colon at the start of the name:

  method :inaccessible ($self: $value) {...}

A private attribute is declared with a colon in place of the dot
(C<.>) in the name:

  has $:hidden;

You call a private method or accessor with a colon in the call:

  $object.:hidden(42);

The attribute variable (C<$:name> or C<$.name>) is never accessible
outside the class, whether the attribute is public or private.

At first glance this might look like nothing more than the
"encapsulation by convention" of Perl 5. It's actually much more than
that. The colon implicitly sets a C<private>X<private trait> trait on
the method or attribute. The encapsulation is enforced by the
interpreter. An external call to a private method will fail as if the
method simply didn't exist. External queries to the package symbol
table for private methods also fail.

Only public methods are inherited by a derived class, but inherited
public methods can call private methods from their own class. Private
methods and attributes in a role are private to the composed class, as
if they were defined in that class.

The one loophole in private methods is that a class can declare that
it C<trusts>X<trusts keyword> certain other classes to allow those
classes to access its private methods. Roles cannot declare a trusted
class. In this example, the C<Friendly> class declares that it trusts
the C<Zaphod> class:

  class Friendly {
      trusts Zaphod; # probably a bad idea, really
  }


=head1 Subroutines

Z<CHP-6-SECT-6>

X<classes;subroutines within> 
X<subroutines;within classes> 
You can define ordinary subroutines within a class or role. They
cannot be invoked on an object with the C<$object.methodname> syntax
and will never pass an implicit invocant argument. They aren't
inherited but can be pulled in with role composition. They're mainly
useful for utility code internal to the class:

  class Answer::Young;
  
  has $.answer;
  ...
  sub is_valid ($value) {
      return 1 if 10 < $value < 42;
  }
  ...
  method set_answer ($new) {
      $.answer = $new if is_valid($new);
  }

Subroutines may be exported if the class also functions as a module.

=head1 Submethods

Z<CHP-6-SECT-7>

X<submethods>
X<classes;submethods>
A C<submethod> is declared like a C<method>, but behaves more like a
C<sub> in that it's not inherited but can be pulled in with a role.
Submethods are useful for inheriting interface without inheriting
implementation--you can override a method from a parent class without
inflicting the changes on any child classes.

The C<Frogstar::A> class defines a set of methods and attributes for
the Frogstar Scout robots:

  class Frogstar::A {
      has Laser::Beam     $.beam;
      has Antimatter::Ray $.ray;
      has Electron::Ram   $.ram;
      ...
      method zap   ($target) { $.beam.fire($target); }
      method shoot ($target) { $.ray.fire($target);  }
      method smash ($target) { $.ram.fire($target);  }
      ...
  }

In addition to methods for navigation, propulsion, etc. the Frogstar
Scouts boast an astounding number of destructive methods (as is to be
expected). The C<Frogstar::B> class inherits all of C<Frogstar::A>'s
methods and attributes, and also adds its own additional weaponry.
Instead of defining a new method for the Zenon Emitter, the Frogstar
Scout B overrides the C<smash> method to use the emitter:

  class Frogstar::B is Frogstar::A {
      has Zenon::Emitter $.emitter;
      submethod smash ($target) { $.emitter.fire($target); }
  }

It still smashes the target, only faster, as you might expect from a
newer model. Since the overridden method was declared as a submethod,
it has no effect on the Frogstar Scout C which inherits from
C<Frogstar::B>:

  class Frogstar::C is Frogstar::B {...}
  ...
  $fighter = Frogstar::C.new(...);
  $fighter.smash($floor); # uses the Electron::Ram

=head1 Multiple Dispatch

Z<CHP-6-SECT-8>

X<classes;multiple dispatch>
X<multiple dispatch>
X<multimethods>
In the previous chapter we mentioned multi subroutines. The C<multi>
X<multi keyword> keyword actually applies to any code object:
subroutines, methods, or submethods. As we said before, C<multi>
allows you to define multiple different routines all with the same
name but different signatures. This example dispatches to a variant
of the C<lunch> method depending on the types of the arguments:

  multi method lunch (Lunching::Friar $who, Megadodo::Office $location) {
      print "Jolly nice restaurant.";
  }

  multi method lunch (Hitchhiker $who, Cargo::Hold $location) {
      print "Towel again.";
  }

A member of the Lunching Friars of Voondon must always eat at a nice
restaurant when he visits the offices of Megadodo Publications. A
hitchhiker in a cargo hold, however, will just have to settle for the
nutrient solution soaked into the corner of his towel.

A call to a multimethod has the same syntax as a call to a
subroutine--the name of the routine followed by a list of arguments:

  lunch($zaphod, $where);

This call searches outward through its lexical, package, and
global scopes for a matching name. If it finds a non-multi sub it
makes an ordinary subroutine call. Otherwise it generates a list of
C<multi> subs, methods, or submethods with that name and dispatches
to the closest matching signature.N<For more complete details on the
dispatch process, see Apocalypse 12.>

You can also call a multimethod with an ordinary single-dispatch
method call:

  $zaphod.lunch($where);

In this case, the call will only failover to multiple dispatch if it
can't find a suitable method to call under single dispatch to
C<$zaphod>.

=head2 Operator Overloading

Z<CHP-6-SECT-8.1>

X<operators;overloading>
X<overloading operators>
Operator overloading makes use of multiple dispatch. An operator is
just a subroutine with special call syntax. Operators define the kind
of syntax they use as part of their name: C<prefix>, C<postfix>,
C<infix>, C<circumfix>, etc. This example overloads two operators that
use the C<+> symbol--one prefix operator and one infix operator:

  multi sub *prefix:+ (Time $a) {...}         # $x = +$y;
  multi sub *infix:+ (Time $a, Time $b) {...} # $x = $y + $z;

These operators are declared as multi subs with global scope, as most
operators will be in Perl 6 (global is specified by the leading C<*>
in the name). They're multi so it's easy to add new behavior for new
types of operands. They're global so that any operation anywhere with
the defined operand types will find the right multi variant of the
operator.

=cut
