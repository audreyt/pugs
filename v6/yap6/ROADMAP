This is yap6, a prospective runtime for kp6...

There follows the ROADMAP mixed with the changelog

YAP6 has undergone a severe refactoring. A new ROADMAP was
planned, the old YAP6 changelog is in the end of this file.


ROADMAP

0.1.0 - Port YAP6__CORE__Value code to YAP6__Object code.

0.1.1 - YAP6 STACK prototypes and lowlevel operators

0.1.2 - YAP6 NATIVE prototypes and lowlevel operators

0.1.3 - YAP6 interpreter loop.

0.1.4 - Undef builtin types.

0.1.5 - Immutable builtin types.

0.1.6 - Mutable builtin types.

0.1.7 - Lexical Scope.

0.1.8 - AST types.

0.2.0 - AST -> Stack runtime transformation (real interpreter)

0.2.1 - KP6 backend to YAP6

0.2.2 - KP6 can compile grammars to YAP6

0.3.0 - KP6 grammar compiled to YAP6

0.4.0 - KP6 bootstrapped in YAP6

1.0.0 - STD ported to YAP6.

OLD CHANGELOG

0.0.1 - The initial revision, definining the basic data structures to
be used.

0.0.1.2 - Basic memory management, values are alloc'ed and basic
refcount garbage collection is implemented.

0.0.1.3 - Basic APPLY dispatch.

0.0.1.4 - Lists and Hashes contains Scalars

0.0.1.5 - Basic int type.

0.0.1.6 - Single initialization method

0.0.1.7 - Some work in supporting lists

0.0.1.8 - Starting the list dispatcher

0.0.1.9 - Basic list features working.

0.0.1.10 - make test works

0.0.1.11 - List destruction, List_ProxyScalar destruction, consts destruction, no leaks at the moment.

0.0.1.12 - Scalar Dispatcher.

0.0.1.12.1 - COMPR no longer exists, low-level objects always must implement STRNG, INTGR, BOOLN and WHICH.

0.0.1.13 - Pair Dispatcher.

0.0.1.14 - bytes dispatcher - a value that holds an array of bytes

0.0.1.14.1 - int WHICH.

0.0.1.14.2 - bytes WHICH.

0.0.1.15 - WHICH implementation in every native type, the WHICH will return a "bytes" value.

0.0.1.15.1 - bytes BOOLN

0.0.1.15.2 - int BOOLN

