#!/usr/bin/perl

use Cwd;
use Config;
use FindBin;
use File::Copy;
use File::Basename;

if (!@ARGV) {
    die "Usage: $0 [ --pugs | --haskell | --parrot ] [ source[.p6] | -e oneliner ]\n";
}

my $backend = 'Pugs';
if ($ARGV[0] =~ /^-H|--haskell$/) {
    $backend = 'Haskell';
    shift @ARGV;
}
elsif ($ARGV[0] =~ /^-P|--parrot$/) {
    $backend = 'Parrot';
    shift @ARGV;
}
elsif ($ARGV[0] =~ /^--pugs$/) {
    $backend = 'Pugs';
    shift @ARGV;
}

print "*** Using the '$backend' backend.\n";

my $ghc_version = ghc_version();
my $base = cwd();
if (!-e "src/Main.hs") {
    $base = "$FindBin::Bin/..";
    if (!-e "$base/src/Main.hs") {
	die "$0: This script must be invoked in the Pugs source tree directory."
    }
}

$ENV{PATH} = $base . $Config{path_sep} . $ENV{PATH};

my $out = 'a';
if (@ARGV and -e $ARGV[0]) {
    $out = basename($ARGV[0]);
    $out =~ s{\..*}{};
}
$out .= ($^O eq 'MSWin32') ? ".exe" : ".out";

unlink "dump.ast";
system("pugs", "-C$backend" => @ARGV);
exit 1 unless -e "dump.ast";

if ($backend eq 'Parrot') {
    rename "dump.ast" => $out;
    chmod 0755, $out;
}
else {
    rename "dump.ast" => "$base/src/MainCC.hs";

    my @ghc_flags = (
        "-L$base", "-L$base/src", "-L$base/src/pcre",
        "-I$base", "-I$base/src", "-I$base/src/pcre",
        "-i$base", "-i$base/src", "-i$base/src/pcre",
        qw(-static -Wall -fno-warn-unused-imports -fno-warn-unused-binds -fno-warn-missing-signatures -fno-warn-name-shadowing),
    );

    if ($ghc_version ge '6.4') {
        push @ghc_flags, qw(-fno-warn-deprecations -fno-warn-orphans);
    }

    push @ghc_flags, "$base/src/pcre/pcre.o";
    push @ghc_flags, "$base/src/UnicodeC.o";

    (system("ghc", "-v0", "-o", $out, "--make", "-main-is", "MainCC.mainCC", @ghc_flags, "$base/src/MainCC.hs") == 0) or die $!;
    unlink "$base/src/MainCC.hs";
}

print "*** Generated output: $out\n" if -e $out;

sub ghc_version {
    my $ghcver = `ghc --version`;
    ($ghcver =~ /Glasgow.*\bversion\s*(\S+)/s) or die << '.';
*** Cannot find a runnable 'ghc' from path.
*** Please install GHC from http://haskell.org/ghc/.
.
    return $1;
}
