{ package KindaPerl6::Grammar; 
# Do not edit this file - Perl 5 generated by KindaPerl6
use v5;
use strict;
no strict 'vars';
use KindaPerl6::Runtime::Perl5::Runtime;
my $_MODIFIED; BEGIN { $_MODIFIED = {} }
BEGIN { $_ = ::DISPATCH($::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
do { if (::DISPATCH(::DISPATCH(::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::KindaPerl6::Grammar )
,"true"),"p5landish") ) { }  else { do {::MODIFIED($::KindaPerl6::Grammar);
$::KindaPerl6::Grammar = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'KindaPerl6::Grammar' )
 )
, 'PROTOTYPE',  )
} } }
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', 'key' )
, ::DISPATCH( $::Method, 'new', sub  { my $MATCH; $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } )  unless defined $MATCH; BEGIN { $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } ) }
;
my  $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } ) ; 
;
my $str; $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } )  unless defined $str; BEGIN { $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } ) }
;
my $pos; $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } )  unless defined $pos; BEGIN { $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } ) }
;
$self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};do {::MODIFIED($str);
$str = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 )
 )
};do {::MODIFIED($pos);
$pos = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 )
 )
};do { if (::DISPATCH(::DISPATCH(::DISPATCH( $GLOBAL::Code_prefix_58__60__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_defined, 'APPLY', $str )
 )
,"true"),"p5landish") ) { ::DISPATCH_VAR( $str, 'STORE', $_ )
 }  }
; $MATCH; ::DISPATCH_VAR( $MATCH, 'STORE', ::DISPATCH( $::Match, 'new',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'match_str',  )
, 'STORE', $str )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'from',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', ::DISPATCH( $::Int, 'new', 1 )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'ident', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'ident' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $MATCH; $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } )  unless defined $MATCH; BEGIN { $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } ) }
;
$MATCH; ::DISPATCH_VAR( $MATCH, 'STORE', ::DISPATCH( $::Match, 'new',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'match_str',  )
, 'STORE', $str )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'from',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', ::DISPATCH( $::Int, 'new', 1 )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '\\\'' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
 }
, do { ::DISPATCH( $MATCH, 'to', $pos1 )
; do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
do {::MODIFIED($m2);
$m2 = ::DISPATCH( $self, 'ws', $str, ::DISPATCH( $MATCH, 'to',  )
 )
}; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH( $MATCH, 'to', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
 }
 )
 }
 )
; $MATCH }
, do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block1',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 )
 }
, do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'exp', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block2',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 }
 )
 }
 )
; return($MATCH)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', 'pair' )
, ::DISPATCH( $::Method, 'new', sub  { my $MATCH; $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } )  unless defined $MATCH; BEGIN { $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } ) }
;
my  $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } ) ; 
;
my $str; $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } )  unless defined $str; BEGIN { $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } ) }
;
my $pos; $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } )  unless defined $pos; BEGIN { $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } ) }
;
$self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};do {::MODIFIED($str);
$str = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 )
 )
};do {::MODIFIED($pos);
$pos = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 )
 )
};do { if (::DISPATCH(::DISPATCH(::DISPATCH( $GLOBAL::Code_prefix_58__60__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_defined, 'APPLY', $str )
 )
,"true"),"p5landish") ) { ::DISPATCH_VAR( $str, 'STORE', $_ )
 }  }
; $MATCH; ::DISPATCH_VAR( $MATCH, 'STORE', ::DISPATCH( $::Match, 'new',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'match_str',  )
, 'STORE', $str )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'from',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', ::DISPATCH( $::Int, 'new', 1 )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'key', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'key' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
do {::MODIFIED($m2);
$m2 = ::DISPATCH( $self, 'opt_ws', $str, ::DISPATCH( $MATCH, 'to',  )
 )
}; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH( $MATCH, 'to', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '\\\'' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
do {::MODIFIED($m2);
$m2 = ::DISPATCH( $self, 'opt_ws', $str, ::DISPATCH( $MATCH, 'to',  )
 )
}; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH( $MATCH, 'to', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'exp', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block3',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 )
 )
 )
 )
 }
, do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', ':' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'sigil', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'sigil' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'ident', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'ident' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block4',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 )
 )
 }
 )
 }
 )
; return($MATCH)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', 'exp_mapping' )
, ::DISPATCH( $::Method, 'new', sub  { my $MATCH; $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } )  unless defined $MATCH; BEGIN { $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } ) }
;
my  $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } ) ; 
;
my $str; $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } )  unless defined $str; BEGIN { $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } ) }
;
my $pos; $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } )  unless defined $pos; BEGIN { $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } ) }
;
$self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};do {::MODIFIED($str);
$str = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 )
 )
};do {::MODIFIED($pos);
$pos = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 1 )
 )
};do { if (::DISPATCH(::DISPATCH(::DISPATCH( $GLOBAL::Code_prefix_58__60__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_defined, 'APPLY', $str )
 )
,"true"),"p5landish") ) { ::DISPATCH_VAR( $str, 'STORE', $_ )
 }  }
; $MATCH; ::DISPATCH_VAR( $MATCH, 'STORE', ::DISPATCH( $::Match, 'new',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'match_str',  )
, 'STORE', $str )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'from',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', $pos )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', ::DISPATCH( $::Int, 'new', 1 )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool',  )
, 'STORE', do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'pair', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'pair' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
do {::MODIFIED($m2);
$m2 = ::DISPATCH( $self, 'opt_ws', $str, ::DISPATCH( $MATCH, 'to',  )
 )
}; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH( $MATCH, 'to', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', ',' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
do {::MODIFIED($m2);
$m2 = ::DISPATCH( $self, 'opt_ws', $str, ::DISPATCH( $MATCH, 'to',  )
 )
}; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH( $MATCH, 'to', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'exp_mapping', $str, ::DISPATCH( $MATCH, 'to',  )
 )
 )
; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to',  )
, 'STORE', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp_mapping' )
 )
, 'STORE', $m2 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block5',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 )
 )
 )
 }
, do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
do {::MODIFIED($m2);
$m2 = ::DISPATCH( $self, 'opt_ws', $str, ::DISPATCH( $MATCH, 'to',  )
 )
}; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH( $MATCH, 'to', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
, ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', do { my $pos1; $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } )  unless defined $pos1; BEGIN { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
;
do {::MODIFIED($pos1);
$pos1 = ::DISPATCH( $MATCH, 'to',  )
}; ::DISPATCH( $GLOBAL::Code_infix_58__60__124__124__62_, 'APPLY', do { ::DISPATCH( $GLOBAL::Code_infix_58__60__38__38__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', ',' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
, do { my $m2; $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } )  unless defined $m2; BEGIN { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
;
do {::MODIFIED($m2);
$m2 = ::DISPATCH( $self, 'opt_ws', $str, ::DISPATCH( $MATCH, 'to',  )
 )
}; do { if (::DISPATCH(::DISPATCH($m2,"true"),"p5landish") ) { ::DISPATCH( $MATCH, 'to', ::DISPATCH( $m2, 'to',  )
 )
; ::DISPATCH( $::Int, 'new', 1 )
 }  else { ::DISPATCH( $::Int, 'new', 0 )
 } }
 }
 )
 }
, do { ::DISPATCH( $MATCH, 'to', $pos1 )
; ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $::Str, 'new', '\\\'' )
, ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to',  )
, ::DISPATCH( $::Int, 'new', 1 )
 )
 )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 )
, ::DISPATCH( $MATCH, 'to',  )
 )
 )
 )
, ::DISPATCH( $::Int, 'new', 0 )
 )
 }
 )
 }
, do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block6',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 )
 )
 }
 )
 }
 )
 }
, do { ::DISPATCH( $MATCH, 'to', $pos1 )
; do { my $ret; $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } )  unless defined $ret; BEGIN { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
;
::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block7',  )
 )
; do { if (::DISPATCH(::DISPATCH($ret,"true"),"p5landish") ) { ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result',  )
, 'STORE', $ret )
; return($MATCH)
 }  }
; ::DISPATCH( $::Int, 'new', 1 )
 }
 }
 )
 }
 )
; return($MATCH)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block1' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $::Val::Buf, 'new', ::DISPATCH( $::Str, 'new', 'buf' )
 => ::DISPATCH( $GLOBAL::Code_prefix_58__60__126__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'ident' )
 )
 )
, )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block2' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp' )
 )
 )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block3' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $::Array, "new", { _array => [::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'key' )
 )
 )
, ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp' )
 )
 )
] } )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block4' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $::Array, "new", { _array => [::DISPATCH( $::Val::Buf, 'new', ::DISPATCH( $::Str, 'new', 'buf' )
 => ::DISPATCH( $GLOBAL::Code_prefix_58__60__126__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'ident' )
 )
 )
, )
, ::DISPATCH( $::Var, 'new', ::DISPATCH( $::Str, 'new', 'sigil' )
 => ::DISPATCH( $GLOBAL::Code_prefix_58__60__126__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'sigil' )
 )
 )
 )
,::DISPATCH( $::Str, 'new', 'twigil' )
 => ::DISPATCH( $::Str, 'new', '' )
,::DISPATCH( $::Str, 'new', 'name' )
 => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'ident' )
 )
 )
, )
] } )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block5' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $::Array, "new", { _array => [::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'pair' )
 )
 )
, ::DISPATCH( $GLOBAL::Code_prefix_58__60__64__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp_mapping' )
 )
 )
 )
] } )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block6' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $::Array, "new", { _array => [::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'pair' )
 )
 )
] } )
)
 }
 )
 )
; ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar, 'HOW',  )
, 'add_method', ::DISPATCH( $::Str, 'new', '__rule_block7' )
, ::DISPATCH( $::Method, 'new', sub  { $self = shift; my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};return(::DISPATCH( $::Array, "new", { _array => [] } )
)
 }
 )
 )

; 1 }

