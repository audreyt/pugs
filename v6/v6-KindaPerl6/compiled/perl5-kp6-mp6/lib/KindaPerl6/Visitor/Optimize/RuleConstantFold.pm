# Do not edit this file - Generated by MiniPerl6
use v5;
use strict;
use MiniPerl6::Perl5::Runtime;
use MiniPerl6::Perl5::Match;

package KindaPerl6::Visitor::Optimize::RuleConstantFold;
sub new { shift; bless {@_}, "KindaPerl6::Visitor::Optimize::RuleConstantFold" }

sub visit {
    my $self   = shift;
    my $List__ = \@_;
    my $node;
    my $node_name;
    do { $node = $List__->[0]; $node_name = $List__->[1]; [ $node, $node_name ] };
    do {
        if ( Main::isa( $node, 'Rule::Concat' ) ) {
            my $nodes;
            my $constant = '';
            do {
                for my $stmt ( @{ $node->concat() } ) {
                    do {
                        if ( Main::isa( $stmt, 'Rule::Constant' ) ) { $constant = ( $constant . $stmt->constant() ) }
                        else {
                            do {
                                if ( ( $constant ne '' ) ) { push( @{$nodes}, Rule::Constant->new( 'constant' => $constant, ) ); $constant = '' }
                                else                       { }
                            };
                            push( @{$nodes}, $stmt->emit($self) );
                        }
                        }
                }
            };
            do {
                if ( ( ( $constant ne '' ) && ( $nodes ? 0 : 1 ) ) ) { return ( Rule::Concat->new( 'concat' => Rule::Constant->new( 'constant' => $constant, ), ) ) }
                else                                                 { return ( Rule::Concat->new( 'concat' => $nodes, ) ) }
                }
        }
        else { }
        }
}

1;
