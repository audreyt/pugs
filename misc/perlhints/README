This project has the goal to create a database and a tool that let users 
query the meaning of a syntactict Perl 6 construct.

For a more detailed discussion of the project goals, please read
http://www.nntp.perl.org/group/perl.perl6.users/2007/07/msg621.html and the
follow-ups.

To get an idea for how the output might look like, execute 
./perlhint5.pl + 
(maybe you want to pipe the output through a pager like `less').

A good project name is still missing, if you have a good suggestion, please
let me know.

The data is store in the data/ subdirectory in files called for example 
perl-6.en.dat for the programming language Perl 6 and the human language 
English.

All files should be UTF-8 encoded, and conform to the following format:

key1: value
key2: multiple lines for a value
      possible if the all of the following 
      lines start with at least one whitespace.

# in the previous example the the newlines are included in the output,
# if you want to prevent that, you have to continue the lines with a 
# backslash:

some_key: here is a long \
          line that is \
          just one line \
          in the output

# comments start with a '#'.
# empty lines are allowed, but terminate the previous value.

The following would be invalid:

key3: some value
      continued

      but interrupted by an empty line


At the moment, the following keys are planned:
    key 
    syn (synopsis) 
    name 
    desc (longer description) 
    ex (example) 
    spec (link to a specification)
    dsl (domain specific language, if any)
    con (context)
Each section starts with the 'key:' key, the ordering of all other lines is
arbitrary.

Example:

key:  +
syn:  $expr1 + $expr2
name: binary plus
desc: Adds two numbers, and enforces numerical contexts onto its operands
ex:   my $a = 2 + 3; # Result: 5

key:  +
syn:  +$expr1
name: unary plus
desc: enforces numerical context onto its operand
ex:   +"23";   # returns the number 23
      +42;     # return 42

key:  +
syn:  $token +
name: regex quantifier +
desc: matches $token one or more times
dsl:  regex
ex:   'ab'+ # matches ab, abab, ababab, ...
