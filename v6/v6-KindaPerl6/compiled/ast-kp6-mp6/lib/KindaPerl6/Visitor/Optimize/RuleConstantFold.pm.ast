::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'visit',
                block => ::Lit::Code(
                    body => [
                        ::If(
                            body => ::Lit::Code(
                                body => [
                                    ::Var( namespace => [], name => 'nodes',    twigil => '', sigil => '$', ),
                                    ::Var( namespace => [], name => 'constant', twigil => '', sigil => '$', ),
                                    ::Call(
                                        hyper     => '',
                                        arguments => [
                                            ::Sub(
                                                name  => '',
                                                block => ::Lit::Code(
                                                    body => [
                                                        ::If(
                                                            body => ::Lit::Code(
                                                                body => [
                                                                    ::Bind(
                                                                        parameters => ::Var( namespace => [], name => 'constant', twigil => '', sigil => '$', ),
                                                                        arguments  => ::Apply(
                                                                            arguments => [
                                                                                ::Var( namespace => [], name => 'constant', twigil => '', sigil => '$', ),
                                                                                ::Call( hyper => '', arguments => '', method => 'constant', invocant => ::Var( namespace => [], name => 'stmt', twigil => '', sigil => '$', ), ),
                                                                            ],
                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                        ),
                                                                    ),
                                                                ],
                                                                sig => ::Sig( invocant => '', positional => [], ),
                                                                pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Visitor::Optimize::RuleConstantFold", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                                CATCH => '',
                                                                state => {},
                                                            ),
                                                            cond => ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'Rule::Constant', ), ], method => 'isa', invocant => ::Var( namespace => [], name => 'stmt', twigil => '', sigil => '$', ), ),
                                                            otherwise => ::Lit::Code(
                                                                body => [
                                                                    ::If(
                                                                        body => ::Lit::Code(
                                                                            body => [
                                                                                ::Apply(
                                                                                    arguments => [
                                                                                        ::Apply(
                                                                                            arguments => [ ::Var( namespace => [], name => 'nodes',      twigil => '', sigil => '$', ), ],
                                                                                            code      => ::Var( namespace   => [], name => 'prefix:<@>', twigil => '', sigil => '&', ),
                                                                                        ),
                                                                                        ::Call(
                                                                                            hyper => '',
                                                                                            arguments =>
                                                                                                [ ::Lit::NamedArgument( value => ::Var( namespace => [], name => 'constant', twigil => '', sigil => '$', ), key => ::Val::Buf( buf => 'constant', ), ), ],
                                                                                            method   => 'new',
                                                                                            invocant => ::Proto( name => 'Rule::Constant', ),
                                                                                        ),
                                                                                    ],
                                                                                    code => ::Var( namespace => [], name => 'push', twigil => '', sigil => '&', ),
                                                                                ),
                                                                                ::Bind( parameters => ::Var( namespace => [], name => 'constant', twigil => '', sigil => '$', ), arguments => ::Val::Buf( buf => '', ), ),
                                                                            ],
                                                                            sig => ::Sig( invocant => '', positional => [], ),
                                                                            pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Visitor::Optimize::RuleConstantFold", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                                            CATCH => '',
                                                                            state => {},
                                                                        ),
                                                                        cond => ::Apply(
                                                                            arguments => [ ::Var( namespace => [], name => 'constant',   twigil => '', sigil => '$', ), ::Val::Buf( buf => '', ), ],
                                                                            code      => ::Var( namespace   => [], name => 'infix:<ne>', twigil => '', sigil => '&', ),
                                                                        ),
                                                                        otherwise => '',
                                                                    ),
                                                                    ::Apply(
                                                                        arguments => [
                                                                            ::Apply(
                                                                                arguments => [ ::Var( namespace => [], name => 'nodes',      twigil => '', sigil => '$', ), ],
                                                                                code      => ::Var( namespace   => [], name => 'prefix:<@>', twigil => '', sigil => '&', ),
                                                                            ),
                                                                            ::Call(
                                                                                hyper     => '',
                                                                                arguments => [ ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ), ],
                                                                                method    => 'emit',
                                                                                invocant => ::Var( namespace => [], name => 'stmt', twigil => '', sigil => '$', ),
                                                                            ),
                                                                        ],
                                                                        code => ::Var( namespace => [], name => 'push', twigil => '', sigil => '&', ),
                                                                    ),
                                                                ],
                                                                sig => ::Sig( invocant => '', positional => [], ),
                                                                pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Visitor::Optimize::RuleConstantFold", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                                CATCH => '',
                                                                state => {},
                                                            ),
                                                        ),
                                                    ],
                                                    sig => ::Sig(
                                                        invocant   => ::Val::Undef(),
                                                        positional => [
                                                            ::Lit::SigArgument(
                                                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                                                has_default         => ::Val::Bit( bit => '0', ),
                                                                value               => ::Val::Undef(),
                                                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                                                is_optional         => ::Val::Bit( bit => '0', ),
                                                                key           => ::Var( namespace => [], name => 'stmt', twigil => '', sigil => '$', ),
                                                                is_copy       => ::Val::Bit( bit  => '0', ),
                                                                is_named_only => ::Val::Bit( bit  => '0', ),
                                                                type          => '',
                                                                is_rw => ::Val::Bit( bit => '0', ),
                                                            ),
                                                        ],
                                                    ),
                                                    pad => ::Pad(
                                                        lexicals => [
                                                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                                                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'stmt', twigil => '', sigil => '$', ), type => '', )
                                                        ],
                                                        namespace => "KindaPerl6::Visitor::Optimize::RuleConstantFold",
                                                        parent    => ::Pad(...),
                                                        evaluator => ::Sub(...),
                                                    ),
                                                    CATCH => '',
                                                    state => {},
                                                ),
                                            ),
                                        ],
                                        method   => 'map',
                                        invocant => ::Apply(
                                            arguments => [ ::Call( hyper  => '', arguments => '',           method => 'concat', invocant => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ), ), ],
                                            code      => ::Var( namespace => [], name      => 'prefix:<@>', twigil => '',       sigil    => '&', ),
                                        ),
                                    ),
                                    ::If(
                                        body => ::Lit::Code(
                                            body => [
                                                ::Apply(
                                                    arguments => [
                                                        ::Apply( arguments => [ ::Var( namespace => [], name => 'nodes', twigil => '', sigil => '$', ), ], code => ::Var( namespace => [], name => 'prefix:<@>', twigil => '', sigil => '&', ), ),
                                                        ::Call(
                                                            hyper     => '',
                                                            arguments => [ ::Lit::NamedArgument( value => ::Var( namespace => [], name => 'constant', twigil => '', sigil => '$', ), key => ::Val::Buf( buf => 'constant', ), ), ],
                                                            method    => 'new',
                                                            invocant => ::Proto( name => 'Rule::Constant', ),
                                                        ),
                                                    ],
                                                    code => ::Var( namespace => [], name => 'push', twigil => '', sigil => '&', ),
                                                ),
                                            ],
                                            sig => ::Sig( invocant => '', positional => [], ),
                                            pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Visitor::Optimize::RuleConstantFold", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                            CATCH => '',
                                            state => {},
                                        ),
                                        cond      => ::Apply( arguments => [ ::Var( namespace => [], name => 'constant', twigil => '', sigil => '$', ), ], code => ::Var( namespace => [], name => 'defined', twigil => '', sigil => '&', ), ),
                                        otherwise => '',
                                    ),
                                    ::Return(
                                        result => ::Call(
                                            hyper     => '',
                                            arguments => [ ::Lit::NamedArgument( value => ::Var( namespace => [], name => 'nodes', twigil => '', sigil => '$', ), key => ::Val::Buf( buf => 'concat', ), ), ],
                                            method    => 'new',
                                            invocant => ::Proto( name => 'Rule::Concat', ),
                                        ),
                                    ),
                                ],
                                sig => ::Sig( invocant => '', positional => [], ),
                                pad => ::Pad(
                                    lexicals => [
                                        ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'nodes',    twigil => '', sigil => '$', ), type => '', ),
                                        ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'constant', twigil => '', sigil => '$', ), type => '', )
                                    ],
                                    namespace => "KindaPerl6::Visitor::Optimize::RuleConstantFold",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                ),
                                CATCH => '',
                                state => {},
                            ),
                            cond      => ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'Rule::Concat', ), ], method => 'isa', invocant => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ), ),
                            otherwise => '',
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'node_name', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',         twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'node',      twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'node_name', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "KindaPerl6::Visitor::Optimize::RuleConstantFold",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Visitor::Optimize::RuleConstantFold", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'KindaPerl6::Visitor::Optimize::RuleConstantFold',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    )
