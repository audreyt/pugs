# Do not edit this file - Generated by KindaPerl6::Visitor::Emit::MiniPerlLike
use v5;
use strict;
use KindaPerl6::Runtime::MiniPerl6Like::Runtime;
use KindaPerl6::Runtime::MiniPerl6Like::Match;
use autobox ARRAY => "Array";

package KindaPerl6::Visitor::Emit::AstPerl;
sub new { shift; bless {@_}, "KindaPerl6::Visitor::Emit::AstPerl" }

sub visit {
    my $result;
    my $data;
    my $item;
    my $List__;
    my $node;
    my $node_name;
    my $self = shift;
    $List__    = \@_;
    $node      = $_[0];
    $node_name = $_[1];
    do {

        if ( ( Main::isa( $node, 'Array' ) || Main::isa( $node, 'List' ) ) ) {
            my $result;
            my $subitem;
            $result = '';
            $result = ( $result . '[ ' );
            $subitem;
            $node->map(
                sub {
                    my $List__;
                    my $subitem;
                    $List__  = \@_;
                    $subitem = $_[0];
                    do {
                        if ( ( Main::isa( $subitem, 'Array' ) || Main::isa( $subitem, 'List' ) ) ) { $result = ( $result . ( $self->visit( $subitem, 'Array' ) . ', ' ) ) }
                        else {
                            do {
                                if ( Main::isa( $subitem, 'Str' ) ) { $result = ( $result . ( chr(39) . ( $subitem . ( chr(39) . ', ' ) ) ) ) }
                                else {
                                    do {
                                        if ($subitem) { $result = ( $result . ( $subitem->emit($self) . ', ' ) ) }
                                        else          { }
                                        }
                                }
                                }
                        }
                        }
                }
            );
            return ( ( $result . ' ]' ) );
        }
        else { }
    };
    do {
        if ( Main::isa( $node, 'Str' ) ) { return ( ( chr(39) . ( $node . chr(39) ) ) ) }
        else                             { }
    };
    $result = '';
    $result = ( $result . ( '::' . ( $node_name . '( ' ) ) );
    $data   = $node->attribs();
    $item;
    Main::keys($data)->map(
        sub {
            my $List__;
            my $item;
            $List__ = \@_;
            $item   = $_[0];
            $result = ( $result . ( ' ' . ( $item . ' => ' ) ) );
            do {
                if ( ( Main::isa( $data->{$item}, 'Array' ) || Main::isa( $data->{$item}, 'List' ) ) ) { $result = ( $result . ( $self->visit( $data->{$item}, 'Array' ) . ', ' ) ) }
                else {
                    do {
                        if ( Main::isa( $data->{$item}, 'Hash' ) ) {
                            my $subitem;
                            $result = ( $result . '{ ' );
                            $subitem;
                            Main::keys( $data->{$item} )->map(
                                sub {
                                    my $List__;
                                    my $subitem;
                                    $List__  = \@_;
                                    $subitem = $_[0];
                                    $result  = ( $result . ( $subitem . ( ' => ' . ( $data->{$item}->{$subitem}->emit($self) . ', ' ) ) ) );
                                }
                            );
                            $result = ( $result . ' }, ' );
                        }
                        else {
                            do {
                                if ( Main::isa( $data->{$item}, 'Str' ) ) { $result = ( $result . ( $self->visit( $data->{$item}, 'Str' ) . ', ' ) ) }
                                else {
                                    do {
                                        if ( $data->{$item} ) { $result = ( $result . ( $data->{$item}->emit($self) . ', ' ) ) }
                                        else                  { }
                                        }
                                }
                                }
                        }
                        }
                }
                }
        }
    );
    $result = ( $result . ') ' );
}

1;
