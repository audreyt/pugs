# The file format should be self-explanatory, if not, read README.
#
# Copyright (C) 2007 Moritz Lenz <moritz@faui2k3.org> and the Pugs authors.
# This file may be distributed under the same terms as perl itself.

# Numerical Operators

key:  +
syn:  $expr1 + $expr2
name: Binary Plus
desc: Adds two numbers
ex:   my $a = 2 + 3; # Result: 5
con:  numeric

key:  +
syn:  +$expr1
name: Unary Plus
desc: Enforces numerical context onto its operand
ex:   +"23";   # returns the number 23
      +42;
con:  numeric

key:  -
syn:  $expr1 - $expr2
name: Binary Minus
desc: Substracts two numbers
ex:   42 - 23; # returns 19
con:  numeric

key:  -
syn:  -$expr
name: Unary Minus
desc: Returns the negative of a number, forces numerical context.
ex:   -2;
con:  numeric

key:  *
syn:  $num1 * $num2
name: Multiplication
desc: Returns the product of two numbers
con:  numeric

key:  /
syn:  $num1 / $num2
name: Division
desc: divides two numbers
ex:   6 / 2;  # result: 3
con:  numeric

key:  %
syn:  $num1 % $num2
name: Remainder of division
desc: Remainder of division
ex:   10 % 3;  # result: 1, since 10 == 3*3 + 1
con:  numeric

key:  **
syn:  $expr1 ** $expr2
name: Power Operator
desc: Returns $expr1 to the power of $expr2
ex:   2**4 # same as 2*2*2*2
con:  numeric


# String operators

key:  ~
syn:  $str1 ~ $str2
name: String concatenation
desc: concatenate two strings
ex:   "hello" ~ " world";  # result: "hello world"
con:  string


# Assignment operators

key:  =
syn:  $lvalue = $expr
name: Assignment
desc: Assingns an expression to an lvalue
ex:   my $a = 4; # $a now contains the value 4

key:  :=
syn:  $var1 := $var2
name: Binding
desc: binds a variable to another variable
ex:   my $a = 5;
      my $b := $a;
      $b = 3; # now both $a and $b contain 3

key:  ::=
syn:  $var1 ::= $var2
name: Compile time binding
desc: Binds a variable to another at compile to, so that the two variables \
      are synomys to each other.


# Comparison operators

key:  ==
syn:  $num1 == $num2
name: Numeric equality
desc: compares two (or more) expressions for numerical equality
ex:   1 == 2     # false
      2 == 2     # true
      "a" == "b" # true (with warnings), since both numify to 0
      $a == $b == $c # true iff all numbers are numerical equal
      @a == @b   # true if both arrays have the same number of elements
con: numeric

key:  <=
syn:  $num1 <= $num2
name: Numeric lesser or equality
desc: compares if $num1 is numerically less or equal to $num2
ex:   1 <= 2         # true
      2 <= 2         # true
      3 <= 2         # false
      @a <= @b       # @a has less or equally many elements as @b
      $a <= $b <= $c # same as ($a <= $b) && ($b <= $c)
con: numeric

key:  <
syn:  $num1 < $num2
name: Numeric lesser
desc: compares if $num1 is numerically smaller than $num2
ex:   1 < 2        # true
      2 < 2        # false
      @a < @b      # same as @a.elems < @b.elems
      $a < $b < $c # same as ($a < $b) && ($b < $c)
con: numeric

key:  >=
syn:  $num1 >= $num2
name: Numeric bigger or equality
desc: compares if $num1 is numerically bigger or equal to $num2
ex:   1 >= 2         # false
      2 >= 2         # true
      3 >= 2         # true
      @a >= @b       # @a has more or equally many elements as @b
      $a >= $b >= $c # same as ($a >= $b) && ($b >= $c)
con: numeric

key:  >
syn:  $num1 > $num2
name: Numeric bigger
desc: compares if $num1 is numerically smaller than $num2
ex:   2 > 1        # true
      2 > 2        # false
      @a > @b      # same as @a.elems > @b.elems
      $a > $b > $c # same as ($a > $b) && ($b > $c)
con: numeric

key:  <=>
syn:  $num1 <=> $num2
name: Numeric three way comparison
desc: compares two numbers and returns -1, 0, +1 for smaller, equal, bigger
ex:   1 <=> 2     # -1
      2 <=> 2     # 0
      3 <=> 2     # +1
      @a <=> @b   # same as @a.elems <=> @b.elems
con: numeric


# vim: expandtab
