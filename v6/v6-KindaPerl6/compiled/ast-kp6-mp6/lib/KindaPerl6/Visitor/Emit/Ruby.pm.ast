::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'visitor_args', twigil => '.', sigil => '$', ), type => '', ),
            ::Method(
                name  => 'visit',
                block => ::Lit::Code(
                    body => [
                        ::Call(
                            hyper     => '',
                            arguments => [ ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'secure', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => 'visitor_args', twigil => '.', sigil => '$', ), ), ],
                            method    => 'emit_ruby',
                            invocant => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "KindaPerl6::Visitor::Emit::Ruby",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Visitor::Emit::Ruby", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'KindaPerl6::Visitor::Emit::Ruby',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Bind(
                parameters => ::Var( namespace => [], name => 'set_secure_mode', twigil => '', sigil => '&', ),
                arguments  => ::Sub(
                    name  => 'set_secure_mode',
                    block => ::Lit::Code(
                        body => [
                            ::Bind( parameters => ::Var( namespace => [], name => 'value', twigil => '', sigil => '$', ), arguments => ::Val::Buf( buf => '0', ), ),
                            ::If(
                                body => ::Lit::Code(
                                    body => [ ::Bind( parameters => ::Var( namespace => [],     name => 'value', twigil => '', sigil => '$', ), arguments => ::Val::Buf( buf => '1', ), ), ],
                                    sig  => ::Sig( invocant      => '',              positional => [], ),
                                    pad   => ::Pad( lexicals => [], namespace => "CompUnit", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                    CATCH => '',
                                    state => {},
                                ),
                                cond      => ::Var( namespace => [], name => 'args_secure', twigil => '', sigil => '$', ),
                                otherwise => '',
                            ),
                            ::Return(
                                result => ::Apply(
                                    arguments => [
                                        ::Val::Buf( buf => 'use constant KP6_DISABLE_INSECURE_CODE => ', ),
                                        ::Apply(
                                            arguments => [
                                                ::Var( namespace => [], name => 'value', twigil => '', sigil => '$', ),
                                                ::Apply(
                                                    arguments => [ ::Val::Buf( buf => ';', ), ::Apply( arguments => [],          code   => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ), ],
                                                    code      => ::Var( namespace  => [],     name               => 'infix:<~>', twigil => '',              sigil           => '&', ),
                                                ),
                                            ],
                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                        ),
                                    ],
                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                ),
                            ),
                        ],
                        sig => ::Sig(
                            invocant   => '',
                            positional => [
                                ::Lit::SigArgument(
                                    is_multidimensional => ::Val::Bit( bit => '0', ),
                                    has_default         => ::Val::Bit( bit => '0', ),
                                    value               => ::Val::Undef(),
                                    is_slurpy           => ::Val::Bit( bit => '0', ),
                                    is_optional         => ::Val::Bit( bit => '0', ),
                                    key           => ::Var( namespace => [], name => 'args_secure', twigil => '', sigil => '$', ),
                                    is_copy       => ::Val::Bit( bit  => '0', ),
                                    is_named_only => ::Val::Bit( bit  => '0', ),
                                    type          => '',
                                    is_rw => ::Val::Bit( bit => '0', ),
                                ),
                            ],
                        ),
                        pad => ::Pad(
                            lexicals => [
                                ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'value',       twigil => '', sigil => '$', ), type => '', ),
                                ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',           twigil => '', sigil => '@', ), type => '', ),
                                ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'args_secure', twigil => '', sigil => '$', ), type => '', )
                            ],
                            namespace => "CompUnit",
                            parent    => ::Pad(...),
                            evaluator => ::Sub(...),
                        ),
                        CATCH => '',
                        state => {},
                    ),
                ),
            ),
            ::Method(
                name  => 'emit_ruby',
                block => ::Lit::Code(
                    body => [
                        ::Bind(
                            parameters => ::Var( namespace => [ 'KindaPerl6', 'Visitor', 'Emit',    'Ruby', ], name    => 'current_compunit', twigil => '', sigil => '$', ),
                            arguments  => ::Var( namespace => [],             name       => 'name', twigil     => '.', sigil                  => '$', ),
                        ),
                        ::Bind( parameters => ::Var( namespace => [], name => 'source', twigil => '', sigil => '$', ), arguments => ::Val::Buf( buf => '', ), ),
                        ::If(
                            body => ::Lit::Code(
                                body => [
                                    ::Bind(
                                        parameters => ::Var( namespace => [], name => 'source', twigil => '', sigil => '$', ),
                                        arguments => ::Call( hyper => '', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'body', twigil => '.', sigil => '$', ), ),
                                    ),
                                ],
                                sig => ::Sig( invocant => '', positional => [], ),
                                pad   => ::Pad( lexicals => [], namespace => "CompUnit", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                CATCH => '',
                                state => {},
                            ),
                            cond      => ::Var( namespace => [], name => 'body', twigil => '.', sigil => '$', ),
                            otherwise => '',
                        ),
                        ::If(
                            body => ::Lit::Code(
                                body => [
                                    ::Bind(
                                        parameters => ::Var( namespace => [], name => 'source', twigil => '', sigil => '$', ),
                                        arguments  => ::Apply(
                                            arguments => [
                                                ::Val::Buf( buf => 'class ', ),
                                                ::Apply(
                                                    arguments => [
                                                        ::Var( namespace => [], name => 'name', twigil => '.', sigil => '$', ),
                                                        ::Apply(
                                                            arguments => [
                                                                ::Apply( arguments => [], code => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ),
                                                                ::Apply(
                                                                    arguments => [
                                                                        ::Var( namespace => [], name => 'source', twigil => '', sigil => '$', ),
                                                                        ::Apply(
                                                                            arguments => [
                                                                                ::Apply( arguments => [], code => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ),
                                                                                ::Apply(
                                                                                    arguments => [ ::Val::Buf( buf => 'end', ), ::Apply( arguments => [], code => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ), ],
                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                ),
                                                                            ],
                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                        ),
                                                                    ],
                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                ),
                                                            ],
                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                        ),
                                                    ],
                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                ),
                                            ],
                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                        ),
                                    ),
                                ],
                                sig => ::Sig( invocant => '', positional => [], ),
                                pad   => ::Pad( lexicals => [], namespace => "CompUnit", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                CATCH => '',
                                state => {},
                            ),
                            cond => ::Apply(
                                arguments => [ ::Var( namespace => [], name => 'unit_type',  twigil => '.', sigil => '$', ), ::Val::Buf( buf => 'class', ), ],
                                code      => ::Var( namespace   => [], name => 'infix:<eq>', twigil => '',  sigil => '&', ),
                            ),
                            otherwise => '',
                        ),
                        ::Bind(
                            parameters => ::Var( namespace => [], name => 'src', twigil => '', sigil => '$', ),
                            arguments  => ::Apply(
                                arguments => [
                                    ::Val::Buf( buf => '# Machine-generated ruby code.', ),
                                    ::Apply(
                                        arguments => [
                                            ::Apply( arguments => [], code => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ),
                                            ::Apply(
                                                arguments => [
                                                    ::Val::Buf( buf => '# Ruby version >= 1.9.0 2007-12-25 is needed.', ),
                                                    ::Apply(
                                                        arguments => [
                                                            ::Apply( arguments => [], code => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ),
                                                            ::Apply(
                                                                arguments => [
                                                                    ::Apply(
                                                                        arguments => [
                                                                            ::Val::Buf( buf => 'require ', ),
                                                                            ::Apply(
                                                                                arguments => [
                                                                                    ::Val::Char( char => '39', ),
                                                                                    ::Apply(
                                                                                        arguments => [ ::Val::Buf( buf => 'kp6_runtime', ), ::Val::Char( char => '39', ), ],
                                                                                        code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                    ),
                                                                                ],
                                                                                code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                            ),
                                                                        ],
                                                                        code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                    ),
                                                                    ::Apply(
                                                                        arguments => [
                                                                            ::Apply( arguments => [], code => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ),
                                                                            ::Apply(
                                                                                arguments => [
                                                                                    ::Apply( arguments => [], code => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ),
                                                                                    ::Apply(
                                                                                        arguments => [
                                                                                            ::Var( namespace => [], name => 'source', twigil => '', sigil => '$', ),
                                                                                            ::Apply( arguments => [], code => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ),
                                                                                        ],
                                                                                        code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                    ),
                                                                                ],
                                                                                code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                            ),
                                                                        ],
                                                                        code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                    ),
                                                                ],
                                                                code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                            ),
                                                        ],
                                                        code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                    ),
                                                ],
                                                code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                            ),
                                        ],
                                        code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                    ),
                                ],
                                code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                            ),
                        ),
                        ::Apply( arguments => [ ::Var( namespace => [], name => 'src', twigil => '', sigil => '$', ), ], code => ::Var( namespace => [ 'Main', ], name => 'emit_ruby_kludge_commas', twigil => '', sigil => '&', ), ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'args_secure', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'source',      twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'src',         twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',           twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'args_secure', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "CompUnit",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [ ::Decl( decl => 'our', var => ::Var( namespace => [], name => 'set_secure_mode', twigil => '', sigil => '&', ), type => '', ) ], namespace => "CompUnit", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'CompUnit',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'emit_ruby',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Val::Buf( buf => ' ', ),
                                ::Apply( arguments => [ ::Var( namespace => [], name => 'int', twigil => '.', sigil => '$', ), ::Val::Buf( buf => '', ), ], code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ), ),
                            ],
                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Val::Int",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Val::Int", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Val::Int',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'emit_ruby',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Val::Buf( buf => ' Bit.new(', ),
                                ::Apply(
                                    arguments => [
                                        ::Apply(
                                            arguments => [ ::Var( namespace => [], name => 'bit',             twigil => '.', sigil => '$', ), ::Val::Buf( buf => 'true', ), ::Val::Buf( buf => 'false', ), ],
                                            code      => ::Var( namespace   => [], name => 'ternary:<?? !!>', twigil => '',  sigil => '&', ),
                                        ),
                                        ::Val::Buf( buf => ')', ),
                                    ],
                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                ),
                            ],
                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Val::Bit",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Val::Bit", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Val::Bit',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'emit_ruby',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Val::Buf( buf => ' ', ),
                                ::Apply( arguments => [ ::Var( namespace => [], name => 'num', twigil => '.', sigil => '$', ), ::Val::Buf( buf => '', ), ], code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ), ),
                            ],
                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Val::Num",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Val::Num", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Val::Num',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'emit_ruby',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Val::Buf( buf => ' ', ),
                                ::Apply(
                                    arguments => [
                                        ::Apply( arguments => [], code => ::Var( namespace => [ 'Main', ], name => 'singlequote', twigil => '', sigil => '&', ), ),
                                        ::Apply(
                                            arguments => [
                                                ::Apply( arguments => [ ::Var( namespace => [], name => 'buf', twigil => '.', sigil => '$', ), ], code => ::Var( namespace => [ 'Main', ], name => 'mangle_string', twigil => '', sigil => '&', ), ),
                                                ::Apply( arguments => [], code => ::Var( namespace => [ 'Main', ], name => 'singlequote', twigil => '', sigil => '&', ), ),
                                            ],
                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                        ),
                                    ],
                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                ),
                            ],
                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Val::Buf",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Val::Buf", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Val::Buf',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'emit_ruby',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Val::Buf( buf => ' ', ),
                                ::Apply( arguments => [ ::Var( namespace => [], name => 'char', twigil => '.', sigil => '$', ), ::Val::Buf( buf => '.chr()', ), ], code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ), ),
                            ],
                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Val::Char",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Val::Char", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Val::Char',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'emit_ruby',
                block => ::Lit::Code(
                    body => [ ::Val::Buf( buf => ' Undef.new()', ), ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Val::Undef",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Val::Undef", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Val::Undef',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'emit_ruby',
                block => ::Lit::Code(
                    body => [ ::Apply( arguments => [ ::Val::Buf( buf => 'Emitting of Val::Object not implemented', ), ], code => ::Var( namespace => [], name   => 'die', twigil     => '',     sigil => '&', ), ), ],
                    sig  => ::Sig( invocant      => ::Var( namespace  => [],                                              name => 'self',          twigil => '', sigil     => '$', ), positional => [], ),
                    pad  => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Val::Object",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Val::Object", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Val::Object',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'emit_ruby',
                block => ::Lit::Code(
                    body => [ ::Apply( arguments => [ ::Val::Buf( buf => 'Emitting of Native::Buf not implemented', ), ], code => ::Var( namespace => [], name   => 'die', twigil     => '',     sigil => '&', ), ), ],
                    sig  => ::Sig( invocant      => ::Var( namespace  => [],                                              name => 'self',          twigil => '', sigil     => '$', ), positional => [], ),
                    pad  => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Native::Buf",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Native::Buf", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Native::Buf',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'emit_ruby',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Val::Buf( buf => '(', ),
                                ::Apply(
                                    arguments => [
                                        ::Call(
                                            hyper     => '',
                                            arguments => [ ::Val::Buf( buf => ',,, ', ), ],
                                            method    => 'join',
                                            invocant  => ::Call( hyper => '>>', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'seq', twigil => '.', sigil => '@', ), ),
                                        ),
                                        ::Val::Buf( buf => ')', ),
                                    ],
                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                ),
                            ],
                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Lit::Seq",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Lit::Seq", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Lit::Seq',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'emit_ruby',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Val::Buf( buf => '[', ),
                                ::Apply(
                                    arguments => [
                                        ::Call(
                                            hyper     => '',
                                            arguments => [ ::Val::Buf( buf => ',,, ', ), ],
                                            method    => 'join',
                                            invocant  => ::Call( hyper => '>>', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'array', twigil => '.', sigil => '@', ), ),
                                        ),
                                        ::Val::Buf( buf => ']', ),
                                    ],
                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                ),
                            ],
                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Lit::Array",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Lit::Array", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Lit::Array',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'emit_ruby',
                block => ::Lit::Code(
                    body => [
                        ::Bind( parameters => ::Var( namespace => [], name => 'fields', twigil => '', sigil => '$', ), arguments => ::Var( namespace => [], name => 'hash', twigil => '.', sigil => '@', ), ),
                        ::Bind( parameters => ::Var( namespace => [], name => 'str',    twigil => '', sigil => '$', ), arguments => ::Val::Buf( buf  => '', ), ),
                        ::Var( namespace => [], name => 'field', twigil => '', sigil => '$', ),
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Sub(
                                    name  => '',
                                    block => ::Lit::Code(
                                        body => [
                                            ::Bind(
                                                parameters => ::Var( namespace => [], name => 'str', twigil => '', sigil => '$', ),
                                                arguments  => ::Apply(
                                                    arguments => [
                                                        ::Var( namespace => [], name => 'str', twigil => '', sigil => '$', ),
                                                        ::Apply(
                                                            arguments => [
                                                                ::Val::Buf( buf => ', ', ),
                                                                ::Apply(
                                                                    arguments => [
                                                                        ::Call(
                                                                            hyper     => '',
                                                                            arguments => '',
                                                                            method    => 'emit_ruby',
                                                                            invocant  => ::Call(
                                                                                hyper     => '',
                                                                                arguments => [ ::Val::Int( int => '0', ), ],
                                                                                method    => 'INDEX',
                                                                                invocant  => ::Var( namespace => [], name => 'field', twigil => '', sigil => '$', ),
                                                                            ),
                                                                        ),
                                                                        ::Apply(
                                                                            arguments => [
                                                                                ::Val::Buf( buf => ': ', ),
                                                                                ::Apply(
                                                                                    arguments => [
                                                                                        ::Call(
                                                                                            hyper     => '',
                                                                                            arguments => '',
                                                                                            method    => 'emit_ruby',
                                                                                            invocant  => ::Call(
                                                                                                hyper     => '',
                                                                                                arguments => [ ::Val::Int( int => '1', ), ],
                                                                                                method    => 'INDEX',
                                                                                                invocant  => ::Var( namespace => [], name => 'field', twigil => '', sigil => '$', ),
                                                                                            ),
                                                                                        ),
                                                                                        ::Val::Buf( buf => '', ),
                                                                                    ],
                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                ),
                                                                            ],
                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                        ),
                                                                    ],
                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                ),
                                                            ],
                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                        ),
                                                    ],
                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                ),
                                            ),
                                        ],
                                        sig => ::Sig(
                                            invocant   => ::Val::Undef(),
                                            positional => [
                                                ::Lit::SigArgument(
                                                    is_multidimensional => ::Val::Bit( bit => '0', ),
                                                    has_default         => ::Val::Bit( bit => '0', ),
                                                    value               => ::Val::Undef(),
                                                    is_slurpy           => ::Val::Bit( bit => '0', ),
                                                    is_optional         => ::Val::Bit( bit => '0', ),
                                                    key           => ::Var( namespace => [], name => 'field', twigil => '', sigil => '$', ),
                                                    is_copy       => ::Val::Bit( bit  => '0', ),
                                                    is_named_only => ::Val::Bit( bit  => '0', ),
                                                    type          => '',
                                                    is_rw => ::Val::Bit( bit => '0', ),
                                                ),
                                            ],
                                        ),
                                        pad => ::Pad(
                                            lexicals => [
                                                ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',     twigil => '', sigil => '@', ), type => '', ),
                                                ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'field', twigil => '', sigil => '$', ), type => '', )
                                            ],
                                            namespace => "Lit::Hash",
                                            parent    => ::Pad(...),
                                            evaluator => ::Sub(...),
                                        ),
                                        CATCH => '',
                                        state => {},
                                    ),
                                ),
                            ],
                            method   => 'map',
                            invocant => ::Apply( arguments => [ ::Var( namespace => [], name => 'fields', twigil => '', sigil => '$', ), ], code => ::Var( namespace => [], name => 'prefix:<@>', twigil => '', sigil => '&', ), ),
                        ),
                        ::Bind(
                            parameters => ::Var( namespace => [], name => 'str', twigil => '', sigil => '$', ),
                            arguments => ::Apply( arguments => [ ::Var( namespace => [], name => 'str', twigil => '', sigil => '$', ), ::Val::Int( int => '1', ), ], code => ::Var( namespace => [], name => 'substr', twigil => '', sigil => '&', ), ),
                        ),
                        ::Apply(
                            arguments => [
                                ::Val::Buf( buf => '{', ),
                                ::Apply(
                                    arguments => [
                                        ::Var( namespace => [], name => 'str', twigil => '', sigil => '$', ),
                                        ::Apply(
                                            arguments => [ ::Val::Buf( buf => ' }', ), ::Apply( arguments => [],          code   => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ), ],
                                            code      => ::Var( namespace  => [],      name               => 'infix:<~>', twigil => '',              sigil           => '&', ),
                                        ),
                                    ],
                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                ),
                            ],
                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'fields', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'str',    twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'field',  twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',      twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self',   twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Lit::Hash",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Lit::Hash", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Lit::Hash',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'emit_ruby',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Val::Buf( buf => ' Pair.new(', ),
                                ::Apply(
                                    arguments => [
                                        ::Call( hyper => '', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'key', twigil => '.', sigil => '$', ), ),
                                        ::Apply(
                                            arguments => [
                                                ::Val::Buf( buf => ', ', ),
                                                ::Apply(
                                                    arguments => [ ::Call( hyper => '', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'value', twigil => '.', sigil => '$', ), ), ::Val::Buf( buf => ')', ), ],
                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                ),
                                            ],
                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                        ),
                                    ],
                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                ),
                            ],
                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Lit::Pair",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Lit::Pair", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Lit::Pair',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'emit_ruby',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Val::Buf( buf => ' Ruddy::NamedArgument.new(', ),
                                ::Apply(
                                    arguments => [
                                        ::Call( hyper => '', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'key', twigil => '.', sigil => '$', ), ),
                                        ::Apply(
                                            arguments => [
                                                ::Val::Buf( buf => ', ', ),
                                                ::Apply(
                                                    arguments => [
                                                        ::Apply(
                                                            arguments => [
                                                                ::Apply( arguments => [ ::Var( namespace => [], name => 'value', twigil => '.', sigil => '$', ), ], code => ::Var( namespace => [], name => 'defined', twigil => '', sigil => '&', ), ),
                                                                ::Call( hyper => '', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'value', twigil => '.', sigil => '$', ), ),
                                                                ::Val::Buf( buf => 'Undef.new', ),
                                                            ],
                                                            code => ::Var( namespace => [], name => 'ternary:<?? !!>', twigil => '', sigil => '&', ),
                                                        ),
                                                        ::Val::Buf( buf => ')', ),
                                                    ],
                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                ),
                                            ],
                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                        ),
                                    ],
                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                ),
                            ],
                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Lit::NamedArgument",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Lit::NamedArgument", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Lit::NamedArgument',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'emit_ruby',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Val::Buf( buf => ' si(', ),
                                ::Apply(
                                    arguments => [
                                        ::Val::Char( char => '39', ),
                                        ::Apply(
                                            arguments => [
                                                ::Call( hyper => '', arguments => '', method => 'sigil', invocant => ::Var( namespace => [], name => 'key', twigil => '.', sigil => '$', ), ),
                                                ::Apply(
                                                    arguments => [
                                                        ::Apply( arguments => [ ::Val::Char( char => '39', ), ::Val::Buf( buf => ',', ), ], code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ), ),
                                                        ::Apply(
                                                            arguments => [
                                                                ::Val::Char( char => '39', ),
                                                                ::Apply(
                                                                    arguments => [
                                                                        ::Call( hyper => '', arguments => '', method => 'twigil', invocant => ::Var( namespace => [], name => 'key', twigil => '.', sigil => '$', ), ),
                                                                        ::Apply(
                                                                            arguments => [
                                                                                ::Apply( arguments => [ ::Val::Char( char => '39', ), ::Val::Buf( buf => ',', ), ], code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ), ),
                                                                                ::Apply(
                                                                                    arguments => [
                                                                                        ::Val::Char( char => '39', ),
                                                                                        ::Apply(
                                                                                            arguments => [
                                                                                                ::Call( hyper => '', arguments => '', method => 'name', invocant => ::Var( namespace => [], name => 'key', twigil => '.', sigil => '$', ), ),
                                                                                                ::Apply(
                                                                                                    arguments => [
                                                                                                        ::Apply(
                                                                                                            arguments => [ ::Val::Char( char => '39', ), ::Val::Buf( buf => ',', ), ],
                                                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                        ),
                                                                                                        ::Apply(
                                                                                                            arguments => [
                                                                                                                ::Apply(
                                                                                                                    arguments => [
                                                                                                                        ::Apply(
                                                                                                                            arguments => [
                                                                                                                                ::Var( namespace => [], name => 'has_default', twigil => '.', sigil => '$', ),
                                                                                                                                ::Call(
                                                                                                                                    hyper     => '',
                                                                                                                                    arguments => '',
                                                                                                                                    method    => 'bit',
                                                                                                                                    invocant  => ::Var( namespace => [], name => 'has_default', twigil => '.', sigil => '$', ),
                                                                                                                                ),
                                                                                                                            ],
                                                                                                                            code => ::Var( namespace => [], name => 'infix:<&&>', twigil => '', sigil => '&', ),
                                                                                                                        ),
                                                                                                                        ::Call(
                                                                                                                            hyper     => '',
                                                                                                                            arguments => '',
                                                                                                                            method    => 'emit_ruby',
                                                                                                                            invocant  => ::Var( namespace => [], name => 'value', twigil => '.', sigil => '$', ),
                                                                                                                        ),
                                                                                                                        ::Val::Buf( buf => 'nil', ),
                                                                                                                    ],
                                                                                                                    code => ::Var( namespace => [], name => 'ternary:<?? !!>', twigil => '', sigil => '&', ),
                                                                                                                ),
                                                                                                                ::Apply(
                                                                                                                    arguments => [
                                                                                                                        ::Val::Buf( buf => '', ),
                                                                                                                        ::Apply(
                                                                                                                            arguments => [
                                                                                                                                ::Apply(
                                                                                                                                    arguments => [
                                                                                                                                        ::Apply(
                                                                                                                                            arguments => [
                                                                                                                                                ::Var( namespace => [], name => 'is_named_only', twigil => '.', sigil => '$', ),
                                                                                                                                                ::Call(
                                                                                                                                                    hyper     => '',
                                                                                                                                                    arguments => '',
                                                                                                                                                    method    => 'bit',
                                                                                                                                                    invocant  => ::Var( namespace => [], name => 'is_named_only', twigil => '.', sigil => '$', ),
                                                                                                                                                ),
                                                                                                                                            ],
                                                                                                                                            code => ::Var( namespace => [], name => 'infix:<&&>', twigil => '', sigil => '&', ),
                                                                                                                                        ),
                                                                                                                                        ::Val::Buf( buf => ',:is_named_only', ),
                                                                                                                                        ::Val::Buf( buf => '', ),
                                                                                                                                    ],
                                                                                                                                    code => ::Var( namespace => [], name => 'ternary:<?? !!>', twigil => '', sigil => '&', ),
                                                                                                                                ),
                                                                                                                                ::Apply(
                                                                                                                                    arguments => [
                                                                                                                                        ::Apply(
                                                                                                                                            arguments => [
                                                                                                                                                ::Apply(
                                                                                                                                                    arguments => [
                                                                                                                                                        ::Var( namespace => [], name => 'is_optional_only', twigil => '.', sigil => '$', ),
                                                                                                                                                        ::Call(
                                                                                                                                                            hyper     => '',
                                                                                                                                                            arguments => '',
                                                                                                                                                            method    => 'bit',
                                                                                                                                                            invocant =>
                                                                                                                                                                ::Var( namespace => [], name => 'is_optional_only', twigil => '.', sigil => '$', ),
                                                                                                                                                        ),
                                                                                                                                                    ],
                                                                                                                                                    code => ::Var( namespace => [], name => 'infix:<&&>', twigil => '', sigil => '&', ),
                                                                                                                                                ),
                                                                                                                                                ::Val::Buf( buf => ',:is_optional_only', ),
                                                                                                                                                ::Val::Buf( buf => '', ),
                                                                                                                                            ],
                                                                                                                                            code => ::Var( namespace => [], name => 'ternary:<?? !!>', twigil => '', sigil => '&', ),
                                                                                                                                        ),
                                                                                                                                        ::Apply(
                                                                                                                                            arguments => [
                                                                                                                                                ::Apply(
                                                                                                                                                    arguments => [
                                                                                                                                                        ::Apply(
                                                                                                                                                            arguments => [
                                                                                                                                                                ::Var( namespace => [], name => 'is_slurpy', twigil => '.', sigil => '$', ),
                                                                                                                                                                ::Call(
                                                                                                                                                                    hyper     => '',
                                                                                                                                                                    arguments => '',
                                                                                                                                                                    method    => 'bit',
                                                                                                                                                                    invocant =>
                                                                                                                                                                        ::Var( namespace => [], name => 'is_slurpy', twigil => '.', sigil => '$', ),
                                                                                                                                                                ),
                                                                                                                                                            ],
                                                                                                                                                            code => ::Var( namespace => [], name => 'infix:<&&>', twigil => '', sigil => '&', ),
                                                                                                                                                        ),
                                                                                                                                                        ::Val::Buf( buf => ',:is_slurpy', ),
                                                                                                                                                        ::Val::Buf( buf => '', ),
                                                                                                                                                    ],
                                                                                                                                                    code => ::Var( namespace => [], name => 'ternary:<?? !!>', twigil => '', sigil => '&', ),
                                                                                                                                                ),
                                                                                                                                                ::Apply(
                                                                                                                                                    arguments => [
                                                                                                                                                        ::Apply(
                                                                                                                                                            arguments => [
                                                                                                                                                                ::Apply(
                                                                                                                                                                    arguments => [
                                                                                                                                                                        ::Var(
                                                                                                                                                                            namespace => [],
                                                                                                                                                                            name      => 'is_multidimensional',
                                                                                                                                                                            twigil    => '.',
                                                                                                                                                                            sigil     => '$',
                                                                                                                                                                        ),
                                                                                                                                                                        ::Call(
                                                                                                                                                                            hyper     => '',
                                                                                                                                                                            arguments => '',
                                                                                                                                                                            method    => 'bit',
                                                                                                                                                                            invocant  => ::Var(
                                                                                                                                                                                namespace => [],
                                                                                                                                                                                name      => 'is_multidimensional',
                                                                                                                                                                                twigil    => '.',
                                                                                                                                                                                sigil     => '$',
                                                                                                                                                                            ),
                                                                                                                                                                        ),
                                                                                                                                                                    ],
                                                                                                                                                                    code => ::Var( namespace => [], name => 'infix:<&&>', twigil => '', sigil => '&', ),
                                                                                                                                                                ),
                                                                                                                                                                ::Val::Buf( buf => ',:is_multidimensional', ),
                                                                                                                                                                ::Val::Buf( buf => '', ),
                                                                                                                                                            ],
                                                                                                                                                            code => ::Var( namespace => [], name => 'ternary:<?? !!>', twigil => '', sigil => '&', ),
                                                                                                                                                        ),
                                                                                                                                                        ::Apply(
                                                                                                                                                            arguments => [
                                                                                                                                                                ::Apply(
                                                                                                                                                                    arguments => [
                                                                                                                                                                        ::Apply(
                                                                                                                                                                            arguments => [
                                                                                                                                                                                ::Var( namespace => [], name => 'is_rw', twigil => '.', sigil => '$', ),
                                                                                                                                                                                ::Call(
                                                                                                                                                                                    hyper     => '',
                                                                                                                                                                                    arguments => '',
                                                                                                                                                                                    method    => 'bit',
                                                                                                                                                                                    invocant  => ::Var(
                                                                                                                                                                                        namespace => [],
                                                                                                                                                                                        name      => 'is_rw',
                                                                                                                                                                                        twigil    => '.',
                                                                                                                                                                                        sigil     => '$',
                                                                                                                                                                                    ),
                                                                                                                                                                                ),
                                                                                                                                                                            ],
                                                                                                                                                                            code => ::Var(
                                                                                                                                                                                namespace => [],
                                                                                                                                                                                name      => 'infix:<&&>',
                                                                                                                                                                                twigil    => '',
                                                                                                                                                                                sigil     => '&',
                                                                                                                                                                            ),
                                                                                                                                                                        ),
                                                                                                                                                                        ::Val::Buf( buf => ',:is_rw', ),
                                                                                                                                                                        ::Val::Buf( buf => '', ),
                                                                                                                                                                    ],
                                                                                                                                                                    code =>
                                                                                                                                                                        ::Var( namespace => [], name => 'ternary:<?? !!>', twigil => '', sigil => '&', ),
                                                                                                                                                                ),
                                                                                                                                                                ::Apply(
                                                                                                                                                                    arguments => [
                                                                                                                                                                        ::Apply(
                                                                                                                                                                            arguments => [
                                                                                                                                                                                ::Apply(
                                                                                                                                                                                    arguments => [
                                                                                                                                                                                        ::Var(
                                                                                                                                                                                            namespace => [],
                                                                                                                                                                                            name      => 'is_copy',
                                                                                                                                                                                            twigil    => '.',
                                                                                                                                                                                            sigil     => '$',
                                                                                                                                                                                        ),
                                                                                                                                                                                        ::Call(
                                                                                                                                                                                            hyper     => '',
                                                                                                                                                                                            arguments => '',
                                                                                                                                                                                            method    => 'bit',
                                                                                                                                                                                            invocant  => ::Var(
                                                                                                                                                                                                namespace => [],
                                                                                                                                                                                                name      => 'is_copy',
                                                                                                                                                                                                twigil    => '.',
                                                                                                                                                                                                sigil     => '$',
                                                                                                                                                                                            ),
                                                                                                                                                                                        ),
                                                                                                                                                                                    ],
                                                                                                                                                                                    code => ::Var(
                                                                                                                                                                                        namespace => [],
                                                                                                                                                                                        name      => 'infix:<&&>',
                                                                                                                                                                                        twigil    => '',
                                                                                                                                                                                        sigil     => '&',
                                                                                                                                                                                    ),
                                                                                                                                                                                ),
                                                                                                                                                                                ::Val::Buf( buf => ',:is_copy', ),
                                                                                                                                                                                ::Val::Buf( buf => '', ),
                                                                                                                                                                            ],
                                                                                                                                                                            code => ::Var(
                                                                                                                                                                                namespace => [],
                                                                                                                                                                                name      => 'ternary:<?? !!>',
                                                                                                                                                                                twigil    => '',
                                                                                                                                                                                sigil     => '&',
                                                                                                                                                                            ),
                                                                                                                                                                        ),
                                                                                                                                                                        ::Val::Buf( buf => ')', ),
                                                                                                                                                                    ],
                                                                                                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                                                                                ),
                                                                                                                                                            ],
                                                                                                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                                                                        ),
                                                                                                                                                    ],
                                                                                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                                                                ),
                                                                                                                                            ],
                                                                                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                                                        ),
                                                                                                                                    ],
                                                                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                                                ),
                                                                                                                            ],
                                                                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                                        ),
                                                                                                                    ],
                                                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                                ),
                                                                                                            ],
                                                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                        ),
                                                                                                    ],
                                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                ),
                                                                                            ],
                                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                        ),
                                                                                    ],
                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                ),
                                                                            ],
                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                        ),
                                                                    ],
                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                ),
                                                            ],
                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                        ),
                                                    ],
                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                ),
                                            ],
                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                        ),
                                    ],
                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                ),
                            ],
                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Lit::SigArgument",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'emit_ruby_name',
                block => ::Lit::Code(
                    body => [
                        ::Bind(
                            parameters => ::Var( namespace => [], name => 'namespace', twigil => '', sigil => '$', ),
                            arguments => ::Call( hyper => '', arguments => [ ::Lit::Array( array => [], ), ], method => 'new', invocant => ::Proto( name => 'Array', ), ),
                        ),
                        ::Apply(
                            arguments => [
                                ::Call( hyper => '', arguments => '', method => 'sigil',  invocant => ::Var( namespace => [], name => 'key', twigil => '.', sigil => '$', ), ),
                                ::Call( hyper => '', arguments => '', method => 'twigil', invocant => ::Var( namespace => [], name => 'key', twigil => '.', sigil => '$', ), ),
                                ::Call( hyper => '', arguments => '', method => 'name',   invocant => ::Var( namespace => [], name => 'key', twigil => '.', sigil => '$', ), ),
                                ::Var( namespace => [], name => 'namespace', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'Main', ], name => 'mangle_name_ruby', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'namespace', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',         twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self',      twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Lit::SigArgument",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Lit::SigArgument", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Lit::SigArgument',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'emit_ruby',
                block => ::Lit::Code(
                    body => [
                        ::If(
                            body => ::Lit::Code(
                                body => [
                                    ::Apply(
                                        arguments => [
                                            ::Val::Buf( buf => 'do { eval {', ),
                                            ::Apply(
                                                arguments => [
                                                    ::Call( hyper => '', arguments => '', method => 'emit_ruby_declarations', invocant => ::Proto( name => 'self', ), ),
                                                    ::Apply(
                                                        arguments => [
                                                            ::Call( hyper => '', arguments => '', method => 'emit_ruby_body', invocant => ::Proto( name => 'self', ), ),
                                                            ::Apply(
                                                                arguments => [
                                                                    ::Val::Buf( buf => '};if ($@) {', ),
                                                                    ::Apply(
                                                                        arguments => [
                                                                            ::Call( hyper => '', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'CATCH', twigil => '.', sigil => '$', ), ),
                                                                            ::Val::Buf( buf => '}}', ),
                                                                        ],
                                                                        code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                    ),
                                                                ],
                                                                code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                            ),
                                                        ],
                                                        code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                    ),
                                                ],
                                                code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                            ),
                                        ],
                                        code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                    ),
                                ],
                                sig => ::Sig( invocant => '', positional => [], ),
                                pad   => ::Pad( lexicals => [], namespace => "Lit::Code", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                CATCH => '',
                                state => {},
                            ),
                            cond      => ::Var( namespace => [], name => 'CATCH', twigil => '.', sigil => '$', ),
                            otherwise => ::Lit::Code(
                                body => [
                                    ::Bind( parameters => ::Var( namespace => [], name => 'our_declarations', twigil => '', sigil => '$', ), arguments => ::Val::Buf( buf => '', ), ),
                                    ::Bind( parameters => ::Var( namespace => [], name => 'my_names',         twigil => '', sigil => '$', ), arguments => ::Val::Buf( buf => '', ), ),
                                    ::Bind( parameters => ::Var( namespace => [], name => 'my_containers',    twigil => '', sigil => '$', ), arguments => ::Val::Buf( buf => '', ), ),
                                    ::Call(
                                        hyper     => '',
                                        arguments => [
                                            ::Sub(
                                                name  => '',
                                                block => ::Lit::Code(
                                                    body => [
                                                        ::Bind(
                                                            parameters => ::Var( namespace => [], name => 'var', twigil => '', sigil => '$', ),
                                                            arguments => ::Call( hyper => '', arguments => '', method => 'var', invocant => ::Var( namespace => [], name => 'aDecl', twigil => '', sigil => '$', ), ),
                                                        ),
                                                        ::Bind(
                                                            parameters => ::Var( namespace => [], name => 'container', twigil => '', sigil => '$', ),
                                                            arguments => ::Call( hyper => '', arguments => '', method => 'emit_ruby_container', invocant => ::Var( namespace => [], name => 'var', twigil => '', sigil => '$', ), ),
                                                        ),
                                                        ::Bind(
                                                            parameters => ::Var( namespace => [], name => 'scope', twigil => '', sigil => '$', ),
                                                            arguments => ::Call( hyper => '', arguments => '', method => 'decl', invocant => ::Var( namespace => [], name => 'aDecl', twigil => '', sigil => '$', ), ),
                                                        ),
                                                        ::If(
                                                            body => ::Lit::Code(
                                                                body => [
                                                                    ::Bind(
                                                                        parameters => ::Var( namespace => [], name => 'our_declarations', twigil => '', sigil => '$', ),
                                                                        arguments  => ::Apply(
                                                                            arguments => [
                                                                                ::Var( namespace => [], name => 'our_declarations', twigil => '', sigil => '$', ),
                                                                                ::Apply(
                                                                                    arguments => [
                                                                                        ::Val::Buf( buf => 'def_our(:', ),
                                                                                        ::Apply(
                                                                                            arguments => [
                                                                                                ::Call( hyper => '', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'aDecl', twigil => '', sigil => '$', ), ),
                                                                                                ::Apply(
                                                                                                    arguments => [
                                                                                                        ::Val::Buf( buf => ',', ),
                                                                                                        ::Apply(
                                                                                                            arguments => [
                                                                                                                ::Var( namespace => [], name => 'container', twigil => '', sigil => '$', ),
                                                                                                                ::Apply(
                                                                                                                    arguments => [
                                                                                                                        ::Val::Buf( buf => '.new)', ),
                                                                                                                        ::Apply( arguments => [], code => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ),
                                                                                                                    ],
                                                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                                ),
                                                                                                            ],
                                                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                        ),
                                                                                                    ],
                                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                ),
                                                                                            ],
                                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                        ),
                                                                                    ],
                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                ),
                                                                            ],
                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                        ),
                                                                    ),
                                                                ],
                                                                sig => ::Sig( invocant => '', positional => [], ),
                                                                pad   => ::Pad( lexicals => [], namespace => "Lit::Code", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                                CATCH => '',
                                                                state => {},
                                                            ),
                                                            cond => ::Apply(
                                                                arguments => [ ::Var( namespace => [], name => 'scope',      twigil => '', sigil => '$', ), ::Val::Buf( buf => 'our', ), ],
                                                                code      => ::Var( namespace   => [], name => 'infix:<eq>', twigil => '', sigil => '&', ),
                                                            ),
                                                            otherwise => '',
                                                        ),
                                                        ::If(
                                                            body => ::Lit::Code(
                                                                body => [
                                                                    ::Bind(
                                                                        parameters => ::Var( namespace => [], name => 'my_names', twigil => '', sigil => '$', ),
                                                                        arguments  => ::Apply(
                                                                            arguments => [
                                                                                ::Var( namespace => [], name => 'my_names', twigil => '', sigil => '$', ),
                                                                                ::Apply(
                                                                                    arguments => [
                                                                                        ::Val::Buf( buf => ',', ),
                                                                                        ::Call( hyper => '', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'aDecl', twigil => '', sigil => '$', ), ),
                                                                                    ],
                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                ),
                                                                            ],
                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                        ),
                                                                    ),
                                                                    ::Bind(
                                                                        parameters => ::Var( namespace => [], name => 'my_containers', twigil => '', sigil => '$', ),
                                                                        arguments  => ::Apply(
                                                                            arguments => [
                                                                                ::Var( namespace => [], name => 'my_containers', twigil => '', sigil => '$', ),
                                                                                ::Apply(
                                                                                    arguments => [
                                                                                        ::Val::Buf( buf => ',', ),
                                                                                        ::Apply(
                                                                                            arguments => [ ::Var( namespace => [], name => 'container', twigil => '', sigil => '$', ), ::Val::Buf( buf => '.new', ), ],
                                                                                            code      => ::Var( namespace   => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                        ),
                                                                                    ],
                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                ),
                                                                            ],
                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                        ),
                                                                    ),
                                                                ],
                                                                sig => ::Sig( invocant => '', positional => [], ),
                                                                pad   => ::Pad( lexicals => [], namespace => "Lit::Code", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                                CATCH => '',
                                                                state => {},
                                                            ),
                                                            cond => ::Apply(
                                                                arguments => [ ::Var( namespace => [], name => 'scope',      twigil => '', sigil => '$', ), ::Val::Buf( buf => 'my', ), ],
                                                                code      => ::Var( namespace   => [], name => 'infix:<eq>', twigil => '', sigil => '&', ),
                                                            ),
                                                            otherwise => '',
                                                        ),
                                                    ],
                                                    sig => ::Sig(
                                                        invocant   => ::Val::Undef(),
                                                        positional => [
                                                            ::Lit::SigArgument(
                                                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                                                has_default         => ::Val::Bit( bit => '0', ),
                                                                value               => ::Val::Undef(),
                                                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                                                is_optional         => ::Val::Bit( bit => '0', ),
                                                                key           => ::Var( namespace => [], name => 'aDecl', twigil => '', sigil => '$', ),
                                                                is_copy       => ::Val::Bit( bit  => '0', ),
                                                                is_named_only => ::Val::Bit( bit  => '0', ),
                                                                type          => '',
                                                                is_rw => ::Val::Bit( bit => '0', ),
                                                            ),
                                                        ],
                                                    ),
                                                    pad => ::Pad(
                                                        lexicals => [
                                                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'var',       twigil => '', sigil => '$', ), type => '', ),
                                                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'container', twigil => '', sigil => '$', ), type => '', ),
                                                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'scope',     twigil => '', sigil => '$', ), type => '', ),
                                                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',         twigil => '', sigil => '@', ), type => '', ),
                                                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'aDecl',     twigil => '', sigil => '$', ), type => '', )
                                                        ],
                                                        namespace => "Lit::Code",
                                                        parent    => ::Pad(...),
                                                        evaluator => ::Sub(...),
                                                    ),
                                                    CATCH => '',
                                                    state => {},
                                                ),
                                            ),
                                        ],
                                        method   => 'map',
                                        invocant => ::Apply(
                                            arguments => [ ::Call( hyper  => '', arguments => '',           method => 'lexicals', invocant => ::Var( namespace => [], name => 'pad', twigil => '.', sigil => '$', ), ), ],
                                            code      => ::Var( namespace => [], name      => 'prefix:<@>', twigil => '',         sigil    => '&', ),
                                        ),
                                    ),
                                    ::Bind(
                                        parameters => ::Var( namespace => [], name => 'my_names', twigil => '', sigil => '$', ),
                                        arguments  => ::Apply(
                                            arguments => [ ::Var( namespace => [], name => 'my_names', twigil => '', sigil => '$', ), ::Val::Int( int => '1', ), ],
                                            code      => ::Var( namespace   => [], name => 'substr',   twigil => '', sigil => '&', ),
                                        ),
                                    ),
                                    ::Bind(
                                        parameters => ::Var( namespace => [], name => 'my_containers', twigil => '', sigil => '$', ),
                                        arguments  => ::Apply(
                                            arguments => [ ::Var( namespace => [], name => 'my_containers', twigil => '', sigil => '$', ), ::Val::Int( int => '1', ), ],
                                            code      => ::Var( namespace   => [], name => 'substr',        twigil => '', sigil => '&', ),
                                        ),
                                    ),
                                    ::Bind( parameters => ::Var( namespace => [], name => 'before_body', twigil => '', sigil => '$', ), arguments => ::Val::Buf( buf => '', ), ),
                                    ::Bind( parameters => ::Var( namespace => [], name => 'after_body',  twigil => '', sigil => '$', ), arguments => ::Val::Buf( buf => '', ), ),
                                    ::If(
                                        body => ::Lit::Code(
                                            body => [
                                                ::Bind(
                                                    parameters => ::Var( namespace => [], name => 'before_body', twigil => '', sigil => '$', ),
                                                    arguments  => ::Apply(
                                                        arguments => [
                                                            ::Val::Buf( buf => '(->(', ),
                                                            ::Apply(
                                                                arguments => [
                                                                    ::Var( namespace => [], name => 'my_names', twigil => '', sigil => '$', ),
                                                                    ::Apply(
                                                                        arguments => [ ::Val::Buf( buf => '){ ', ), ::Apply( arguments => [], code => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ), ],
                                                                        code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                    ),
                                                                ],
                                                                code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                            ),
                                                        ],
                                                        code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                    ),
                                                ),
                                                ::Bind(
                                                    parameters => ::Var( namespace => [], name => 'after_body', twigil => '', sigil => '$', ),
                                                    arguments  => ::Apply(
                                                        arguments => [
                                                            ::Val::Buf( buf => '}).(', ),
                                                            ::Apply(
                                                                arguments => [
                                                                    ::Var( namespace => [], name => 'my_containers', twigil => '', sigil => '$', ),
                                                                    ::Apply(
                                                                        arguments => [ ::Val::Buf( buf => ')', ), ::Apply( arguments => [], code => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ), ],
                                                                        code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                    ),
                                                                ],
                                                                code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                            ),
                                                        ],
                                                        code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                    ),
                                                ),
                                            ],
                                            sig => ::Sig( invocant => '', positional => [], ),
                                            pad   => ::Pad( lexicals => [], namespace => "Lit::Code", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                            CATCH => '',
                                            state => {},
                                        ),
                                        cond => ::Apply(
                                            arguments => [ ::Var( namespace => [], name => 'my_names',   twigil => '', sigil => '$', ), ::Val::Buf( buf => '', ), ],
                                            code      => ::Var( namespace   => [], name => 'infix:<ne>', twigil => '', sigil => '&', ),
                                        ),
                                        otherwise => '',
                                    ),
                                    ::Bind(
                                        parameters => ::Var( namespace => [], name => 'result', twigil => '', sigil => '$', ),
                                        arguments  => ::Apply(
                                            arguments => [
                                                ::Var( namespace => [], name => 'our_declarations', twigil => '', sigil => '$', ),
                                                ::Apply(
                                                    arguments => [
                                                        ::Var( namespace => [], name => 'before_body', twigil => '', sigil => '$', ),
                                                        ::Apply(
                                                            arguments => [
                                                                ::Call( hyper => '', arguments => '', method => 'emit_ruby_body', invocant => ::Proto( name => 'self', ), ),
                                                                ::Var( namespace => [], name => 'after_body', twigil => '', sigil => '$', ),
                                                            ],
                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                        ),
                                                    ],
                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                ),
                                            ],
                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                        ),
                                    ),
                                    ::Return( result => ::Var( namespace => [], name => 'result', twigil => '', sigil => '$', ), ),
                                ],
                                sig => ::Sig( invocant => '', positional => [], ),
                                pad => ::Pad(
                                    lexicals => [
                                        ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'our_declarations', twigil => '', sigil => '$', ), type => '', ),
                                        ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'my_names',         twigil => '', sigil => '$', ), type => '', ),
                                        ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'my_containers',    twigil => '', sigil => '$', ), type => '', ),
                                        ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'before_body',      twigil => '', sigil => '$', ), type => '', ),
                                        ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'after_body',       twigil => '', sigil => '$', ), type => '', ),
                                        ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'result',           twigil => '', sigil => '$', ), type => '', )
                                    ],
                                    namespace => "Lit::Code",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                ),
                                CATCH => '',
                                state => {},
                            ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Lit::Code",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'emit_ruby_body',
                block => ::Lit::Code(
                    body => [
                        ::Call(
                            hyper     => '',
                            arguments => [ ::Val::Buf( buf => '; ', ), ],
                            method    => 'join',
                            invocant  => ::Call( hyper => '>>', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'body', twigil => '.', sigil => '@', ), ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Lit::Code",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'emit_ruby_signature',
                block => ::Lit::Code(
                    body => [ ::Call( hyper => '',              arguments => '', method     => 'emit_ruby', invocant => ::Var( namespace => [],     name       => 'sig', twigil => '.', sigil => '$', ), ), ],
                    sig  => ::Sig( invocant => ::Var( namespace => [],    name   => 'self', twigil          => '',   sigil               => '$', ), positional => [], ),
                    pad  => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Lit::Code",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'emit_ruby_comma_separated_names',
                block => ::Lit::Code(
                    body => [
                        ::Bind( parameters => ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ), arguments => ::Val::Buf( buf => '', ), ),
                        ::Var( namespace => [], name => 'decl', twigil => '', sigil => '$', ),
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Sub(
                                    name  => '',
                                    block => ::Lit::Code(
                                        body => [
                                            ::Bind(
                                                parameters => ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ),
                                                arguments  => ::Apply(
                                                    arguments => [
                                                        ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ),
                                                        ::Apply(
                                                            arguments =>
                                                                [ ::Val::Buf( buf => ',', ), ::Call( hyper => '', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'decl', twigil => '', sigil => '$', ), ), ],
                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                        ),
                                                    ],
                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                ),
                                            ),
                                        ],
                                        sig => ::Sig(
                                            invocant   => ::Val::Undef(),
                                            positional => [
                                                ::Lit::SigArgument(
                                                    is_multidimensional => ::Val::Bit( bit => '0', ),
                                                    has_default         => ::Val::Bit( bit => '0', ),
                                                    value               => ::Val::Undef(),
                                                    is_slurpy           => ::Val::Bit( bit => '0', ),
                                                    is_optional         => ::Val::Bit( bit => '0', ),
                                                    key           => ::Var( namespace => [], name => 'decl', twigil => '', sigil => '$', ),
                                                    is_copy       => ::Val::Bit( bit  => '0', ),
                                                    is_named_only => ::Val::Bit( bit  => '0', ),
                                                    type          => '',
                                                    is_rw => ::Val::Bit( bit => '0', ),
                                                ),
                                            ],
                                        ),
                                        pad => ::Pad(
                                            lexicals => [
                                                ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                                                ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'decl', twigil => '', sigil => '$', ), type => '', )
                                            ],
                                            namespace => "Lit::Code",
                                            parent    => ::Pad(...),
                                            evaluator => ::Sub(...),
                                        ),
                                        CATCH => '',
                                        state => {},
                                    ),
                                ),
                            ],
                            method   => 'map',
                            invocant => ::Apply(
                                arguments => [ ::Call( hyper  => '', arguments => '',           method => 'lexicals', invocant => ::Var( namespace => [], name => 'pad', twigil => '.', sigil => '$', ), ), ],
                                code      => ::Var( namespace => [], name      => 'prefix:<@>', twigil => '',         sigil    => '&', ),
                            ),
                        ),
                        ::Bind(
                            parameters => ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ),
                            arguments => ::Apply( arguments => [ ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ), ::Val::Int( int => '1', ), ], code => ::Var( namespace => [], name => 'substr', twigil => '', sigil => '&', ), ),
                        ),
                        ::Return( result => ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ), ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 's',    twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'decl', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Lit::Code",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'emit_ruby_comma_separated_containers',
                block => ::Lit::Code(
                    body => [
                        ::Bind( parameters => ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ), arguments => ::Val::Buf( buf => '', ), ),
                        ::Var( namespace => [], name => 'decl', twigil => '', sigil => '$', ),
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Sub(
                                    name  => '',
                                    block => ::Lit::Code(
                                        body => [
                                            ::Bind(
                                                parameters => ::Var( namespace => [], name => 'var', twigil => '', sigil => '$', ),
                                                arguments => ::Call( hyper => '', arguments => '', method => 'var', invocant => ::Var( namespace => [], name => 'decl', twigil => '', sigil => '$', ), ),
                                            ),
                                            ::Bind(
                                                parameters => ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ),
                                                arguments  => ::Apply(
                                                    arguments => [
                                                        ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ),
                                                        ::Apply(
                                                            arguments => [
                                                                ::Val::Buf( buf => ',', ),
                                                                ::Apply(
                                                                    arguments => [
                                                                        ::Call( hyper => '', arguments => '', method => 'emit_ruby_container', invocant => ::Var( namespace => [], name => 'var', twigil => '', sigil => '$', ), ),
                                                                        ::Val::Buf( buf => '.new', ),
                                                                    ],
                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                ),
                                                            ],
                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                        ),
                                                    ],
                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                ),
                                            ),
                                        ],
                                        sig => ::Sig(
                                            invocant   => ::Val::Undef(),
                                            positional => [
                                                ::Lit::SigArgument(
                                                    is_multidimensional => ::Val::Bit( bit => '0', ),
                                                    has_default         => ::Val::Bit( bit => '0', ),
                                                    value               => ::Val::Undef(),
                                                    is_slurpy           => ::Val::Bit( bit => '0', ),
                                                    is_optional         => ::Val::Bit( bit => '0', ),
                                                    key           => ::Var( namespace => [], name => 'decl', twigil => '', sigil => '$', ),
                                                    is_copy       => ::Val::Bit( bit  => '0', ),
                                                    is_named_only => ::Val::Bit( bit  => '0', ),
                                                    type          => '',
                                                    is_rw => ::Val::Bit( bit => '0', ),
                                                ),
                                            ],
                                        ),
                                        pad => ::Pad(
                                            lexicals => [
                                                ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'var',  twigil => '', sigil => '$', ), type => '', ),
                                                ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                                                ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'decl', twigil => '', sigil => '$', ), type => '', )
                                            ],
                                            namespace => "Lit::Code",
                                            parent    => ::Pad(...),
                                            evaluator => ::Sub(...),
                                        ),
                                        CATCH => '',
                                        state => {},
                                    ),
                                ),
                            ],
                            method   => 'map',
                            invocant => ::Apply(
                                arguments => [ ::Call( hyper  => '', arguments => '',           method => 'lexicals', invocant => ::Var( namespace => [], name => 'pad', twigil => '.', sigil => '$', ), ), ],
                                code      => ::Var( namespace => [], name      => 'prefix:<@>', twigil => '',         sigil    => '&', ),
                            ),
                        ),
                        ::Bind(
                            parameters => ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ),
                            arguments => ::Apply( arguments => [ ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ), ::Val::Int( int => '1', ), ], code => ::Var( namespace => [], name => 'substr', twigil => '', sigil => '&', ), ),
                        ),
                        ::Return( result => ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ), ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 's',    twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'decl', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Lit::Code",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'emit_ruby_declarations',
                block => ::Lit::Code(
                    body => [
                        ::Var( namespace => [], name => 's',    twigil => '', sigil => '$', ),
                        ::Var( namespace => [], name => 'name', twigil => '', sigil => '$', ),
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Sub(
                                    name  => '',
                                    block => ::Lit::Code(
                                        body => [
                                            ::Bind(
                                                parameters => ::Var( namespace => [], name => 'decl', twigil => '', sigil => '$', ),
                                                arguments  => ::Call(
                                                    hyper     => '',
                                                    arguments => [
                                                        ::Lit::NamedArgument( value => ::Val::Buf( buf => 'my', ), key => ::Val::Buf( buf => 'decl', ), ),
                                                        ::Lit::NamedArgument( value => ::Val::Buf( buf => '', ),   key => ::Val::Buf( buf => 'type', ), ),
                                                        ::Lit::NamedArgument(
                                                            value => ::Call(
                                                                hyper     => '',
                                                                arguments => [
                                                                    ::Lit::NamedArgument( value => ::Val::Buf( buf => '', ), key => ::Val::Buf( buf => 'sigil', ), ),
                                                                    ::Lit::NamedArgument( value => ::Val::Buf( buf => '', ), key => ::Val::Buf( buf => 'twigil', ), ),
                                                                    ::Lit::NamedArgument( value => ::Var( namespace => [], name => 'name', twigil => '', sigil => '$', ), key => ::Val::Buf( buf => 'name', ), ),
                                                                    ::Lit::NamedArgument(
                                                                        value => ::Call( hyper   => '', arguments => [ ::Lit::Array( array => [], ), ], method => 'new', invocant => ::Proto( name => 'Array', ), ),
                                                                        key   => ::Val::Buf( buf => 'namespace', ),
                                                                    ),
                                                                ],
                                                                method   => 'new',
                                                                invocant => ::Proto( name => 'Var', ),
                                                            ),
                                                            key => ::Val::Buf( buf => 'var', ),
                                                        ),
                                                    ],
                                                    method   => 'new',
                                                    invocant => ::Proto( name => 'Decl', ),
                                                ),
                                            ),
                                            ::Bind(
                                                parameters => ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ),
                                                arguments  => ::Apply(
                                                    arguments => [
                                                        ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ),
                                                        ::Apply(
                                                            arguments => [
                                                                ::Call( hyper => '', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'name', twigil => '', sigil => '$', ), ),
                                                                ::Apply(
                                                                    arguments => [ ::Val::Buf( buf => ';', ), ::Apply( arguments => [],          code   => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ), ],
                                                                    code      => ::Var( namespace  => [],     name               => 'infix:<~>', twigil => '',              sigil           => '&', ),
                                                                ),
                                                            ],
                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                        ),
                                                    ],
                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                ),
                                            ),
                                        ],
                                        sig => ::Sig(
                                            invocant   => ::Val::Undef(),
                                            positional => [
                                                ::Lit::SigArgument(
                                                    is_multidimensional => ::Val::Bit( bit => '0', ),
                                                    has_default         => ::Val::Bit( bit => '0', ),
                                                    value               => ::Val::Undef(),
                                                    is_slurpy           => ::Val::Bit( bit => '0', ),
                                                    is_optional         => ::Val::Bit( bit => '0', ),
                                                    key           => ::Var( namespace => [], name => 'name', twigil => '', sigil => '$', ),
                                                    is_copy       => ::Val::Bit( bit  => '0', ),
                                                    is_named_only => ::Val::Bit( bit  => '0', ),
                                                    type          => '',
                                                    is_rw => ::Val::Bit( bit => '0', ),
                                                ),
                                            ],
                                        ),
                                        pad => ::Pad(
                                            lexicals => [
                                                ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'decl', twigil => '', sigil => '$', ), type => '', ),
                                                ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                                                ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'name', twigil => '', sigil => '$', ), type => '', )
                                            ],
                                            namespace => "Lit::Code",
                                            parent    => ::Pad(...),
                                            evaluator => ::Sub(...),
                                        ),
                                        CATCH => '',
                                        state => {},
                                    ),
                                ),
                            ],
                            method   => 'map',
                            invocant => ::Apply(
                                arguments => [ ::Call( hyper  => '', arguments => '',           method => 'lexicals', invocant => ::Var( namespace => [], name => 'pad', twigil => '.', sigil => '$', ), ), ],
                                code      => ::Var( namespace => [], name      => 'prefix:<@>', twigil => '',         sigil    => '&', ),
                            ),
                        ),
                        ::Return( result => ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ), ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 's',    twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'name', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Lit::Code",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'emit_ruby_arguments',
                block => ::Lit::Code(
                    body => [
                        ::Bind(
                            parameters => ::Var( namespace => [], name => 'array_', twigil => '', sigil => '$', ),
                            arguments  => ::Call(
                                hyper     => '',
                                arguments => [
                                    ::Lit::NamedArgument( value => ::Val::Buf( buf => '@', ), key => ::Val::Buf( buf => 'sigil', ), ),
                                    ::Lit::NamedArgument( value => ::Val::Buf( buf => '', ),  key => ::Val::Buf( buf => 'twigil', ), ),
                                    ::Lit::NamedArgument( value => ::Val::Buf( buf => '_', ), key => ::Val::Buf( buf => 'name', ), ),
                                    ::Lit::NamedArgument( value => ::Call( hyper => '', arguments => [ ::Lit::Array( array => [], ), ], method => 'new', invocant => ::Proto( name => 'Array', ), ), key => ::Val::Buf( buf => 'namespace', ), ),
                                ],
                                method   => 'new',
                                invocant => ::Proto( name => 'Var', ),
                            ),
                        ),
                        ::Bind(
                            parameters => ::Var( namespace => [], name => 'hash_', twigil => '', sigil => '$', ),
                            arguments  => ::Call(
                                hyper     => '',
                                arguments => [
                                    ::Lit::NamedArgument( value => ::Val::Buf( buf => '%', ), key => ::Val::Buf( buf => 'sigil', ), ),
                                    ::Lit::NamedArgument( value => ::Val::Buf( buf => '', ),  key => ::Val::Buf( buf => 'twigil', ), ),
                                    ::Lit::NamedArgument( value => ::Val::Buf( buf => '_', ), key => ::Val::Buf( buf => 'name', ), ),
                                    ::Lit::NamedArgument( value => ::Call( hyper => '', arguments => [ ::Lit::Array( array => [], ), ], method => 'new', invocant => ::Proto( name => 'Array', ), ), key => ::Val::Buf( buf => 'namespace', ), ),
                                ],
                                method   => 'new',
                                invocant => ::Proto( name => 'Var', ),
                            ),
                        ),
                        ::Bind(
                            parameters => ::Var( namespace => [], name => 'CAPTURE', twigil => '', sigil => '$', ),
                            arguments  => ::Call(
                                hyper     => '',
                                arguments => [
                                    ::Lit::NamedArgument( value => ::Val::Buf( buf => '$', ),       key => ::Val::Buf( buf => 'sigil', ), ),
                                    ::Lit::NamedArgument( value => ::Val::Buf( buf => '', ),        key => ::Val::Buf( buf => 'twigil', ), ),
                                    ::Lit::NamedArgument( value => ::Val::Buf( buf => 'CAPTURE', ), key => ::Val::Buf( buf => 'name', ), ),
                                    ::Lit::NamedArgument( value => ::Call( hyper => '', arguments => [ ::Lit::Array( array => [], ), ], method => 'new', invocant => ::Proto( name => 'Array', ), ), key => ::Val::Buf( buf => 'namespace', ), ),
                                ],
                                method   => 'new',
                                invocant => ::Proto( name => 'Var', ),
                            ),
                        ),
                        ::Bind(
                            parameters => ::Var( namespace => [], name => 'CAPTURE_decl', twigil => '', sigil => '$', ),
                            arguments  => ::Call(
                                hyper     => '',
                                arguments => [
                                    ::Lit::NamedArgument( value => ::Val::Buf( buf => 'my', ), key => ::Val::Buf( buf => 'decl', ), ),
                                    ::Lit::NamedArgument( value => ::Val::Buf( buf => '', ),   key => ::Val::Buf( buf => 'type', ), ),
                                    ::Lit::NamedArgument( value => ::Var( namespace => [], name => 'CAPTURE', twigil => '', sigil => '$', ), key => ::Val::Buf( buf => 'var', ), ),
                                ],
                                method   => 'new',
                                invocant => ::Proto( name => 'Decl', ),
                            ),
                        ),
                        ::Bind( parameters => ::Var( namespace => [], name => 'str', twigil => '', sigil => '$', ), arguments => ::Val::Buf( buf => '', ), ),
                        ::Bind(
                            parameters => ::Var( namespace => [], name => 'str', twigil => '', sigil => '$', ),
                            arguments  => ::Apply(
                                arguments => [
                                    ::Var( namespace => [], name => 'str', twigil => '', sigil => '$', ),
                                    ::Call( hyper => '', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'CAPTURE_decl', twigil => '', sigil => '$', ), ),
                                ],
                                code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                            ),
                        ),
                        ::Bind(
                            parameters => ::Var( namespace => [], name => 'str', twigil => '', sigil => '$', ),
                            arguments  => ::Apply(
                                arguments => [
                                    ::Var( namespace => [], name => 'str', twigil => '', sigil => '$', ),
                                    ::Call(
                                        hyper     => '',
                                        arguments => '',
                                        method    => 'emit_ruby',
                                        invocant  => ::Call(
                                            hyper     => '',
                                            arguments => [
                                                ::Lit::NamedArgument( value => ::Val::Buf( buf => 'my', ), key => ::Val::Buf( buf => 'decl', ), ),
                                                ::Lit::NamedArgument( value => ::Val::Buf( buf => '', ),   key => ::Val::Buf( buf => 'type', ), ),
                                                ::Lit::NamedArgument( value => ::Var( namespace => [], name => 'array_', twigil => '', sigil => '$', ), key => ::Val::Buf( buf => 'var', ), ),
                                            ],
                                            method   => 'new',
                                            invocant => ::Proto( name => 'Decl', ),
                                        ),
                                    ),
                                ],
                                code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                            ),
                        ),
                        ::Bind(
                            parameters => ::Var( namespace => [], name => 'str', twigil => '', sigil => '$', ),
                            arguments  => ::Apply(
                                arguments => [
                                    ::Var( namespace => [], name => 'str', twigil => '', sigil => '$', ),
                                    ::Apply(
                                        arguments => [
                                            ::Val::Buf( buf => '::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(', ),
                                            ::Apply( arguments => [ ::Val::Char( char => '92', ), ::Val::Buf( buf => '@_));', ), ], code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ), ),
                                        ],
                                        code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                    ),
                                ],
                                code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                            ),
                        ),
                        ::Bind(
                            parameters => ::Var( namespace => [], name => 'bind_array', twigil => '', sigil => '$', ),
                            arguments  => ::Call(
                                hyper     => '',
                                arguments => [
                                    ::Lit::NamedArgument( value => ::Var( namespace => [], name => 'array_', twigil => '', sigil => '$', ), key => ::Val::Buf( buf => 'parameters', ), ),
                                    ::Lit::NamedArgument(
                                        value => ::Call(
                                            hyper     => '',
                                            arguments => [
                                                ::Lit::NamedArgument( value => ::Var( namespace => [],         name => 'CAPTURE',      twigil => '', sigil => '$', ), key => ::Val::Buf( buf => 'invocant', ), ),
                                                ::Lit::NamedArgument( value => ::Val::Buf( buf  => 'array', ), key  => ::Val::Buf( buf => 'method', ), ),
                                                ::Lit::NamedArgument(
                                                    value => ::Call( hyper   => '', arguments => [ ::Lit::Array( array => [], ), ], method => 'new', invocant => ::Proto( name => 'Array', ), ),
                                                    key   => ::Val::Buf( buf => 'arguments', ),
                                                ),
                                            ],
                                            method   => 'new',
                                            invocant => ::Proto( name => 'Call', ),
                                        ),
                                        key => ::Val::Buf( buf => 'arguments', ),
                                    ),
                                ],
                                method   => 'new',
                                invocant => ::Proto( name => 'Assign', ),
                            ),
                        ),
                        ::Bind(
                            parameters => ::Var( namespace => [], name => 'str', twigil => '', sigil => '$', ),
                            arguments  => ::Apply(
                                arguments => [
                                    ::Var( namespace => [], name => 'str', twigil => '', sigil => '$', ),
                                    ::Apply(
                                        arguments => [ ::Call( hyper  => '', arguments => '',          method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'bind_array', twigil => '', sigil => '$', ), ), ::Val::Buf( buf => ';', ), ],
                                        code      => ::Var( namespace => [], name      => 'infix:<~>', twigil => '',          sigil    => '&', ),
                                    ),
                                ],
                                code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                            ),
                        ),
                        ::Bind(
                            parameters => ::Var( namespace => [], name => 'bind_hash', twigil => '', sigil => '$', ),
                            arguments  => ::Call(
                                hyper     => '',
                                arguments => [
                                    ::Lit::NamedArgument( value => ::Var( namespace => [], name => 'hash_', twigil => '', sigil => '$', ), key => ::Val::Buf( buf => 'parameters', ), ),
                                    ::Lit::NamedArgument(
                                        value => ::Call(
                                            hyper     => '',
                                            arguments => [
                                                ::Lit::NamedArgument( value => ::Var( namespace => [],        name => 'CAPTURE',      twigil => '', sigil => '$', ), key => ::Val::Buf( buf => 'invocant', ), ),
                                                ::Lit::NamedArgument( value => ::Val::Buf( buf  => 'hash', ), key  => ::Val::Buf( buf => 'method', ), ),
                                                ::Lit::NamedArgument(
                                                    value => ::Call( hyper   => '', arguments => [ ::Lit::Array( array => [], ), ], method => 'new', invocant => ::Proto( name => 'Array', ), ),
                                                    key   => ::Val::Buf( buf => 'arguments', ),
                                                ),
                                            ],
                                            method   => 'new',
                                            invocant => ::Proto( name => 'Call', ),
                                        ),
                                        key => ::Val::Buf( buf => 'arguments', ),
                                    ),
                                ],
                                method   => 'new',
                                invocant => ::Proto( name => 'Bind', ),
                            ),
                        ),
                        ::Bind(
                            parameters => ::Var( namespace => [], name => 'str', twigil => '', sigil => '$', ),
                            arguments  => ::Apply(
                                arguments => [
                                    ::Var( namespace => [], name => 'str', twigil => '', sigil => '$', ),
                                    ::Apply(
                                        arguments => [ ::Call( hyper  => '', arguments => '',          method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'bind_hash', twigil => '', sigil => '$', ), ), ::Val::Buf( buf => ';', ), ],
                                        code      => ::Var( namespace => [], name      => 'infix:<~>', twigil => '',          sigil    => '&', ),
                                    ),
                                ],
                                code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                            ),
                        ),
                        ::Bind( parameters => ::Var( namespace => [], name => 'i', twigil => '', sigil => '$', ), arguments => ::Val::Int( int => '0', ), ),
                        ::Var( namespace => [], name => 'field', twigil => '', sigil => '$', ),
                        ::Bind(
                            parameters => ::Var( namespace => [], name => 'str', twigil => '', sigil => '$', ),
                            arguments  => ::Apply(
                                arguments => [ ::Var( namespace => [], name => 'str',       twigil => '', sigil => '$', ), ::Val::Buf( buf => '{ my $_param_index = 0; ', ), ],
                                code      => ::Var( namespace   => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                            ),
                        ),
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Sub(
                                    name  => '',
                                    block => ::Lit::Code(
                                        body => [
                                            ::Bind(
                                                parameters => ::Var( namespace => [], name => 'bind_named', twigil => '', sigil => '$', ),
                                                arguments  => ::Call(
                                                    hyper     => '',
                                                    arguments => [
                                                        ::Lit::NamedArgument(
                                                            value => ::Call( hyper   => '', arguments => '', method => 'key', invocant => ::Var( namespace => [], name => 'field', twigil => '', sigil => '$', ), ),
                                                            key   => ::Val::Buf( buf => 'parameters', ),
                                                        ),
                                                        ::Lit::NamedArgument(
                                                            value => ::Call(
                                                                hyper     => '',
                                                                arguments => [
                                                                    ::Lit::NamedArgument( value => ::Var( namespace => [], name => 'hash_', twigil => '', sigil => '$', ), key => ::Val::Buf( buf => 'invocant', ), ),
                                                                    ::Lit::NamedArgument(
                                                                        value => ::Call(
                                                                            hyper     => '',
                                                                            arguments => [
                                                                                ::Lit::Array(
                                                                                    array => [
                                                                                        ::Call(
                                                                                            hyper     => '',
                                                                                            arguments => [
                                                                                                ::Lit::NamedArgument(
                                                                                                    value => ::Call(
                                                                                                        hyper     => '',
                                                                                                        arguments => '',
                                                                                                        method    => 'name',
                                                                                                        invocant =>
                                                                                                            ::Call( hyper => '', arguments => '', method => 'key', invocant => ::Var( namespace => [], name => 'field', twigil => '', sigil => '$', ), ),
                                                                                                    ),
                                                                                                    key => ::Val::Buf( buf => 'buf', ),
                                                                                                ),
                                                                                            ],
                                                                                            method   => 'new',
                                                                                            invocant => ::Proto( name => 'Val::Buf', ),
                                                                                        ),
                                                                                    ],
                                                                                ),
                                                                            ],
                                                                            method   => 'new',
                                                                            invocant => ::Proto( name => 'Array', ),
                                                                        ),
                                                                        key => ::Val::Buf( buf => 'arguments', ),
                                                                    ),
                                                                    ::Lit::NamedArgument( value => ::Val::Buf( buf => 'LOOKUP', ), key => ::Val::Buf( buf => 'method', ), ),
                                                                ],
                                                                method   => 'new',
                                                                invocant => ::Proto( name => 'Call', ),
                                                            ),
                                                            key => ::Val::Buf( buf => 'arguments', ),
                                                        ),
                                                    ],
                                                    method   => 'new',
                                                    invocant => ::Proto( name => 'Bind', ),
                                                ),
                                            ),
                                            ::Bind(
                                                parameters => ::Var( namespace => [], name => 'bind_default', twigil => '', sigil => '$', ),
                                                arguments  => ::Call(
                                                    hyper     => '',
                                                    arguments => [
                                                        ::Lit::NamedArgument(
                                                            value => ::Call( hyper   => '', arguments => '', method => 'key', invocant => ::Var( namespace => [], name => 'field', twigil => '', sigil => '$', ), ),
                                                            key   => ::Val::Buf( buf => 'parameters', ),
                                                        ),
                                                        ::Lit::NamedArgument(
                                                            value => ::Call( hyper   => '', arguments => '', method => 'value', invocant => ::Var( namespace => [], name => 'field', twigil => '', sigil => '$', ), ),
                                                            key   => ::Val::Buf( buf => 'arguments', ),
                                                        ),
                                                    ],
                                                    method   => 'new',
                                                    invocant => ::Proto( name => 'Bind', ),
                                                ),
                                            ),
                                            ::Bind(
                                                parameters => ::Var( namespace => [], name => 'str', twigil => '', sigil => '$', ),
                                                arguments  => ::Apply(
                                                    arguments => [
                                                        ::Var( namespace => [], name => 'str', twigil => '', sigil => '$', ),
                                                        ::Apply(
                                                            arguments => [
                                                                ::Val::Buf( buf => ' if ( ::DISPATCH( $GLOBAL::Code_exists, ', ),
                                                                ::Apply(
                                                                    arguments => [
                                                                        ::Apply(
                                                                            arguments => [
                                                                                ::Val::Buf( buf => ' ', ),
                                                                                ::Apply(
                                                                                    arguments => [
                                                                                        ::Val::Char( char => '39', ),
                                                                                        ::Apply(
                                                                                            arguments => [
                                                                                                ::Val::Buf( buf => 'APPLY', ),
                                                                                                ::Apply(
                                                                                                    arguments => [ ::Val::Char( char => '39', ), ::Val::Buf( buf => ', ', ), ],
                                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                ),
                                                                                            ],
                                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                        ),
                                                                                    ],
                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                ),
                                                                            ],
                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                        ),
                                                                        ::Apply(
                                                                            arguments => [
                                                                                ::Val::Buf( buf => ' ::DISPATCH( ', ),
                                                                                ::Apply(
                                                                                    arguments => [
                                                                                        ::Apply(
                                                                                            arguments => [
                                                                                                ::Val::Buf( buf => ' $Hash__, ', ),
                                                                                                ::Apply(
                                                                                                    arguments => [
                                                                                                        ::Val::Char( char => '39', ),
                                                                                                        ::Apply(
                                                                                                            arguments => [
                                                                                                                ::Val::Buf( buf => 'LOOKUP', ),
                                                                                                                ::Apply(
                                                                                                                    arguments => [ ::Val::Char( char => '39', ), ::Val::Buf( buf => ', ', ), ],
                                                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                                ),
                                                                                                            ],
                                                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                        ),
                                                                                                    ],
                                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                ),
                                                                                            ],
                                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                        ),
                                                                                        ::Apply(
                                                                                            arguments => [
                                                                                                ::Apply(
                                                                                                    arguments => [
                                                                                                        ::Val::Buf( buf => ' ::DISPATCH( $::Str, ', ),
                                                                                                        ::Apply(
                                                                                                            arguments => [
                                                                                                                ::Val::Char( char => '39', ),
                                                                                                                ::Apply(
                                                                                                                    arguments => [
                                                                                                                        ::Val::Buf( buf => 'new', ),
                                                                                                                        ::Apply(
                                                                                                                            arguments => [
                                                                                                                                ::Val::Char( char => '39', ),
                                                                                                                                ::Apply(
                                                                                                                                    arguments => [ ::Val::Buf( buf => ', ', ), ::Val::Char( char => '39', ), ],
                                                                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                                                ),
                                                                                                                            ],
                                                                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                                        ),
                                                                                                                    ],
                                                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                                ),
                                                                                                            ],
                                                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                        ),
                                                                                                    ],
                                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                ),
                                                                                                ::Apply(
                                                                                                    arguments => [
                                                                                                        ::Call(
                                                                                                            hyper     => '',
                                                                                                            arguments => '',
                                                                                                            method    => 'name',
                                                                                                            invocant  => ::Call(
                                                                                                                hyper     => '',
                                                                                                                arguments => '',
                                                                                                                method    => 'key',
                                                                                                                invocant  => ::Var( namespace => [], name => 'field', twigil => '', sigil => '$', ),
                                                                                                            ),
                                                                                                        ),
                                                                                                        ::Apply(
                                                                                                            arguments => [
                                                                                                                ::Apply(
                                                                                                                    arguments => [ ::Val::Char( char => '39', ), ::Val::Buf( buf => ' ) ', ), ],
                                                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                                ),
                                                                                                                ::Apply(
                                                                                                                    arguments => [
                                                                                                                        ::Val::Buf( buf => ' ) )->{_value} ', ),
                                                                                                                        ::Apply(
                                                                                                                            arguments => [
                                                                                                                                ::Val::Buf( buf => ' ) ', ),
                                                                                                                                ::Apply(
                                                                                                                                    arguments => [
                                                                                                                                        ::Val::Buf( buf => ' { ', ),
                                                                                                                                        ::Apply(
                                                                                                                                            arguments => [
                                                                                                                                                ::Call(
                                                                                                                                                    hyper     => '',
                                                                                                                                                    arguments => '',
                                                                                                                                                    method    => 'emit_ruby',
                                                                                                                                                    invocant  => ::Var( namespace => [], name => 'bind_named', twigil => '', sigil => '$', ),
                                                                                                                                                ),
                                                                                                                                                ::Apply(
                                                                                                                                                    arguments => [
                                                                                                                                                        ::Val::Buf( buf => ' } ', ),
                                                                                                                                                        ::Apply(
                                                                                                                                                            arguments => [
                                                                                                                                                                ::Val::Buf( buf => ' elsif ( ::DISPATCH( $GLOBAL::Code_exists, ', ),
                                                                                                                                                                ::Apply(
                                                                                                                                                                    arguments => [
                                                                                                                                                                        ::Apply(
                                                                                                                                                                            arguments => [
                                                                                                                                                                                ::Val::Buf( buf => ' ', ),
                                                                                                                                                                                ::Apply(
                                                                                                                                                                                    arguments => [
                                                                                                                                                                                        ::Val::Char( char => '39', ),
                                                                                                                                                                                        ::Apply(
                                                                                                                                                                                            arguments => [
                                                                                                                                                                                                ::Val::Buf( buf => 'APPLY', ),
                                                                                                                                                                                                ::Apply(
                                                                                                                                                                                                    arguments => [
                                                                                                                                                                                                        ::Val::Char( char => '39', ),
                                                                                                                                                                                                        ::Val::Buf( buf => ', ', ),
                                                                                                                                                                                                    ],
                                                                                                                                                                                                    code => ::Var(
                                                                                                                                                                                                        namespace => [],
                                                                                                                                                                                                        name      => 'infix:<~>',
                                                                                                                                                                                                        twigil    => '',
                                                                                                                                                                                                        sigil     => '&',
                                                                                                                                                                                                    ),
                                                                                                                                                                                                ),
                                                                                                                                                                                            ],
                                                                                                                                                                                            code => ::Var(
                                                                                                                                                                                                namespace => [],
                                                                                                                                                                                                name      => 'infix:<~>',
                                                                                                                                                                                                twigil    => '',
                                                                                                                                                                                                sigil     => '&',
                                                                                                                                                                                            ),
                                                                                                                                                                                        ),
                                                                                                                                                                                    ],
                                                                                                                                                                                    code => ::Var(
                                                                                                                                                                                        namespace => [],
                                                                                                                                                                                        name      => 'infix:<~>',
                                                                                                                                                                                        twigil    => '',
                                                                                                                                                                                        sigil     => '&',
                                                                                                                                                                                    ),
                                                                                                                                                                                ),
                                                                                                                                                                            ],
                                                                                                                                                                            code => ::Var(
                                                                                                                                                                                namespace => [],
                                                                                                                                                                                name      => 'infix:<~>',
                                                                                                                                                                                twigil    => '',
                                                                                                                                                                                sigil     => '&',
                                                                                                                                                                            ),
                                                                                                                                                                        ),
                                                                                                                                                                        ::Apply(
                                                                                                                                                                            arguments => [
                                                                                                                                                                                ::Val::Buf( buf => ' ::DISPATCH( ', ),
                                                                                                                                                                                ::Apply(
                                                                                                                                                                                    arguments => [
                                                                                                                                                                                        ::Apply(
                                                                                                                                                                                            arguments => [
                                                                                                                                                                                                ::Val::Buf( buf => ' $List__, ', ),
                                                                                                                                                                                                ::Apply(
                                                                                                                                                                                                    arguments => [
                                                                                                                                                                                                        ::Val::Char( char => '39', ),
                                                                                                                                                                                                        ::Apply(
                                                                                                                                                                                                            arguments => [
                                                                                                                                                                                                                ::Val::Buf( buf => 'INDEX', ),
                                                                                                                                                                                                                ::Apply(
                                                                                                                                                                                                                    arguments => [
                                                                                                                                                                                                                        ::Val::Char( char => '39', ),
                                                                                                                                                                                                                        ::Val::Buf( buf => ', ', ),
                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                    code => ::Var(
                                                                                                                                                                                                                        namespace => [],
                                                                                                                                                                                                                        name      => 'infix:<~>',
                                                                                                                                                                                                                        twigil    => '',
                                                                                                                                                                                                                        sigil     => '&',
                                                                                                                                                                                                                    ),
                                                                                                                                                                                                                ),
                                                                                                                                                                                                            ],
                                                                                                                                                                                                            code => ::Var(
                                                                                                                                                                                                                namespace => [],
                                                                                                                                                                                                                name      => 'infix:<~>',
                                                                                                                                                                                                                twigil    => '',
                                                                                                                                                                                                                sigil     => '&',
                                                                                                                                                                                                            ),
                                                                                                                                                                                                        ),
                                                                                                                                                                                                    ],
                                                                                                                                                                                                    code => ::Var(
                                                                                                                                                                                                        namespace => [],
                                                                                                                                                                                                        name      => 'infix:<~>',
                                                                                                                                                                                                        twigil    => '',
                                                                                                                                                                                                        sigil     => '&',
                                                                                                                                                                                                    ),
                                                                                                                                                                                                ),
                                                                                                                                                                                            ],
                                                                                                                                                                                            code => ::Var(
                                                                                                                                                                                                namespace => [],
                                                                                                                                                                                                name      => 'infix:<~>',
                                                                                                                                                                                                twigil    => '',
                                                                                                                                                                                                sigil     => '&',
                                                                                                                                                                                            ),
                                                                                                                                                                                        ),
                                                                                                                                                                                        ::Apply(
                                                                                                                                                                                            arguments => [
                                                                                                                                                                                                ::Apply(
                                                                                                                                                                                                    arguments => [
                                                                                                                                                                                                        ::Val::Buf( buf => ' ::DISPATCH( $::Int, ', ),
                                                                                                                                                                                                        ::Apply(
                                                                                                                                                                                                            arguments => [
                                                                                                                                                                                                                ::Val::Char( char => '39', ),
                                                                                                                                                                                                                ::Apply(
                                                                                                                                                                                                                    arguments => [
                                                                                                                                                                                                                        ::Val::Buf( buf => 'new', ),
                                                                                                                                                                                                                        ::Apply(
                                                                                                                                                                                                                            arguments => [
                                                                                                                                                                                                                                ::Val::Char(
                                                                                                                                                                                                                                    char => '39',
                                                                                                                                                                                                                                ),
                                                                                                                                                                                                                                ::Val::Buf(
                                                                                                                                                                                                                                    buf =>
                                                                                                                                                                                                                                        ', $_param_index ) ',
                                                                                                                                                                                                                                ),
                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                            code => ::Var(
                                                                                                                                                                                                                                namespace => [],
                                                                                                                                                                                                                                name      => 'infix:<~>',
                                                                                                                                                                                                                                twigil    => '',
                                                                                                                                                                                                                                sigil     => '&',
                                                                                                                                                                                                                            ),
                                                                                                                                                                                                                        ),
                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                    code => ::Var(
                                                                                                                                                                                                                        namespace => [],
                                                                                                                                                                                                                        name      => 'infix:<~>',
                                                                                                                                                                                                                        twigil    => '',
                                                                                                                                                                                                                        sigil     => '&',
                                                                                                                                                                                                                    ),
                                                                                                                                                                                                                ),
                                                                                                                                                                                                            ],
                                                                                                                                                                                                            code => ::Var(
                                                                                                                                                                                                                namespace => [],
                                                                                                                                                                                                                name      => 'infix:<~>',
                                                                                                                                                                                                                twigil    => '',
                                                                                                                                                                                                                sigil     => '&',
                                                                                                                                                                                                            ),
                                                                                                                                                                                                        ),
                                                                                                                                                                                                    ],
                                                                                                                                                                                                    code => ::Var(
                                                                                                                                                                                                        namespace => [],
                                                                                                                                                                                                        name      => 'infix:<~>',
                                                                                                                                                                                                        twigil    => '',
                                                                                                                                                                                                        sigil     => '&',
                                                                                                                                                                                                    ),
                                                                                                                                                                                                ),
                                                                                                                                                                                                ::Apply(
                                                                                                                                                                                                    arguments => [
                                                                                                                                                                                                        ::Val::Buf( buf => ' ) )->{_value} ', ),
                                                                                                                                                                                                        ::Apply(
                                                                                                                                                                                                            arguments => [
                                                                                                                                                                                                                ::Val::Buf( buf => ' ) ', ),
                                                                                                                                                                                                                ::Apply(
                                                                                                                                                                                                                    arguments => [
                                                                                                                                                                                                                        ::Val::Buf( buf => ' { ', ),
                                                                                                                                                                                                                        ::Apply(
                                                                                                                                                                                                                            arguments => [
                                                                                                                                                                                                                                ::Call(
                                                                                                                                                                                                                                    hyper     => '',
                                                                                                                                                                                                                                    arguments => '',
                                                                                                                                                                                                                                    method => 'emit_ruby',
                                                                                                                                                                                                                                    invocant => ::Call(
                                                                                                                                                                                                                                        hyper     => '',
                                                                                                                                                                                                                                        arguments => '',
                                                                                                                                                                                                                                        method   => 'key',
                                                                                                                                                                                                                                        invocant => ::Var(
                                                                                                                                                                                                                                            namespace =>
                                                                                                                                                                                                                                                [],
                                                                                                                                                                                                                                            name =>
                                                                                                                                                                                                                                                'field',
                                                                                                                                                                                                                                            twigil => '',
                                                                                                                                                                                                                                            sigil  => '$',
                                                                                                                                                                                                                                        ),
                                                                                                                                                                                                                                    ),
                                                                                                                                                                                                                                ),
                                                                                                                                                                                                                                ::Apply(
                                                                                                                                                                                                                                    arguments => [
                                                                                                                                                                                                                                        ::Val::Buf(
                                                                                                                                                                                                                                            buf =>
                                                                                                                                                                                                                                                ' = ::DISPATCH( ',
                                                                                                                                                                                                                                        ),
                                                                                                                                                                                                                                        ::Apply(
                                                                                                                                                                                                                                            arguments => [
                                                                                                                                                                                                                                                ::Apply(
                                                                                                                                                                                                                                                    arguments =>
                                                                                                                                                                                                                                                        [
                                                                                                                                                                                                                                                        ::Val::Buf(
                                                                                                                                                                                                                                                            buf =>
                                                                                                                                                                                                                                                                ' $List__, ',
                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                        ,
                                                                                                                                                                                                                                                        ::Apply(
                                                                                                                                                                                                                                                            arguments =>
                                                                                                                                                                                                                                                                [
                                                                                                                                                                                                                                                                ::Val::Char(
                                                                                                                                                                                                                                                                    char =>
                                                                                                                                                                                                                                                                        '39',
                                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                                ,
                                                                                                                                                                                                                                                                ::Apply(
                                                                                                                                                                                                                                                                    arguments =>
                                                                                                                                                                                                                                                                        [
                                                                                                                                                                                                                                                                        ::Val::Buf(
                                                                                                                                                                                                                                                                            buf =>
                                                                                                                                                                                                                                                                                'INDEX',
                                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                                        ,
                                                                                                                                                                                                                                                                        ::Apply(
                                                                                                                                                                                                                                                                            arguments =>
                                                                                                                                                                                                                                                                                [
                                                                                                                                                                                                                                                                                ::Val::Char(
                                                                                                                                                                                                                                                                                    char =>
                                                                                                                                                                                                                                                                                        '39',
                                                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                                                ,
                                                                                                                                                                                                                                                                                ::Val::Buf(
                                                                                                                                                                                                                                                                                    buf =>
                                                                                                                                                                                                                                                                                        ', ',
                                                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                                                ,
                                                                                                                                                                                                                                                                                ]
                                                                                                                                                                                                                                                                            ,
                                                                                                                                                                                                                                                                            code =>
                                                                                                                                                                                                                                                                                ::Var(
                                                                                                                                                                                                                                                                                namespace =>
                                                                                                                                                                                                                                                                                    [
                                                                                                                                                                                                                                                                                    ]
                                                                                                                                                                                                                                                                                ,
                                                                                                                                                                                                                                                                                name =>
                                                                                                                                                                                                                                                                                    'infix:<~>',
                                                                                                                                                                                                                                                                                twigil =>
                                                                                                                                                                                                                                                                                    '',
                                                                                                                                                                                                                                                                                sigil =>
                                                                                                                                                                                                                                                                                    '&',
                                                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                                                            ,
                                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                                        ,
                                                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                                                    ,
                                                                                                                                                                                                                                                                    code =>
                                                                                                                                                                                                                                                                        ::Var(
                                                                                                                                                                                                                                                                        namespace =>
                                                                                                                                                                                                                                                                            [
                                                                                                                                                                                                                                                                            ]
                                                                                                                                                                                                                                                                        ,
                                                                                                                                                                                                                                                                        name =>
                                                                                                                                                                                                                                                                            'infix:<~>',
                                                                                                                                                                                                                                                                        twigil =>
                                                                                                                                                                                                                                                                            '',
                                                                                                                                                                                                                                                                        sigil =>
                                                                                                                                                                                                                                                                            '&',
                                                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                                                    ,
                                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                                ,
                                                                                                                                                                                                                                                                ]
                                                                                                                                                                                                                                                            ,
                                                                                                                                                                                                                                                            code =>
                                                                                                                                                                                                                                                                ::Var(
                                                                                                                                                                                                                                                                namespace =>
                                                                                                                                                                                                                                                                    [
                                                                                                                                                                                                                                                                    ]
                                                                                                                                                                                                                                                                ,
                                                                                                                                                                                                                                                                name =>
                                                                                                                                                                                                                                                                    'infix:<~>',
                                                                                                                                                                                                                                                                twigil =>
                                                                                                                                                                                                                                                                    '',
                                                                                                                                                                                                                                                                sigil =>
                                                                                                                                                                                                                                                                    '&',
                                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                                            ,
                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                        ,
                                                                                                                                                                                                                                                        ],
                                                                                                                                                                                                                                                    code =>
                                                                                                                                                                                                                                                        ::Var(
                                                                                                                                                                                                                                                        namespace =>
                                                                                                                                                                                                                                                            [
                                                                                                                                                                                                                                                            ]
                                                                                                                                                                                                                                                        ,
                                                                                                                                                                                                                                                        name =>
                                                                                                                                                                                                                                                            'infix:<~>',
                                                                                                                                                                                                                                                        twigil =>
                                                                                                                                                                                                                                                            '',
                                                                                                                                                                                                                                                        sigil =>
                                                                                                                                                                                                                                                            '&',
                                                                                                                                                                                                                                                        ),
                                                                                                                                                                                                                                                ),
                                                                                                                                                                                                                                                ::Apply(
                                                                                                                                                                                                                                                    arguments =>
                                                                                                                                                                                                                                                        [
                                                                                                                                                                                                                                                        ::Apply(
                                                                                                                                                                                                                                                            arguments =>
                                                                                                                                                                                                                                                                [
                                                                                                                                                                                                                                                                ::Val::Buf(
                                                                                                                                                                                                                                                                    buf =>
                                                                                                                                                                                                                                                                        ' ::DISPATCH( $::Int, ',
                                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                                ,
                                                                                                                                                                                                                                                                ::Apply(
                                                                                                                                                                                                                                                                    arguments =>
                                                                                                                                                                                                                                                                        [
                                                                                                                                                                                                                                                                        ::Val::Char(
                                                                                                                                                                                                                                                                            char =>
                                                                                                                                                                                                                                                                                '39',
                                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                                        ,
                                                                                                                                                                                                                                                                        ::Apply(
                                                                                                                                                                                                                                                                            arguments =>
                                                                                                                                                                                                                                                                                [
                                                                                                                                                                                                                                                                                ::Val::Buf(
                                                                                                                                                                                                                                                                                    buf =>
                                                                                                                                                                                                                                                                                        'new',
                                                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                                                ,
                                                                                                                                                                                                                                                                                ::Apply(
                                                                                                                                                                                                                                                                                    arguments =>
                                                                                                                                                                                                                                                                                        [
                                                                                                                                                                                                                                                                                        ::Val::Char(
                                                                                                                                                                                                                                                                                            char =>
                                                                                                                                                                                                                                                                                                '39',
                                                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                                                        ,
                                                                                                                                                                                                                                                                                        ::Val::Buf(
                                                                                                                                                                                                                                                                                            buf =>
                                                                                                                                                                                                                                                                                                ', $_param_index++ ) ',
                                                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                                                        ,
                                                                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                                                                    ,
                                                                                                                                                                                                                                                                                    code =>
                                                                                                                                                                                                                                                                                        ::Var(
                                                                                                                                                                                                                                                                                        namespace =>
                                                                                                                                                                                                                                                                                            [
                                                                                                                                                                                                                                                                                            ]
                                                                                                                                                                                                                                                                                        ,
                                                                                                                                                                                                                                                                                        name =>
                                                                                                                                                                                                                                                                                            'infix:<~>',
                                                                                                                                                                                                                                                                                        twigil =>
                                                                                                                                                                                                                                                                                            '',
                                                                                                                                                                                                                                                                                        sigil =>
                                                                                                                                                                                                                                                                                            '&',
                                                                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                                                                    ,
                                                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                                                ,
                                                                                                                                                                                                                                                                                ]
                                                                                                                                                                                                                                                                            ,
                                                                                                                                                                                                                                                                            code =>
                                                                                                                                                                                                                                                                                ::Var(
                                                                                                                                                                                                                                                                                namespace =>
                                                                                                                                                                                                                                                                                    [
                                                                                                                                                                                                                                                                                    ]
                                                                                                                                                                                                                                                                                ,
                                                                                                                                                                                                                                                                                name =>
                                                                                                                                                                                                                                                                                    'infix:<~>',
                                                                                                                                                                                                                                                                                twigil =>
                                                                                                                                                                                                                                                                                    '',
                                                                                                                                                                                                                                                                                sigil =>
                                                                                                                                                                                                                                                                                    '&',
                                                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                                                            ,
                                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                                        ,
                                                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                                                    ,
                                                                                                                                                                                                                                                                    code =>
                                                                                                                                                                                                                                                                        ::Var(
                                                                                                                                                                                                                                                                        namespace =>
                                                                                                                                                                                                                                                                            [
                                                                                                                                                                                                                                                                            ]
                                                                                                                                                                                                                                                                        ,
                                                                                                                                                                                                                                                                        name =>
                                                                                                                                                                                                                                                                            'infix:<~>',
                                                                                                                                                                                                                                                                        twigil =>
                                                                                                                                                                                                                                                                            '',
                                                                                                                                                                                                                                                                        sigil =>
                                                                                                                                                                                                                                                                            '&',
                                                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                                                    ,
                                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                                ,
                                                                                                                                                                                                                                                                ]
                                                                                                                                                                                                                                                            ,
                                                                                                                                                                                                                                                            code =>
                                                                                                                                                                                                                                                                ::Var(
                                                                                                                                                                                                                                                                namespace =>
                                                                                                                                                                                                                                                                    [
                                                                                                                                                                                                                                                                    ]
                                                                                                                                                                                                                                                                ,
                                                                                                                                                                                                                                                                name =>
                                                                                                                                                                                                                                                                    'infix:<~>',
                                                                                                                                                                                                                                                                twigil =>
                                                                                                                                                                                                                                                                    '',
                                                                                                                                                                                                                                                                sigil =>
                                                                                                                                                                                                                                                                    '&',
                                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                                            ,
                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                        ,
                                                                                                                                                                                                                                                        ::Apply(
                                                                                                                                                                                                                                                            arguments =>
                                                                                                                                                                                                                                                                [
                                                                                                                                                                                                                                                                ::Val::Buf(
                                                                                                                                                                                                                                                                    buf =>
                                                                                                                                                                                                                                                                        ' ); ',
                                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                                ,
                                                                                                                                                                                                                                                                ::Val::Buf(
                                                                                                                                                                                                                                                                    buf =>
                                                                                                                                                                                                                                                                        ' } ',
                                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                                ,
                                                                                                                                                                                                                                                                ]
                                                                                                                                                                                                                                                            ,
                                                                                                                                                                                                                                                            code =>
                                                                                                                                                                                                                                                                ::Var(
                                                                                                                                                                                                                                                                namespace =>
                                                                                                                                                                                                                                                                    [
                                                                                                                                                                                                                                                                    ]
                                                                                                                                                                                                                                                                ,
                                                                                                                                                                                                                                                                name =>
                                                                                                                                                                                                                                                                    'infix:<~>',
                                                                                                                                                                                                                                                                twigil =>
                                                                                                                                                                                                                                                                    '',
                                                                                                                                                                                                                                                                sigil =>
                                                                                                                                                                                                                                                                    '&',
                                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                                            ,
                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                        ,
                                                                                                                                                                                                                                                        ],
                                                                                                                                                                                                                                                    code =>
                                                                                                                                                                                                                                                        ::Var(
                                                                                                                                                                                                                                                        namespace =>
                                                                                                                                                                                                                                                            [
                                                                                                                                                                                                                                                            ]
                                                                                                                                                                                                                                                        ,
                                                                                                                                                                                                                                                        name =>
                                                                                                                                                                                                                                                            'infix:<~>',
                                                                                                                                                                                                                                                        twigil =>
                                                                                                                                                                                                                                                            '',
                                                                                                                                                                                                                                                        sigil =>
                                                                                                                                                                                                                                                            '&',
                                                                                                                                                                                                                                                        ),
                                                                                                                                                                                                                                                ),
                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                            code => ::Var(
                                                                                                                                                                                                                                                namespace =>
                                                                                                                                                                                                                                                    [],
                                                                                                                                                                                                                                                name =>
                                                                                                                                                                                                                                                    'infix:<~>',
                                                                                                                                                                                                                                                twigil =>
                                                                                                                                                                                                                                                    '',
                                                                                                                                                                                                                                                sigil =>
                                                                                                                                                                                                                                                    '&',
                                                                                                                                                                                                                                            ),
                                                                                                                                                                                                                                        ),
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                    code => ::Var(
                                                                                                                                                                                                                                        namespace => [],
                                                                                                                                                                                                                                        name =>
                                                                                                                                                                                                                                            'infix:<~>',
                                                                                                                                                                                                                                        twigil => '',
                                                                                                                                                                                                                                        sigil  => '&',
                                                                                                                                                                                                                                    ),
                                                                                                                                                                                                                                ),
                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                            code => ::Var(
                                                                                                                                                                                                                                namespace => [],
                                                                                                                                                                                                                                name      => 'infix:<~>',
                                                                                                                                                                                                                                twigil    => '',
                                                                                                                                                                                                                                sigil     => '&',
                                                                                                                                                                                                                            ),
                                                                                                                                                                                                                        ),
                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                    code => ::Var(
                                                                                                                                                                                                                        namespace => [],
                                                                                                                                                                                                                        name      => 'infix:<~>',
                                                                                                                                                                                                                        twigil    => '',
                                                                                                                                                                                                                        sigil     => '&',
                                                                                                                                                                                                                    ),
                                                                                                                                                                                                                ),
                                                                                                                                                                                                            ],
                                                                                                                                                                                                            code => ::Var(
                                                                                                                                                                                                                namespace => [],
                                                                                                                                                                                                                name      => 'infix:<~>',
                                                                                                                                                                                                                twigil    => '',
                                                                                                                                                                                                                sigil     => '&',
                                                                                                                                                                                                            ),
                                                                                                                                                                                                        ),
                                                                                                                                                                                                    ],
                                                                                                                                                                                                    code => ::Var(
                                                                                                                                                                                                        namespace => [],
                                                                                                                                                                                                        name      => 'infix:<~>',
                                                                                                                                                                                                        twigil    => '',
                                                                                                                                                                                                        sigil     => '&',
                                                                                                                                                                                                    ),
                                                                                                                                                                                                ),
                                                                                                                                                                                            ],
                                                                                                                                                                                            code => ::Var(
                                                                                                                                                                                                namespace => [],
                                                                                                                                                                                                name      => 'infix:<~>',
                                                                                                                                                                                                twigil    => '',
                                                                                                                                                                                                sigil     => '&',
                                                                                                                                                                                            ),
                                                                                                                                                                                        ),
                                                                                                                                                                                    ],
                                                                                                                                                                                    code => ::Var(
                                                                                                                                                                                        namespace => [],
                                                                                                                                                                                        name      => 'infix:<~>',
                                                                                                                                                                                        twigil    => '',
                                                                                                                                                                                        sigil     => '&',
                                                                                                                                                                                    ),
                                                                                                                                                                                ),
                                                                                                                                                                            ],
                                                                                                                                                                            code => ::Var(
                                                                                                                                                                                namespace => [],
                                                                                                                                                                                name      => 'infix:<~>',
                                                                                                                                                                                twigil    => '',
                                                                                                                                                                                sigil     => '&',
                                                                                                                                                                            ),
                                                                                                                                                                        ),
                                                                                                                                                                    ],
                                                                                                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                                                                                ),
                                                                                                                                                            ],
                                                                                                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                                                                        ),
                                                                                                                                                    ],
                                                                                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                                                                ),
                                                                                                                                            ],
                                                                                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                                                        ),
                                                                                                                                    ],
                                                                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                                                ),
                                                                                                                            ],
                                                                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                                        ),
                                                                                                                    ],
                                                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                                ),
                                                                                                            ],
                                                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                        ),
                                                                                                    ],
                                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                ),
                                                                                            ],
                                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                        ),
                                                                                    ],
                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                ),
                                                                            ],
                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                        ),
                                                                    ],
                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                ),
                                                            ],
                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                        ),
                                                    ],
                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                ),
                                            ),
                                            ::If(
                                                body => ::Lit::Code(
                                                    body => [
                                                        ::Bind(
                                                            parameters => ::Var( namespace => [], name => 'str', twigil => '', sigil => '$', ),
                                                            arguments  => ::Apply(
                                                                arguments => [
                                                                    ::Var( namespace => [], name => 'str', twigil => '', sigil => '$', ),
                                                                    ::Apply(
                                                                        arguments => [
                                                                            ::Val::Buf( buf => ' else { ', ),
                                                                            ::Apply(
                                                                                arguments => [
                                                                                    ::Call( hyper => '', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'bind_default', twigil => '', sigil => '$', ), ),
                                                                                    ::Val::Buf( buf => ' } ', ),
                                                                                ],
                                                                                code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                            ),
                                                                        ],
                                                                        code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                    ),
                                                                ],
                                                                code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                            ),
                                                        ),
                                                    ],
                                                    sig => ::Sig( invocant => '', positional => [], ),
                                                    pad   => ::Pad( lexicals => [], namespace => "Lit::Code", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                    CATCH => '',
                                                    state => {},
                                                ),
                                                cond => ::Call(
                                                    hyper     => '',
                                                    arguments => '',
                                                    method    => 'bit',
                                                    invocant  => ::Call( hyper => '', arguments => '', method => 'has_default', invocant => ::Var( namespace => [], name => 'field', twigil => '', sigil => '$', ), ),
                                                ),
                                                otherwise => '',
                                            ),
                                            ::Bind(
                                                parameters => ::Var( namespace => [], name => 'i', twigil => '', sigil => '$', ),
                                                arguments  => ::Apply(
                                                    arguments => [ ::Var( namespace => [], name => 'i',         twigil => '', sigil => '$', ), ::Val::Int( int => '1', ), ],
                                                    code      => ::Var( namespace   => [], name => 'infix:<+>', twigil => '', sigil => '&', ),
                                                ),
                                            ),
                                        ],
                                        sig => ::Sig(
                                            invocant   => ::Val::Undef(),
                                            positional => [
                                                ::Lit::SigArgument(
                                                    is_multidimensional => ::Val::Bit( bit => '0', ),
                                                    has_default         => ::Val::Bit( bit => '0', ),
                                                    value               => ::Val::Undef(),
                                                    is_slurpy           => ::Val::Bit( bit => '0', ),
                                                    is_optional         => ::Val::Bit( bit => '0', ),
                                                    key           => ::Var( namespace => [], name => 'field', twigil => '', sigil => '$', ),
                                                    is_copy       => ::Val::Bit( bit  => '0', ),
                                                    is_named_only => ::Val::Bit( bit  => '0', ),
                                                    type          => '',
                                                    is_rw => ::Val::Bit( bit => '0', ),
                                                ),
                                            ],
                                        ),
                                        pad => ::Pad(
                                            lexicals => [
                                                ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'bind_named',   twigil => '', sigil => '$', ), type => '', ),
                                                ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'bind_default', twigil => '', sigil => '$', ), type => '', ),
                                                ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',            twigil => '', sigil => '@', ), type => '', ),
                                                ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'field',        twigil => '', sigil => '$', ), type => '', )
                                            ],
                                            namespace => "Lit::Code",
                                            parent    => ::Pad(...),
                                            evaluator => ::Sub(...),
                                        ),
                                        CATCH => '',
                                        state => {},
                                    ),
                                ),
                            ],
                            method   => 'map',
                            invocant => ::Apply(
                                arguments => [ ::Call( hyper  => '', arguments => '',           method => 'positional', invocant => ::Var( namespace => [], name => 'sig', twigil => '.', sigil => '$', ), ), ],
                                code      => ::Var( namespace => [], name      => 'prefix:<@>', twigil => '',           sigil    => '&', ),
                            ),
                        ),
                        ::Bind(
                            parameters => ::Var( namespace => [], name => 'str', twigil => '', sigil => '$', ),
                            arguments =>
                                ::Apply( arguments => [ ::Var( namespace => [], name => 'str', twigil => '', sigil => '$', ), ::Val::Buf( buf => '} ', ), ], code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ), ),
                        ),
                        ::Return( result => ::Var( namespace => [], name => 'str', twigil => '', sigil => '$', ), ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'array_',       twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'hash_',        twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'CAPTURE',      twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'CAPTURE_decl', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'str',          twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'bind_array',   twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'bind_hash',    twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'i',            twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'field',        twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',            twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self',         twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Lit::Code",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Lit::Code", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Lit::Code',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'emit_ruby',
                block => ::Lit::Code(
                    body => [
                        ::Bind( parameters => ::Var( namespace => [], name => 'fields', twigil => '', sigil => '$', ), arguments => ::Var( namespace => [], name => 'fields', twigil => '.', sigil => '@', ), ),
                        ::Bind( parameters => ::Var( namespace => [], name => 'str',    twigil => '', sigil => '$', ), arguments => ::Val::Buf( buf  => '', ), ),
                        ::Var( namespace => [], name => 'field', twigil => '', sigil => '$', ),
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Sub(
                                    name  => '',
                                    block => ::Lit::Code(
                                        body => [
                                            ::Bind(
                                                parameters => ::Var( namespace => [], name => 'str', twigil => '', sigil => '$', ),
                                                arguments  => ::Apply(
                                                    arguments => [
                                                        ::Var( namespace => [], name => 'str', twigil => '', sigil => '$', ),
                                                        ::Apply(
                                                            arguments => [
                                                                ::Val::Buf( buf => ', Ruddy::NamedArgument.new(', ),
                                                                ::Apply(
                                                                    arguments => [
                                                                        ::Call(
                                                                            hyper     => '',
                                                                            arguments => '',
                                                                            method    => 'emit_ruby',
                                                                            invocant  => ::Call(
                                                                                hyper     => '',
                                                                                arguments => [ ::Val::Int( int => '0', ), ],
                                                                                method    => 'INDEX',
                                                                                invocant  => ::Var( namespace => [], name => 'field', twigil => '', sigil => '$', ),
                                                                            ),
                                                                        ),
                                                                        ::Apply(
                                                                            arguments => [
                                                                                ::Val::Buf( buf => ', ', ),
                                                                                ::Apply(
                                                                                    arguments => [
                                                                                        ::Call(
                                                                                            hyper     => '',
                                                                                            arguments => '',
                                                                                            method    => 'emit_ruby',
                                                                                            invocant  => ::Call(
                                                                                                hyper     => '',
                                                                                                arguments => [ ::Val::Int( int => '1', ), ],
                                                                                                method    => 'INDEX',
                                                                                                invocant  => ::Var( namespace => [], name => 'field', twigil => '', sigil => '$', ),
                                                                                            ),
                                                                                        ),
                                                                                        ::Val::Buf( buf => ')', ),
                                                                                    ],
                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                ),
                                                                            ],
                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                        ),
                                                                    ],
                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                ),
                                                            ],
                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                        ),
                                                    ],
                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                ),
                                            ),
                                        ],
                                        sig => ::Sig(
                                            invocant   => ::Val::Undef(),
                                            positional => [
                                                ::Lit::SigArgument(
                                                    is_multidimensional => ::Val::Bit( bit => '0', ),
                                                    has_default         => ::Val::Bit( bit => '0', ),
                                                    value               => ::Val::Undef(),
                                                    is_slurpy           => ::Val::Bit( bit => '0', ),
                                                    is_optional         => ::Val::Bit( bit => '0', ),
                                                    key           => ::Var( namespace => [], name => 'field', twigil => '', sigil => '$', ),
                                                    is_copy       => ::Val::Bit( bit  => '0', ),
                                                    is_named_only => ::Val::Bit( bit  => '0', ),
                                                    type          => '',
                                                    is_rw => ::Val::Bit( bit => '0', ),
                                                ),
                                            ],
                                        ),
                                        pad => ::Pad(
                                            lexicals => [
                                                ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',     twigil => '', sigil => '@', ), type => '', ),
                                                ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'field', twigil => '', sigil => '$', ), type => '', )
                                            ],
                                            namespace => "Lit::Object",
                                            parent    => ::Pad(...),
                                            evaluator => ::Sub(...),
                                        ),
                                        CATCH => '',
                                        state => {},
                                    ),
                                ),
                            ],
                            method   => 'map',
                            invocant => ::Apply( arguments => [ ::Var( namespace => [], name => 'fields', twigil => '', sigil => '$', ), ], code => ::Var( namespace => [], name => 'prefix:<@>', twigil => '', sigil => '&', ), ),
                        ),
                        ::Bind(
                            parameters => ::Var( namespace => [], name => 'str', twigil => '', sigil => '$', ),
                            arguments => ::Apply( arguments => [ ::Var( namespace => [], name => 'str', twigil => '', sigil => '$', ), ::Val::Int( int => '1', ), ], code => ::Var( namespace => [], name => 'substr', twigil => '', sigil => '&', ), ),
                        ),
                        ::Apply(
                            arguments => [
                                ::Val::Buf( buf => ' ', ),
                                ::Apply(
                                    arguments => [
                                        ::Var( namespace => [], name => 'class', twigil => '.', sigil => '$', ),
                                        ::Apply(
                                            arguments => [
                                                ::Val::Buf( buf => '.m_new(nil,nil,[ ', ),
                                                ::Apply(
                                                    arguments => [
                                                        ::Var( namespace => [], name => 'str', twigil => '', sigil => '$', ),
                                                        ::Apply(
                                                            arguments => [ ::Val::Buf( buf => ' ])', ), ::Apply( arguments => [],          code   => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ), ],
                                                            code      => ::Var( namespace  => [],       name               => 'infix:<~>', twigil => '',              sigil           => '&', ),
                                                        ),
                                                    ],
                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                ),
                                            ],
                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                        ),
                                    ],
                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                ),
                            ],
                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'fields', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'str',    twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'field',  twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',      twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self',   twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Lit::Object",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Lit::Object", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Lit::Object',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'emit_ruby',
                block => ::Lit::Code(
                    body => [
                        ::Bind( parameters => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ), arguments => ::Var( namespace => [], name => 'parameters', twigil => '.', sigil => '$', ), ),
                        ::If(
                            body => ::Lit::Code(
                                body => [
                                    ::Bind(
                                        parameters => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ),
                                        arguments  => ::Call(
                                            hyper     => '',
                                            arguments => [
                                                ::Lit::NamedArgument(
                                                    value => ::Call(
                                                        hyper     => '',
                                                        arguments => [
                                                            ::Lit::NamedArgument( value => ::Val::Buf( buf => 'ternary:<?? !!>', ), key => ::Val::Buf( buf => 'name', ), ),
                                                            ::Lit::NamedArgument( value => ::Val::Buf( buf => '', ),                key => ::Val::Buf( buf => 'twigil', ), ),
                                                            ::Lit::NamedArgument( value => ::Val::Buf( buf => '&', ),               key => ::Val::Buf( buf => 'sigil', ), ),
                                                            ::Lit::NamedArgument(
                                                                value => ::Call( hyper   => '', arguments => [ ::Lit::Array( array => [ ::Val::Buf( buf => 'GLOBAL', ), ], ), ], method => 'new', invocant => ::Proto( name => 'Array', ), ),
                                                                key   => ::Val::Buf( buf => 'namespace', ),
                                                            ),
                                                        ],
                                                        method   => 'new',
                                                        invocant => ::Proto( name => 'Var', ),
                                                    ),
                                                    key => ::Val::Buf( buf => 'code', ),
                                                ),
                                                ::Lit::NamedArgument(
                                                    value => ::Call(
                                                        hyper     => '',
                                                        arguments => [
                                                            ::Lit::Array(
                                                                array => [
                                                                    ::Call(
                                                                        hyper     => '',
                                                                        arguments => [
                                                                            ::Lit::NamedArgument(
                                                                                value => ::Call(
                                                                                    hyper     => '',
                                                                                    arguments => [ ::Lit::Array( array => [ ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ), ], ), ],
                                                                                    method    => 'new',
                                                                                    invocant => ::Proto( name => 'Array', ),
                                                                                ),
                                                                                key => ::Val::Buf( buf => 'arguments', ),
                                                                            ),
                                                                            ::Lit::NamedArgument(
                                                                                value => ::Call(
                                                                                    hyper     => '',
                                                                                    arguments => [
                                                                                        ::Lit::NamedArgument( value => ::Val::Buf( buf => 'VAR_defined', ), key => ::Val::Buf( buf => 'name', ), ),
                                                                                        ::Lit::NamedArgument( value => ::Val::Buf( buf => '', ),            key => ::Val::Buf( buf => 'twigil', ), ),
                                                                                        ::Lit::NamedArgument( value => ::Val::Buf( buf => '&', ),           key => ::Val::Buf( buf => 'sigil', ), ),
                                                                                        ::Lit::NamedArgument(
                                                                                            value => ::Call(
                                                                                                hyper     => '',
                                                                                                arguments => [ ::Lit::Array( array => [ ::Val::Buf( buf => 'GLOBAL', ), ], ), ],
                                                                                                method    => 'new',
                                                                                                invocant => ::Proto( name => 'Array', ),
                                                                                            ),
                                                                                            key => ::Val::Buf( buf => 'namespace', ),
                                                                                        ),
                                                                                    ],
                                                                                    method   => 'new',
                                                                                    invocant => ::Proto( name => 'Var', ),
                                                                                ),
                                                                                key => ::Val::Buf( buf => 'code', ),
                                                                            ),
                                                                        ],
                                                                        method   => 'new',
                                                                        invocant => ::Proto( name => 'Apply', ),
                                                                    ),
                                                                    ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ),
                                                                    ::Call(
                                                                        hyper     => '',
                                                                        arguments => [
                                                                            ::Lit::Pair( value => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ), key => ::Val::Buf( buf => 'parameters', ), ),
                                                                            ::Lit::Pair(
                                                                                value => ::Call(
                                                                                    hyper     => '',
                                                                                    arguments => [
                                                                                        ::Lit::Pair(
                                                                                            value => ::Call(
                                                                                                hyper     => '',
                                                                                                arguments => [
                                                                                                    ::Lit::NamedArgument( value => ::Val::Buf( buf => '::Scalar', ), key => ::Val::Buf( buf => 'name', ), ),
                                                                                                    ::Lit::NamedArgument( value => ::Val::Buf( buf => '', ),         key => ::Val::Buf( buf => 'twigil', ), ),
                                                                                                    ::Lit::NamedArgument( value => ::Val::Buf( buf => '$', ),        key => ::Val::Buf( buf => 'sigil', ), ),
                                                                                                    ::Lit::NamedArgument(
                                                                                                        value => ::Call( hyper => '', arguments => [ ::Lit::Array( array => [], ), ], method => 'new', invocant => ::Proto( name => 'Array', ), ),
                                                                                                        key => ::Val::Buf( buf => 'namespace', ),
                                                                                                    ),
                                                                                                ],
                                                                                                method   => 'new',
                                                                                                invocant => ::Proto( name => 'Var', ),
                                                                                            ),
                                                                                            key => ::Val::Buf( buf => 'invocant', ),
                                                                                        ),
                                                                                        ::Lit::Pair( value => ::Val::Buf( buf => 'new', ), key => ::Val::Buf( buf => 'method', ), ),
                                                                                        ::Lit::Pair( value => ::Val::Buf( buf => '', ),    key => ::Val::Buf( buf => 'hyper', ), ),
                                                                                    ],
                                                                                    method   => 'new',
                                                                                    invocant => ::Proto( name => 'Call', ),
                                                                                ),
                                                                                key => ::Val::Buf( buf => 'arguments', ),
                                                                            ),
                                                                        ],
                                                                        method   => 'new',
                                                                        invocant => ::Proto( name => 'Bind', ),
                                                                    ),
                                                                ],
                                                            ),
                                                        ],
                                                        method   => 'new',
                                                        invocant => ::Proto( name => 'Array', ),
                                                    ),
                                                    key => ::Val::Buf( buf => 'arguments', ),
                                                ),
                                            ],
                                            method   => 'new',
                                            invocant => ::Proto( name => 'Apply', ),
                                        ),
                                    ),
                                ],
                                sig => ::Sig( invocant => '', positional => [], ),
                                pad   => ::Pad( lexicals => [], namespace => "Assign", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                CATCH => '',
                                state => {},
                            ),
                            cond => ::Apply(
                                arguments => [
                                    ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'Var', ), ], method => 'isa', invocant => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ), ),
                                    ::Apply(
                                        arguments => [ ::Call( hyper  => '', arguments => '',           method => 'namespace', invocant => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ), ), ],
                                        code      => ::Var( namespace => [], name      => 'prefix:<@>', twigil => '',          sigil    => '&', ),
                                    ),
                                ],
                                code => ::Var( namespace => [], name => 'infix:<&&>', twigil => '', sigil => '&', ),
                            ),
                            otherwise => '',
                        ),
                        ::Apply(
                            arguments => [
                                ::Val::Buf( buf => ' ', ),
                                ::Apply(
                                    arguments => [
                                        ::Call( hyper => '', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ), ),
                                        ::Apply(
                                            arguments => [
                                                ::Val::Buf( buf => '._(', ),
                                                ::Apply(
                                                    arguments => [ ::Call( hyper => '', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'arguments', twigil => '.', sigil => '$', ), ), ::Val::Buf( buf => ')', ), ],
                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                ),
                                            ],
                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                        ),
                                    ],
                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                ),
                            ],
                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Assign",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Assign", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Assign',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'emit_ruby',
                block => ::Lit::Code(
                    body => [
                        ::Bind(
                            parameters => ::Var( namespace => [], name => 'table', twigil => '', sigil => '$', ),
                            arguments  => ::Call(
                                hyper     => '',
                                arguments => [
                                    ::Lit::Hash(
                                        hash => [
                                            [ ::Val::Buf( buf => '$', ), ::Val::Buf( buf => '$', ), ],
                                            [ ::Val::Buf( buf => '@', ), ::Val::Buf( buf => '$List_', ), ],
                                            [ ::Val::Buf( buf => '%', ), ::Val::Buf( buf => '$Hash_', ), ],
                                            [ ::Val::Buf( buf => '&', ), ::Val::Buf( buf => '$Code_', ), ],
                                        ],
                                    ),
                                ],
                                method   => 'new',
                                invocant => ::Proto( name => 'Hash', ),
                            ),
                        ),
                        ::If(
                            body => ::Lit::Code(
                                body => [
                                    ::Return(
                                        result => ::Apply(
                                            arguments => [
                                                ::Call(
                                                    hyper     => '',
                                                    arguments => [ ::Var( namespace => [], name => 'sigil', twigil => '.', sigil => '$', ), ],
                                                    method    => 'LOOKUP',
                                                    invocant  => ::Var( namespace => [], name => 'table', twigil => '', sigil => '$', ),
                                                ),
                                                ::Val::Buf( buf => 'MATCH', ),
                                            ],
                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                        ),
                                    ),
                                ],
                                sig => ::Sig( invocant => '', positional => [], ),
                                pad   => ::Pad( lexicals => [], namespace => "Var", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                CATCH => '',
                                state => {},
                            ),
                            cond => ::Apply( arguments => [ ::Var( namespace => [], name => 'name', twigil => '.', sigil => '$', ), ::Val::Buf( buf => '/', ), ], code => ::Var( namespace => [], name => 'infix:<eq>', twigil => '', sigil => '&', ), ),
                            otherwise => '',
                        ),
                        ::If(
                            body => ::Lit::Code(
                                body => [
                                    ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ),
                                    ::Bind(
                                        parameters => ::Var( namespace => [], name => 'var', twigil => '', sigil => '$', ),
                                        arguments  => ::Apply(
                                            arguments => [
                                                ::Var( namespace => [], name => 'sigil',     twigil => '.', sigil => '$', ),
                                                ::Var( namespace => [], name => 'twigil',    twigil => '.', sigil => '$', ),
                                                ::Var( namespace => [], name => 'name',      twigil => '.', sigil => '$', ),
                                                ::Var( namespace => [], name => 'namespace', twigil => '.', sigil => '$', ),
                                            ],
                                            code => ::Var( namespace => [ 'Main', ], name => 'mangle_name', twigil => '', sigil => '&', ),
                                        ),
                                    ),
                                    ::If(
                                        body => ::Lit::Code(
                                            body => [ ::Bind( parameters => ::Var( namespace => [],     name => 's', twigil => '', sigil => '$', ), arguments => ::Val::Buf( buf => '$::Scalar', ), ), ],
                                            sig  => ::Sig( invocant      => '',              positional => [], ),
                                            pad   => ::Pad( lexicals => [], namespace => "Var", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                            CATCH => '',
                                            state => {},
                                        ),
                                        cond => ::Apply(
                                            arguments => [ ::Var( namespace => [], name => 'sigil',      twigil => '.', sigil => '$', ), ::Val::Buf( buf => '$', ), ],
                                            code      => ::Var( namespace   => [], name => 'infix:<eq>', twigil => '',  sigil => '&', ),
                                        ),
                                        otherwise => '',
                                    ),
                                    ::If(
                                        body => ::Lit::Code(
                                            body => [ ::Bind( parameters => ::Var( namespace => [],     name => 's', twigil => '', sigil => '$', ), arguments => ::Val::Buf( buf => '$::Routine', ), ), ],
                                            sig  => ::Sig( invocant      => '',              positional => [], ),
                                            pad   => ::Pad( lexicals => [], namespace => "Var", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                            CATCH => '',
                                            state => {},
                                        ),
                                        cond => ::Apply(
                                            arguments => [ ::Var( namespace => [], name => 'sigil',      twigil => '.', sigil => '$', ), ::Val::Buf( buf => '&', ), ],
                                            code      => ::Var( namespace   => [], name => 'infix:<eq>', twigil => '',  sigil => '&', ),
                                        ),
                                        otherwise => '',
                                    ),
                                    ::If(
                                        body => ::Lit::Code(
                                            body => [ ::Bind( parameters => ::Var( namespace => [],     name => 's', twigil => '', sigil => '$', ), arguments => ::Val::Buf( buf => '$::HashContainer', ), ), ],
                                            sig  => ::Sig( invocant      => '',              positional => [], ),
                                            pad   => ::Pad( lexicals => [], namespace => "Var", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                            CATCH => '',
                                            state => {},
                                        ),
                                        cond => ::Apply(
                                            arguments => [ ::Var( namespace => [], name => 'sigil',      twigil => '.', sigil => '$', ), ::Val::Buf( buf => '%', ), ],
                                            code      => ::Var( namespace   => [], name => 'infix:<eq>', twigil => '',  sigil => '&', ),
                                        ),
                                        otherwise => '',
                                    ),
                                    ::If(
                                        body => ::Lit::Code(
                                            body => [ ::Bind( parameters => ::Var( namespace => [],     name => 's', twigil => '', sigil => '$', ), arguments => ::Val::Buf( buf => '$::ArrayContainer', ), ), ],
                                            sig  => ::Sig( invocant      => '',              positional => [], ),
                                            pad   => ::Pad( lexicals => [], namespace => "Var", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                            CATCH => '',
                                            state => {},
                                        ),
                                        cond => ::Apply(
                                            arguments => [ ::Var( namespace => [], name => 'sigil',      twigil => '.', sigil => '$', ), ::Val::Buf( buf => '@', ), ],
                                            code      => ::Var( namespace   => [], name => 'infix:<eq>', twigil => '',  sigil => '&', ),
                                        ),
                                        otherwise => '',
                                    ),
                                    ::Return(
                                        result => ::Apply(
                                            arguments => [
                                                ::Val::Buf( buf => ' ( ', ),
                                                ::Apply(
                                                    arguments => [
                                                        ::Var( namespace => [], name => 'var', twigil => '', sigil => '$', ),
                                                        ::Apply(
                                                            arguments => [
                                                                ::Val::Buf( buf => ' = ', ),
                                                                ::Apply(
                                                                    arguments => [
                                                                        ::Var( namespace => [], name => 'var', twigil => '', sigil => '$', ),
                                                                        ::Apply(
                                                                            arguments => [
                                                                                ::Val::Buf( buf => ' || ::DISPATCH( ', ),
                                                                                ::Apply(
                                                                                    arguments => [
                                                                                        ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ),
                                                                                        ::Apply(
                                                                                            arguments => [
                                                                                                ::Val::Buf( buf => ', "new", ) ', ),
                                                                                                ::Apply(
                                                                                                    arguments => [
                                                                                                        ::Val::Buf( buf => ' ) ', ),
                                                                                                        ::Apply( arguments => [], code => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ),
                                                                                                    ],
                                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                ),
                                                                                            ],
                                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                        ),
                                                                                    ],
                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                ),
                                                                            ],
                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                        ),
                                                                    ],
                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                ),
                                                            ],
                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                        ),
                                                    ],
                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                ),
                                            ],
                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                        ),
                                    ),
                                ],
                                sig => ::Sig( invocant => '', positional => [], ),
                                pad => ::Pad(
                                    lexicals => [
                                        ::Decl( decl => 'my', var => ::Var( namespace => [], name => 's',   twigil => '', sigil => '$', ), type => '', ),
                                        ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'var', twigil => '', sigil => '$', ), type => '', )
                                    ],
                                    namespace => "Var",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                ),
                                CATCH => '',
                                state => {},
                            ),
                            cond      => ::Apply( arguments => [ ::Var( namespace => [], name => 'namespace', twigil => '.', sigil => '$', ), ], code => ::Var( namespace => [], name => 'prefix:<@>', twigil => '', sigil => '&', ), ),
                            otherwise => '',
                        ),
                        ::Return(
                            result => ::Apply(
                                arguments => [
                                    ::Var( namespace => [], name => 'sigil',     twigil => '.', sigil => '$', ),
                                    ::Var( namespace => [], name => 'twigil',    twigil => '.', sigil => '$', ),
                                    ::Var( namespace => [], name => 'name',      twigil => '.', sigil => '$', ),
                                    ::Var( namespace => [], name => 'namespace', twigil => '.', sigil => '$', ),
                                ],
                                code => ::Var( namespace => [ 'Main', ], name => 'mangle_name_ruby', twigil => '', sigil => '&', ),
                            ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'table', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',     twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self',  twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Var",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'emit_ruby_container',
                block => ::Lit::Code(
                    body => [
                        ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ),
                        ::If(
                            body => ::Lit::Code(
                                body => [ ::Bind( parameters => ::Var( namespace => [],     name => 's', twigil => '', sigil => '$', ), arguments => ::Val::Buf( buf => 'Scalar', ), ), ],
                                sig  => ::Sig( invocant      => '',              positional => [], ),
                                pad   => ::Pad( lexicals => [], namespace => "Var", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                CATCH => '',
                                state => {},
                            ),
                            cond => ::Apply( arguments => [ ::Var( namespace => [], name => 'sigil', twigil => '.', sigil => '$', ), ::Val::Buf( buf => '$', ), ], code => ::Var( namespace => [], name => 'infix:<eq>', twigil => '', sigil => '&', ), ),
                            otherwise => '',
                        ),
                        ::If(
                            body => ::Lit::Code(
                                body => [ ::Bind( parameters => ::Var( namespace => [],     name => 's', twigil => '', sigil => '$', ), arguments => ::Val::Buf( buf => 'Routine', ), ), ],
                                sig  => ::Sig( invocant      => '',              positional => [], ),
                                pad   => ::Pad( lexicals => [], namespace => "Var", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                CATCH => '',
                                state => {},
                            ),
                            cond => ::Apply( arguments => [ ::Var( namespace => [], name => 'sigil', twigil => '.', sigil => '$', ), ::Val::Buf( buf => '&', ), ], code => ::Var( namespace => [], name => 'infix:<eq>', twigil => '', sigil => '&', ), ),
                            otherwise => '',
                        ),
                        ::If(
                            body => ::Lit::Code(
                                body => [ ::Bind( parameters => ::Var( namespace => [],     name => 's', twigil => '', sigil => '$', ), arguments => ::Val::Buf( buf => 'HashContainer', ), ), ],
                                sig  => ::Sig( invocant      => '',              positional => [], ),
                                pad   => ::Pad( lexicals => [], namespace => "Var", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                CATCH => '',
                                state => {},
                            ),
                            cond => ::Apply( arguments => [ ::Var( namespace => [], name => 'sigil', twigil => '.', sigil => '$', ), ::Val::Buf( buf => '%', ), ], code => ::Var( namespace => [], name => 'infix:<eq>', twigil => '', sigil => '&', ), ),
                            otherwise => '',
                        ),
                        ::If(
                            body => ::Lit::Code(
                                body => [ ::Bind( parameters => ::Var( namespace => [],     name => 's', twigil => '', sigil => '$', ), arguments => ::Val::Buf( buf => 'ArrayContainer', ), ), ],
                                sig  => ::Sig( invocant      => '',              positional => [], ),
                                pad   => ::Pad( lexicals => [], namespace => "Var", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                CATCH => '',
                                state => {},
                            ),
                            cond => ::Apply( arguments => [ ::Var( namespace => [], name => 'sigil', twigil => '.', sigil => '$', ), ::Val::Buf( buf => '@', ), ], code => ::Var( namespace => [], name => 'infix:<eq>', twigil => '', sigil => '&', ), ),
                            otherwise => '',
                        ),
                        ::Return( result => ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ), ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 's',    twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Var",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Var", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Var',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'emit_ruby',
                block => ::Lit::Code(
                    body => [
                        ::If(
                            body => ::Lit::Code(
                                body => [
                                    ::Return(
                                        result => ::Apply(
                                            arguments => [
                                                ::Val::Buf( buf => '::DISPATCH_VAR( ', ),
                                                ::Apply(
                                                    arguments => [
                                                        ::Call( hyper => '', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'parameters', twigil => '.', sigil => '$', ), ),
                                                        ::Apply(
                                                            arguments => [
                                                                ::Val::Buf( buf => ', "BIND", ', ),
                                                                ::Apply(
                                                                    arguments => [
                                                                        ::Call( hyper => '', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'arguments', twigil => '.', sigil => '$', ), ),
                                                                        ::Val::Buf( buf => ' )', ),
                                                                    ],
                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                ),
                                                            ],
                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                        ),
                                                    ],
                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                ),
                                            ],
                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                        ),
                                    ),
                                ],
                                sig => ::Sig( invocant => '', positional => [], ),
                                pad   => ::Pad( lexicals => [], namespace => "Bind", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                CATCH => '',
                                state => {},
                            ),
                            cond => ::Apply(
                                arguments => [
                                    ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'Call', ), ], method => 'isa', invocant => ::Var( namespace => [], name => 'parameters', twigil => '.', sigil => '$', ), ),
                                    ::Apply(
                                        arguments => [
                                            ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'Var', ), ], method => 'isa', invocant => ::Var( namespace => [], name => 'parameters', twigil => '.', sigil => '$', ), ),
                                            ::Apply(
                                                arguments => [ ::Call( hyper => '', arguments => '', method => 'sigil', invocant => ::Var( namespace => [], name => 'parameters', twigil => '.', sigil => '$', ), ), ::Val::Buf( buf => '@', ), ],
                                                code => ::Var( namespace => [], name => 'infix:<eq>', twigil => '', sigil => '&', ),
                                            ),
                                        ],
                                        code => ::Var( namespace => [], name => 'infix:<&&>', twigil => '', sigil => '&', ),
                                    ),
                                ],
                                code => ::Var( namespace => [], name => 'infix:<||>', twigil => '', sigil => '&', ),
                            ),
                            otherwise => '',
                        ),
                        ::Bind(
                            parameters => ::Var( namespace => [], name => 'var', twigil => '', sigil => '$', ),
                            arguments => ::Call( hyper => '', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'parameters', twigil => '.', sigil => '$', ), ),
                        ),
                        ::Bind(
                            parameters => ::Var( namespace => [], name => 'val', twigil => '', sigil => '$', ),
                            arguments => ::Call( hyper => '', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'arguments', twigil => '.', sigil => '$', ), ),
                        ),
                        ::Apply(
                            arguments => [
                                ::Val::Buf( buf => '->(defined,value){', ),
                                ::Apply(
                                    arguments => [
                                        ::Val::Buf( buf => 'if not defined or defined == "local-variable"; ', ),
                                        ::Apply(
                                            arguments => [
                                                ::Var( namespace => [], name => 'var', twigil => '', sigil => '$', ),
                                                ::Apply(
                                                    arguments => [
                                                        ::Val::Buf( buf => ' = value;', ),
                                                        ::Apply(
                                                            arguments => [
                                                                ::Val::Buf( buf => 'else; ', ),
                                                                ::Apply(
                                                                    arguments => [
                                                                        ::Val::Buf( buf => 'self.', ),
                                                                        ::Apply(
                                                                            arguments => [
                                                                                ::Var( namespace => [], name => 'var', twigil => '', sigil => '$', ),
                                                                                ::Apply(
                                                                                    arguments => [
                                                                                        ::Val::Buf( buf => ' = value; end', ),
                                                                                        ::Apply(
                                                                                            arguments => [
                                                                                                ::Val::Buf( buf => '}.(defined? ', ),
                                                                                                ::Apply(
                                                                                                    arguments => [
                                                                                                        ::Var( namespace => [], name => 'var', twigil => '', sigil => '$', ),
                                                                                                        ::Apply(
                                                                                                            arguments => [
                                                                                                                ::Val::Buf( buf => ', ', ),
                                                                                                                ::Apply(
                                                                                                                    arguments => [
                                                                                                                        ::Var( namespace => [], name => 'val', twigil => '', sigil => '$', ),
                                                                                                                        ::Apply(
                                                                                                                            arguments => [
                                                                                                                                ::Val::Buf( buf => '.containerize)', ),
                                                                                                                                ::Apply( arguments => [], code => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ),
                                                                                                                            ],
                                                                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                                        ),
                                                                                                                    ],
                                                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                                ),
                                                                                                            ],
                                                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                        ),
                                                                                                    ],
                                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                ),
                                                                                            ],
                                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                        ),
                                                                                    ],
                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                ),
                                                                            ],
                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                        ),
                                                                    ],
                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                ),
                                                            ],
                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                        ),
                                                    ],
                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                ),
                                            ],
                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                        ),
                                    ],
                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                ),
                            ],
                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'var',  twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'val',  twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Bind",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Bind", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Bind',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'emit_ruby',
                block => ::Lit::Code(
                    body => [
                        ::Return(
                            result => ::Apply( arguments => [ ::Val::Buf( buf => ' ', ), ::Var( namespace => [], name => 'name', twigil => '.', sigil => '$', ), ], code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ), ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Proto",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Proto", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Proto',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'emit_ruby',
                block => ::Lit::Code(
                    body => [
                        ::Var( namespace => [], name => 'invocant', twigil => '', sigil => '$', ),
                        ::If(
                            body => ::Lit::Code(
                                body => [
                                    ::If(
                                        body => ::Lit::Code(
                                            body => [ ::Bind( parameters => ::Var( namespace => [],     name => 'invocant', twigil => '', sigil => '$', ), arguments => ::Val::Buf( buf => 's_self', ), ), ],
                                            sig  => ::Sig( invocant      => '',              positional => [], ),
                                            pad   => ::Pad( lexicals => [], namespace => "Call", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                            CATCH => '',
                                            state => {},
                                        ),
                                        cond => ::Apply(
                                            arguments => [ ::Call( hyper  => '', arguments => '',           method => 'name', invocant => ::Var( namespace => [], name => 'invocant', twigil => '.', sigil => '$', ), ), ::Val::Buf( buf => 'self', ), ],
                                            code      => ::Var( namespace => [], name      => 'infix:<eq>', twigil => '',     sigil    => '&', ),
                                        ),
                                        otherwise => ::Lit::Code(
                                            body => [
                                                ::Bind(
                                                    parameters => ::Var( namespace => [], name => 'invocant', twigil => '', sigil => '$', ),
                                                    arguments => ::Call( hyper => '', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'invocant', twigil => '.', sigil => '$', ), ),
                                                ),
                                            ],
                                            sig => ::Sig( invocant => '', positional => [], ),
                                            pad   => ::Pad( lexicals => [], namespace => "Call", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                            CATCH => '',
                                            state => {},
                                        ),
                                    ),
                                ],
                                sig => ::Sig( invocant => '', positional => [], ),
                                pad   => ::Pad( lexicals => [], namespace => "Call", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                CATCH => '',
                                state => {},
                            ),
                            cond      => ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'Proto', ), ], method => 'isa', invocant => ::Var( namespace => [], name => 'invocant', twigil => '.', sigil => '$', ), ),
                            otherwise => ::Lit::Code(
                                body => [
                                    ::Bind(
                                        parameters => ::Var( namespace => [], name => 'invocant', twigil => '', sigil => '$', ),
                                        arguments => ::Call( hyper => '', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'invocant', twigil => '.', sigil => '$', ), ),
                                    ),
                                ],
                                sig => ::Sig( invocant => '', positional => [], ),
                                pad   => ::Pad( lexicals => [], namespace => "Call", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                CATCH => '',
                                state => {},
                            ),
                        ),
                        ::If(
                            body => ::Lit::Code(
                                body => [ ::Bind( parameters => ::Var( namespace => [],     name => 'invocant', twigil => '', sigil => '$', ), arguments => ::Val::Buf( buf => 's_self', ), ), ],
                                sig  => ::Sig( invocant      => '',              positional => [], ),
                                pad   => ::Pad( lexicals => [], namespace => "Call", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                CATCH => '',
                                state => {},
                            ),
                            cond => ::Apply(
                                arguments => [ ::Var( namespace => [], name => 'invocant',   twigil => '', sigil => '$', ), ::Val::Buf( buf => 'self', ), ],
                                code      => ::Var( namespace   => [], name => 'infix:<eq>', twigil => '', sigil => '&', ),
                            ),
                            otherwise => '',
                        ),
                        ::Bind( parameters => ::Var( namespace => [], name => 'meth', twigil => '', sigil => '$', ), arguments => ::Var( namespace => [], name => 'method', twigil => '.', sigil => '$', ), ),
                        ::If(
                            body => ::Lit::Code(
                                body => [ ::Bind( parameters => ::Var( namespace => [],     name => 'meth', twigil => '', sigil => '$', ), arguments => ::Val::Buf( buf => '', ), ), ],
                                sig  => ::Sig( invocant      => '',              positional => [], ),
                                pad   => ::Pad( lexicals => [], namespace => "Call", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                CATCH => '',
                                state => {},
                            ),
                            cond => ::Apply(
                                arguments => [ ::Var( namespace => [], name => 'meth',       twigil => '', sigil => '$', ), ::Val::Buf( buf => 'postcircumfix:<( )>', ), ],
                                code      => ::Var( namespace   => [], name => 'infix:<eq>', twigil => '', sigil => '&', ),
                            ),
                            otherwise => '',
                        ),
                        ::Bind(
                            parameters => ::Var( namespace => [], name => 'call', twigil => '', sigil => '$', ),
                            arguments  => ::Call(
                                hyper     => '',
                                arguments => [ ::Val::Buf( buf => ',,, ', ), ],
                                method    => 'join',
                                invocant  => ::Call( hyper => '>>', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'arguments', twigil => '.', sigil => '@', ), ),
                            ),
                        ),
                        ::If(
                            body => ::Lit::Code(
                                body => [
                                    ::Apply(
                                        arguments => [
                                            ::Val::Buf( buf => '::DISPATCH( $::List, "new", { _array => [ ', ),
                                            ::Apply(
                                                arguments => [
                                                    ::Val::Buf( buf => 'map { ::DISPATCH( $_, "', ),
                                                    ::Apply(
                                                        arguments => [
                                                            ::Var( namespace => [], name => 'meth', twigil => '', sigil => '$', ),
                                                            ::Apply(
                                                                arguments => [
                                                                    ::Val::Buf( buf => '", ', ),
                                                                    ::Apply(
                                                                        arguments => [
                                                                            ::Var( namespace => [], name => 'call', twigil => '', sigil => '$', ),
                                                                            ::Apply(
                                                                                arguments => [
                                                                                    ::Val::Buf( buf => ') } ', ),
                                                                                    ::Apply(
                                                                                        arguments => [
                                                                                            ::Val::Buf( buf => '@{ ::DISPATCH( ', ),
                                                                                            ::Apply(
                                                                                                arguments => [
                                                                                                    ::Var( namespace => [], name => 'invocant', twigil => '', sigil => '$', ),
                                                                                                    ::Apply(
                                                                                                        arguments => [
                                                                                                            ::Val::Buf( buf => ', "array" )->{_value}{_array} } ', ),
                                                                                                            ::Apply(
                                                                                                                arguments => [
                                                                                                                    ::Val::Buf( buf => '] } )', ),
                                                                                                                    ::Apply( arguments => [], code => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ),
                                                                                                                ],
                                                                                                                code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                            ),
                                                                                                        ],
                                                                                                        code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                    ),
                                                                                                ],
                                                                                                code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                            ),
                                                                                        ],
                                                                                        code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                    ),
                                                                                ],
                                                                                code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                            ),
                                                                        ],
                                                                        code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                    ),
                                                                ],
                                                                code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                            ),
                                                        ],
                                                        code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                    ),
                                                ],
                                                code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                            ),
                                        ],
                                        code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                    ),
                                ],
                                sig => ::Sig( invocant => '', positional => [], ),
                                pad   => ::Pad( lexicals => [], namespace => "Call", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                CATCH => '',
                                state => {},
                            ),
                            cond      => ::Var( namespace => [], name => 'hyper', twigil => '.', sigil => '$', ),
                            otherwise => ::Lit::Code(
                                body => [
                                    ::If(
                                        body => ::Lit::Code(
                                            body => [
                                                ::Apply(
                                                    arguments => [
                                                        ::Var( namespace => [], name => 'invocant', twigil => '', sigil => '$', ),
                                                        ::Apply(
                                                            arguments => [
                                                                ::Val::Buf( buf => '.(cx(', ),
                                                                ::Apply(
                                                                    arguments => [ ::Var( namespace => [], name => 'call',      twigil => '', sigil => '$', ), ::Val::Buf( buf => '))', ), ],
                                                                    code      => ::Var( namespace   => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                ),
                                                            ],
                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                        ),
                                                    ],
                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                ),
                                            ],
                                            sig => ::Sig( invocant => '', positional => [], ),
                                            pad   => ::Pad( lexicals => [], namespace => "Call", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                            CATCH => '',
                                            state => {},
                                        ),
                                        cond => ::Apply(
                                            arguments => [ ::Var( namespace => [], name => 'meth',       twigil => '', sigil => '$', ), ::Val::Buf( buf => '', ), ],
                                            code      => ::Var( namespace   => [], name => 'infix:<eq>', twigil => '', sigil => '&', ),
                                        ),
                                        otherwise => ::Lit::Code(
                                            body => [
                                                ::Apply(
                                                    arguments => [
                                                        ::Var( namespace => [], name => 'invocant', twigil => '', sigil => '$', ),
                                                        ::Apply(
                                                            arguments => [
                                                                ::Val::Buf( buf => '.mc_', ),
                                                                ::Apply(
                                                                    arguments => [
                                                                        ::Var( namespace => [], name => 'meth', twigil => '', sigil => '$', ),
                                                                        ::Apply(
                                                                            arguments => [
                                                                                ::Val::Buf( buf => '.(cx(', ),
                                                                                ::Apply(
                                                                                    arguments => [ ::Var( namespace => [], name => 'call',      twigil => '', sigil => '$', ), ::Val::Buf( buf => '))', ), ],
                                                                                    code      => ::Var( namespace   => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                ),
                                                                            ],
                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                        ),
                                                                    ],
                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                ),
                                                            ],
                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                        ),
                                                    ],
                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                ),
                                            ],
                                            sig => ::Sig( invocant => '', positional => [], ),
                                            pad   => ::Pad( lexicals => [], namespace => "Call", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                            CATCH => '',
                                            state => {},
                                        ),
                                    ),
                                ],
                                sig => ::Sig( invocant => '', positional => [], ),
                                pad   => ::Pad( lexicals => [], namespace => "Call", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                CATCH => '',
                                state => {},
                            ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'invocant', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'meth',     twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'call',     twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',        twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self',     twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Call",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Call", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Call',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'emit_ruby',
                block => ::Lit::Code(
                    body => [
                        ::If(
                            body => ::Lit::Code(
                                body => [ ::Return( result => ::Val::Buf( buf => '$self', ), ), ],
                                sig => ::Sig( invocant => '', positional => [], ),
                                pad   => ::Pad( lexicals => [], namespace => "Apply", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                CATCH => '',
                                state => {},
                            ),
                            cond => ::Apply(
                                arguments => [
                                    ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'Var', ), ], method => 'isa', invocant => ::Var( namespace => [], name => 'code', twigil => '.', sigil => '$', ), ),
                                    ::Apply(
                                        arguments => [ ::Call( hyper  => '', arguments => '',           method => 'name', invocant => ::Var( namespace => [], name => 'code', twigil => '.', sigil => '$', ), ), ::Val::Buf( buf => 'self', ), ],
                                        code      => ::Var( namespace => [], name      => 'infix:<eq>', twigil => '',     sigil    => '&', ),
                                    ),
                                ],
                                code => ::Var( namespace => [], name => 'infix:<&&>', twigil => '', sigil => '&', ),
                            ),
                            otherwise => '',
                        ),
                        ::If(
                            body => ::Lit::Code(
                                body => [
                                    ::Return(
                                        result => ::Apply(
                                            arguments => [
                                                ::Val::Buf( buf => '->(tmp1){ ', ),
                                                ::Apply(
                                                    arguments => [
                                                        ::Val::Buf( buf => 'tmp1 = ', ),
                                                        ::Apply(
                                                            arguments => [
                                                                ::Call(
                                                                    hyper     => '',
                                                                    arguments => '',
                                                                    method    => 'emit_ruby',
                                                                    invocant =>
                                                                        ::Call( hyper => '', arguments => [ ::Val::Int( int => '0', ), ], method => 'INDEX', invocant => ::Var( namespace => [], name => 'arguments', twigil => '.', sigil => '@', ), ),
                                                                ),
                                                                ::Apply(
                                                                    arguments => [
                                                                        ::Val::Buf( buf => '; ', ),
                                                                        ::Apply(
                                                                            arguments => [
                                                                                ::Val::Buf( buf => 'tmp1.mc_true.(cx()).is_true6? ', ),
                                                                                ::Apply(
                                                                                    arguments => [
                                                                                        ::Val::Buf( buf => '? ', ),
                                                                                        ::Apply(
                                                                                            arguments => [
                                                                                                ::Call(
                                                                                                    hyper     => '',
                                                                                                    arguments => '',
                                                                                                    method    => 'emit_ruby',
                                                                                                    invocant  => ::Call(
                                                                                                        hyper     => '',
                                                                                                        arguments => [ ::Val::Int( int => '1', ), ],
                                                                                                        method    => 'INDEX',
                                                                                                        invocant  => ::Var( namespace => [], name => 'arguments', twigil => '.', sigil => '@', ),
                                                                                                    ),
                                                                                                ),
                                                                                                ::Apply(
                                                                                                    arguments => [
                                                                                                        ::Val::Buf( buf => ': Bit.new(false)', ),
                                                                                                        ::Apply(
                                                                                                            arguments => [
                                                                                                                ::Val::Buf( buf => '}.(nil)', ),
                                                                                                                ::Apply( arguments => [], code => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ),
                                                                                                            ],
                                                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                        ),
                                                                                                    ],
                                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                ),
                                                                                            ],
                                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                        ),
                                                                                    ],
                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                ),
                                                                            ],
                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                        ),
                                                                    ],
                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                ),
                                                            ],
                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                        ),
                                                    ],
                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                ),
                                            ],
                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                        ),
                                    ),
                                ],
                                sig => ::Sig( invocant => '', positional => [], ),
                                pad   => ::Pad( lexicals => [], namespace => "Apply", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                CATCH => '',
                                state => {},
                            ),
                            cond => ::Apply(
                                arguments => [
                                    ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'Var', ), ], method => 'isa', invocant => ::Var( namespace => [], name => 'code', twigil => '.', sigil => '$', ), ),
                                    ::Apply(
                                        arguments => [ ::Call( hyper  => '', arguments => '',           method => 'name', invocant => ::Var( namespace => [], name => 'code', twigil => '.', sigil => '$', ), ), ::Val::Buf( buf => 'infix:<&&>', ), ],
                                        code      => ::Var( namespace => [], name      => 'infix:<eq>', twigil => '',     sigil    => '&', ),
                                    ),
                                ],
                                code => ::Var( namespace => [], name => 'infix:<&&>', twigil => '', sigil => '&', ),
                            ),
                            otherwise => '',
                        ),
                        ::If(
                            body => ::Lit::Code(
                                body => [
                                    ::Return(
                                        result => ::Apply(
                                            arguments => [
                                                ::Val::Buf( buf => '->(tmp1){ ', ),
                                                ::Apply(
                                                    arguments => [
                                                        ::Val::Buf( buf => 'tmp1 = ', ),
                                                        ::Apply(
                                                            arguments => [
                                                                ::Call(
                                                                    hyper     => '',
                                                                    arguments => '',
                                                                    method    => 'emit_ruby',
                                                                    invocant =>
                                                                        ::Call( hyper => '', arguments => [ ::Val::Int( int => '0', ), ], method => 'INDEX', invocant => ::Var( namespace => [], name => 'arguments', twigil => '.', sigil => '@', ), ),
                                                                ),
                                                                ::Apply(
                                                                    arguments => [
                                                                        ::Val::Buf( buf => '; ', ),
                                                                        ::Apply(
                                                                            arguments => [
                                                                                ::Val::Buf( buf => 'tmp1.mc_true.(cx()).is_true6? ', ),
                                                                                ::Apply(
                                                                                    arguments => [
                                                                                        ::Val::Buf( buf => '? tmp1', ),
                                                                                        ::Apply(
                                                                                            arguments => [
                                                                                                ::Val::Buf( buf => ': ', ),
                                                                                                ::Apply(
                                                                                                    arguments => [
                                                                                                        ::Call(
                                                                                                            hyper     => '',
                                                                                                            arguments => '',
                                                                                                            method    => 'emit_ruby',
                                                                                                            invocant  => ::Call(
                                                                                                                hyper     => '',
                                                                                                                arguments => [ ::Val::Int( int => '1', ), ],
                                                                                                                method    => 'INDEX',
                                                                                                                invocant  => ::Var( namespace => [], name => 'arguments', twigil => '.', sigil => '@', ),
                                                                                                            ),
                                                                                                        ),
                                                                                                        ::Apply(
                                                                                                            arguments => [
                                                                                                                ::Val::Buf( buf => '}.(nil)', ),
                                                                                                                ::Apply( arguments => [], code => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ),
                                                                                                            ],
                                                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                        ),
                                                                                                    ],
                                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                ),
                                                                                            ],
                                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                        ),
                                                                                    ],
                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                ),
                                                                            ],
                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                        ),
                                                                    ],
                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                ),
                                                            ],
                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                        ),
                                                    ],
                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                ),
                                            ],
                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                        ),
                                    ),
                                ],
                                sig => ::Sig( invocant => '', positional => [], ),
                                pad   => ::Pad( lexicals => [], namespace => "Apply", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                CATCH => '',
                                state => {},
                            ),
                            cond => ::Apply(
                                arguments => [
                                    ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'Var', ), ], method => 'isa', invocant => ::Var( namespace => [], name => 'code', twigil => '.', sigil => '$', ), ),
                                    ::Apply(
                                        arguments => [ ::Call( hyper  => '', arguments => '',           method => 'name', invocant => ::Var( namespace => [], name => 'code', twigil => '.', sigil => '$', ), ), ::Val::Buf( buf => 'infix:<||>', ), ],
                                        code      => ::Var( namespace => [], name      => 'infix:<eq>', twigil => '',     sigil    => '&', ),
                                    ),
                                ],
                                code => ::Var( namespace => [], name => 'infix:<&&>', twigil => '', sigil => '&', ),
                            ),
                            otherwise => '',
                        ),
                        ::If(
                            body => ::Lit::Code(
                                body => [
                                    ::Return(
                                        result => ::Apply(
                                            arguments => [
                                                ::Val::Buf( buf => '::DISPATCH_VAR( ', ),
                                                ::Apply(
                                                    arguments => [
                                                        ::Val::Buf( buf => '$GLOBAL::_REGEX_RETURN_, "STORE", ', ),
                                                        ::Apply(
                                                            arguments => [
                                                                ::Call(
                                                                    hyper     => '',
                                                                    arguments => '',
                                                                    method    => 'emit_ruby',
                                                                    invocant =>
                                                                        ::Call( hyper => '', arguments => [ ::Val::Int( int => '0', ), ], method => 'INDEX', invocant => ::Var( namespace => [], name => 'arguments', twigil => '.', sigil => '@', ), ),
                                                                ),
                                                                ::Apply(
                                                                    arguments => [
                                                                        ::Val::Buf( buf => '', ),
                                                                        ::Apply(
                                                                            arguments => [ ::Val::Buf( buf => ' )', ), ::Apply( arguments => [], code => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ), ],
                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                        ),
                                                                    ],
                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                ),
                                                            ],
                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                        ),
                                                    ],
                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                ),
                                            ],
                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                        ),
                                    ),
                                ],
                                sig => ::Sig( invocant => '', positional => [], ),
                                pad   => ::Pad( lexicals => [], namespace => "Apply", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                CATCH => '',
                                state => {},
                            ),
                            cond => ::Apply(
                                arguments => [
                                    ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'Var', ), ], method => 'isa', invocant => ::Var( namespace => [], name => 'code', twigil => '.', sigil => '$', ), ),
                                    ::Apply(
                                        arguments => [ ::Call( hyper  => '', arguments => '',           method => 'name', invocant => ::Var( namespace => [], name => 'code', twigil => '.', sigil => '$', ), ), ::Val::Buf( buf => 'make', ), ],
                                        code      => ::Var( namespace => [], name      => 'infix:<eq>', twigil => '',     sigil    => '&', ),
                                    ),
                                ],
                                code => ::Var( namespace => [], name => 'infix:<&&>', twigil => '', sigil => '&', ),
                            ),
                            otherwise => '',
                        ),
                        ::Return(
                            result => ::Apply(
                                arguments => [
                                    ::Val::Buf( buf => ' ', ),
                                    ::Apply(
                                        arguments => [
                                            ::Call( hyper => '', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'code', twigil => '.', sigil => '$', ), ),
                                            ::Apply(
                                                arguments => [
                                                    ::Val::Buf( buf => '.(cx(', ),
                                                    ::Apply(
                                                        arguments => [
                                                            ::Call(
                                                                hyper     => '',
                                                                arguments => [ ::Val::Buf( buf => ',,, ', ), ],
                                                                method    => 'join',
                                                                invocant  => ::Call( hyper => '>>', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'arguments', twigil => '.', sigil => '@', ), ),
                                                            ),
                                                            ::Apply(
                                                                arguments => [ ::Val::Buf( buf => '))', ), ::Apply( arguments => [],          code   => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ), ],
                                                                code      => ::Var( namespace  => [],      name               => 'infix:<~>', twigil => '',              sigil           => '&', ),
                                                            ),
                                                        ],
                                                        code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                    ),
                                                ],
                                                code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                            ),
                                        ],
                                        code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                    ),
                                ],
                                code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                            ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Apply",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Apply", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Apply',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'emit_ruby',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Val::Buf( buf => 'return(', ),
                                ::Apply(
                                    arguments => [
                                        ::Call( hyper => '', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'result', twigil => '.', sigil => '$', ), ),
                                        ::Apply(
                                            arguments => [ ::Val::Buf( buf => ')', ), ::Apply( arguments => [],          code   => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ), ],
                                            code      => ::Var( namespace  => [],     name               => 'infix:<~>', twigil => '',              sigil           => '&', ),
                                        ),
                                    ],
                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                ),
                            ],
                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Return",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Return", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Return',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'emit_ruby',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Val::Buf( buf => 'if (', ),
                                ::Apply(
                                    arguments => [
                                        ::Call( hyper => '', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'cond', twigil => '.', sigil => '$', ), ),
                                        ::Apply(
                                            arguments => [
                                                ::Val::Buf( buf => ').is_true6? ', ),
                                                ::Apply(
                                                    arguments => [
                                                        ::Apply( arguments => [], code => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ),
                                                        ::Apply(
                                                            arguments => [
                                                                ::Apply(
                                                                    arguments => [
                                                                        ::Var( namespace => [], name => 'body', twigil => '.', sigil => '$', ),
                                                                        ::Apply(
                                                                            arguments => [
                                                                                ::Val::Buf( buf => ' ', ),
                                                                                ::Apply(
                                                                                    arguments => [
                                                                                        ::Call( hyper => '', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'body', twigil => '.', sigil => '$', ), ),
                                                                                        ::Val::Buf( buf => '', ),
                                                                                    ],
                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                ),
                                                                            ],
                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                        ),
                                                                        ::Val::Buf( buf => '', ),
                                                                    ],
                                                                    code => ::Var( namespace => [], name => 'ternary:<?? !!>', twigil => '', sigil => '&', ),
                                                                ),
                                                                ::Apply(
                                                                    arguments => [
                                                                        ::Apply(
                                                                            arguments => [
                                                                                ::Var( namespace => [], name => 'otherwise', twigil => '.', sigil => '$', ),
                                                                                ::Apply(
                                                                                    arguments => [
                                                                                        ::Val::Buf( buf => ' else ', ),
                                                                                        ::Apply(
                                                                                            arguments => [
                                                                                                ::Apply( arguments => [], code => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ),
                                                                                                ::Apply(
                                                                                                    arguments => [
                                                                                                        ::Call(
                                                                                                            hyper     => '',
                                                                                                            arguments => '',
                                                                                                            method    => 'emit_ruby',
                                                                                                            invocant  => ::Var( namespace => [], name => 'otherwise', twigil => '.', sigil => '$', ),
                                                                                                        ),
                                                                                                        ::Val::Buf( buf => ' ', ),
                                                                                                    ],
                                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                ),
                                                                                            ],
                                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                        ),
                                                                                    ],
                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                ),
                                                                                ::Val::Buf( buf => ' else; Bit.new(false); ', ),
                                                                            ],
                                                                            code => ::Var( namespace => [], name => 'ternary:<?? !!>', twigil => '', sigil => '&', ),
                                                                        ),
                                                                        ::Apply(
                                                                            arguments => [
                                                                                ::Apply( arguments => [], code => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ),
                                                                                ::Apply(
                                                                                    arguments => [ ::Val::Buf( buf => 'end', ), ::Apply( arguments => [], code => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ), ],
                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                ),
                                                                            ],
                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                        ),
                                                                    ],
                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                ),
                                                            ],
                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                        ),
                                                    ],
                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                ),
                                            ],
                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                        ),
                                    ],
                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                ),
                            ],
                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "If",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "If", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'If',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'emit_ruby',
                block => ::Lit::Code(
                    body => [
                        ::Bind( parameters => ::Var( namespace => [], name => 'cond', twigil => '', sigil => '$', ), arguments => ::Var( namespace => [], name => 'cond', twigil => '.', sigil => '$', ), ),
                        ::If(
                            body => ::Lit::Code( body => [], sig => ::Sig( invocant => '', positional => [], ), pad => ::Pad( lexicals => [], namespace => "While", parent => ::Pad(...), evaluator => ::Sub(...), ), CATCH => '', state => {}, ),
                            cond => ::Apply(
                                arguments => [
                                    ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'Var', ), ], method => 'isa', invocant => ::Var( namespace => [], name => 'cond', twigil => '', sigil => '$', ), ),
                                    ::Apply(
                                        arguments => [ ::Call( hyper  => '', arguments => '',           method => 'sigil', invocant => ::Var( namespace => [], name => 'cond', twigil => '', sigil => '$', ), ), ::Val::Buf( buf => '@', ), ],
                                        code      => ::Var( namespace => [], name      => 'infix:<eq>', twigil => '',      sigil    => '&', ),
                                    ),
                                ],
                                code => ::Var( namespace => [], name => 'infix:<&&>', twigil => '', sigil => '&', ),
                            ),
                            otherwise => ::Lit::Code(
                                body => [
                                    ::Bind(
                                        parameters => ::Var( namespace => [], name => 'cond', twigil => '', sigil => '$', ),
                                        arguments  => ::Call(
                                            hyper     => '',
                                            arguments => [
                                                ::Lit::NamedArgument(
                                                    value => ::Call(
                                                        hyper     => '',
                                                        arguments => [
                                                            ::Lit::NamedArgument( value => ::Val::Buf( buf => '&', ),          key => ::Val::Buf( buf => 'sigil', ), ),
                                                            ::Lit::NamedArgument( value => ::Val::Buf( buf => '', ),           key => ::Val::Buf( buf => 'twigil', ), ),
                                                            ::Lit::NamedArgument( value => ::Val::Buf( buf => 'prefix:<@>', ), key => ::Val::Buf( buf => 'name', ), ),
                                                            ::Lit::NamedArgument(
                                                                value => ::Call( hyper   => '', arguments => [ ::Lit::Array( array => [ ::Val::Buf( buf => 'GLOBAL', ), ], ), ], method => 'new', invocant => ::Proto( name => 'Array', ), ),
                                                                key   => ::Val::Buf( buf => 'namespace', ),
                                                            ),
                                                        ],
                                                        method   => 'new',
                                                        invocant => ::Proto( name => 'Var', ),
                                                    ),
                                                    key => ::Val::Buf( buf => 'code', ),
                                                ),
                                                ::Lit::NamedArgument(
                                                    value => ::Call(
                                                        hyper     => '',
                                                        arguments => [ ::Lit::Array( array => [ ::Var( namespace => [], name => 'cond', twigil => '', sigil => '$', ), ], ), ],
                                                        method    => 'new',
                                                        invocant => ::Proto( name => 'Array', ),
                                                    ),
                                                    key => ::Val::Buf( buf => 'arguments', ),
                                                ),
                                            ],
                                            method   => 'new',
                                            invocant => ::Proto( name => 'Apply', ),
                                        ),
                                    ),
                                ],
                                sig => ::Sig( invocant => '', positional => [], ),
                                pad   => ::Pad( lexicals => [], namespace => "While", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                CATCH => '',
                                state => {},
                            ),
                        ),
                        ::Apply(
                            arguments => [
                                ::Val::Buf( buf => ' while (', ),
                                ::Apply(
                                    arguments => [
                                        ::Call( hyper => '', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'cond', twigil => '.', sigil => '$', ), ),
                                        ::Apply(
                                            arguments => [
                                                ::Val::Buf( buf => ').is_true6? ', ),
                                                ::Apply(
                                                    arguments => [
                                                        ::Apply( arguments => [], code => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ),
                                                        ::Apply(
                                                            arguments => [
                                                                ::Call( hyper => '', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'body', twigil => '.', sigil => '$', ), ),
                                                                ::Apply(
                                                                    arguments => [ ::Val::Buf( buf => 'end', ), ::Apply( arguments => [],          code   => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ), ],
                                                                    code      => ::Var( namespace  => [],       name               => 'infix:<~>', twigil => '',              sigil           => '&', ),
                                                                ),
                                                            ],
                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                        ),
                                                    ],
                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                ),
                                            ],
                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                        ),
                                    ],
                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                ),
                            ],
                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'cond', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "While",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "While", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'While',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'emit_ruby',
                block => ::Lit::Code(
                    body => [
                        ::Bind( parameters => ::Var( namespace => [], name => 'decl', twigil => '', sigil => '$', ), arguments => ::Var( namespace => [], name => 'decl', twigil => '.', sigil => '$', ), ),
                        ::Bind(
                            parameters => ::Var( namespace => [], name => 'name', twigil => '', sigil => '$', ),
                            arguments => ::Call( hyper => '', arguments => '', method => 'name', invocant => ::Var( namespace => [], name => 'var', twigil => '.', sigil => '$', ), ),
                        ),
                        ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ),
                        ::If(
                            body => ::Lit::Code(
                                body => [
                                    ::Bind(
                                        parameters => ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ),
                                        arguments  => ::Apply(
                                            arguments => [
                                                ::Val::Buf( buf => 'def_has(:', ),
                                                ::Apply(
                                                    arguments => [
                                                        ::Call( hyper => '', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'var', twigil => '.', sigil => '$', ), ),
                                                        ::Apply(
                                                            arguments => [
                                                                ::Val::Buf( buf => ',', ),
                                                                ::Apply(
                                                                    arguments => [
                                                                        ::Val::Buf( buf => '->(){', ),
                                                                        ::Apply(
                                                                            arguments => [
                                                                                ::Call( hyper => '', arguments => '', method => 'emit_ruby_container', invocant => ::Var( namespace => [], name => 'var', twigil => '.', sigil => '$', ), ),
                                                                                ::Apply(
                                                                                    arguments =>
                                                                                        [ ::Val::Buf( buf => '.new})', ), ::Apply( arguments => [], code => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ), ],
                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                ),
                                                                            ],
                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                        ),
                                                                    ],
                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                ),
                                                            ],
                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                        ),
                                                    ],
                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                ),
                                            ],
                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                        ),
                                    ),
                                ],
                                sig => ::Sig( invocant => '', positional => [], ),
                                pad   => ::Pad( lexicals => [], namespace => "Decl", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                CATCH => '',
                                state => {},
                            ),
                            cond => ::Apply( arguments => [ ::Var( namespace => [], name => 'decl', twigil => '', sigil => '$', ), ::Val::Buf( buf => 'has', ), ], code => ::Var( namespace => [], name => 'infix:<eq>', twigil => '', sigil => '&', ), ),
                            otherwise => ::Lit::Code(
                                body => [
                                    ::Bind(
                                        parameters => ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ),
                                        arguments => ::Call( hyper => '', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'var', twigil => '.', sigil => '$', ), ),
                                    ),
                                ],
                                sig => ::Sig( invocant => '', positional => [], ),
                                pad   => ::Pad( lexicals => [], namespace => "Decl", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                CATCH => '',
                                state => {},
                            ),
                        ),
                        ::Return( result => ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ), ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'decl', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'name', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 's',    twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Decl",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Decl", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Decl',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'emit_ruby',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Val::Buf( buf => ' Signature.new(', ),
                                ::Apply(
                                    arguments => [
                                        ::Var( namespace => [], name => 'emit_ruby_spec', twigil => '.', sigil => '$', ),
                                        ::Apply(
                                            arguments => [ ::Val::Buf( buf => ')', ), ::Apply( arguments => [],          code   => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ), ],
                                            code      => ::Var( namespace  => [],     name               => 'infix:<~>', twigil => '',              sigil           => '&', ),
                                        ),
                                    ],
                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                ),
                            ],
                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Sig",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'emit_ruby_spec',
                block => ::Lit::Code(
                    body => [
                        ::Bind( parameters => ::Var( namespace => [], name => 'inv', twigil => '', sigil => '$', ), arguments => ::Val::Buf( buf => ' nil', ), ),
                        ::If(
                            body => ::Lit::Code(
                                body => [
                                    ::Bind(
                                        parameters => ::Var( namespace => [], name => 'inv', twigil => '', sigil => '$', ),
                                        arguments => ::Call( hyper => '', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'invocant', twigil => '.', sigil => '$', ), ),
                                    ),
                                ],
                                sig => ::Sig( invocant => '', positional => [], ),
                                pad   => ::Pad( lexicals => [], namespace => "Sig", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                CATCH => '',
                                state => {},
                            ),
                            cond      => ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'Var', ), ], method => 'isa', invocant => ::Var( namespace => [], name => 'invocant', twigil => '.', sigil => '$', ), ),
                            otherwise => '',
                        ),
                        ::Var( namespace => [], name => 'pos',  twigil => '', sigil => '$', ),
                        ::Var( namespace => [], name => 'item', twigil => '', sigil => '$', ),
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Sub(
                                    name  => '',
                                    block => ::Lit::Code(
                                        body => [
                                            ::Bind(
                                                parameters => ::Var( namespace => [], name => 'pos', twigil => '', sigil => '$', ),
                                                arguments  => ::Apply(
                                                    arguments => [
                                                        ::Var( namespace => [], name => 'pos', twigil => '', sigil => '$', ),
                                                        ::Apply(
                                                            arguments => [
                                                                ::Val::Buf( buf => ', ', ),
                                                                ::Apply(
                                                                    arguments =>
                                                                        [ ::Call( hyper => '', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'item', twigil => '', sigil => '$', ), ), ::Val::Buf( buf => '', ), ],
                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                ),
                                                            ],
                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                        ),
                                                    ],
                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                ),
                                            ),
                                        ],
                                        sig => ::Sig(
                                            invocant   => ::Val::Undef(),
                                            positional => [
                                                ::Lit::SigArgument(
                                                    is_multidimensional => ::Val::Bit( bit => '0', ),
                                                    has_default         => ::Val::Bit( bit => '0', ),
                                                    value               => ::Val::Undef(),
                                                    is_slurpy           => ::Val::Bit( bit => '0', ),
                                                    is_optional         => ::Val::Bit( bit => '0', ),
                                                    key           => ::Var( namespace => [], name => 'item', twigil => '', sigil => '$', ),
                                                    is_copy       => ::Val::Bit( bit  => '0', ),
                                                    is_named_only => ::Val::Bit( bit  => '0', ),
                                                    type          => '',
                                                    is_rw => ::Val::Bit( bit => '0', ),
                                                ),
                                            ],
                                        ),
                                        pad => ::Pad(
                                            lexicals => [
                                                ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                                                ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'item', twigil => '', sigil => '$', ), type => '', )
                                            ],
                                            namespace => "Sig",
                                            parent    => ::Pad(...),
                                            evaluator => ::Sub(...),
                                        ),
                                        CATCH => '',
                                        state => {},
                                    ),
                                ),
                            ],
                            method   => 'map',
                            invocant => ::Apply( arguments => [ ::Var( namespace => [], name => 'positional', twigil => '.', sigil => '$', ), ], code => ::Var( namespace => [], name => 'prefix:<@>', twigil => '', sigil => '&', ), ),
                        ),
                        ::Bind(
                            parameters => ::Var( namespace => [], name => 'pos', twigil => '', sigil => '$', ),
                            arguments => ::Apply( arguments => [ ::Var( namespace => [], name => 'pos', twigil => '', sigil => '$', ), ::Val::Int( int => '1', ), ], code => ::Var( namespace => [], name => 'substr', twigil => '', sigil => '&', ), ),
                        ),
                        ::Bind( parameters => ::Var( namespace => [], name => 'named', twigil => '', sigil => '$', ), arguments => ::Val::Buf( buf => '', ), ),
                        ::Apply(
                            arguments => [
                                ::Val::Buf( buf => '', ),
                                ::Apply(
                                    arguments => [
                                        ::Var( namespace => [], name => 'inv', twigil => '', sigil => '$', ),
                                        ::Apply(
                                            arguments => [
                                                ::Val::Buf( buf => ',', ),
                                                ::Apply(
                                                    arguments => [
                                                        ::Val::Buf( buf => '[', ),
                                                        ::Apply(
                                                            arguments => [
                                                                ::Var( namespace => [], name => 'pos', twigil => '', sigil => '$', ),
                                                                ::Apply( arguments => [ ::Val::Buf( buf => ' ],', ), ::Val::Buf( buf => ' nil', ), ], code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ), ),
                                                            ],
                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                        ),
                                                    ],
                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                ),
                                            ],
                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                        ),
                                    ],
                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                ),
                            ],
                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'inv',   twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'pos',   twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'item',  twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'named', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',     twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self',  twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Sig",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'emit_ruby_bind_cap',
                block => ::Lit::Code(
                    body => [
                        ::Bind( parameters => ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ), arguments => ::Val::Buf( buf => '', ), ),
                        ::Bind(
                            parameters => ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ),
                            arguments  => ::Apply(
                                arguments => [
                                    ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ),
                                    ::Apply(
                                        arguments => [ ::Val::Buf( buf => 'p = cap.pos', ), ::Apply( arguments => [],          code   => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ), ],
                                        code      => ::Var( namespace  => [],               name               => 'infix:<~>', twigil => '',              sigil           => '&', ),
                                    ),
                                ],
                                code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                            ),
                        ),
                        ::Bind( parameters => ::Var( namespace => [], name => 'idx', twigil => '', sigil => '$', ), arguments => ::Val::Int( int => '0', ), ),
                        ::Var( namespace => [], name => 'item', twigil => '', sigil => '$', ),
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Sub(
                                    name  => '',
                                    block => ::Lit::Code(
                                        body => [
                                            ::Bind(
                                                parameters => ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ),
                                                arguments  => ::Apply(
                                                    arguments => [
                                                        ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ),
                                                        ::Apply(
                                                            arguments => [
                                                                ::Call( hyper => '', arguments => '', method => 'emit_ruby_name', invocant => ::Var( namespace => [], name => 'item', twigil => '', sigil => '$', ), ),
                                                                ::Apply(
                                                                    arguments => [
                                                                        ::Val::Buf( buf => '._(p[', ),
                                                                        ::Apply(
                                                                            arguments => [ ::Var( namespace => [], name => 'idx',       twigil => '', sigil => '$', ), ::Val::Buf( buf => ']); ', ), ],
                                                                            code      => ::Var( namespace   => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                        ),
                                                                    ],
                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                ),
                                                            ],
                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                        ),
                                                    ],
                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                ),
                                            ),
                                            ::Bind(
                                                parameters => ::Var( namespace => [], name => 'idx', twigil => '', sigil => '$', ),
                                                arguments  => ::Apply(
                                                    arguments => [ ::Var( namespace => [], name => 'idx',       twigil => '', sigil => '$', ), ::Val::Int( int => '1', ), ],
                                                    code      => ::Var( namespace   => [], name => 'infix:<+>', twigil => '', sigil => '&', ),
                                                ),
                                            ),
                                        ],
                                        sig => ::Sig(
                                            invocant   => ::Val::Undef(),
                                            positional => [
                                                ::Lit::SigArgument(
                                                    is_multidimensional => ::Val::Bit( bit => '0', ),
                                                    has_default         => ::Val::Bit( bit => '0', ),
                                                    value               => ::Val::Undef(),
                                                    is_slurpy           => ::Val::Bit( bit => '0', ),
                                                    is_optional         => ::Val::Bit( bit => '0', ),
                                                    key           => ::Var( namespace => [], name => 'item', twigil => '', sigil => '$', ),
                                                    is_copy       => ::Val::Bit( bit  => '0', ),
                                                    is_named_only => ::Val::Bit( bit  => '0', ),
                                                    type          => '',
                                                    is_rw => ::Val::Bit( bit => '0', ),
                                                ),
                                            ],
                                        ),
                                        pad => ::Pad(
                                            lexicals => [
                                                ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                                                ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'item', twigil => '', sigil => '$', ), type => '', )
                                            ],
                                            namespace => "Sig",
                                            parent    => ::Pad(...),
                                            evaluator => ::Sub(...),
                                        ),
                                        CATCH => '',
                                        state => {},
                                    ),
                                ),
                            ],
                            method   => 'map',
                            invocant => ::Apply( arguments => [ ::Var( namespace => [], name => 'positional', twigil => '.', sigil => '$', ), ], code => ::Var( namespace => [], name => 'prefix:<@>', twigil => '', sigil => '&', ), ),
                        ),
                        ::Bind(
                            parameters => ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ),
                            arguments  => ::Apply(
                                arguments => [ ::Var( namespace => [], name => 's',         twigil => '', sigil => '$', ), ::Apply( arguments => [], code => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ), ],
                                code      => ::Var( namespace   => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                            ),
                        ),
                        ::Return( result => ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ), ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 's',    twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'idx',  twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'item', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Sig",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Sig", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Sig',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'emit_ruby',
                block => ::Lit::Code(
                    body => [
                        ::Bind( parameters => ::Var( namespace => [], name => 's',  twigil => '', sigil => '$', ), arguments => ::Val::Buf( buf => ' c(', ), ),
                        ::Bind( parameters => ::Var( namespace => [], name => 'sa', twigil => '', sigil => '$', ), arguments => ::Val::Buf( buf => '', ), ),
                        ::If(
                            body => ::Lit::Code(
                                body => [
                                    ::Bind(
                                        parameters => ::Var( namespace => [], name => 'sa', twigil => '', sigil => '$', ),
                                        arguments  => ::Apply(
                                            arguments => [ ::Var( namespace => [], name => 'sa',        twigil => '', sigil => '$', ), ::Val::Buf( buf => '[', ), ],
                                            code      => ::Var( namespace   => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                        ),
                                    ),
                                    ::Var( namespace => [], name => 'item', twigil => '', sigil => '$', ),
                                    ::Call(
                                        hyper     => '',
                                        arguments => [
                                            ::Sub(
                                                name  => '',
                                                block => ::Lit::Code(
                                                    body => [
                                                        ::Bind(
                                                            parameters => ::Var( namespace => [], name => 'sa', twigil => '', sigil => '$', ),
                                                            arguments  => ::Apply(
                                                                arguments => [
                                                                    ::Var( namespace => [], name => 'sa', twigil => '', sigil => '$', ),
                                                                    ::Apply(
                                                                        arguments => [
                                                                            ::Call( hyper => '', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'item', twigil => '', sigil => '$', ), ),
                                                                            ::Val::Buf( buf => ', ', ),
                                                                        ],
                                                                        code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                    ),
                                                                ],
                                                                code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                            ),
                                                        ),
                                                    ],
                                                    sig => ::Sig(
                                                        invocant   => ::Val::Undef(),
                                                        positional => [
                                                            ::Lit::SigArgument(
                                                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                                                has_default         => ::Val::Bit( bit => '0', ),
                                                                value               => ::Val::Undef(),
                                                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                                                is_optional         => ::Val::Bit( bit => '0', ),
                                                                key           => ::Var( namespace => [], name => 'item', twigil => '', sigil => '$', ),
                                                                is_copy       => ::Val::Bit( bit  => '0', ),
                                                                is_named_only => ::Val::Bit( bit  => '0', ),
                                                                type          => '',
                                                                is_rw => ::Val::Bit( bit => '0', ),
                                                            ),
                                                        ],
                                                    ),
                                                    pad => ::Pad(
                                                        lexicals => [
                                                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                                                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'item', twigil => '', sigil => '$', ), type => '', )
                                                        ],
                                                        namespace => "Lit::Capture",
                                                        parent    => ::Pad(...),
                                                        evaluator => ::Sub(...),
                                                    ),
                                                    CATCH => '',
                                                    state => {},
                                                ),
                                            ),
                                        ],
                                        method   => 'map',
                                        invocant => ::Var( namespace => [], name => 'array', twigil => '.', sigil => '@', ),
                                    ),
                                    ::Bind(
                                        parameters => ::Var( namespace => [], name => 'sa', twigil => '', sigil => '$', ),
                                        arguments  => ::Apply(
                                            arguments => [ ::Var( namespace => [], name => 'sa',        twigil => '', sigil => '$', ), ::Val::Buf( buf => ']', ), ],
                                            code      => ::Var( namespace   => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                        ),
                                    ),
                                    ::Bind(
                                        parameters => ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ),
                                        arguments  => ::Apply(
                                            arguments => [
                                                ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ),
                                                ::Apply(
                                                    arguments => [ ::Var( namespace => [], name => 'sa',        twigil => '', sigil => '$', ), ::Val::Buf( buf => ',', ), ],
                                                    code      => ::Var( namespace   => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                ),
                                            ],
                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                        ),
                                    ),
                                ],
                                sig => ::Sig( invocant => '', positional => [], ),
                                pad => ::Pad(
                                    lexicals  => [ ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'item', twigil => '', sigil => '$', ), type => '', ) ],
                                    namespace => "Lit::Capture",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                ),
                                CATCH => '',
                                state => {},
                            ),
                            cond      => ::Apply( arguments => [ ::Var( namespace => [], name => 'array', twigil => '.', sigil => '$', ), ], code => ::Var( namespace => [], name => 'defined', twigil => '', sigil => '&', ), ),
                            otherwise => ::Lit::Code(
                                body => [
                                    ::Bind(
                                        parameters => ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ),
                                        arguments  => ::Apply(
                                            arguments => [ ::Var( namespace => [], name => 's',         twigil => '', sigil => '$', ), ::Val::Buf( buf => 'nil,', ), ],
                                            code      => ::Var( namespace   => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                        ),
                                    ),
                                ],
                                sig => ::Sig( invocant => '', positional => [], ),
                                pad   => ::Pad( lexicals => [], namespace => "Lit::Capture", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                CATCH => '',
                                state => {},
                            ),
                        ),
                        ::Bind( parameters => ::Var( namespace => [], name => 'sh', twigil => '', sigil => '$', ), arguments => ::Val::Buf( buf => '', ), ),
                        ::If(
                            body => ::Lit::Code(
                                body => [
                                    ::Bind(
                                        parameters => ::Var( namespace => [], name => 'sh', twigil => '', sigil => '$', ),
                                        arguments  => ::Apply(
                                            arguments => [ ::Var( namespace => [], name => 'sh',        twigil => '', sigil => '$', ), ::Val::Buf( buf => '{', ), ],
                                            code      => ::Var( namespace   => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                        ),
                                    ),
                                    ::Var( namespace => [], name => 'item', twigil => '', sigil => '$', ),
                                    ::Call(
                                        hyper     => '',
                                        arguments => [
                                            ::Sub(
                                                name  => '',
                                                block => ::Lit::Code(
                                                    body => [
                                                        ::Bind(
                                                            parameters => ::Var( namespace => [], name => 'sh', twigil => '', sigil => '$', ),
                                                            arguments  => ::Apply(
                                                                arguments => [
                                                                    ::Var( namespace => [], name => 'sh', twigil => '', sigil => '$', ),
                                                                    ::Apply(
                                                                        arguments => [
                                                                            ::Val::Buf( buf => ' ', ),
                                                                            ::Apply(
                                                                                arguments => [
                                                                                    ::Call(
                                                                                        hyper     => '',
                                                                                        arguments => '',
                                                                                        method    => 'emit_ruby',
                                                                                        invocant  => ::Call(
                                                                                            hyper     => '',
                                                                                            arguments => [ ::Val::Int( int => '0', ), ],
                                                                                            method    => 'INDEX',
                                                                                            invocant  => ::Var( namespace => [], name => 'item', twigil => '', sigil => '$', ),
                                                                                        ),
                                                                                    ),
                                                                                    ::Apply(
                                                                                        arguments => [
                                                                                            ::Val::Buf( buf => ': ', ),
                                                                                            ::Apply(
                                                                                                arguments => [
                                                                                                    ::Call(
                                                                                                        hyper     => '',
                                                                                                        arguments => '',
                                                                                                        method    => 'emit_ruby',
                                                                                                        invocant  => ::Call(
                                                                                                            hyper     => '',
                                                                                                            arguments => [ ::Val::Int( int => '1', ), ],
                                                                                                            method    => 'INDEX',
                                                                                                            invocant  => ::Var( namespace => [], name => 'item', twigil => '', sigil => '$', ),
                                                                                                        ),
                                                                                                    ),
                                                                                                    ::Val::Buf( buf => ', ', ),
                                                                                                ],
                                                                                                code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                            ),
                                                                                        ],
                                                                                        code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                    ),
                                                                                ],
                                                                                code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                            ),
                                                                        ],
                                                                        code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                    ),
                                                                ],
                                                                code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                            ),
                                                        ),
                                                    ],
                                                    sig => ::Sig(
                                                        invocant   => ::Val::Undef(),
                                                        positional => [
                                                            ::Lit::SigArgument(
                                                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                                                has_default         => ::Val::Bit( bit => '0', ),
                                                                value               => ::Val::Undef(),
                                                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                                                is_optional         => ::Val::Bit( bit => '0', ),
                                                                key           => ::Var( namespace => [], name => 'item', twigil => '', sigil => '$', ),
                                                                is_copy       => ::Val::Bit( bit  => '0', ),
                                                                is_named_only => ::Val::Bit( bit  => '0', ),
                                                                type          => '',
                                                                is_rw => ::Val::Bit( bit => '0', ),
                                                            ),
                                                        ],
                                                    ),
                                                    pad => ::Pad(
                                                        lexicals => [
                                                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                                                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'item', twigil => '', sigil => '$', ), type => '', )
                                                        ],
                                                        namespace => "Lit::Capture",
                                                        parent    => ::Pad(...),
                                                        evaluator => ::Sub(...),
                                                    ),
                                                    CATCH => '',
                                                    state => {},
                                                ),
                                            ),
                                        ],
                                        method   => 'map',
                                        invocant => ::Var( namespace => [], name => 'hash', twigil => '.', sigil => '@', ),
                                    ),
                                    ::Bind(
                                        parameters => ::Var( namespace => [], name => 'sh', twigil => '', sigil => '$', ),
                                        arguments  => ::Apply(
                                            arguments => [ ::Var( namespace => [], name => 'sh',        twigil => '', sigil => '$', ), ::Val::Buf( buf => '}', ), ],
                                            code      => ::Var( namespace   => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                        ),
                                    ),
                                    ::Bind(
                                        parameters => ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ),
                                        arguments  => ::Apply(
                                            arguments => [
                                                ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ),
                                                ::Apply(
                                                    arguments => [ ::Var( namespace => [], name => 'sh',        twigil => '', sigil => '$', ), ::Val::Buf( buf => ',', ), ],
                                                    code      => ::Var( namespace   => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                ),
                                            ],
                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                        ),
                                    ),
                                ],
                                sig => ::Sig( invocant => '', positional => [], ),
                                pad => ::Pad(
                                    lexicals  => [ ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'item', twigil => '', sigil => '$', ), type => '', ) ],
                                    namespace => "Lit::Capture",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                ),
                                CATCH => '',
                                state => {},
                            ),
                            cond      => ::Apply( arguments => [ ::Var( namespace => [], name => 'hash', twigil => '.', sigil => '$', ), ], code => ::Var( namespace => [], name => 'defined', twigil => '', sigil => '&', ), ),
                            otherwise => ::Lit::Code(
                                body => [
                                    ::Bind(
                                        parameters => ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ),
                                        arguments  => ::Apply(
                                            arguments => [ ::Var( namespace => [], name => 's',         twigil => '', sigil => '$', ), ::Val::Buf( buf => 'nil,', ), ],
                                            code      => ::Var( namespace   => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                        ),
                                    ),
                                ],
                                sig => ::Sig( invocant => '', positional => [], ),
                                pad   => ::Pad( lexicals => [], namespace => "Lit::Capture", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                CATCH => '',
                                state => {},
                            ),
                        ),
                        ::If(
                            body => ::Lit::Code(
                                body => [
                                    ::Bind(
                                        parameters => ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ),
                                        arguments  => ::Apply(
                                            arguments => [
                                                ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ),
                                                ::Apply(
                                                    arguments => [ ::Call( hyper => '', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'invocant', twigil => '.', sigil => '$', ), ), ::Val::Buf( buf => '', ), ],
                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                ),
                                            ],
                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                        ),
                                    ),
                                ],
                                sig => ::Sig( invocant => '', positional => [], ),
                                pad   => ::Pad( lexicals => [], namespace => "Lit::Capture", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                CATCH => '',
                                state => {},
                            ),
                            cond      => ::Apply( arguments => [ ::Var( namespace => [], name => 'invocant', twigil => '.', sigil => '$', ), ], code => ::Var( namespace => [], name => 'defined', twigil => '', sigil => '&', ), ),
                            otherwise => ::Lit::Code(
                                body => [
                                    ::Bind(
                                        parameters => ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ),
                                        arguments  => ::Apply(
                                            arguments => [ ::Var( namespace => [], name => 's',         twigil => '', sigil => '$', ), ::Val::Buf( buf => 'nil', ), ],
                                            code      => ::Var( namespace   => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                        ),
                                    ),
                                ],
                                sig => ::Sig( invocant => '', positional => [], ),
                                pad   => ::Pad( lexicals => [], namespace => "Lit::Capture", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                CATCH => '',
                                state => {},
                            ),
                        ),
                        ::Return(
                            result => ::Apply(
                                arguments => [
                                    ::Var( namespace => [], name => 's', twigil => '', sigil => '$', ),
                                    ::Apply(
                                        arguments => [ ::Val::Buf( buf => ')', ), ::Apply( arguments => [],          code   => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ), ],
                                        code      => ::Var( namespace  => [],     name               => 'infix:<~>', twigil => '',              sigil           => '&', ),
                                    ),
                                ],
                                code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                            ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 's',    twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'sa',   twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'sh',   twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Lit::Capture",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Lit::Capture", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Lit::Capture',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'emit_ruby',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Val::Buf( buf => ' Subset.new({ ', ),
                                ::Apply(
                                    arguments => [
                                        ::Val::Buf( buf => 'base_class: ', ),
                                        ::Apply(
                                            arguments => [
                                                ::Call( hyper => '', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'base_class', twigil => '.', sigil => '$', ), ),
                                                ::Apply(
                                                    arguments => [
                                                        ::Val::Buf( buf => ', ', ),
                                                        ::Apply(
                                                            arguments => [
                                                                ::Val::Buf( buf => 'block: ', ),
                                                                ::Apply(
                                                                    arguments => [
                                                                        ::Val::Buf( buf => '->(s__){ ', ),
                                                                        ::Apply(
                                                                            arguments => [
                                                                                ::Call(
                                                                                    hyper     => '',
                                                                                    arguments => '',
                                                                                    method    => 'emit_ruby',
                                                                                    invocant  => ::Call( hyper => '', arguments => '', method => 'block', invocant => ::Var( namespace => [], name => 'block', twigil => '.', sigil => '$', ), ),
                                                                                ),
                                                                                ::Apply(
                                                                                    arguments => [
                                                                                        ::Val::Buf( buf => ' }', ),
                                                                                        ::Apply(
                                                                                            arguments =>
                                                                                                [ ::Val::Buf( buf => ' } )', ), ::Apply( arguments => [], code => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ), ],
                                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                        ),
                                                                                    ],
                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                ),
                                                                            ],
                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                        ),
                                                                    ],
                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                ),
                                                            ],
                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                        ),
                                                    ],
                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                ),
                                            ],
                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                        ),
                                    ],
                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                ),
                            ],
                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Lit::Subset",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Lit::Subset", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Lit::Subset',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'emit_ruby',
                block => ::Lit::Code(
                    body => [
                        ::Bind(
                            parameters => ::Var( namespace => [], name => 'sig', twigil => '', sigil => '$', ),
                            arguments => ::Call( hyper => '', arguments => '', method => 'sig', invocant => ::Var( namespace => [], name => 'block', twigil => '.', sigil => '$', ), ),
                        ),
                        ::Bind(
                            parameters => ::Var( namespace => [], name => 'routine', twigil => '', sigil => '$', ),
                            arguments  => ::Apply(
                                arguments => [
                                    ::Val::Buf( buf => '->(cap){->(', ),
                                    ::Apply(
                                        arguments => [
                                            ::Val::Buf( buf => 's_self){s_self = self; ->(', ),
                                            ::Apply(
                                                arguments => [
                                                    ::Call( hyper => '', arguments => '', method => 'emit_ruby_comma_separated_names', invocant => ::Var( namespace => [], name => 'block', twigil => '.', sigil => '$', ), ),
                                                    ::Apply(
                                                        arguments => [
                                                            ::Val::Buf( buf => '){', ),
                                                            ::Apply(
                                                                arguments => [
                                                                    ::Apply( arguments => [], code => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ),
                                                                    ::Apply(
                                                                        arguments => [
                                                                            ::Call( hyper => '', arguments => '', method => 'emit_ruby_bind_cap', invocant => ::Var( namespace => [], name => 'sig', twigil => '', sigil => '$', ), ),
                                                                            ::Apply(
                                                                                arguments => [
                                                                                    ::Call( hyper => '', arguments => '', method => 'emit_ruby_body', invocant => ::Var( namespace => [], name => 'block', twigil => '.', sigil => '$', ), ),
                                                                                    ::Apply(
                                                                                        arguments => [
                                                                                            ::Apply( arguments => [], code => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ),
                                                                                            ::Apply(
                                                                                                arguments => [
                                                                                                    ::Val::Buf( buf => '}.(', ),
                                                                                                    ::Apply(
                                                                                                        arguments => [
                                                                                                            ::Call(
                                                                                                                hyper     => '',
                                                                                                                arguments => '',
                                                                                                                method    => 'emit_ruby_comma_separated_containers',
                                                                                                                invocant  => ::Var( namespace => [], name => 'block', twigil => '.', sigil => '$', ),
                                                                                                            ),
                                                                                                            ::Apply(
                                                                                                                arguments => [ ::Val::Buf( buf => ')}.(nil', ), ::Val::Buf( buf => ')}', ), ],
                                                                                                                code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                            ),
                                                                                                        ],
                                                                                                        code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                    ),
                                                                                                ],
                                                                                                code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                            ),
                                                                                        ],
                                                                                        code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                    ),
                                                                                ],
                                                                                code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                            ),
                                                                        ],
                                                                        code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                    ),
                                                                ],
                                                                code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                            ),
                                                        ],
                                                        code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                    ),
                                                ],
                                                code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                            ),
                                        ],
                                        code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                    ),
                                ],
                                code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                            ),
                        ),
                        ::Bind(
                            parameters => ::Var( namespace => [], name => 'name', twigil => '', sigil => '$', ),
                            arguments  => ::Apply(
                                arguments => [ ::Val::Buf( buf => '&', ),      ::Val::Buf( buf => '', ),              ::Var( namespace => [], name  => 'name', twigil => '.', sigil => '$', ), ::Val::Undef(), ],
                                code      => ::Var( namespace  => [ 'Main', ], name            => 'mangle_name_ruby', twigil           => '', sigil => '&', ),
                            ),
                        ),
                        ::Bind(
                            parameters => ::Var( namespace => [], name => 'name', twigil => '', sigil => '$', ),
                            arguments =>
                                ::Apply( arguments => [ ::Val::Buf( buf => 'm', ), ::Var( namespace => [], name => 'name', twigil => '', sigil => '$', ), ], code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ), ),
                        ),
                        ::Apply(
                            arguments => [
                                ::Val::Buf( buf => 'def ', ),
                                ::Apply(
                                    arguments => [
                                        ::Var( namespace => [], name => 'name', twigil => '', sigil => '$', ),
                                        ::Apply(
                                            arguments => [
                                                ::Val::Buf( buf => '; ', ),
                                                ::Apply(
                                                    arguments => [
                                                        ::Var( namespace => [], name => 'routine', twigil => '', sigil => '$', ),
                                                        ::Apply(
                                                            arguments => [
                                                                ::Apply( arguments => [], code => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ),
                                                                ::Apply(
                                                                    arguments => [ ::Val::Buf( buf => 'end', ), ::Apply( arguments => [],          code   => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ), ],
                                                                    code      => ::Var( namespace  => [],       name               => 'infix:<~>', twigil => '',              sigil           => '&', ),
                                                                ),
                                                            ],
                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                        ),
                                                    ],
                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                ),
                                            ],
                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                        ),
                                    ],
                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                ),
                            ],
                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'sig',     twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'routine', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'name',    twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Method",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Method", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Method',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'emit_ruby',
                block => ::Lit::Code(
                    body => [
                        ::Bind(
                            parameters => ::Var( namespace => [], name => 'sig', twigil => '', sigil => '$', ),
                            arguments => ::Call( hyper => '', arguments => '', method => 'sig', invocant => ::Var( namespace => [], name => 'block', twigil => '.', sigil => '$', ), ),
                        ),
                        ::Apply(
                            arguments => [
                                ::Val::Buf( buf => '', ),
                                ::Apply(
                                    arguments => [
                                        ::Val::Buf( buf => '->(cap){->(', ),
                                        ::Apply(
                                            arguments => [
                                                ::Call( hyper => '', arguments => '', method => 'emit_ruby_comma_separated_names', invocant => ::Var( namespace => [], name => 'block', twigil => '.', sigil => '$', ), ),
                                                ::Apply(
                                                    arguments => [
                                                        ::Val::Buf( buf => '){', ),
                                                        ::Apply(
                                                            arguments => [
                                                                ::Apply( arguments => [], code => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ),
                                                                ::Apply(
                                                                    arguments => [
                                                                        ::Call( hyper => '', arguments => '', method => 'emit_ruby_bind_cap', invocant => ::Var( namespace => [], name => 'sig', twigil => '', sigil => '$', ), ),
                                                                        ::Apply(
                                                                            arguments => [
                                                                                ::Call( hyper => '', arguments => '', method => 'emit_ruby_body', invocant => ::Var( namespace => [], name => 'block', twigil => '.', sigil => '$', ), ),
                                                                                ::Apply(
                                                                                    arguments => [
                                                                                        ::Apply( arguments => [], code => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ),
                                                                                        ::Apply(
                                                                                            arguments => [
                                                                                                ::Val::Buf( buf => '}.(', ),
                                                                                                ::Apply(
                                                                                                    arguments => [
                                                                                                        ::Call(
                                                                                                            hyper     => '',
                                                                                                            arguments => '',
                                                                                                            method    => 'emit_ruby_comma_separated_containers',
                                                                                                            invocant  => ::Var( namespace => [], name => 'block', twigil => '.', sigil => '$', ),
                                                                                                        ),
                                                                                                        ::Val::Buf( buf => ')}', ),
                                                                                                    ],
                                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                                ),
                                                                                            ],
                                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                        ),
                                                                                    ],
                                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                                ),
                                                                            ],
                                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                        ),
                                                                    ],
                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                ),
                                                            ],
                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                        ),
                                                    ],
                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                ),
                                            ],
                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                        ),
                                    ],
                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                ),
                            ],
                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'sig',  twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Sub",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Sub", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Sub',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'emit_ruby',
                block => ::Lit::Code(
                    body => [ ::Apply( arguments => [ ::Val::Buf( buf => 'Macros are not currently supported by the ruby backend.', ), ], code => ::Var( namespace => [], name   => 'die', twigil     => '',     sigil => '&', ), ), ],
                    sig  => ::Sig( invocant      => ::Var( namespace  => [],                                                              name => 'self',          twigil => '', sigil     => '$', ), positional => [], ),
                    pad  => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Macro",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Macro", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Macro',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'emit_ruby',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Apply( arguments => [], code => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ),
                                ::Apply(
                                    arguments => [
                                        ::Val::Buf( buf => 'begin; ', ),
                                        ::Apply(
                                            arguments => [
                                                ::Call( hyper => '', arguments => '', method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'block', twigil => '.', sigil => '$', ), ),
                                                ::Apply(
                                                    arguments => [
                                                        ::Apply( arguments => [], code => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ),
                                                        ::Apply(
                                                            arguments => [ ::Val::Buf( buf => 'end', ), ::Apply( arguments => [],          code   => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ), ],
                                                            code      => ::Var( namespace  => [],       name               => 'infix:<~>', twigil => '',              sigil           => '&', ),
                                                        ),
                                                    ],
                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                ),
                                            ],
                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                        ),
                                    ],
                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                ),
                            ],
                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Do",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Do", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Do',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'emit_ruby',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Val::Buf( buf => ' ', ),
                                ::Apply(
                                    arguments => [ ::Call( hyper  => '', arguments => '',          method => 'emit_ruby', invocant => ::Var( namespace => [], name => 'block', twigil => '.', sigil => '$', ), ), ::Val::Buf( buf => ' ', ), ],
                                    code      => ::Var( namespace => [], name      => 'infix:<~>', twigil => '',          sigil    => '&', ),
                                ),
                            ],
                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "BEGIN",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "BEGIN", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'BEGIN',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'emit_ruby',
                block => ::Lit::Code(
                    body => [
                        ::If(
                            body => ::Lit::Code(
                                body => [
                                    ::Return(
                                        result => ::Apply(
                                            arguments => [
                                                ::Apply( arguments => [], code => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ),
                                                ::Apply(
                                                    arguments => [ ::Val::Buf( buf => '#use v6', ), ::Apply( arguments => [],          code   => ::Var( namespace => [ 'Main', ], name => 'newline', twigil => '', sigil => '&', ), ), ],
                                                    code      => ::Var( namespace  => [],           name               => 'infix:<~>', twigil => '',              sigil           => '&', ),
                                                ),
                                            ],
                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                        ),
                                    ),
                                ],
                                sig => ::Sig( invocant => '', positional => [], ),
                                pad   => ::Pad( lexicals => [], namespace => "Use", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                CATCH => '',
                                state => {},
                            ),
                            cond => ::Apply( arguments => [ ::Var( namespace => [], name => 'mod', twigil => '.', sigil => '$', ), ::Val::Buf( buf => 'v6', ), ], code => ::Var( namespace => [], name => 'infix:<eq>', twigil => '', sigil => '&', ), ),
                            otherwise => '',
                        ),
                        ::If(
                            body => ::Lit::Code(
                                body => [ ::Apply( arguments => [ ::Val::Buf( buf => 'ruby backend does not currently implement  use perl5', ), ], code => ::Var( namespace => [], name => 'die', twigil => '', sigil => '&', ), ), ],
                                sig  => ::Sig( invocant      => '',               positional                                                       => [], ),
                                pad   => ::Pad( lexicals => [], namespace => "Use", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                CATCH => '',
                                state => {},
                            ),
                            cond      => ::Var( namespace => [], name => 'perl5', twigil => '.', sigil => '$', ),
                            otherwise => ::Lit::Code(
                                body => [
                                    ::Return(
                                        result => ::Apply(
                                            arguments => [
                                                ::Val::Buf( buf => '#require ', ),
                                                ::Apply(
                                                    arguments => [
                                                        ::Apply( arguments => [], code => ::Var( namespace => [ 'Main', ], name => 'singlequote', twigil => '', sigil => '&', ), ),
                                                        ::Apply(
                                                            arguments => [
                                                                ::Var( namespace => [], name => 'mod', twigil => '.', sigil => '$', ),
                                                                ::Apply(
                                                                    arguments => [
                                                                        ::Apply( arguments => [], code => ::Var( namespace => [ 'Main', ], name => 'singlequote', twigil => '', sigil => '&', ), ),
                                                                        ::Apply( arguments => [], code => ::Var( namespace => [ 'Main', ], name => 'newline',     twigil => '', sigil => '&', ), ),
                                                                    ],
                                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                                ),
                                                            ],
                                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                        ),
                                                    ],
                                                    code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                                ),
                                            ],
                                            code => ::Var( namespace => [], name => 'infix:<~>', twigil => '', sigil => '&', ),
                                        ),
                                    ),
                                ],
                                sig => ::Sig( invocant => '', positional => [], ),
                                pad   => ::Pad( lexicals => [], namespace => "Use", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                CATCH => '',
                                state => {},
                            ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Use",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Use", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Use',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    )
