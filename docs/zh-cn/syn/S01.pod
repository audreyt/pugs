=encoding utf8

=head1 TITLE

纲要一：概述

=head1 AUTHOR

Larry Wall <larry@wall.org>

=head1 VERSION

  维护者: Larry Wall <larry@wall.org>
  日期: 2004年8月10日
  最后一次更改: 2007年1月30日
  序号: 1
  版本: 6
  SVN更动号: 14408

原先这篇文档是对“启示录一”（Apocalypse 1）的摘要，包含了最初的设计理念。
那篇最初的摘要可以在“随想”一节中找到。不过，
和“启示录”这样被冻结了的“历史文档”不同的是，
这些“纲要”（Synopses）也包含了许多更新，反映了 Perl 6 随时间不断演进的设计。
这些更新并没有被标记出来；如果“纲要”与其“启示录”不相符，则假定“纲要”是正确的。

另一个假定是我们不会在这些“纲要”中讨论某些东西，就像我们在 Perl 5 中做的那样。
尽管如此，我们仍计划不久之后用 Perl 5 的细节来填补那些空白。

=head1 项目计划

通常我们只是一群（有点儿）相互协作的蚂蚁，用力地将食物拖往巢穴的方向
（平均而言）。人们组成许多个小组，工作在他们认为能够胜任的点点滴滴的事情上，
毕竟这主要还是一份志愿者的事业。

这篇文档并不尝试总结所有这些子项目————更多信息请参见 Parrot，Pugs，和 Perl 6
的各个网站。在这里我们可以说，和 Perl 5 不同的是，
这些项目都不是作为“官方Perl”来设计的。
任何东西，只要通过了官方的测试集，就是 Perl 6。该测试集最初是在 Pugs
项目中开发的，因为该项目在探索 Perl 6 的高级语义方面是走得最远的。
（其他项目在其他方面更出色，比如速度或者协同能力。）然而，Pugs
项目将测试集视作社区的财产，并在朝着平台中立的方向努力。

本计划的另一个方面是 Perl 6 编译器将实现自举。
也就是说，编译器最终将能编译其自身，
至少要能编译到各种不同的代码生成后端能够接手的程度。

但最重要的是，我们的项目计划只是简单地帮助人们找到一个场所，
使他们感觉他们正在创造未来，既是为了他们自己，又是为了其他的人。
这就是在这儿被我们称作乐趣的东西。

=head1 随想

=over 4

=item *

历史上"启示录"一词仅仅是指一种具有启迪性的东西，
而我们在这里用的正是这种不那么激动人心的含义。

=item *

如果你寻找来自大众的 RFC，你会看到许多有趣但互相矛盾的主意，
因为人们倾向于走极端，
而且其中没有任何一个想法能够建立在其他想法之上。

=item *

Larry 语言再设计第一定律：所有人都想要发言权。

=item *

RFC 是用“PSA”来评分的：它们是否指出了一个真正的问题（Problem），
它们是否提出了一个可行的解决办法（Solution），
以及该解决办法是否可能被采纳（Accept）为 Perl 6 的一部分。

=item *

语言的再设计大体上应该按照把语言呈现给一个新用户时的顺利来进行。

=item *

Perl 6 应该具有足够的可延展性，以使得它能演化成为理想中的完美语言，Perl 7.
该达尔文式的规则暗示了向上要支持多种语法，向下要支持多种平台。

=item *

许多细节可能会改变，但 Perl 的精髓将无损地保持下去。Perl
仍将是一种多范式(multiparadigmatic)和上下文敏感的语言。
我们不会把 Perl 变成任何其他的现有的语言。

=item *

迁移是很重要的。Perl 解释器将假设喂给它的是 Perl 5 代码，除非代码以
“class”或者“module”关键字起始，
抑或是你明确地以某种其他方式告诉它你运行的是 Perl 6 代码，比如通过：

    #!/usr/bin/perl6
    use v6.0;
    v6;

=item *

另一个方向上的迁移同样是重要的。在 Perl 6 模式下，
可以在词法块的开头通过 C<use v5> 退回到 Perl 5 模式。
这样的块可以是嵌套的：

    use v6-alpha;
    # ...some Perl 6 code...
    {
        use v5;
        # ...some Perl 5 code...
        {
            use v6-alpha;
            # ...more Perl 6 code...
        }
    }

=item *

伸缩是 Perl 需要变为多范式和上下文敏感的地方之一。Perl 5
代码默认是不“严格”(strict)的，而 Perl 6 则相反。
但是，利用 C<-e> 或者一个赤裸的版本号来放宽限制，应该也是很容易的：

    perl -e '$x = 1'

    #!/usr/bin/perl
    v6; $x = 1;

=item *

编写代表用户调用其他模块的“策略元模块”也必须是可能的。

=item *

如果你想在 Perl 6 中把一切都视作对象，Perl 将帮你做到这一点。
如果你不想把一切都视作对象，Perl 也将帮你实现这种观点。

=item *

运算符只是具有古怪名字和语法的函数而已。

=item *

语言设计者仍有必要将彼此无关的想法综合成为一个一致而连贯的整体。

=back

=for vim:set expandtab sw=4:

