#!/usr/bin/perl
use strict;
package Emit::Perl5;
use Smart::Comments;
use YAML;
sub if {
	###if....
	my $body = emit($_[0]{block});
	my $exp = emit($_[0]{exp});
	return "if ($exp) {$body}";
}
sub while {
	my $body = emit($_[0]{block});
	my $exp = emit($_[0]{exp});
	return "while ($exp) {$body}";
}
sub statements {
	###statements...
	join ';',map {emit($_)} @{$_[0]};
}
sub emit {
	for (my ($node,$args) = each %{shift()}) {
		print "emit($node,$args)\n";
		no strict 'refs';
		$Emit::Perl5::{$node}->($args);
	}
}
sub expression {
}
our %op1;
$op1{'+'} = sub {
	my $exp1 = emit($_[0]{exp1});
	my $exp2 = emit($_[0]{exp2});
	return "$exp1 + $exp2";
};
$op1{'/'} = sub {
	my $exp1 = emit($_[0]{exp1});
	my $exp2 = emit($_[0]{exp2});
	return "$exp1 / $exp2";
};

print emit Load(<<'...'); #the ast is hand modified to contain an expresion node
---
statements:
  - if:
      block:
	    statements:
          expression:
            - exp1:
                num: 10
              exp2:
                exp1:
                  scalar: '$a '
                exp2:
                  double_quoted: '"abc"'
                op1: /
              op1: +
      exp:
        num: 1
...
