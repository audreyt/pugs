{ package COMPILER; 
# Do not edit this file - Perl 5 generated by KindaPerl6
use v5;
use strict;
no strict "vars";
use constant KP6_DISABLE_INSECURE_CODE => 0;
use KindaPerl6::Runtime::Perl5::Runtime;
my $_MODIFIED; INIT { $_MODIFIED = {} }
INIT { $_ = ::DISPATCH($::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
do { our $List_PAD = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List_PAD' } ) ;
;
our $List_CHECK = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List_CHECK' } ) ;
;
our $Code_emit_perl6 = ::DISPATCH( $::Routine, 'new', { modified => $_MODIFIED, name => '$Code_emit_perl6' } ) ;
;
our $Code_env_init = ::DISPATCH( $::Routine, 'new', { modified => $_MODIFIED, name => '$Code_env_init' } ) ;
;
our $Code_add_pad = ::DISPATCH( $::Routine, 'new', { modified => $_MODIFIED, name => '$Code_add_pad' } ) ;
;
our $Code_drop_pad = ::DISPATCH( $::Routine, 'new', { modified => $_MODIFIED, name => '$Code_drop_pad' } ) ;
;
our $Code_put_pad = ::DISPATCH( $::Routine, 'new', { modified => $_MODIFIED, name => '$Code_put_pad' } ) ;
;
our $Code_current_pad = ::DISPATCH( $::Routine, 'new', { modified => $_MODIFIED, name => '$Code_current_pad' } ) ;
;
our $Code_begin_block = ::DISPATCH( $::Routine, 'new', { modified => $_MODIFIED, name => '$Code_begin_block' } ) ;
;
our $Code_check_block = ::DISPATCH( $::Routine, 'new', { modified => $_MODIFIED, name => '$Code_check_block' } ) ;
;
our $Code_get_var = ::DISPATCH( $::Routine, 'new', { modified => $_MODIFIED, name => '$Code_get_var' } ) ;
;
do { if (::DISPATCH(::DISPATCH(::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::COMPILER )
,"true"),"p5landish") ) { }  else { do { our $List_PAD = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List_PAD' } ) ;
;
our $List_CHECK = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List_CHECK' } ) ;
;
our $Code_emit_perl6 = ::DISPATCH( $::Routine, 'new', { modified => $_MODIFIED, name => '$Code_emit_perl6' } ) ;
;
our $Code_env_init = ::DISPATCH( $::Routine, 'new', { modified => $_MODIFIED, name => '$Code_env_init' } ) ;
;
our $Code_add_pad = ::DISPATCH( $::Routine, 'new', { modified => $_MODIFIED, name => '$Code_add_pad' } ) ;
;
our $Code_drop_pad = ::DISPATCH( $::Routine, 'new', { modified => $_MODIFIED, name => '$Code_drop_pad' } ) ;
;
our $Code_put_pad = ::DISPATCH( $::Routine, 'new', { modified => $_MODIFIED, name => '$Code_put_pad' } ) ;
;
our $Code_current_pad = ::DISPATCH( $::Routine, 'new', { modified => $_MODIFIED, name => '$Code_current_pad' } ) ;
;
our $Code_begin_block = ::DISPATCH( $::Routine, 'new', { modified => $_MODIFIED, name => '$Code_begin_block' } ) ;
;
our $Code_check_block = ::DISPATCH( $::Routine, 'new', { modified => $_MODIFIED, name => '$Code_check_block' } ) ;
;
our $Code_get_var = ::DISPATCH( $::Routine, 'new', { modified => $_MODIFIED, name => '$Code_get_var' } ) ;
;
do {::MODIFIED($::COMPILER);
$::COMPILER = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'COMPILER' )
 )
, 'PROTOTYPE',  )
} } } }
; $List_PAD; $List_CHECK; do {::MODIFIED($Code_emit_perl6);
$Code_emit_perl6 = ::DISPATCH( $::Code, 'new', { code => sub { my $perl6; $perl6 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$perl6' } )  unless defined $perl6; INIT { $perl6 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$perl6' } ) }
;
my  $List__ = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List__' } ) ; 
;
my $node; $node = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$node' } )  unless defined $node; INIT { $node = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$node' } ) }
;
my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; INIT { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};do {::MODIFIED($Hash__);
$Hash__ = ::DISPATCH( $CAPTURE, 'hash',  )
};{ my $_param_index = 0;  if ( exists $Hash__->{_value}{_hash}{'node'} )  { do {::MODIFIED($node);
$node = ::DISPATCH( $Hash__, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'node' )
 )
} }  elsif ( exists $List__->{_value}{_array}[ $_param_index ] )  { $node = $List__->{_value}{_array}[ $_param_index++ ];  } } ::DISPATCH_VAR( $perl6, 'STORE', ::DISPATCH( $node, 'emit', $COMPILER::visitor_emit_perl6 )
 )
; return($perl6)
 }, signature => ::DISPATCH( $::Signature, "new", { invocant => $::Undef, array    => ::DISPATCH( $::Array, "new", { _array => [ ::DISPATCH( $::Signature::Item, 'new', { sigil  => '$', twigil => '', name   => 'node', value  => $::Undef, has_default    => ::DISPATCH( $::Bit, 'new', 0 )
, is_named_only  => ::DISPATCH( $::Bit, 'new', 0 )
, is_optional    => ::DISPATCH( $::Bit, 'new', 0 )
, is_slurpy      => ::DISPATCH( $::Bit, 'new', 0 )
, is_multidimensional  => ::DISPATCH( $::Bit, 'new', 0 )
, is_rw          => ::DISPATCH( $::Bit, 'new', 0 )
, is_copy        => ::DISPATCH( $::Bit, 'new', 0 )
,  } )
,  ] } ), return   => $::Undef, } )
,  } )
}; do {::MODIFIED($Code_env_init);
$Code_env_init = ::DISPATCH( $::Code, 'new', { code => sub { my $pad; $pad = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pad' } )  unless defined $pad; INIT { $pad = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pad' } ) }
;
my  $List__ = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List__' } ) ; 
;
my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; INIT { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};do {::MODIFIED($Hash__);
$Hash__ = ::DISPATCH( $CAPTURE, 'hash',  )
};{ my $_param_index = 0; } ::DISPATCH_VAR( $pad, 'STORE', ::DISPATCH( $::Pad, 'new',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $pad, 'outer',  )
, 'STORE', $::Undef )
; ::DISPATCH_VAR( ::DISPATCH( $pad, 'lexicals',  )
, 'STORE', ::DISPATCH( $::Array, 'new', { _array => [] }
 )
 )
; ::DISPATCH_VAR( ::DISPATCH( $pad, 'namespace',  )
, 'STORE', ::DISPATCH( $::Str, 'new', 'Main' )
 )
; ::DISPATCH( $COMPILER::List_PAD, 'unshift', $pad )
; ::DISPATCH_VAR( ::DISPATCH( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $List_COMPILER::PAD )
, $List_COMPILER::PAD, do {::MODIFIED($List_COMPILER::PAD);
$List_COMPILER::PAD = ::DISPATCH( $::Scalar, 'new',  )
} )
, 'STORE', $COMPILER::List_PAD )
 }, signature => ::DISPATCH( $::Signature, "new", { invocant => $::Undef, array    => ::DISPATCH( $::Array, "new", { _array => [  ] } ), return   => $::Undef, } )
,  } )
}; do {::MODIFIED($Code_add_pad);
$Code_add_pad = ::DISPATCH( $::Code, 'new', { code => sub { my $pad; $pad = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pad' } )  unless defined $pad; INIT { $pad = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pad' } ) }
;
my  $List__ = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List__' } ) ; 
;
my $namespace; $namespace = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$namespace' } )  unless defined $namespace; INIT { $namespace = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$namespace' } ) }
;
my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; INIT { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};do {::MODIFIED($Hash__);
$Hash__ = ::DISPATCH( $CAPTURE, 'hash',  )
};{ my $_param_index = 0;  if ( exists $Hash__->{_value}{_hash}{'namespace'} )  { do {::MODIFIED($namespace);
$namespace = ::DISPATCH( $Hash__, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'namespace' )
 )
} }  elsif ( exists $List__->{_value}{_array}[ $_param_index ] )  { $namespace = $List__->{_value}{_array}[ $_param_index++ ];  } } ::DISPATCH_VAR( $pad, 'STORE', ::DISPATCH( $::Pad, 'new',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $pad, 'outer',  )
, 'STORE', ::DISPATCH( $COMPILER::List_PAD, 'INDEX', ::DISPATCH( $::Int, 'new', 0 )
 )
 )
; ::DISPATCH_VAR( ::DISPATCH( $pad, 'lexicals',  )
, 'STORE', ::DISPATCH( $::Array, 'new', { _array => [] }
 )
 )
; ::DISPATCH_VAR( ::DISPATCH( $pad, 'namespace',  )
, 'STORE', $namespace )
; ::DISPATCH( $COMPILER::List_PAD, 'unshift', $pad )
 }, signature => ::DISPATCH( $::Signature, "new", { invocant => $::Undef, array    => ::DISPATCH( $::Array, "new", { _array => [ ::DISPATCH( $::Signature::Item, 'new', { sigil  => '$', twigil => '', name   => 'namespace', value  => $::Undef, has_default    => ::DISPATCH( $::Bit, 'new', 0 )
, is_named_only  => ::DISPATCH( $::Bit, 'new', 0 )
, is_optional    => ::DISPATCH( $::Bit, 'new', 0 )
, is_slurpy      => ::DISPATCH( $::Bit, 'new', 0 )
, is_multidimensional  => ::DISPATCH( $::Bit, 'new', 0 )
, is_rw          => ::DISPATCH( $::Bit, 'new', 0 )
, is_copy        => ::DISPATCH( $::Bit, 'new', 0 )
,  } )
,  ] } ), return   => $::Undef, } )
,  } )
}; do {::MODIFIED($Code_drop_pad);
$Code_drop_pad = ::DISPATCH( $::Code, 'new', { code => sub { my  $List__ = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List__' } ) ; 
;
my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; INIT { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};do {::MODIFIED($Hash__);
$Hash__ = ::DISPATCH( $CAPTURE, 'hash',  )
};{ my $_param_index = 0; } ::DISPATCH( $COMPILER::List_PAD, 'shift',  )
 }, signature => ::DISPATCH( $::Signature, "new", { invocant => $::Undef, array    => ::DISPATCH( $::Array, "new", { _array => [  ] } ), return   => $::Undef, } )
,  } )
}; do {::MODIFIED($Code_put_pad);
$Code_put_pad = ::DISPATCH( $::Code, 'new', { code => sub { my  $List__ = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List__' } ) ; 
;
my $pad; $pad = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pad' } )  unless defined $pad; INIT { $pad = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pad' } ) }
;
my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; INIT { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};do {::MODIFIED($Hash__);
$Hash__ = ::DISPATCH( $CAPTURE, 'hash',  )
};{ my $_param_index = 0;  if ( exists $Hash__->{_value}{_hash}{'pad'} )  { do {::MODIFIED($pad);
$pad = ::DISPATCH( $Hash__, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'pad' )
 )
} }  elsif ( exists $List__->{_value}{_array}[ $_param_index ] )  { $pad = $List__->{_value}{_array}[ $_param_index++ ];  } } ::DISPATCH( $COMPILER::List_PAD, 'unshift', $pad )
 }, signature => ::DISPATCH( $::Signature, "new", { invocant => $::Undef, array    => ::DISPATCH( $::Array, "new", { _array => [ ::DISPATCH( $::Signature::Item, 'new', { sigil  => '$', twigil => '', name   => 'pad', value  => $::Undef, has_default    => ::DISPATCH( $::Bit, 'new', 0 )
, is_named_only  => ::DISPATCH( $::Bit, 'new', 0 )
, is_optional    => ::DISPATCH( $::Bit, 'new', 0 )
, is_slurpy      => ::DISPATCH( $::Bit, 'new', 0 )
, is_multidimensional  => ::DISPATCH( $::Bit, 'new', 0 )
, is_rw          => ::DISPATCH( $::Bit, 'new', 0 )
, is_copy        => ::DISPATCH( $::Bit, 'new', 0 )
,  } )
,  ] } ), return   => $::Undef, } )
,  } )
}; do {::MODIFIED($Code_current_pad);
$Code_current_pad = ::DISPATCH( $::Code, 'new', { code => sub { my  $List__ = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List__' } ) ; 
;
my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; INIT { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};do {::MODIFIED($Hash__);
$Hash__ = ::DISPATCH( $CAPTURE, 'hash',  )
};{ my $_param_index = 0; } return(::DISPATCH( $COMPILER::List_PAD, 'INDEX', ::DISPATCH( $::Int, 'new', 0 )
 )
)
 }, signature => ::DISPATCH( $::Signature, "new", { invocant => $::Undef, array    => ::DISPATCH( $::Array, "new", { _array => [  ] } ), return   => $::Undef, } )
,  } )
}; do {::MODIFIED($Code_begin_block);
$Code_begin_block = ::DISPATCH( $::Code, 'new', { code => sub { my  $List__ = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List__' } ) ; 
;
my $ast; $ast = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ast' } )  unless defined $ast; INIT { $ast = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ast' } ) }
;
my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; INIT { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};do {::MODIFIED($Hash__);
$Hash__ = ::DISPATCH( $CAPTURE, 'hash',  )
};{ my $_param_index = 0;  if ( exists $Hash__->{_value}{_hash}{'ast'} )  { do {::MODIFIED($ast);
$ast = ::DISPATCH( $Hash__, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'ast' )
 )
} }  elsif ( exists $List__->{_value}{_array}[ $_param_index ] )  { $ast = $List__->{_value}{_array}[ $_param_index++ ];  } } ::DISPATCH( $Pad::Code_begin_block, 'APPLY', $ast )
 }, signature => ::DISPATCH( $::Signature, "new", { invocant => $::Undef, array    => ::DISPATCH( $::Array, "new", { _array => [ ::DISPATCH( $::Signature::Item, 'new', { sigil  => '$', twigil => '', name   => 'ast', value  => $::Undef, has_default    => ::DISPATCH( $::Bit, 'new', 0 )
, is_named_only  => ::DISPATCH( $::Bit, 'new', 0 )
, is_optional    => ::DISPATCH( $::Bit, 'new', 0 )
, is_slurpy      => ::DISPATCH( $::Bit, 'new', 0 )
, is_multidimensional  => ::DISPATCH( $::Bit, 'new', 0 )
, is_rw          => ::DISPATCH( $::Bit, 'new', 0 )
, is_copy        => ::DISPATCH( $::Bit, 'new', 0 )
,  } )
,  ] } ), return   => $::Undef, } )
,  } )
}; do {::MODIFIED($Code_check_block);
$Code_check_block = ::DISPATCH( $::Code, 'new', { code => sub { my $pad; $pad = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pad' } )  unless defined $pad; INIT { $pad = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pad' } ) }
;
my  $List__ = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List__' } ) ; 
;
my $ast; $ast = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ast' } )  unless defined $ast; INIT { $ast = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ast' } ) }
;
my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; INIT { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};do {::MODIFIED($Hash__);
$Hash__ = ::DISPATCH( $CAPTURE, 'hash',  )
};{ my $_param_index = 0;  if ( exists $Hash__->{_value}{_hash}{'ast'} )  { do {::MODIFIED($ast);
$ast = ::DISPATCH( $Hash__, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'ast' )
 )
} }  elsif ( exists $List__->{_value}{_array}[ $_param_index ] )  { $ast = $List__->{_value}{_array}[ $_param_index++ ];  } } ::DISPATCH_VAR( $pad, 'STORE', ::DISPATCH( $COMPILER::PAD, 'INDEX', ::DISPATCH( $::Int, 'new', 0 )
 )
 )
; ::DISPATCH( $GLOBAL::Code_push, 'APPLY', $COMPILER::List_CHECK, ::DISPATCH( $::Array, 'new', { _array => [$ast, $pad] }
 )
 )
; return(::DISPATCH( $::Val::Undef, 'new',  )
)
 }, signature => ::DISPATCH( $::Signature, "new", { invocant => $::Undef, array    => ::DISPATCH( $::Array, "new", { _array => [ ::DISPATCH( $::Signature::Item, 'new', { sigil  => '$', twigil => '', name   => 'ast', value  => $::Undef, has_default    => ::DISPATCH( $::Bit, 'new', 0 )
, is_named_only  => ::DISPATCH( $::Bit, 'new', 0 )
, is_optional    => ::DISPATCH( $::Bit, 'new', 0 )
, is_slurpy      => ::DISPATCH( $::Bit, 'new', 0 )
, is_multidimensional  => ::DISPATCH( $::Bit, 'new', 0 )
, is_rw          => ::DISPATCH( $::Bit, 'new', 0 )
, is_copy        => ::DISPATCH( $::Bit, 'new', 0 )
,  } )
,  ] } ), return   => $::Undef, } )
,  } )
}; do {::MODIFIED($Code_get_var);
$Code_get_var = ::DISPATCH( $::Code, 'new', { code => sub { my $var; $var = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$var' } )  unless defined $var; INIT { $var = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$var' } ) }
;
my $pad; $pad = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pad' } )  unless defined $pad; INIT { $pad = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pad' } ) }
;
my  $List__ = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List__' } ) ; 
;
my $sigil; $sigil = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$sigil' } )  unless defined $sigil; INIT { $sigil = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$sigil' } ) }
;
my $twigil; $twigil = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$twigil' } )  unless defined $twigil; INIT { $twigil = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$twigil' } ) }
;
my $name; $name = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$name' } )  unless defined $name; INIT { $name = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$name' } ) }
;
my $CAPTURE; $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )  unless defined $CAPTURE; INIT { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));do {::MODIFIED($List__);
$List__ = ::DISPATCH( $CAPTURE, 'array',  )
};do {::MODIFIED($Hash__);
$Hash__ = ::DISPATCH( $CAPTURE, 'hash',  )
};{ my $_param_index = 0;  if ( exists $Hash__->{_value}{_hash}{'sigil'} )  { do {::MODIFIED($sigil);
$sigil = ::DISPATCH( $Hash__, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'sigil' )
 )
} }  elsif ( exists $List__->{_value}{_array}[ $_param_index ] )  { $sigil = $List__->{_value}{_array}[ $_param_index++ ];  }  if ( exists $Hash__->{_value}{_hash}{'twigil'} )  { do {::MODIFIED($twigil);
$twigil = ::DISPATCH( $Hash__, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'twigil' )
 )
} }  elsif ( exists $List__->{_value}{_array}[ $_param_index ] )  { $twigil = $List__->{_value}{_array}[ $_param_index++ ];  }  if ( exists $Hash__->{_value}{_hash}{'name'} )  { do {::MODIFIED($name);
$name = ::DISPATCH( $Hash__, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'name' )
 )
} }  elsif ( exists $List__->{_value}{_array}[ $_param_index ] )  { $name = $List__->{_value}{_array}[ $_param_index++ ];  } } ::DISPATCH_VAR( $var, 'STORE', ::DISPATCH( $::Var, 'new',  )
 )
; ::DISPATCH_VAR( ::DISPATCH( $var, 'sigil',  )
, 'STORE', $sigil )
; ::DISPATCH_VAR( ::DISPATCH( $var, 'twigil',  )
, 'STORE', $twigil )
; ::DISPATCH_VAR( ::DISPATCH( $var, 'name',  )
, 'STORE', $name )
; ::DISPATCH_VAR( $pad, 'STORE', ::DISPATCH( $COMPILER::List_PAD, 'INDEX', ::DISPATCH( $::Int, 'new', 0 )
 )
 )
; return($var)
 }, signature => ::DISPATCH( $::Signature, "new", { invocant => $::Undef, array    => ::DISPATCH( $::Array, "new", { _array => [ ::DISPATCH( $::Signature::Item, 'new', { sigil  => '$', twigil => '', name   => 'sigil', value  => $::Undef, has_default    => ::DISPATCH( $::Bit, 'new', 0 )
, is_named_only  => ::DISPATCH( $::Bit, 'new', 0 )
, is_optional    => ::DISPATCH( $::Bit, 'new', 0 )
, is_slurpy      => ::DISPATCH( $::Bit, 'new', 0 )
, is_multidimensional  => ::DISPATCH( $::Bit, 'new', 0 )
, is_rw          => ::DISPATCH( $::Bit, 'new', 0 )
, is_copy        => ::DISPATCH( $::Bit, 'new', 0 )
,  } )
, ::DISPATCH( $::Signature::Item, 'new', { sigil  => '$', twigil => '', name   => 'twigil', value  => $::Undef, has_default    => ::DISPATCH( $::Bit, 'new', 0 )
, is_named_only  => ::DISPATCH( $::Bit, 'new', 0 )
, is_optional    => ::DISPATCH( $::Bit, 'new', 0 )
, is_slurpy      => ::DISPATCH( $::Bit, 'new', 0 )
, is_multidimensional  => ::DISPATCH( $::Bit, 'new', 0 )
, is_rw          => ::DISPATCH( $::Bit, 'new', 0 )
, is_copy        => ::DISPATCH( $::Bit, 'new', 0 )
,  } )
, ::DISPATCH( $::Signature::Item, 'new', { sigil  => '$', twigil => '', name   => 'name', value  => $::Undef, has_default    => ::DISPATCH( $::Bit, 'new', 0 )
, is_named_only  => ::DISPATCH( $::Bit, 'new', 0 )
, is_optional    => ::DISPATCH( $::Bit, 'new', 0 )
, is_slurpy      => ::DISPATCH( $::Bit, 'new', 0 )
, is_multidimensional  => ::DISPATCH( $::Bit, 'new', 0 )
, is_rw          => ::DISPATCH( $::Bit, 'new', 0 )
, is_copy        => ::DISPATCH( $::Bit, 'new', 0 )
,  } )
,  ] } ), return   => $::Undef, } )
,  } )
} }
; 1 }
