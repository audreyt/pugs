%prefix smop_native_int
%RI SMOP__NATIVE__int
%RI.id Native int
%attr int intvalue
%method infix:>
    SMOP__Object* other = SMOP__NATIVE__capture_positional(interpreter,capture,0);
    if (SMOP_RI(other) == (SMOP__ResponderInterface*)SMOP__NATIVE__int) {
      if (SMOP__NATIVE__int_fetch(invocant) > SMOP__NATIVE__int_fetch(other)) {
        ret = SMOP__NATIVE__bool_true;
      } else {
        ret = SMOP__NATIVE__bool_false;
      }
    } else {
      ___UNKNOWN_METHOD___;
    }
    SMOP_RELEASE(interpreter, other);
%method infix:>=
    SMOP__Object* other = SMOP__NATIVE__capture_positional(interpreter,capture,0);
    if (SMOP_RI(other) == (SMOP__ResponderInterface*)SMOP__NATIVE__int) {
      if (SMOP__NATIVE__int_fetch(invocant) >= SMOP__NATIVE__int_fetch(other)) {
        ret = SMOP__NATIVE__bool_true;
      } else {
        ret = SMOP__NATIVE__bool_false;
      }
    } else {
      ___UNKNOWN_METHOD___;
    }
    SMOP_RELEASE(interpreter, other);
%method defined
    ret = SMOP__NATIVE__bool_true;
%method FETCH
    ___VALUE_FETCH___;
%method STORE
    ___VALUE_STORE___;
%method new
    SMOP__Object* other = SMOP__NATIVE__capture_positional(interpreter,capture,0);
    if (other && SMOP_RI(other) == (SMOP__ResponderInterface*)SMOP__NATIVE__int) {
      SMOP_RELEASE(interpreter, capture);
      return other;
    } else {
      if (other) SMOP_RELEASE(interpreter, other);
      SMOP_RELEASE(interpreter, capture);
      return SMOP__NATIVE__int_create(0);
    }
%method postfix:++
    smop_lowlevel_wrlock(invocant);
    ((smop_native_int_struct*)invocant)->intvalue++;
    smop_lowlevel_unlock(invocant);
%method DESTROYALL
%{
SMOP__Object* SMOP__NATIVE__int_create(int value) {
  SMOP__Object* ret = smop_lowlevel_alloc(sizeof(smop_native_int_struct));
  ret->RI = (SMOP__ResponderInterface*)SMOP__NATIVE__int;
  ((smop_native_int_struct*)ret)->intvalue = value;
  return ret;
}

int SMOP__NATIVE__int_fetch(SMOP__Object* value) {
  smop_lowlevel_rdlock(value);
  int v = ((smop_native_int_struct*)value)->intvalue;
  smop_lowlevel_unlock(value);
  return v;
}
%}
