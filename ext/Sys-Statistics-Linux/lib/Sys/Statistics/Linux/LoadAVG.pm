=begin pod

=head1 NAME

Sys::Statistics::Linux::LoadAVG - Collect linux load average statistics.

=head1 SYNOPSIS

   use Sys::Statistics::Linux::LoadAVG;

   my $lxs   = Sys::Statistics::Linux::LoadAVG.new;
   my %stats = $lxs.get;

=head1 DESCRIPTION

Sys::Statistics::Linux::LoadAVG gathers the load average from the virtual F</proc> filesystem (procfs).

For more informations read the documentation of the front-end module L<Sys::Statistics::Linux>.

=head1 LOAD AVERAGE STATISTICS

Generated by F</proc/loadavg>.

   avg_1   -  The average processor workload of the last minute.
   avg_5   -  The average processor workload of the last five minutes.
   avg_15  -  The average processor workload of the last fifteen minutes.

=head1 METHODS

=head2 new()

Call C<new()> to create a new object.

   my $lxs = Sys::Statistics::Linux::LoadAVG.new;

=head2 get()

Call C<get()> to get the statistics. C<get()> returns the statistics as a hash reference.

   my %stats = $lxs.get;

=head1 EXAMPLES

    my $lxs = Sys::Statistics::Linux::LoadAVG.new;
    my $header = 0;

    while ( 1 ) {
        sleep(1);
        my %stats = $lxs.get;
        my $time  = localtime();

        if $header == 0 {
            $header = 20;
            print  ' ' x 20;
            printf "%8s%8s%8s\n", <avg_1 avg_5 avg_15>;
        }

        printf "%04d-%02d-%02d %02d:%02d:%02d %8s%8s%8s\n",
               $time.<year month day hour min sec>, 
               %stats<avg_1 avg_5 avg_15>;

        $header--;
    }

=head1 EXPORTS

No exports.

=head1 SEE ALSO

B<proc(5)>

=head1 REPORTING BUGS

Please report all bugs to <jschulz.cpan(at)bloonix.de>.

=head1 AUTHOR

Jonny Schulz <jschulz.cpan(at)bloonix.de>.

=head1 COPYRIGHT

Copyright (c) 2006, 2007 by Jonny Schulz. All rights reserved.

This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.

=end pod

#package Sys::Statistics::Linux::LoadAVG;
#our $VERSION = '0.04';

class Sys::Statistics::Linux::LoadAVG-0.001;

use v6-alpha;

#use strict;
#use warnings;
#use Carp qw(croak);

sub croak (*@m) { die @m } # waiting for Carp::croak

#sub new {
#   my $class = shift;
#   my %self = (
#      files => {
#         loadavg => '/proc/loadavg',
#      }
#   );
#   return bless \%self, $class;
#}

has Hash $.files = {};

submethod BUILD () {
    $.files<loadavg> = '/proc/loadavg';
}

#sub get {
#   my $self  = shift;
#   my $class = ref $self;
#   my $file  = $self->{files};
#   my %lavg  = ();
#
#   open my $fh, '<', $file->{loadavg} or croak "$class: unable to open $file->{loadavg} ($!)";
#
#   ( $lavg{avg_1}
#   , $lavg{avg_5}
#   , $lavg{avg_15}
#   ) = (split /\s+/, <$fh>)[0..2];
#
#   close($fh);
#   return \%lavg;
#}

method get () {
    my $avgfile = self.files<loadavg>;
    my $avgfh = open($avgfile, :r) or croak("unable to open $file: $!");
    my %stat;
    %stat<avg_1 avg_5 avg_15> = ($avgfh.readline.comb)[0..2];
    $avgfh.close;
    return %stat;
}

1;
