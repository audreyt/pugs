{

    package GLOBAL;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }

    BEGIN {
        $_ =
          ::DISPATCH( $::Scalar, "new",
            { modified => $_MODIFIED, name => "$_" } );
    }
    our $Code_all =
      ::DISPATCH( $::Routine, 'new',
        { modified => $_MODIFIED, name => '$Code_all' } );
    do {
        if (
            ::DISPATCH(
                ::DISPATCH(
                    ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::GLOBAL ),
                    "true"
                ),
                "p5landish"
            )
          )
        {
        }
        else {
            our $Code_all =
              ::DISPATCH( $::Routine, 'new',
                { modified => $_MODIFIED, name => '$Code_all' } );
            do {
                ::MODIFIED($::GLOBAL);
                $::GLOBAL = ::DISPATCH(
                    ::DISPATCH(
                        $::Class, 'new',
                        ::DISPATCH( $::Str, 'new', 'GLOBAL' )
                    ),
                    'PROTOTYPE',
                );
              }
        }
    };
    do {
        ::MODIFIED($Code_all);
        $Code_all = ::DISPATCH(
            $::Code, 'new',
            {
                code => sub {
                    my $junc;
                    $junc =
                      ::DISPATCH( $::Scalar, 'new',
                        { modified => $_MODIFIED, name => '$junc' } )
                      unless defined $junc;

                    BEGIN {
                        $junc =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$junc' } );
                    }
                    my $List__ =
                      ::DISPATCH( $::Array, 'new',
                        { modified => $_MODIFIED, name => '$List__' } );
                    my $self;
                    $self =
                      ::DISPATCH( $::Scalar, 'new',
                        { modified => $_MODIFIED, name => '$self' } )
                      unless defined $self;

                    BEGIN {
                        $self =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$self' } );
                    }
                    my $CAPTURE;
                    $CAPTURE =
                      ::DISPATCH( $::Scalar, 'new',
                        { modified => $_MODIFIED, name => '$CAPTURE' } )
                      unless defined $CAPTURE;

                    BEGIN {
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } );
                    }
                    ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                    do {
                        ::MODIFIED($List__);
                        $List__ = ::DISPATCH( $CAPTURE, 'array', );
                    };
                    ::DISPATCH_VAR( $junc, 'STORE',
                        ::DISPATCH( $::Junction, 'new', ) );
                    ::DISPATCH_VAR( ::DISPATCH( $junc, 'things', ),
                        'STORE', $List__ );
                    ::DISPATCH_VAR(
                        ::DISPATCH( $junc, 'type', ),
                        'STORE',
                        ::DISPATCH( $::Str, 'new', 'all' )
                    );
                    $junc;
                },
                signature => ::DISPATCH(
                    $::Signature,
                    "new",
                    {
                        invocant => ::DISPATCH(
                            $::Signature::Item, "new",
                            { sigil => '$', twigil => '', name => 'self', }
                        ),
                        array =>
                          ::DISPATCH( $::Array, "new", { _array => [] } ),
                        hash   => ::DISPATCH( $::Hash, "new", { _hash => {} } ),
                        return => $::Undef,
                    }
                ),
            }
        );
    };
    1
}

