{

    package KindaPerl6::Visitor::EmitPerl5Regex;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::KP6Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }
    BEGIN { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::KindaPerl6::Visitor::EmitPerl5Regex ), "true" ), "p5landish" ) ) { }
            else {
                {
                    do {
                        ::MODIFIED($::KindaPerl6::Visitor::EmitPerl5Regex);
                        $::KindaPerl6::Visitor::EmitPerl5Regex = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'KindaPerl6::Visitor::EmitPerl5Regex' ) ), 'PROTOTYPE', );
                        }
                }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::KindaPerl6::Visitor::EmitPerl5Regex, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'visit' ),
            ::DISPATCH(
                $::Code, 'new',
                {   code => sub {
                        my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        my $node;
                        $node = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$node' } ) unless defined $node;
                        BEGIN { $node = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$node' } ) }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                        BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        do {
                            ::MODIFIED($node);
                            $node = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', 0 ) );
                        };
                        ::DISPATCH( $node, 'emit_perl5', );
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {   invocant => $::Undef,
                            array    => ::DISPATCH( $::Array, "new", { _array => [ ::DISPATCH( $::Signature::Item, "new", { sigil => '$', twigil => '', name => 'node', namespace => [], } ), ] } ),
                            hash   => ::DISPATCH( $::Hash, "new", { _hash => {} } ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
        use KindaPerl6::Visitor::EmitPerl5
    };
    1
}
{

    package Token;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::KP6Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }
    BEGIN { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::Token ), "true" ), "p5landish" ) ) { }
            else {
                {
                    do {
                        ::MODIFIED($::Token);
                        $::Token = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'Token' ) ), 'PROTOTYPE', );
                        }
                }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Token, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'emit_perl5' ),
            ::DISPATCH(
                $::Code, 'new',
                {   code => sub {
                        my $regex_source;
                        $regex_source = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$regex_source' } ) unless defined $regex_source;
                        BEGIN { $regex_source = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$regex_source' } ) }
                        my $source;
                        $source = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$source' } ) unless defined $source;
                        BEGIN { $source = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$source' } ) }
                        my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) unless defined $self;
                        BEGIN { $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                        BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        do {
                            ::MODIFIED($regex_source);
                            $regex_source = ::DISPATCH( ::DISPATCH( $self, "regex" ), 'emit_perl5', );
                        };
                        do {
                            ::MODIFIED($source);
                            $source = ::DISPATCH(
                                $GLOBAL::Code_infix_58__60__126__62_,
                                'APPLY',
                                ::DISPATCH( $::Str, 'new', 'use vars qw($_rule_' ),
                                ::DISPATCH(
                                    $GLOBAL::Code_infix_58__60__126__62_,
                                    'APPLY',
                                    ::DISPATCH( $self, "name" ),
                                    ::DISPATCH(
                                        $GLOBAL::Code_infix_58__60__126__62_,
                                        'APPLY',
                                        ::DISPATCH( $::Str, 'new', '); ' ),
                                        ::DISPATCH(
                                            $GLOBAL::Code_infix_58__60__126__62_,
                                            'APPLY',
                                            ::DISPATCH( $::Str, 'new', '$_rule_' ),
                                            ::DISPATCH(
                                                $GLOBAL::Code_infix_58__60__126__62_,
                                                'APPLY',
                                                ::DISPATCH( $self, "name" ),
                                                ::DISPATCH(
                                                    $GLOBAL::Code_infix_58__60__126__62_,
                                                    'APPLY',
                                                    ::DISPATCH( $::Str, 'new', ' = qr/' ),
                                                    ::DISPATCH(
                                                        $GLOBAL::Code_infix_58__60__126__62_,
                                                        'APPLY',
                                                        ::DISPATCH( $::Str, 'new', '(?{ ' ),
                                                        ::DISPATCH(
                                                            $GLOBAL::Code_infix_58__60__126__62_,
                                                            'APPLY',
                                                            ::DISPATCH( $::Str, 'new', 'local $GLOBAL::_M = [ $GLOBAL::_M, \\\'create\\\', pos(), \\\\$_ ]; ' ),
                                                            ::DISPATCH(
                                                                $GLOBAL::Code_infix_58__60__126__62_,
                                                                'APPLY',
                                                                ::DISPATCH( $::Str, 'new', '$GLOBAL::_M2 = $GLOBAL::_M; ' ),
                                                                ::DISPATCH(
                                                                    $GLOBAL::Code_infix_58__60__126__62_,
                                                                    'APPLY',
                                                                    ::DISPATCH( $::Str, 'new', '})' ),
                                                                    ::DISPATCH(
                                                                        $GLOBAL::Code_infix_58__60__126__62_,
                                                                        'APPLY',
                                                                        $regex_source,
                                                                        ::DISPATCH(
                                                                            $GLOBAL::Code_infix_58__60__126__62_,
                                                                            'APPLY',
                                                                            ::DISPATCH( $::Str, 'new', '(?{ ' ),
                                                                            ::DISPATCH(
                                                                                $GLOBAL::Code_infix_58__60__126__62_,
                                                                                'APPLY',
                                                                                ::DISPATCH( $::Str, 'new', 'local $GLOBAL::_M = [ $GLOBAL::_M, \\\'to\\\', pos() ]; ' ),
                                                                                ::DISPATCH(
                                                                                    $GLOBAL::Code_infix_58__60__126__62_,
                                                                                    'APPLY',
                                                                                    ::DISPATCH( $::Str, 'new', '$GLOBAL::_M2 = $GLOBAL::_M; ' ),
                                                                                    ::DISPATCH(
                                                                                        $GLOBAL::Code_infix_58__60__126__62_,
                                                                                        'APPLY',
                                                                                        ::DISPATCH( $::Str, 'new', '})' ),
                                                                                        ::DISPATCH(
                                                                                            $GLOBAL::Code_infix_58__60__126__62_,
                                                                                            'APPLY',
                                                                                            ::DISPATCH( $::Str, 'new', '/x; ' ),
                                                                                            ::DISPATCH(
                                                                                                $GLOBAL::Code_infix_58__60__126__62_,
                                                                                                'APPLY',
                                                                                                ::DISPATCH( $::Str, 'new', '$::X->{_dispatch}( $::X, "HOW", )->{_dispatch}( ' ),
                                                                                                ::DISPATCH(
                                                                                                    $GLOBAL::Code_infix_58__60__126__62_,
                                                                                                    'APPLY',
                                                                                                    ::DISPATCH( $::Str, 'new', '$::X->{_dispatch}( $::X, "HOW", ), ' ),
                                                                                                    ::DISPATCH(
                                                                                                        $GLOBAL::Code_infix_58__60__126__62_,
                                                                                                        'APPLY',
                                                                                                        ::DISPATCH( $::Str, 'new', '"add_method", ' ),
                                                                                                        ::DISPATCH(
                                                                                                            $GLOBAL::Code_infix_58__60__126__62_,
                                                                                                            'APPLY',
                                                                                                            ::DISPATCH( $::Str, 'new', '$::Str->{_dispatch}( $::Str, "new", "' ),
                                                                                                            ::DISPATCH(
                                                                                                                $GLOBAL::Code_infix_58__60__126__62_,
                                                                                                                'APPLY',
                                                                                                                ::DISPATCH( $self, "name" ),
                                                                                                                ::DISPATCH(
                                                                                                                    $GLOBAL::Code_infix_58__60__126__62_,
                                                                                                                    'APPLY',
                                                                                                                    ::DISPATCH( $::Str, 'new', '" ), ' ),
                                                                                                                    ::DISPATCH(
                                                                                                                        $GLOBAL::Code_infix_58__60__126__62_,
                                                                                                                        'APPLY',
                                                                                                                        ::DISPATCH( $::Str, 'new', '$::Method->{_dispatch}( $::Method, "new", ' ),
                                                                                                                        ::DISPATCH(
                                                                                                                            $GLOBAL::Code_infix_58__60__126__62_,
                                                                                                                            'APPLY',
                                                                                                                            ::DISPATCH( $::Str, 'new', 'sub { ' ),
                                                                                                                            ::DISPATCH(
                                                                                                                                $GLOBAL::Code_infix_58__60__126__62_,
                                                                                                                                'APPLY',
                                                                                                                                ::DISPATCH( $::Str, 'new', 'local $GLOBAL::_Class = shift; ' ),
                                                                                                                                ::DISPATCH(
                                                                                                                                    $GLOBAL::Code_infix_58__60__126__62_,
                                                                                                                                    'APPLY',
                                                                                                                                    ::DISPATCH( $::Str, 'new', 'undef $GLOBAL::_M2; ' ),
                                                                                                                                    ::DISPATCH(
                                                                                                                                        $GLOBAL::Code_infix_58__60__126__62_,
                                                                                                                                        'APPLY',
                                                                                                                                        ::DISPATCH( $::Str, 'new', '( ref($_) ? $_->{_dispatch}( $_, "str" )->{_value} : $_ ) =~ ' ),
                                                                                                                                        ::DISPATCH(
                                                                                                                                            $GLOBAL::Code_infix_58__60__126__62_,
                                                                                                                                            'APPLY',
                                                                                                                                            ::DISPATCH( $::Str, 'new', '/$_rule_' ),
                                                                                                                                            ::DISPATCH(
                                                                                                                                                $GLOBAL::Code_infix_58__60__126__62_,
                                                                                                                                                'APPLY',
                                                                                                                                                ::DISPATCH( $self, "name" ),
                                                                                                                                                ::DISPATCH(
                                                                                                                                                    $GLOBAL::Code_infix_58__60__126__62_,
                                                                                                                                                    'APPLY',
                                                                                                                                                    ::DISPATCH( $::Str, 'new', '/; ' ),
                                                                                                                                                    ::DISPATCH(
                                                                                                                                                        $GLOBAL::Code_infix_58__60__126__62_,
                                                                                                                                                        'APPLY',
                                                                                                                                                        ::DISPATCH( $::Str, 'new', 'Match::from_global_data( $GLOBAL::_M2 ); ' ),
                                                                                                                                                        ::DISPATCH(
                                                                                                                                                            $GLOBAL::Code_infix_58__60__126__62_,
                                                                                                                                                            'APPLY',
                                                                                                                                                            ::DISPATCH( $::Str, 'new', '$MATCH = ' ),
                                                                                                                                                            ::DISPATCH(
                                                                                                                                                                $GLOBAL::Code_infix_58__60__126__62_,
                                                                                                                                                                'APPLY',
                                                                                                                                                                ::DISPATCH( $::Str, 'new', '$GLOBAL::MATCH = pop @Match::Matches; ' ),
                                                                                                                                                                ::DISPATCH(
                                                                                                                                                                    $GLOBAL::Code_infix_58__60__126__62_,
                                                                                                                                                                    'APPLY',
                                                                                                                                                                    ::DISPATCH( $::Str, 'new', '@Match::Matches = (); ' ),
                                                                                                                                                                    ::DISPATCH(
                                                                                                                                                                        $GLOBAL::Code_infix_58__60__126__62_,
                                                                                                                                                                        'APPLY',
                                                                                                                                                                        ::DISPATCH( $::Str, 'new', '} ' ),
                                                                                                                                                                        ::DISPATCH(
                                                                                                                                                                            $GLOBAL::Code_infix_58__60__126__62_, 'APPLY',
                                                                                                                                                                            ::DISPATCH( $::Str, 'new', '), ' ), ::DISPATCH( $::Str, 'new', '); ' )
                                                                                                                                                                        )
                                                                                                                                                                    )
                                                                                                                                                                )
                                                                                                                                                            )
                                                                                                                                                        )
                                                                                                                                                    )
                                                                                                                                                )
                                                                                                                                            )
                                                                                                                                        )
                                                                                                                                    )
                                                                                                                                )
                                                                                                                            )
                                                                                                                        )
                                                                                                                    )
                                                                                                                )
                                                                                                            )
                                                                                                        )
                                                                                                    )
                                                                                                )
                                                                                            )
                                                                                        )
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            );
                        };
                        return ($source);
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {   invocant => ::DISPATCH( $::Signature::Item, "new", { sigil  => '$', twigil => '', name => 'self', namespace => [], } ),
                            array    => ::DISPATCH( $::Array,           "new", { _array => [] } ),
                            hash     => ::DISPATCH( $::Hash,            "new", { _hash  => {} } ),
                            return   => $::Undef,
                        }
                    ),
                }
            )
            )
    };
    1
}
{

    package Rule::Quantifier;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::KP6Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }
    BEGIN { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::Rule::Quantifier ), "true" ), "p5landish" ) ) { }
            else {
                {
                    do {
                        ::MODIFIED($::Rule::Quantifier);
                        $::Rule::Quantifier = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'Rule::Quantifier' ) ), 'PROTOTYPE', );
                        }
                }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::Quantifier, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'emit_perl5' ),
            ::DISPATCH(
                $::Code, 'new',
                {   code => sub {
                        my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) unless defined $self;
                        BEGIN { $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                        BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        ::DISPATCH(
                            $GLOBAL::Code_infix_58__60__126__62_,
                            'APPLY',
                            ::DISPATCH( ::DISPATCH( $self, "term" ), 'emit_perl5', ),
                            ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( $self, "quant" ), ::DISPATCH( $self, "greedy" ) )
                        );
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {   invocant => ::DISPATCH( $::Signature::Item, "new", { sigil  => '$', twigil => '', name => 'self', namespace => [], } ),
                            array    => ::DISPATCH( $::Array,           "new", { _array => [] } ),
                            hash     => ::DISPATCH( $::Hash,            "new", { _hash  => {} } ),
                            return   => $::Undef,
                        }
                    ),
                }
            )
            )
    };
    1
}
{

    package Rule::Or;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::KP6Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }
    BEGIN { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::Rule::Or ), "true" ), "p5landish" ) ) { }
            else {
                {
                    do {
                        ::MODIFIED($::Rule::Or);
                        $::Rule::Or = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'Rule::Or' ) ), 'PROTOTYPE', );
                        }
                }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::Or, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'emit_perl5' ),
            ::DISPATCH(
                $::Code, 'new',
                {   code => sub {
                        my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) unless defined $self;
                        BEGIN { $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                        BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        ::DISPATCH(
                            $GLOBAL::Code_infix_58__60__126__62_,
                            'APPLY',
                            ::DISPATCH( $::Str,                               'new',   '(?:' ),
                            ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( [ map { $_->emit_perl5() } @{ ::DISPATCH( $self, "or" ) } ], 'join', ::DISPATCH( $::Str, 'new', '|' ) ), ::DISPATCH( $::Str, 'new', ')' ) )
                        );
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {   invocant => ::DISPATCH( $::Signature::Item, "new", { sigil  => '$', twigil => '', name => 'self', namespace => [], } ),
                            array    => ::DISPATCH( $::Array,           "new", { _array => [] } ),
                            hash     => ::DISPATCH( $::Hash,            "new", { _hash  => {} } ),
                            return   => $::Undef,
                        }
                    ),
                }
            )
            )
    };
    1
}
{

    package Rule::Concat;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::KP6Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }
    BEGIN { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::Rule::Concat ), "true" ), "p5landish" ) ) { }
            else {
                {
                    do {
                        ::MODIFIED($::Rule::Concat);
                        $::Rule::Concat = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'Rule::Concat' ) ), 'PROTOTYPE', );
                        }
                }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::Concat, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'emit_perl5' ),
            ::DISPATCH(
                $::Code, 'new',
                {   code => sub {
                        my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) unless defined $self;
                        BEGIN { $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                        BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        ::DISPATCH(
                            $GLOBAL::Code_infix_58__60__126__62_,
                            'APPLY',
                            ::DISPATCH( $::Str,                               'new',   '(?:' ),
                            ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( [ map { $_->emit_perl5() } @{ ::DISPATCH( $self, "concat" ) } ], 'join', ::DISPATCH( $::Str, 'new', '' ) ), ::DISPATCH( $::Str, 'new', ')' ) )
                        );
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {   invocant => ::DISPATCH( $::Signature::Item, "new", { sigil  => '$', twigil => '', name => 'self', namespace => [], } ),
                            array    => ::DISPATCH( $::Array,           "new", { _array => [] } ),
                            hash     => ::DISPATCH( $::Hash,            "new", { _hash  => {} } ),
                            return   => $::Undef,
                        }
                    ),
                }
            )
            )
    };
    1
}
{

    package Rule::Var;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::KP6Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }
    BEGIN { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::Rule::Var ), "true" ), "p5landish" ) ) { }
            else {
                {
                    do {
                        ::MODIFIED($::Rule::Var);
                        $::Rule::Var = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'Rule::Var' ) ), 'PROTOTYPE', );
                        }
                }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::Var, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'emit_perl5' ),
            ::DISPATCH(
                $::Code, 'new',
                {   code => sub {
                        my $table;
                        $table = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$table' } ) unless defined $table;
                        BEGIN { $table = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$table' } ) }
                        my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) unless defined $self;
                        BEGIN { $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                        BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        do {
                            ::MODIFIED($table);
                            $table = ::DISPATCH(
                                $::Hash, "new",
                                {   _hash => {
                                        ::DISPATCH( $::Str, 'new', '$' )->{_value} => ::DISPATCH( $::Str, 'new', '$' ),
                                        ::DISPATCH( $::Str, 'new', '@' )->{_value} => ::DISPATCH( $::Str, 'new', '$List_' ),
                                        ::DISPATCH( $::Str, 'new', '%' )->{_value} => ::DISPATCH( $::Str, 'new', '$Hash_' ),
                                        ::DISPATCH( $::Str, 'new', '&' )->{_value} => ::DISPATCH( $::Str, 'new', '$Code_' ),
                                    }
                                }
                            );
                        };
                        ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( $table, 'LOOKUP', ::DISPATCH( $self, "sigil" ) ), ::DISPATCH( $self, "name" ) );
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {   invocant => ::DISPATCH( $::Signature::Item, "new", { sigil  => '$', twigil => '', name => 'self', namespace => [], } ),
                            array    => ::DISPATCH( $::Array,           "new", { _array => [] } ),
                            hash     => ::DISPATCH( $::Hash,            "new", { _hash  => {} } ),
                            return   => $::Undef,
                        }
                    ),
                }
            )
            )
    };
    1
}
{

    package Rule::Constant;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::KP6Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }
    BEGIN { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::Rule::Constant ), "true" ), "p5landish" ) ) { }
            else {
                {
                    do {
                        ::MODIFIED($::Rule::Constant);
                        $::Rule::Constant = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'Rule::Constant' ) ), 'PROTOTYPE', );
                        }
                }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::Constant, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'emit_perl5' ),
            ::DISPATCH(
                $::Code, 'new',
                {   code => sub {
                        my $str;
                        $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } ) unless defined $str;
                        BEGIN { $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } ) }
                        my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) unless defined $self;
                        BEGIN { $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                        BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        do {
                            ::MODIFIED($str);
                            $str = ::DISPATCH( $self, "constant" );
                        };
                        do {
                            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', $str, ::DISPATCH( $::Str, 'new', '\\\\' ) ), "true" ), "p5landish" ) ) {
                                {
                                    return ( ::DISPATCH( $::Str, 'new', '\\\\\\\\' ) )
                                }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        do {
                            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', $str, ::DISPATCH( $::Str, 'new', '\\\'' ) ), "true" ), "p5landish" ) ) {
                                {
                                    return ( ::DISPATCH( $::Str, 'new', '\\\\\\\'' ) )
                                }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        $str;
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {   invocant => ::DISPATCH( $::Signature::Item, "new", { sigil  => '$', twigil => '', name => 'self', namespace => [], } ),
                            array    => ::DISPATCH( $::Array,           "new", { _array => [] } ),
                            hash     => ::DISPATCH( $::Hash,            "new", { _hash  => {} } ),
                            return   => $::Undef,
                        }
                    ),
                }
            )
            )
    };
    1
}
{

    package Rule::Dot;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::KP6Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }
    BEGIN { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::Rule::Dot ), "true" ), "p5landish" ) ) { }
            else {
                {
                    do {
                        ::MODIFIED($::Rule::Dot);
                        $::Rule::Dot = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'Rule::Dot' ) ), 'PROTOTYPE', );
                        }
                }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::Dot, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'emit_perl5' ),
            ::DISPATCH(
                $::Code, 'new',
                {   code => sub {
                        my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) unless defined $self;
                        BEGIN { $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                        BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        ::DISPATCH( $::Str, 'new', '(?:\\n\\r?|\\r\\n?|\\X)' );
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {   invocant => ::DISPATCH( $::Signature::Item, "new", { sigil  => '$', twigil => '', name => 'self', namespace => [], } ),
                            array    => ::DISPATCH( $::Array,           "new", { _array => [] } ),
                            hash     => ::DISPATCH( $::Hash,            "new", { _hash  => {} } ),
                            return   => $::Undef,
                        }
                    ),
                }
            )
            )
    };
    1
}
{

    package Rule::SpecialChar;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::KP6Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }
    BEGIN { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::Rule::SpecialChar ), "true" ), "p5landish" ) ) { }
            else {
                {
                    do {
                        ::MODIFIED($::Rule::SpecialChar);
                        $::Rule::SpecialChar = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'Rule::SpecialChar' ) ), 'PROTOTYPE', );
                        }
                }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::SpecialChar, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'emit_perl5' ),
            ::DISPATCH(
                $::Code, 'new',
                {   code => sub {
                        my $char;
                        $char = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$char' } ) unless defined $char;
                        BEGIN { $char = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$char' } ) }
                        my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) unless defined $self;
                        BEGIN { $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                        BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        do {
                            ::MODIFIED($char);
                            $char = ::DISPATCH( $self, "char" );
                        };
                        do {
                            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', $char, ::DISPATCH( $::Str, 'new', 'n' ) ), "true" ), "p5landish" ) ) {
                                {
                                    return ( ::DISPATCH( $::Str, 'new', '(?:\\n\\r?|\\r\\n?)' ) )
                                }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        do {
                            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', $char, ::DISPATCH( $::Str, 'new', 'N' ) ), "true" ), "p5landish" ) ) {
                                {
                                    return ( ::DISPATCH( $::Str, 'new', '(?:(?!\\n\\r?|\\r\\n?)\\X)' ) )
                                }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        do {
                            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', $char, ::DISPATCH( $::Str, 'new', '\\\\' ) ), "true" ), "p5landish" ) ) {
                                {
                                    return ( ::DISPATCH( $::Str, 'new', '\\\\\\\\' ) )
                                }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        do {
                            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', $char, ::DISPATCH( $::Str, 'new', '\\\'' ) ), "true" ), "p5landish" ) ) {
                                {
                                    return ( ::DISPATCH( $::Str, 'new', '\\\\\\\'' ) )
                                }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        return ( ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( $::Str, 'new', '\\\\' ), $char ) );
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {   invocant => ::DISPATCH( $::Signature::Item, "new", { sigil  => '$', twigil => '', name => 'self', namespace => [], } ),
                            array    => ::DISPATCH( $::Array,           "new", { _array => [] } ),
                            hash     => ::DISPATCH( $::Hash,            "new", { _hash  => {} } ),
                            return   => $::Undef,
                        }
                    ),
                }
            )
            )
    };
    1
}
{

    package Rule::Block;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::KP6Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }
    BEGIN { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::Rule::Block ), "true" ), "p5landish" ) ) { }
            else {
                {
                    do {
                        ::MODIFIED($::Rule::Block);
                        $::Rule::Block = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'Rule::Block' ) ), 'PROTOTYPE', );
                        }
                }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::Block, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'emit_perl5' ),
            ::DISPATCH(
                $::Code, 'new',
                {   code => sub {
                        my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) unless defined $self;
                        BEGIN { $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                        BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        ::DISPATCH(
                            $GLOBAL::Code_infix_58__60__126__62_,
                            'APPLY',
                            ::DISPATCH( $::Str, 'new', '(?{ ' ),
                            ::DISPATCH(
                                $GLOBAL::Code_infix_58__60__126__62_,
                                'APPLY',
                                ::DISPATCH( $::Str, 'new', 'local $GLOBAL::_M = $GLOBAL::_M; ' ),
                                ::DISPATCH(
                                    $GLOBAL::Code_infix_58__60__126__62_,
                                    'APPLY',
                                    ::DISPATCH( $::Str, 'new', 'Match::from_global_data( $GLOBAL::_M ); ' ),
                                    ::DISPATCH(
                                        $GLOBAL::Code_infix_58__60__126__62_,
                                        'APPLY',
                                        ::DISPATCH( $::Str, 'new', '$MATCH = ' ),
                                        ::DISPATCH(
                                            $GLOBAL::Code_infix_58__60__126__62_,
                                            'APPLY',
                                            ::DISPATCH( $::Str, 'new', '$GLOBAL::MATCH = pop @Match::Matches; ' ),
                                            ::DISPATCH(
                                                $GLOBAL::Code_infix_58__60__126__62_,
                                                'APPLY',
                                                ::DISPATCH( $::Str, 'new', '@Match::Matches = (); ' ),
                                                ::DISPATCH(
                                                    $GLOBAL::Code_infix_58__60__126__62_,
                                                    'APPLY',
                                                    ::DISPATCH( $::Str, 'new', 'my $ret = ( sub {' ),
                                                    ::DISPATCH(
                                                        $GLOBAL::Code_infix_58__60__126__62_,
                                                        'APPLY',
                                                        ::DISPATCH( ::DISPATCH( $self, "closure" ), 'emit_perl5', ),
                                                        ::DISPATCH(
                                                            $GLOBAL::Code_infix_58__60__126__62_,
                                                            'APPLY',
                                                            ::DISPATCH( $::Str, 'new', '; "974^213" ' ),
                                                            ::DISPATCH(
                                                                $GLOBAL::Code_infix_58__60__126__62_,
                                                                'APPLY',
                                                                ::DISPATCH( $::Str, 'new', '} )->();' ),
                                                                ::DISPATCH(
                                                                    $GLOBAL::Code_infix_58__60__126__62_,
                                                                    'APPLY',
                                                                    ::DISPATCH( $::Str, 'new', 'if ( $ret ne "974^213" ) {' ),
                                                                    ::DISPATCH(
                                                                        $GLOBAL::Code_infix_58__60__126__62_,
                                                                        'APPLY',
                                                                        ::DISPATCH( $::Str, 'new', '$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; ' ),
                                                                        ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( $::Str, 'new', '};' ), ::DISPATCH( $::Str, 'new', ' })' ) )
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        );
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {   invocant => ::DISPATCH( $::Signature::Item, "new", { sigil  => '$', twigil => '', name => 'self', namespace => [], } ),
                            array    => ::DISPATCH( $::Array,           "new", { _array => [] } ),
                            hash     => ::DISPATCH( $::Hash,            "new", { _hash  => {} } ),
                            return   => $::Undef,
                        }
                    ),
                }
            )
            )
    };
    1
}
{

    package Rule::InterpolateVar;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::KP6Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }
    BEGIN { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::Rule::InterpolateVar ), "true" ), "p5landish" ) ) { }
            else {
                {
                    do {
                        ::MODIFIED($::Rule::InterpolateVar);
                        $::Rule::InterpolateVar = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'Rule::InterpolateVar' ) ), 'PROTOTYPE', );
                        }
                }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::InterpolateVar, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'emit_perl5' ),
            ::DISPATCH(
                $::Code, 'new',
                {   code => sub {
                        my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) unless defined $self;
                        BEGIN { $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                        BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        ::DISPATCH(
                            $GLOBAL::Code_say,
                            'APPLY',
                            ::DISPATCH(
                                $GLOBAL::Code_infix_58__60__126__62_, 'APPLY',
                                ::DISPATCH( $::Str, 'new', '# TODO: interpolate var ' ), ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( ::DISPATCH( $self, "var" ), 'emit_perl5', ), ::DISPATCH( $::Str, 'new', '' ) )
                            )
                        );
                        ::DISPATCH( $GLOBAL::Code_die, 'APPLY', );
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {   invocant => ::DISPATCH( $::Signature::Item, "new", { sigil  => '$', twigil => '', name => 'self', namespace => [], } ),
                            array    => ::DISPATCH( $::Array,           "new", { _array => [] } ),
                            hash     => ::DISPATCH( $::Hash,            "new", { _hash  => {} } ),
                            return   => $::Undef,
                        }
                    ),
                }
            )
            )
    };
    1
}
{

    package Rule::After;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::KP6Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }
    BEGIN { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::Rule::After ), "true" ), "p5landish" ) ) { }
            else {
                {
                    do {
                        ::MODIFIED($::Rule::After);
                        $::Rule::After = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'Rule::After' ) ), 'PROTOTYPE', );
                        }
                }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::After, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'emit_perl5' ),
            ::DISPATCH(
                $::Code, 'new',
                {   code => sub {
                        my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) unless defined $self;
                        BEGIN { $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                        BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        do {
                            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $self, "assertion_modifier" ), ::DISPATCH( $::Str, 'new', '!' ) ), "true" ), "p5landish" ) ) {
                                {
                                    return (
                                        ::DISPATCH(
                                            $GLOBAL::Code_infix_58__60__126__62_, 'APPLY',
                                            ::DISPATCH( $::Str, 'new', '(?<!' ), ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( ::DISPATCH( $self, "rule" ), 'emit_perl5', ), ::DISPATCH( $::Str, 'new', ')' ) )
                                        )
                                        )
                                }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        do {
                            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $self, "assertion_modifier" ), ::DISPATCH( $::Str, 'new', '?' ) ), "true" ), "p5landish" ) ) {
                                {
                                    return (
                                        ::DISPATCH(
                                            $GLOBAL::Code_infix_58__60__126__62_, 'APPLY',
                                            ::DISPATCH( $::Str, 'new', '(?<=' ), ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( ::DISPATCH( $self, "rule" ), 'emit_perl5', ), ::DISPATCH( $::Str, 'new', ')' ) )
                                        )
                                        )
                                }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        do {
                            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $self, "capture_to_array" ), "true" ), "p5landish" ) ) {
                                {
                                    ::DISPATCH(
                                        $GLOBAL::Code_infix_58__60__126__62_,
                                        'APPLY',
                                        ::DISPATCH( $::Str, 'new', '(?<=' ),
                                        ::DISPATCH(
                                            $GLOBAL::Code_infix_58__60__126__62_,
                                            'APPLY',
                                            ::DISPATCH( $::Str, 'new', '(?{ ' ),
                                            ::DISPATCH(
                                                $GLOBAL::Code_infix_58__60__126__62_,
                                                'APPLY',
                                                ::DISPATCH( $::Str, 'new', 'local $GLOBAL::_M = [ $GLOBAL::_M, \\\'create\\\', pos(), \\\\$_ ]; ' ),
                                                ::DISPATCH(
                                                    $GLOBAL::Code_infix_58__60__126__62_,
                                                    'APPLY',
                                                    ::DISPATCH( $::Str, 'new', '})' ),
                                                    ::DISPATCH(
                                                        $GLOBAL::Code_infix_58__60__126__62_,
                                                        'APPLY',
                                                        ::DISPATCH( ::DISPATCH( $self, "rule" ), 'emit_perl5', ),
                                                        ::DISPATCH(
                                                            $GLOBAL::Code_infix_58__60__126__62_,
                                                            'APPLY',
                                                            ::DISPATCH( $::Str, 'new', '(?{ ' ),
                                                            ::DISPATCH(
                                                                $GLOBAL::Code_infix_58__60__126__62_,
                                                                'APPLY',
                                                                ::DISPATCH( $::Str, 'new', 'local $GLOBAL::_M = [ $GLOBAL::_M, \\\'to\\\', pos() ]; ' ),
                                                                ::DISPATCH(
                                                                    $GLOBAL::Code_infix_58__60__126__62_,
                                                                    'APPLY',
                                                                    ::DISPATCH( $::Str, 'new', 'local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture_to_array", "after" ]; ' ),
                                                                    ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( $::Str, 'new', '})' ), ::DISPATCH( $::Str, 'new', ')' ) )
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                        )
                                }
                            }
                            else {
                                {
                                    ::DISPATCH(
                                        $GLOBAL::Code_infix_58__60__126__62_,
                                        'APPLY',
                                        ::DISPATCH( $::Str, 'new', '(?<=' ),
                                        ::DISPATCH(
                                            $GLOBAL::Code_infix_58__60__126__62_,
                                            'APPLY',
                                            ::DISPATCH( $::Str, 'new', '(?{ ' ),
                                            ::DISPATCH(
                                                $GLOBAL::Code_infix_58__60__126__62_,
                                                'APPLY',
                                                ::DISPATCH( $::Str, 'new', 'local $GLOBAL::_M = [ $GLOBAL::_M, \\\'create\\\', pos(), \\\\$_ ]; ' ),
                                                ::DISPATCH(
                                                    $GLOBAL::Code_infix_58__60__126__62_,
                                                    'APPLY',
                                                    ::DISPATCH( $::Str, 'new', '})' ),
                                                    ::DISPATCH(
                                                        $GLOBAL::Code_infix_58__60__126__62_,
                                                        'APPLY',
                                                        ::DISPATCH( ::DISPATCH( $self, "rule" ), 'emit_perl5', ),
                                                        ::DISPATCH(
                                                            $GLOBAL::Code_infix_58__60__126__62_,
                                                            'APPLY',
                                                            ::DISPATCH( $::Str, 'new', '(?{ ' ),
                                                            ::DISPATCH(
                                                                $GLOBAL::Code_infix_58__60__126__62_,
                                                                'APPLY',
                                                                ::DISPATCH( $::Str, 'new', 'local $GLOBAL::_M = [ $GLOBAL::_M, \\\'to\\\', pos() ]; ' ),
                                                                ::DISPATCH(
                                                                    $GLOBAL::Code_infix_58__60__126__62_,
                                                                    'APPLY',
                                                                    ::DISPATCH( $::Str, 'new', 'local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "after" ]; ' ),
                                                                    ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( $::Str, 'new', '})' ), ::DISPATCH( $::Str, 'new', ')' ) )
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                        )
                                }
                            }
                            }
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {   invocant => ::DISPATCH( $::Signature::Item, "new", { sigil  => '$', twigil => '', name => 'self', namespace => [], } ),
                            array    => ::DISPATCH( $::Array,           "new", { _array => [] } ),
                            hash     => ::DISPATCH( $::Hash,            "new", { _hash  => {} } ),
                            return   => $::Undef,
                        }
                    ),
                }
            )
            )
    };
    1
}
{

    package Rule::Before;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::KP6Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }
    BEGIN { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::Rule::Before ), "true" ), "p5landish" ) ) { }
            else {
                {
                    do {
                        ::MODIFIED($::Rule::Before);
                        $::Rule::Before = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'Rule::Before' ) ), 'PROTOTYPE', );
                        }
                }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::Before, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'emit_perl5' ),
            ::DISPATCH(
                $::Code, 'new',
                {   code => sub {
                        my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) unless defined $self;
                        BEGIN { $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                        BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        do {
                            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $self, "assertion_modifier" ), ::DISPATCH( $::Str, 'new', '!' ) ), "true" ), "p5landish" ) ) {
                                {
                                    return (
                                        ::DISPATCH(
                                            $GLOBAL::Code_infix_58__60__126__62_, 'APPLY',
                                            ::DISPATCH( $::Str, 'new', '(?!' ), ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( ::DISPATCH( $self, "rule" ), 'emit_perl5', ), ::DISPATCH( $::Str, 'new', ')' ) )
                                        )
                                        )
                                }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        do {
                            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', ::DISPATCH( $self, "assertion_modifier" ), ::DISPATCH( $::Str, 'new', '?' ) ), "true" ), "p5landish" ) ) {
                                {
                                    return (
                                        ::DISPATCH(
                                            $GLOBAL::Code_infix_58__60__126__62_, 'APPLY',
                                            ::DISPATCH( $::Str, 'new', '(?=' ), ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( ::DISPATCH( $self, "rule" ), 'emit_perl5', ), ::DISPATCH( $::Str, 'new', ')' ) )
                                        )
                                        )
                                }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        do {
                            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $self, "capture_to_array" ), "true" ), "p5landish" ) ) {
                                {
                                    ::DISPATCH(
                                        $GLOBAL::Code_infix_58__60__126__62_,
                                        'APPLY',
                                        ::DISPATCH( $::Str, 'new', '(?=' ),
                                        ::DISPATCH(
                                            $GLOBAL::Code_infix_58__60__126__62_,
                                            'APPLY',
                                            ::DISPATCH( $::Str, 'new', '(?{ ' ),
                                            ::DISPATCH(
                                                $GLOBAL::Code_infix_58__60__126__62_,
                                                'APPLY',
                                                ::DISPATCH( $::Str, 'new', 'local $GLOBAL::_M = [ $GLOBAL::_M, \\\'create\\\', pos(), \\\\$_ ]; ' ),
                                                ::DISPATCH(
                                                    $GLOBAL::Code_infix_58__60__126__62_,
                                                    'APPLY',
                                                    ::DISPATCH( $::Str, 'new', '})' ),
                                                    ::DISPATCH(
                                                        $GLOBAL::Code_infix_58__60__126__62_,
                                                        'APPLY',
                                                        ::DISPATCH( ::DISPATCH( $self, "rule" ), 'emit_perl5', ),
                                                        ::DISPATCH(
                                                            $GLOBAL::Code_infix_58__60__126__62_,
                                                            'APPLY',
                                                            ::DISPATCH( $::Str, 'new', '(?{ ' ),
                                                            ::DISPATCH(
                                                                $GLOBAL::Code_infix_58__60__126__62_,
                                                                'APPLY',
                                                                ::DISPATCH( $::Str, 'new', 'local $GLOBAL::_M = [ $GLOBAL::_M, \\\'to\\\', pos() ]; ' ),
                                                                ::DISPATCH(
                                                                    $GLOBAL::Code_infix_58__60__126__62_,
                                                                    'APPLY',
                                                                    ::DISPATCH( $::Str, 'new', 'local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture_to_array", "before" ]; ' ),
                                                                    ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( $::Str, 'new', '})' ), ::DISPATCH( $::Str, 'new', ')' ) )
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                        )
                                }
                            }
                            else {
                                {
                                    ::DISPATCH(
                                        $GLOBAL::Code_infix_58__60__126__62_,
                                        'APPLY',
                                        ::DISPATCH( $::Str, 'new', '(?=' ),
                                        ::DISPATCH(
                                            $GLOBAL::Code_infix_58__60__126__62_,
                                            'APPLY',
                                            ::DISPATCH( $::Str, 'new', '(?{ ' ),
                                            ::DISPATCH(
                                                $GLOBAL::Code_infix_58__60__126__62_,
                                                'APPLY',
                                                ::DISPATCH( $::Str, 'new', 'local $GLOBAL::_M = [ $GLOBAL::_M, \\\'create\\\', pos(), \\\\$_ ]; ' ),
                                                ::DISPATCH(
                                                    $GLOBAL::Code_infix_58__60__126__62_,
                                                    'APPLY',
                                                    ::DISPATCH( $::Str, 'new', '})' ),
                                                    ::DISPATCH(
                                                        $GLOBAL::Code_infix_58__60__126__62_,
                                                        'APPLY',
                                                        ::DISPATCH( ::DISPATCH( $self, "rule" ), 'emit_perl5', ),
                                                        ::DISPATCH(
                                                            $GLOBAL::Code_infix_58__60__126__62_,
                                                            'APPLY',
                                                            ::DISPATCH( $::Str, 'new', '(?{ ' ),
                                                            ::DISPATCH(
                                                                $GLOBAL::Code_infix_58__60__126__62_,
                                                                'APPLY',
                                                                ::DISPATCH( $::Str, 'new', 'local $GLOBAL::_M = [ $GLOBAL::_M, \\\'to\\\', pos() ]; ' ),
                                                                ::DISPATCH(
                                                                    $GLOBAL::Code_infix_58__60__126__62_,
                                                                    'APPLY',
                                                                    ::DISPATCH( $::Str, 'new', 'local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "before" ]; ' ),
                                                                    ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( $::Str, 'new', '})' ), ::DISPATCH( $::Str, 'new', ')' ) )
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                        )
                                }
                            }
                            }
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {   invocant => ::DISPATCH( $::Signature::Item, "new", { sigil  => '$', twigil => '', name => 'self', namespace => [], } ),
                            array    => ::DISPATCH( $::Array,           "new", { _array => [] } ),
                            hash     => ::DISPATCH( $::Hash,            "new", { _hash  => {} } ),
                            return   => $::Undef,
                        }
                    ),
                }
            )
            )
    };
    1
}
{

    package Rule::NegateCharClass;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::KP6Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }
    BEGIN { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::Rule::NegateCharClass ), "true" ), "p5landish" ) ) { }
            else {
                {
                    do {
                        ::MODIFIED($::Rule::NegateCharClass);
                        $::Rule::NegateCharClass = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'Rule::NegateCharClass' ) ), 'PROTOTYPE', );
                        }
                }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::NegateCharClass, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'emit_perl5' ),
            ::DISPATCH(
                $::Code, 'new',
                {   code => sub {
                        my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) unless defined $self;
                        BEGIN { $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                        BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        ::DISPATCH( $GLOBAL::Code_say, 'APPLY', ::DISPATCH( $::Str, 'new', 'TODO NegateCharClass' ) );
                        ::DISPATCH( $GLOBAL::Code_die, 'APPLY', );
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {   invocant => ::DISPATCH( $::Signature::Item, "new", { sigil  => '$', twigil => '', name => 'self', namespace => [], } ),
                            array    => ::DISPATCH( $::Array,           "new", { _array => [] } ),
                            hash     => ::DISPATCH( $::Hash,            "new", { _hash  => {} } ),
                            return   => $::Undef,
                        }
                    ),
                }
            )
            )
    };
    1
}
{

    package Rule::CharClass;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::KP6Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }
    BEGIN { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::Rule::CharClass ), "true" ), "p5landish" ) ) { }
            else {
                {
                    do {
                        ::MODIFIED($::Rule::CharClass);
                        $::Rule::CharClass = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'Rule::CharClass' ) ), 'PROTOTYPE', );
                        }
                }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::CharClass, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'emit_perl5' ),
            ::DISPATCH(
                $::Code, 'new',
                {   code => sub {
                        my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) unless defined $self;
                        BEGIN { $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                        BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        ::DISPATCH( $GLOBAL::Code_say, 'APPLY', ::DISPATCH( $::Str, 'new', 'TODO CharClass' ) );
                        ::DISPATCH( $GLOBAL::Code_die, 'APPLY', );
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {   invocant => ::DISPATCH( $::Signature::Item, "new", { sigil  => '$', twigil => '', name => 'self', namespace => [], } ),
                            array    => ::DISPATCH( $::Array,           "new", { _array => [] } ),
                            hash     => ::DISPATCH( $::Hash,            "new", { _hash  => {} } ),
                            return   => $::Undef,
                        }
                    ),
                }
            )
            )
    };
    1
}
{

    package Rule::SubruleNoCapture;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::KP6Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }
    BEGIN { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::Rule::SubruleNoCapture ), "true" ), "p5landish" ) ) { }
            else {
                {
                    do {
                        ::MODIFIED($::Rule::SubruleNoCapture);
                        $::Rule::SubruleNoCapture = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'Rule::SubruleNoCapture' ) ), 'PROTOTYPE', );
                        }
                }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::SubruleNoCapture, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'emit_perl5' ),
            ::DISPATCH(
                $::Code, 'new',
                {   code => sub {
                        my $meth;
                        $meth = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$meth' } ) unless defined $meth;
                        BEGIN { $meth = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$meth' } ) }
                        my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) unless defined $self;
                        BEGIN { $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                        BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        do {
                            ::MODIFIED($meth);
                            $meth = ::DISPATCH(
                                $GLOBAL::Code_infix_58__60__126__62_,
                                'APPLY',
                                ::DISPATCH( $::Str, 'new', '\\\'$_rule_' ),
                                ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( $self, "metasyntax" ), ::DISPATCH( $::Str, 'new', '\\\'' ) )
                            );
                        };
                        ::DISPATCH(
                            $GLOBAL::Code_infix_58__60__126__62_,
                            'APPLY',
                            ::DISPATCH( $::Str, 'new', '(?:' ),
                            ::DISPATCH(
                                $GLOBAL::Code_infix_58__60__126__62_,
                                'APPLY',
                                ::DISPATCH( $::Str, 'new', '(??{ eval ' ),
                                ::DISPATCH(
                                    $GLOBAL::Code_infix_58__60__126__62_,
                                    'APPLY', $meth,
                                    ::DISPATCH(
                                        $GLOBAL::Code_infix_58__60__126__62_,
                                        'APPLY',
                                        ::DISPATCH( $::Str, 'new', ' })' ),
                                        ::DISPATCH(
                                            $GLOBAL::Code_infix_58__60__126__62_,
                                            'APPLY',
                                            ::DISPATCH( $::Str, 'new', '(?{ ' ),
                                            ::DISPATCH(
                                                $GLOBAL::Code_infix_58__60__126__62_,
                                                'APPLY',
                                                ::DISPATCH( $::Str, 'new', 'local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; ' ),
                                                ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( $::Str, 'new', '})' ), ::DISPATCH( $::Str, 'new', ')' ) )
                                            )
                                        )
                                    )
                                )
                            )
                        );
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {   invocant => ::DISPATCH( $::Signature::Item, "new", { sigil  => '$', twigil => '', name => 'self', namespace => [], } ),
                            array    => ::DISPATCH( $::Array,           "new", { _array => [] } ),
                            hash     => ::DISPATCH( $::Hash,            "new", { _hash  => {} } ),
                            return   => $::Undef,
                        }
                    ),
                }
            )
            )
    };
    1
}
{

    package Rule::Subrule;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::KP6Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }
    BEGIN { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::Rule::Subrule ), "true" ), "p5landish" ) ) { }
            else {
                {
                    do {
                        ::MODIFIED($::Rule::Subrule);
                        $::Rule::Subrule = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'Rule::Subrule' ) ), 'PROTOTYPE', );
                        }
                }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::Subrule, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'emit_perl5' ),
            ::DISPATCH(
                $::Code, 'new',
                {   code => sub {
                        my $meth;
                        $meth = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$meth' } ) unless defined $meth;
                        BEGIN { $meth = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$meth' } ) }
                        my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) unless defined $self;
                        BEGIN { $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                        BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        do {
                            ::MODIFIED($meth);
                            $meth = ::DISPATCH(
                                $GLOBAL::Code_infix_58__60__126__62_,
                                'APPLY',
                                ::DISPATCH( $::Str, 'new', '\\\'$_rule_' ),
                                ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( $self, "metasyntax" ), ::DISPATCH( $::Str, 'new', '\\\'' ) )
                            );
                        };
                        do {
                            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $self, "capture_to_array" ), "true" ), "p5landish" ) ) {
                                {
                                    ::DISPATCH(
                                        $GLOBAL::Code_infix_58__60__126__62_,
                                        'APPLY',
                                        ::DISPATCH( $::Str, 'new', '(?:' ),
                                        ::DISPATCH(
                                            $GLOBAL::Code_infix_58__60__126__62_,
                                            'APPLY',
                                            ::DISPATCH( $::Str, 'new', '(??{ eval ' ),
                                            ::DISPATCH(
                                                $GLOBAL::Code_infix_58__60__126__62_,
                                                'APPLY', $meth,
                                                ::DISPATCH(
                                                    $GLOBAL::Code_infix_58__60__126__62_,
                                                    'APPLY',
                                                    ::DISPATCH( $::Str, 'new', ' })' ),
                                                    ::DISPATCH(
                                                        $GLOBAL::Code_infix_58__60__126__62_,
                                                        'APPLY',
                                                        ::DISPATCH( $::Str, 'new', '(?{ ' ),
                                                        ::DISPATCH(
                                                            $GLOBAL::Code_infix_58__60__126__62_,
                                                            'APPLY',
                                                            ::DISPATCH( $::Str, 'new', 'local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture_to_array", "' ),
                                                            ::DISPATCH(
                                                                $GLOBAL::Code_infix_58__60__126__62_,
                                                                'APPLY',
                                                                ::DISPATCH( $self, "ident" ),
                                                                ::DISPATCH(
                                                                    $GLOBAL::Code_infix_58__60__126__62_, 'APPLY',
                                                                    ::DISPATCH( $::Str, 'new', '" ]; ' ), ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( $::Str, 'new', '})' ), ::DISPATCH( $::Str, 'new', ')' ) )
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                        )
                                }
                            }
                            else {
                                {
                                    ::DISPATCH(
                                        $GLOBAL::Code_infix_58__60__126__62_,
                                        'APPLY',
                                        ::DISPATCH( $::Str, 'new', '(?:' ),
                                        ::DISPATCH(
                                            $GLOBAL::Code_infix_58__60__126__62_,
                                            'APPLY',
                                            ::DISPATCH( $::Str, 'new', '(??{ eval ' ),
                                            ::DISPATCH(
                                                $GLOBAL::Code_infix_58__60__126__62_,
                                                'APPLY', $meth,
                                                ::DISPATCH(
                                                    $GLOBAL::Code_infix_58__60__126__62_,
                                                    'APPLY',
                                                    ::DISPATCH( $::Str, 'new', ' })' ),
                                                    ::DISPATCH(
                                                        $GLOBAL::Code_infix_58__60__126__62_,
                                                        'APPLY',
                                                        ::DISPATCH( $::Str, 'new', '(?{ ' ),
                                                        ::DISPATCH(
                                                            $GLOBAL::Code_infix_58__60__126__62_,
                                                            'APPLY',
                                                            ::DISPATCH( $::Str, 'new', 'local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "' ),
                                                            ::DISPATCH(
                                                                $GLOBAL::Code_infix_58__60__126__62_,
                                                                'APPLY',
                                                                ::DISPATCH( $self, "ident" ),
                                                                ::DISPATCH(
                                                                    $GLOBAL::Code_infix_58__60__126__62_, 'APPLY',
                                                                    ::DISPATCH( $::Str, 'new', '" ]; ' ), ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( $::Str, 'new', '})' ), ::DISPATCH( $::Str, 'new', ')' ) )
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                        )
                                }
                            }
                            }
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {   invocant => ::DISPATCH( $::Signature::Item, "new", { sigil  => '$', twigil => '', name => 'self', namespace => [], } ),
                            array    => ::DISPATCH( $::Array,           "new", { _array => [] } ),
                            hash     => ::DISPATCH( $::Hash,            "new", { _hash  => {} } ),
                            return   => $::Undef,
                        }
                    ),
                }
            )
            )
    };
    1
}
{

    package Rule::NamedCapture;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::KP6Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }
    BEGIN { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::Rule::NamedCapture ), "true" ), "p5landish" ) ) { }
            else {
                {
                    do {
                        ::MODIFIED($::Rule::NamedCapture);
                        $::Rule::NamedCapture = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'Rule::NamedCapture' ) ), 'PROTOTYPE', );
                        }
                }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::NamedCapture, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'emit_perl5' ),
            ::DISPATCH(
                $::Code, 'new',
                {   code => sub {
                        my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) unless defined $self;
                        BEGIN { $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                        BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        do {
                            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $self, "capture_to_array" ), "true" ), "p5landish" ) ) {
                                {
                                    ::DISPATCH(
                                        $GLOBAL::Code_infix_58__60__126__62_,
                                        'APPLY',
                                        ::DISPATCH( $::Str, 'new', '(?:' ),
                                        ::DISPATCH(
                                            $GLOBAL::Code_infix_58__60__126__62_,
                                            'APPLY',
                                            ::DISPATCH( $::Str, 'new', '(?{ ' ),
                                            ::DISPATCH(
                                                $GLOBAL::Code_infix_58__60__126__62_,
                                                'APPLY',
                                                ::DISPATCH( $::Str, 'new', 'local $GLOBAL::_M = [ $GLOBAL::_M, \\\'create\\\', pos(), \\\\$_ ]; ' ),
                                                ::DISPATCH(
                                                    $GLOBAL::Code_infix_58__60__126__62_,
                                                    'APPLY',
                                                    ::DISPATCH( $::Str, 'new', '})' ),
                                                    ::DISPATCH(
                                                        $GLOBAL::Code_infix_58__60__126__62_,
                                                        'APPLY',
                                                        ::DISPATCH( ::DISPATCH( $self, "rule" ), 'emit_perl5', ),
                                                        ::DISPATCH(
                                                            $GLOBAL::Code_infix_58__60__126__62_,
                                                            'APPLY',
                                                            ::DISPATCH( $::Str, 'new', '(?{ ' ),
                                                            ::DISPATCH(
                                                                $GLOBAL::Code_infix_58__60__126__62_,
                                                                'APPLY',
                                                                ::DISPATCH( $::Str, 'new', 'local $GLOBAL::_M = [ $GLOBAL::_M, \\\'to\\\', pos() ]; ' ),
                                                                ::DISPATCH(
                                                                    $GLOBAL::Code_infix_58__60__126__62_,
                                                                    'APPLY',
                                                                    ::DISPATCH( $::Str, 'new', 'local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture_to_array", "' ),
                                                                    ::DISPATCH(
                                                                        $GLOBAL::Code_infix_58__60__126__62_,
                                                                        'APPLY',
                                                                        ::DISPATCH( $self, "ident" ),
                                                                        ::DISPATCH(
                                                                            $GLOBAL::Code_infix_58__60__126__62_, 'APPLY',
                                                                            ::DISPATCH( $::Str, 'new', '" ]; ' ), ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( $::Str, 'new', '})' ), ::DISPATCH( $::Str, 'new', ')' ) )
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                        )
                                }
                            }
                            else {
                                {
                                    ::DISPATCH(
                                        $GLOBAL::Code_infix_58__60__126__62_,
                                        'APPLY',
                                        ::DISPATCH( $::Str, 'new', '(?:' ),
                                        ::DISPATCH(
                                            $GLOBAL::Code_infix_58__60__126__62_,
                                            'APPLY',
                                            ::DISPATCH( $::Str, 'new', '(?{ ' ),
                                            ::DISPATCH(
                                                $GLOBAL::Code_infix_58__60__126__62_,
                                                'APPLY',
                                                ::DISPATCH( $::Str, 'new', 'local $GLOBAL::_M = [ $GLOBAL::_M, \\\'create\\\', pos(), \\\\$_ ]; ' ),
                                                ::DISPATCH(
                                                    $GLOBAL::Code_infix_58__60__126__62_,
                                                    'APPLY',
                                                    ::DISPATCH( $::Str, 'new', '})' ),
                                                    ::DISPATCH(
                                                        $GLOBAL::Code_infix_58__60__126__62_,
                                                        'APPLY',
                                                        ::DISPATCH( ::DISPATCH( $self, "rule" ), 'emit_perl5', ),
                                                        ::DISPATCH(
                                                            $GLOBAL::Code_infix_58__60__126__62_,
                                                            'APPLY',
                                                            ::DISPATCH( $::Str, 'new', '(?{ ' ),
                                                            ::DISPATCH(
                                                                $GLOBAL::Code_infix_58__60__126__62_,
                                                                'APPLY',
                                                                ::DISPATCH( $::Str, 'new', 'local $GLOBAL::_M = [ $GLOBAL::_M, \\\'to\\\', pos() ]; ' ),
                                                                ::DISPATCH(
                                                                    $GLOBAL::Code_infix_58__60__126__62_,
                                                                    'APPLY',
                                                                    ::DISPATCH( $::Str, 'new', 'local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "' ),
                                                                    ::DISPATCH(
                                                                        $GLOBAL::Code_infix_58__60__126__62_,
                                                                        'APPLY',
                                                                        ::DISPATCH( $self, "ident" ),
                                                                        ::DISPATCH(
                                                                            $GLOBAL::Code_infix_58__60__126__62_, 'APPLY',
                                                                            ::DISPATCH( $::Str, 'new', '" ]; ' ), ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( $::Str, 'new', '})' ), ::DISPATCH( $::Str, 'new', ')' ) )
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                        )
                                }
                            }
                            }
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {   invocant => ::DISPATCH( $::Signature::Item, "new", { sigil  => '$', twigil => '', name => 'self', namespace => [], } ),
                            array    => ::DISPATCH( $::Array,           "new", { _array => [] } ),
                            hash     => ::DISPATCH( $::Hash,            "new", { _hash  => {} } ),
                            return   => $::Undef,
                        }
                    ),
                }
            )
            )
    };
    1
}
{

    package Rule::Capture;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::KP6Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }
    BEGIN { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::Rule::Capture ), "true" ), "p5landish" ) ) { }
            else {
                {
                    do {
                        ::MODIFIED($::Rule::Capture);
                        $::Rule::Capture = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'Rule::Capture' ) ), 'PROTOTYPE', );
                        }
                }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::Capture, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'emit_perl5' ),
            ::DISPATCH(
                $::Code, 'new',
                {   code => sub {
                        my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) unless defined $self;
                        BEGIN { $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                        BEGIN { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        do {
                            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $self, "capture_to_array" ), "true" ), "p5landish" ) ) {
                                {
                                    ::DISPATCH(
                                        $GLOBAL::Code_infix_58__60__126__62_,
                                        'APPLY',
                                        ::DISPATCH( $::Str, 'new', '(?:' ),
                                        ::DISPATCH(
                                            $GLOBAL::Code_infix_58__60__126__62_,
                                            'APPLY',
                                            ::DISPATCH( $::Str, 'new', '(?{ ' ),
                                            ::DISPATCH(
                                                $GLOBAL::Code_infix_58__60__126__62_,
                                                'APPLY',
                                                ::DISPATCH( $::Str, 'new', 'local $GLOBAL::_M = [ $GLOBAL::_M, \\\'create\\\', pos(), \\\\$_ ]; ' ),
                                                ::DISPATCH(
                                                    $GLOBAL::Code_infix_58__60__126__62_,
                                                    'APPLY',
                                                    ::DISPATCH( $::Str, 'new', '})' ),
                                                    ::DISPATCH(
                                                        $GLOBAL::Code_infix_58__60__126__62_,
                                                        'APPLY',
                                                        ::DISPATCH( ::DISPATCH( $self, "rule" ), 'emit_perl5', ),
                                                        ::DISPATCH(
                                                            $GLOBAL::Code_infix_58__60__126__62_,
                                                            'APPLY',
                                                            ::DISPATCH( $::Str, 'new', '(?{ ' ),
                                                            ::DISPATCH(
                                                                $GLOBAL::Code_infix_58__60__126__62_,
                                                                'APPLY',
                                                                ::DISPATCH( $::Str, 'new', 'local $GLOBAL::_M = [ $GLOBAL::_M, \\\'to\\\', pos() ]; ' ),
                                                                ::DISPATCH(
                                                                    $GLOBAL::Code_infix_58__60__126__62_,
                                                                    'APPLY',
                                                                    ::DISPATCH( $::Str, 'new', 'local $GLOBAL::_M = [ $GLOBAL::_M, "positional_capture_to_array", ' ),
                                                                    ::DISPATCH(
                                                                        $GLOBAL::Code_infix_58__60__126__62_,
                                                                        'APPLY',
                                                                        ::DISPATCH( $self, "position" ),
                                                                        ::DISPATCH(
                                                                            $GLOBAL::Code_infix_58__60__126__62_, 'APPLY',
                                                                            ::DISPATCH( $::Str, 'new', ' ]; ' ), ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( $::Str, 'new', '})' ), ::DISPATCH( $::Str, 'new', ')' ) )
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                        )
                                }
                            }
                            else {
                                {
                                    ::DISPATCH(
                                        $GLOBAL::Code_infix_58__60__126__62_,
                                        'APPLY',
                                        ::DISPATCH( $::Str, 'new', '(?:' ),
                                        ::DISPATCH(
                                            $GLOBAL::Code_infix_58__60__126__62_,
                                            'APPLY',
                                            ::DISPATCH( $::Str, 'new', '(?{ ' ),
                                            ::DISPATCH(
                                                $GLOBAL::Code_infix_58__60__126__62_,
                                                'APPLY',
                                                ::DISPATCH( $::Str, 'new', 'local $GLOBAL::_M = [ $GLOBAL::_M, \\\'create\\\', pos(), \\\\$_ ]; ' ),
                                                ::DISPATCH(
                                                    $GLOBAL::Code_infix_58__60__126__62_,
                                                    'APPLY',
                                                    ::DISPATCH( $::Str, 'new', '})' ),
                                                    ::DISPATCH(
                                                        $GLOBAL::Code_infix_58__60__126__62_,
                                                        'APPLY',
                                                        ::DISPATCH( ::DISPATCH( $self, "rule" ), 'emit_perl5', ),
                                                        ::DISPATCH(
                                                            $GLOBAL::Code_infix_58__60__126__62_,
                                                            'APPLY',
                                                            ::DISPATCH( $::Str, 'new', '(?{ ' ),
                                                            ::DISPATCH(
                                                                $GLOBAL::Code_infix_58__60__126__62_,
                                                                'APPLY',
                                                                ::DISPATCH( $::Str, 'new', 'local $GLOBAL::_M = [ $GLOBAL::_M, \\\'to\\\', pos() ]; ' ),
                                                                ::DISPATCH(
                                                                    $GLOBAL::Code_infix_58__60__126__62_,
                                                                    'APPLY',
                                                                    ::DISPATCH( $::Str, 'new', 'local $GLOBAL::_M = [ $GLOBAL::_M, "positional_capture", ' ),
                                                                    ::DISPATCH(
                                                                        $GLOBAL::Code_infix_58__60__126__62_,
                                                                        'APPLY',
                                                                        ::DISPATCH( $self, "position" ),
                                                                        ::DISPATCH(
                                                                            $GLOBAL::Code_infix_58__60__126__62_, 'APPLY',
                                                                            ::DISPATCH( $::Str, 'new', ' ]; ' ), ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( $::Str, 'new', '})' ), ::DISPATCH( $::Str, 'new', ')' ) )
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                        )
                                }
                            }
                            }
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {   invocant => ::DISPATCH( $::Signature::Item, "new", { sigil  => '$', twigil => '', name => 'self', namespace => [], } ),
                            array    => ::DISPATCH( $::Array,           "new", { _array => [] } ),
                            hash     => ::DISPATCH( $::Hash,            "new", { _hash  => {} } ),
                            return   => $::Undef,
                        }
                    ),
                }
            )
            )
    };
    1
}
