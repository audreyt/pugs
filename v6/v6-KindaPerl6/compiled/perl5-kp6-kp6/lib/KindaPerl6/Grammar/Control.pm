{ package KindaPerl6::Grammar; 
# Do not edit this file - Perl 5 generated by HASH(0x1b09380)
# AUTHORS, COPYRIGHT: Please look at the source file.
use v5;
use strict;
no strict "vars";
use constant KP6_DISABLE_INSECURE_CODE => 0;
use KindaPerl6::Runtime::Perl5::Runtime;
my $_MODIFIED; INIT { $_MODIFIED = {} }
INIT { $_ = ::DISPATCH($::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
do {do { if (::DISPATCH(::DISPATCH(::DISPATCH(  ( $GLOBAL::Code_VAR_defined = $GLOBAL::Code_VAR_defined || ::DISPATCH( $::Routine, "new", )  ) 
, 'APPLY', $::KindaPerl6::Grammar )
,"true"),"p5landish") ) { do {} }  else { do {do {::MODIFIED($::KindaPerl6::Grammar);
$::KindaPerl6::Grammar = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'KindaPerl6::Grammar' )
 )
, 'PROTOTYPE',  )
}} } }
;     sub _rule_control {
    local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; 
    $GLOBAL::_M2 = $GLOBAL::_M; do{ my $_pos = pos(); ( ( ( _rule_ctrl_return() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "ctrl_return" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'ctrl_return' )
     )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( ( _rule_ctrl_leave() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "ctrl_leave" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'ctrl_leave' )
     )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( ( _rule_if() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "if" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'if' )
     )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( ( _rule_unless() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "unless" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'unless' )
     )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( ( _rule_when() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "when" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'when' )
     )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( ( _rule_for() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "for" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'for' )
     )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( ( _rule_while() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "while" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'while' )
     )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( ( _rule_apply() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "apply" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'apply' )
     )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) } && do { $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; 
    $GLOBAL::_M2 = $GLOBAL::_M }; } 
::DISPATCH(::DISPATCH($::KindaPerl6::Grammar,"HOW"),"add_method", ::DISPATCH( $::Str, "new", "control" ), ::DISPATCH( $::Method, "new", { code => sub { local $GLOBAL::_Class = shift; undef $GLOBAL::_M2; my ($str,$pos) = @_;$str = defined($str) ? $str : $_;local $_ = ( ref($str) ? DISPATCH.new( $str, "Str" )->{_value} : $str ); pos($_) = (ref $pos) ? ( $pos->{_value} ) : ( 0 + pos($_) );if ( _rule_control() ) { Match::from_global_data( $GLOBAL::_M2 ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; } else { $MATCH = $GLOBAL::MATCH = Match->new(); } @Match::Matches = (); return $MATCH; } } ), );     sub _rule_block1 {
    local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; 
    $GLOBAL::_M2 = $GLOBAL::_M; do{ my $_pos = pos(); ( ( /\G\{/g && do { local $GLOBAL::_M; _rule_opt_ws() } && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH(  ( $COMPILER::Code_add_pad = $COMPILER::Code_add_pad || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY',  )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } && ( _rule_exp_stmts() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "exp_stmts" ] ))  && do { local $GLOBAL::_M; _rule_opt_ws() } && /\G\}/g && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {my $env; $env = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$env' } )  unless defined $env; INIT { $env = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$env' } ) }
    ;
    do {::MODIFIED($env);
    $env = ::DISPATCH(  ( $COMPILER::Code_current_pad = $COMPILER::Code_current_pad || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY',  )
    }; ::DISPATCH(  ( $COMPILER::Code_drop_pad = $COMPILER::Code_drop_pad || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY',  )
    ; ::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH( $::Lit::Code, 'new', ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'pad' )
    , value => $env } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'state' )
    , value => ::DISPATCH( $::Hash, 'new', 
     )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'sig' )
    , value => ::DISPATCH( $::Sig, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'invocant' )
    , value => $::Undef } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'positional' )
    , value => ::DISPATCH( $::Array, 'new', { _array => [] }
     )
     } )
     )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'body' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp_stmts' )
     )
     )
     } )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) } && do { $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; 
    $GLOBAL::_M2 = $GLOBAL::_M }; } 
::DISPATCH(::DISPATCH($::KindaPerl6::Grammar,"HOW"),"add_method", ::DISPATCH( $::Str, "new", "block1" ), ::DISPATCH( $::Method, "new", { code => sub { local $GLOBAL::_Class = shift; undef $GLOBAL::_M2; my ($str,$pos) = @_;$str = defined($str) ? $str : $_;local $_ = ( ref($str) ? DISPATCH.new( $str, "Str" )->{_value} : $str ); pos($_) = (ref $pos) ? ( $pos->{_value} ) : ( 0 + pos($_) );if ( _rule_block1() ) { Match::from_global_data( $GLOBAL::_M2 ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; } else { $MATCH = $GLOBAL::MATCH = Match->new(); } @Match::Matches = (); return $MATCH; } } ), );     sub _rule_block2 {
    local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; 
    $GLOBAL::_M2 = $GLOBAL::_M; do{ my $_pos = pos(); ( ( ( _rule_block1() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "block1" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'block1' )
     )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) } && do { $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; 
    $GLOBAL::_M2 = $GLOBAL::_M }; } 
::DISPATCH(::DISPATCH($::KindaPerl6::Grammar,"HOW"),"add_method", ::DISPATCH( $::Str, "new", "block2" ), ::DISPATCH( $::Method, "new", { code => sub { local $GLOBAL::_Class = shift; undef $GLOBAL::_M2; my ($str,$pos) = @_;$str = defined($str) ? $str : $_;local $_ = ( ref($str) ? DISPATCH.new( $str, "Str" )->{_value} : $str ); pos($_) = (ref $pos) ? ( $pos->{_value} ) : ( 0 + pos($_) );if ( _rule_block2() ) { Match::from_global_data( $GLOBAL::_M2 ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; } else { $MATCH = $GLOBAL::MATCH = Match->new(); } @Match::Matches = (); return $MATCH; } } ), );     sub _rule_if {
    local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; 
    $GLOBAL::_M2 = $GLOBAL::_M; do{ my $_pos = pos(); ( ( /\Gi/g && /\Gf/g && do { local $GLOBAL::_M; _rule_ws() } && ( _rule_exp() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "exp" ] ))  && do { local $GLOBAL::_M; _rule_opt_ws() } && ( _rule_block1() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "block1" ] ))  && do{ my $_pos = pos(); ( ( do { local $GLOBAL::_M; _rule_opt_ws() } && /\Ge/g && /\Gl/g && /\Gs/g && /\Ge/g && do { local $GLOBAL::_M; _rule_opt_ws() } && ( _rule_block2() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "block2" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH( $::If, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'cond' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp' )
     )
     )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'body' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'block1' )
     )
     )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'otherwise' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'block2' )
     )
     )
     } )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH( $::If, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'cond' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp' )
     )
     )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'body' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'block1' )
     )
     )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'otherwise' )
    , value => $::Undef } )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) } ) ) } && do { $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; 
    $GLOBAL::_M2 = $GLOBAL::_M }; } 
::DISPATCH(::DISPATCH($::KindaPerl6::Grammar,"HOW"),"add_method", ::DISPATCH( $::Str, "new", "if" ), ::DISPATCH( $::Method, "new", { code => sub { local $GLOBAL::_Class = shift; undef $GLOBAL::_M2; my ($str,$pos) = @_;$str = defined($str) ? $str : $_;local $_ = ( ref($str) ? DISPATCH.new( $str, "Str" )->{_value} : $str ); pos($_) = (ref $pos) ? ( $pos->{_value} ) : ( 0 + pos($_) );if ( _rule_if() ) { Match::from_global_data( $GLOBAL::_M2 ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; } else { $MATCH = $GLOBAL::MATCH = Match->new(); } @Match::Matches = (); return $MATCH; } } ), );     sub _rule_unless {
    local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; 
    $GLOBAL::_M2 = $GLOBAL::_M; do{ my $_pos = pos(); ( ( /\Gu/g && /\Gn/g && /\Gl/g && /\Ge/g && /\Gs/g && /\Gs/g && do { local $GLOBAL::_M; _rule_ws() } && ( _rule_exp() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "exp" ] ))  && do { local $GLOBAL::_M; _rule_opt_ws() } && ( _rule_block1() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "block1" ] ))  && do{ my $_pos = pos(); ( ( do { local $GLOBAL::_M; _rule_opt_ws() } && /\Ge/g && /\Gl/g && /\Gs/g && /\Ge/g && do { local $GLOBAL::_M; _rule_opt_ws() } && ( _rule_block2() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "block2" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH( $::If, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'cond' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp' )
     )
     )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'body' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'block2' )
     )
     )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'otherwise' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'block1' )
     )
     )
     } )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH( $::If, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'cond' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp' )
     )
     )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'body' )
    , value => $::Undef } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'otherwise' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'block1' )
     )
     )
     } )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) } ) ) } && do { $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; 
    $GLOBAL::_M2 = $GLOBAL::_M }; } 
::DISPATCH(::DISPATCH($::KindaPerl6::Grammar,"HOW"),"add_method", ::DISPATCH( $::Str, "new", "unless" ), ::DISPATCH( $::Method, "new", { code => sub { local $GLOBAL::_Class = shift; undef $GLOBAL::_M2; my ($str,$pos) = @_;$str = defined($str) ? $str : $_;local $_ = ( ref($str) ? DISPATCH.new( $str, "Str" )->{_value} : $str ); pos($_) = (ref $pos) ? ( $pos->{_value} ) : ( 0 + pos($_) );if ( _rule_unless() ) { Match::from_global_data( $GLOBAL::_M2 ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; } else { $MATCH = $GLOBAL::MATCH = Match->new(); } @Match::Matches = (); return $MATCH; } } ), );     sub _rule_when {
    local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; 
    $GLOBAL::_M2 = $GLOBAL::_M; do{ my $_pos = pos(); ( ( /\Gw/g && /\Gh/g && /\Ge/g && /\Gn/g && do { local $GLOBAL::_M; _rule_ws() } && ( _rule_exp_seq() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "exp_seq" ] ))  && do { local $GLOBAL::_M; _rule_opt_ws() } && ( _rule_block1() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "block1" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH( $::When, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'parameters' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp_seq' )
     )
     )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'body' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'block1' )
     )
     )
     } )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) } && do { $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; 
    $GLOBAL::_M2 = $GLOBAL::_M }; } 
::DISPATCH(::DISPATCH($::KindaPerl6::Grammar,"HOW"),"add_method", ::DISPATCH( $::Str, "new", "when" ), ::DISPATCH( $::Method, "new", { code => sub { local $GLOBAL::_Class = shift; undef $GLOBAL::_M2; my ($str,$pos) = @_;$str = defined($str) ? $str : $_;local $_ = ( ref($str) ? DISPATCH.new( $str, "Str" )->{_value} : $str ); pos($_) = (ref $pos) ? ( $pos->{_value} ) : ( 0 + pos($_) );if ( _rule_when() ) { Match::from_global_data( $GLOBAL::_M2 ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; } else { $MATCH = $GLOBAL::MATCH = Match->new(); } @Match::Matches = (); return $MATCH; } } ), );     sub _rule_for {
    local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; 
    $GLOBAL::_M2 = $GLOBAL::_M; do{ my $_pos = pos(); ( ( /\Gf/g && /\Go/g && /\Gr/g && do { local $GLOBAL::_M; _rule_ws() } && ( _rule_exp() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "exp" ] ))  && do { local $GLOBAL::_M; _rule_opt_ws() } && ( _rule_arrow_sub() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "arrow_sub" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH( $::Call, 'new', ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'hyper' )
    , value => ::DISPATCH( $::Str, 'new', '' )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'arguments' )
    , value => ::DISPATCH( $::Array, 'new', { _array => [::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'arrow_sub' )
     )
     )
    ] }
     )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'method' )
    , value => ::DISPATCH( $::Str, 'new', 'map' )
     } )
    , ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'invocant' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp' )
     )
     )
     } )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) } && do { $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; 
    $GLOBAL::_M2 = $GLOBAL::_M }; } 
::DISPATCH(::DISPATCH($::KindaPerl6::Grammar,"HOW"),"add_method", ::DISPATCH( $::Str, "new", "for" ), ::DISPATCH( $::Method, "new", { code => sub { local $GLOBAL::_Class = shift; undef $GLOBAL::_M2; my ($str,$pos) = @_;$str = defined($str) ? $str : $_;local $_ = ( ref($str) ? DISPATCH.new( $str, "Str" )->{_value} : $str ); pos($_) = (ref $pos) ? ( $pos->{_value} ) : ( 0 + pos($_) );if ( _rule_for() ) { Match::from_global_data( $GLOBAL::_M2 ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; } else { $MATCH = $GLOBAL::MATCH = Match->new(); } @Match::Matches = (); return $MATCH; } } ), );     sub _rule_while {
    local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; 
    $GLOBAL::_M2 = $GLOBAL::_M; do{ my $_pos = pos(); ( ( /\Gw/g && /\Gh/g && /\Gi/g && /\Gl/g && /\Ge/g && do { local $GLOBAL::_M; _rule_ws() } && ( _rule_exp() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "exp" ] ))  && do { local $GLOBAL::_M; _rule_ws() } && ( _rule_block1() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "block1" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH( $::While, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'cond' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp' )
     )
     )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'body' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'block1' )
     )
     )
     } )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) } && do { $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; 
    $GLOBAL::_M2 = $GLOBAL::_M }; } 
::DISPATCH(::DISPATCH($::KindaPerl6::Grammar,"HOW"),"add_method", ::DISPATCH( $::Str, "new", "while" ), ::DISPATCH( $::Method, "new", { code => sub { local $GLOBAL::_Class = shift; undef $GLOBAL::_M2; my ($str,$pos) = @_;$str = defined($str) ? $str : $_;local $_ = ( ref($str) ? DISPATCH.new( $str, "Str" )->{_value} : $str ); pos($_) = (ref $pos) ? ( $pos->{_value} ) : ( 0 + pos($_) );if ( _rule_while() ) { Match::from_global_data( $GLOBAL::_M2 ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; } else { $MATCH = $GLOBAL::MATCH = Match->new(); } @Match::Matches = (); return $MATCH; } } ), );     sub _rule_ctrl_leave {
    local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; 
    $GLOBAL::_M2 = $GLOBAL::_M; do{ my $_pos = pos(); ( ( /\Gl/g && /\Ge/g && /\Ga/g && /\Gv/g && /\Ge/g && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH( $::Leave, 'new',  )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) } && do { $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; 
    $GLOBAL::_M2 = $GLOBAL::_M }; } 
::DISPATCH(::DISPATCH($::KindaPerl6::Grammar,"HOW"),"add_method", ::DISPATCH( $::Str, "new", "ctrl_leave" ), ::DISPATCH( $::Method, "new", { code => sub { local $GLOBAL::_Class = shift; undef $GLOBAL::_M2; my ($str,$pos) = @_;$str = defined($str) ? $str : $_;local $_ = ( ref($str) ? DISPATCH.new( $str, "Str" )->{_value} : $str ); pos($_) = (ref $pos) ? ( $pos->{_value} ) : ( 0 + pos($_) );if ( _rule_ctrl_leave() ) { Match::from_global_data( $GLOBAL::_M2 ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; } else { $MATCH = $GLOBAL::MATCH = Match->new(); } @Match::Matches = (); return $MATCH; } } ), );     sub _rule_ctrl_return {
    local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; 
    $GLOBAL::_M2 = $GLOBAL::_M; do{ my $_pos = pos(); ( ( /\Gr/g && /\Ge/g && /\Gt/g && /\Gu/g && /\Gr/g && /\Gn/g && do { local $GLOBAL::_M; _rule_ws() } && ( _rule_exp() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "exp" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH( $::Return, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'result' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp' )
     )
     )
     } )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\Gr/g && /\Ge/g && /\Gt/g && /\Gu/g && /\Gr/g && /\Gn/g && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH( $::Return, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'result' )
    , value => ::DISPATCH( $::Val::Undef, 'new',  )
     } )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) } && do { $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; 
    $GLOBAL::_M2 = $GLOBAL::_M }; } 
::DISPATCH(::DISPATCH($::KindaPerl6::Grammar,"HOW"),"add_method", ::DISPATCH( $::Str, "new", "ctrl_return" ), ::DISPATCH( $::Method, "new", { code => sub { local $GLOBAL::_Class = shift; undef $GLOBAL::_M2; my ($str,$pos) = @_;$str = defined($str) ? $str : $_;local $_ = ( ref($str) ? DISPATCH.new( $str, "Str" )->{_value} : $str ); pos($_) = (ref $pos) ? ( $pos->{_value} ) : ( 0 + pos($_) );if ( _rule_ctrl_return() ) { Match::from_global_data( $GLOBAL::_M2 ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; } else { $MATCH = $GLOBAL::MATCH = Match->new(); } @Match::Matches = (); return $MATCH; } } ), )}
; 1 }
