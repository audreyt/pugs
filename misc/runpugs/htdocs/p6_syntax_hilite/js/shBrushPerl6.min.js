
dp.sh.Brushes.p6=function()
{var builtins="substr index rindex "+"grep map sort join split reduce min max reverse truncate zip "+"cat roundrobin classify first "+"keys values pairs defined delete exists elems end kv "+"arity assuming gather take any pick all none "+"pop push shift splice unshift "+"abs exp log log10 rand sign sqrt sin cos tan "+"floor ceil round srand roots cis unpolar polar "+"p5chop chop p5chomp chomp lc lcfirst uc ucfirst "+"capitalize normalize pack unpack quotemeta comb "+"nfd nfc nfkd nfkc "+"printf sprintf caller evalfile run runinstead "+"nothing want bless chr ord list item gmtime "+"localtime time gethost getpw chroot getlogin kill "+"fork wait perl context";var keywords="module class role use require package enum grammar "+"coro sub submethod method is but does trusts multi "+"rule token regex category "+"let my our state temp has constant proto "+"if else elsif unless "+"for foreach loop while until when next last redo "+"given not or and andthen orelse xor return default exit "+"BEGIN CHECK INIT START FIRST ENTER LEAVE KEEP UNDO NEXT LAST "+"PRE POST END rw signature returns of parsed cached "+"readonly ref copy "+"inline tighter looser equiv assoc "+"deep also "+"die fail try CATCH CONTROL warn "+"print open read write readline say seek close slurp "+"opendir readdir "+"constant prec key value irs ofs ors pos export "+"float int str true false int1 int2 int4 int8 "+"int16 int32 int64 uint1 uint2 uint4 uint8 uint16 "+"uint32 uint64 num16 num32 num64 complex16 complex32 "+"complex64 complex128 buf8 buf16 buf32 buf64 "+"WHAT HOW "+"Array Bool Class Code Hash Int IO Num NumRange "+"Str StrRange Sub Role Rule Rat Complex Any "+"Scalar List "+"eval operator undef undefine "+"infix postfix prefix cirumfix postcircumfix";this.regexList=[{regex:dp.sh.RegexLib.SingleLinePerlComments,css:'comment'},{regex:new RegExp('(\\$|@|%)\\w+','g'),css:'variable'},{regex:dp.sh.RegexLib.DoubleQuotedString,css:'string'},{regex:dp.sh.RegexLib.SingleQuotedString,css:'string'},{regex:new RegExp('\\b([\\d]+(\\.[\\d]+)?|0x[a-f0-9]+)\\b','gi'),css:'number'},{regex:new RegExp(this.GetKeywords(keywords),'gm'),css:'keyword'},{regex:new RegExp(this.GetKeywords(builtins),'gm'),css:'builtin'},{regex:new RegExp(' [a-z][A-Za-z0-9_]*[\-A-Za-z0-9_]*','g'),css:'symbol'}];this.CssClass='dp-p6';this.Style='.dp-p6 .builtin { color: #ff1493; }'+'.dp-p6 .symbol { color: #a70; }'+'.dp-p6 .op { color: #808080; }'+'.dp-p6 .number { color: #C00000; }'+'.dp-p6 .variable { color: #a70; font-weight: bold; }';}
dp.sh.Brushes.p6.prototype=new dp.sh.Highlighter();dp.sh.Brushes.p6.Aliases=['perl6','p6'];