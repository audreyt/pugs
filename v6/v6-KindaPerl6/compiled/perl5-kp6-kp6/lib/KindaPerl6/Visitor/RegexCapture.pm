{

    package KindaPerl6::Visitor::RegexCapture;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    # AUTHORS, COPYRIGHT: Please look at the source file.
    use v5;
    use strict;
    no strict "vars";
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    INIT { $_MODIFIED = {} }
    INIT {
        $_ =
          ::DISPATCH( $::Scalar, "new",
            { modified => $_MODIFIED, name => "$_" } );
    }
    do {
        do {
            if (
                ::DISPATCH(
                    ::DISPATCH(
                        ::DISPATCH(
                            (
                                $GLOBAL::Code_VAR_defined =
                                  $GLOBAL::Code_VAR_defined
                                  || ::DISPATCH( $::Routine, "new", )
                            ),
                            'APPLY',
                            $::KindaPerl6::Visitor::RegexCapture
                        ),
                        "true"
                    ),
                    "p5landish"
                )
              )
            {
            }
            else {
                do {
                    do {
                        ::MODIFIED($::KindaPerl6::Visitor::RegexCapture);
                        $::KindaPerl6::Visitor::RegexCapture = ::DISPATCH(
                            ::DISPATCH(
                                $::Class, 'new',
                                ::DISPATCH(
                                    $::Str, 'new',
                                    'KindaPerl6::Visitor::RegexCapture'
                                )
                            ),
                            'PROTOTYPE',
                        );
                      }
                  }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::KindaPerl6::Visitor::RegexCapture, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'visit' ),
            ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {

                        # emit_declarations
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $node;
                        $node =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$node' } )
                          unless defined $node;
                        INIT {
                            $node =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$node' } );
                        }
                        my $node_name;
                        $node_name =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$node_name' } )
                          unless defined $node_name;
                        INIT {
                            $node_name = ::DISPATCH(
                                $::Scalar,
                                'new',
                                {
                                    modified => $_MODIFIED,
                                    name     => '$node_name'
                                }
                            );
                        }

                        # get $self
                        $self = shift;

                        # emit_arguments
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;
                        INIT {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        ::DISPATCH_VAR( $List__, 'STORE',
                            ::DISPATCH( $CAPTURE, 'array', ) );
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        {
                            my $_param_index = 0;
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'node' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($node);
                                    $node =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'node' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $node = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'node_name'
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($node_name);
                                    $node_name = ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'node_name'
                                        )
                                    );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $node_name = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                        }

                        # emit_body
                        do {
                            if (
                                ::DISPATCH(
                                    ::DISPATCH(
                                        ::DISPATCH(
                                            (
                                                $GLOBAL::Code_infix_58__60_eq_62_
                                                  = $GLOBAL::Code_infix_58__60_eq_62_
                                                  || ::DISPATCH(
                                                    $::Routine, "new",
                                                  )
                                            ),
                                            'APPLY',
                                            $node_name,
                                            ::DISPATCH(
                                                $::Str, 'new', 'Token'
                                            )
                                        ),
                                        "true"
                                    ),
                                    "p5landish"
                                )
                              )
                            {
                                do {
                                    ::DISPATCH(
                                        ::DISPATCH( $node, 'regex', ),
                                        'capture_count',
                                        ::DISPATCH( $::Int,  'new', 0 ),
                                        ::DISPATCH( $::Int,  'new', 0 ),
                                        ::DISPATCH( $::Hash, 'new', )
                                    );
                                    return ($node);
                                  }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        return ($::Undef);
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => $::Undef,
                            array    => ::DISPATCH(
                                $::List, "new",
                                {
                                    _array => [
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'node',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'node_name',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                    ]
                                }
                            ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
    };
    1
}
{

    package P5Token;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    # AUTHORS, COPYRIGHT: Please look at the source file.
    use v5;
    use strict;
    no strict "vars";
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    INIT { $_MODIFIED = {} }
    INIT {
        $_ =
          ::DISPATCH( $::Scalar, "new",
            { modified => $_MODIFIED, name => "$_" } );
    }
    do {
        do {
            if (
                ::DISPATCH(
                    ::DISPATCH(
                        ::DISPATCH(
                            (
                                $GLOBAL::Code_VAR_defined =
                                  $GLOBAL::Code_VAR_defined
                                  || ::DISPATCH( $::Routine, "new", )
                            ),
                            'APPLY',
                            $::P5Token
                        ),
                        "true"
                    ),
                    "p5landish"
                )
              )
            {
            }
            else {
                do {
                    do {
                        ::MODIFIED($::P5Token);
                        $::P5Token = ::DISPATCH(
                            ::DISPATCH(
                                $::Class, 'new',
                                ::DISPATCH( $::Str, 'new', 'P5Token' )
                            ),
                            'PROTOTYPE',
                        );
                      }
                  }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::P5Token, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'capture_count' ),
            ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {

                        # emit_declarations
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $count;
                        $count =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$count' } )
                          unless defined $count;
                        INIT {
                            $count =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$count' } );
                        }
                        my $quantified;
                        $quantified =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$quantified' } )
                          unless defined $quantified;
                        INIT {
                            $quantified = ::DISPATCH(
                                $::Scalar,
                                'new',
                                {
                                    modified => $_MODIFIED,
                                    name     => '$quantified'
                                }
                            );
                        }
                        my $seen;
                        $seen =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$seen' } )
                          unless defined $seen;
                        INIT {
                            $seen =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$seen' } );
                        }

                        # get $self
                        $self = shift;

                        # emit_arguments
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;
                        INIT {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        ::DISPATCH_VAR( $List__, 'STORE',
                            ::DISPATCH( $CAPTURE, 'array', ) );
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        {
                            my $_param_index = 0;
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'count' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($count);
                                    $count =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'count' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $count = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'quantified'
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($quantified);
                                    $quantified = ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'quantified'
                                        )
                                    );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $quantified = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'seen' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($seen);
                                    $seen =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'seen' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $seen = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                        }

                        # emit_body
                        $count;
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => $::Undef,
                            array    => ::DISPATCH(
                                $::List, "new",
                                {
                                    _array => [
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'count',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'quantified',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'seen',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                    ]
                                }
                            ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
    };
    1
}
{

    package Rule::Quantifier;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    # AUTHORS, COPYRIGHT: Please look at the source file.
    use v5;
    use strict;
    no strict "vars";
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    INIT { $_MODIFIED = {} }
    INIT {
        $_ =
          ::DISPATCH( $::Scalar, "new",
            { modified => $_MODIFIED, name => "$_" } );
    }
    do {
        do {
            if (
                ::DISPATCH(
                    ::DISPATCH(
                        ::DISPATCH(
                            (
                                $GLOBAL::Code_VAR_defined =
                                  $GLOBAL::Code_VAR_defined
                                  || ::DISPATCH( $::Routine, "new", )
                            ),
                            'APPLY',
                            $::Rule::Quantifier
                        ),
                        "true"
                    ),
                    "p5landish"
                )
              )
            {
            }
            else {
                do {
                    do {
                        ::MODIFIED($::Rule::Quantifier);
                        $::Rule::Quantifier = ::DISPATCH(
                            ::DISPATCH(
                                $::Class,
                                'new',
                                ::DISPATCH( $::Str, 'new', 'Rule::Quantifier' )
                            ),
                            'PROTOTYPE',
                        );
                      }
                  }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::Quantifier, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'capture_count' ),
            ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {

                        # emit_declarations
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $count;
                        $count =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$count' } )
                          unless defined $count;
                        INIT {
                            $count =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$count' } );
                        }
                        my $quantified;
                        $quantified =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$quantified' } )
                          unless defined $quantified;
                        INIT {
                            $quantified = ::DISPATCH(
                                $::Scalar,
                                'new',
                                {
                                    modified => $_MODIFIED,
                                    name     => '$quantified'
                                }
                            );
                        }
                        my $seen;
                        $seen =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$seen' } )
                          unless defined $seen;
                        INIT {
                            $seen =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$seen' } );
                        }

                        # get $self
                        $self = shift;

                        # emit_arguments
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;
                        INIT {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        ::DISPATCH_VAR( $List__, 'STORE',
                            ::DISPATCH( $CAPTURE, 'array', ) );
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        {
                            my $_param_index = 0;
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'count' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($count);
                                    $count =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'count' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $count = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'quantified'
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($quantified);
                                    $quantified = ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'quantified'
                                        )
                                    );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $quantified = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'seen' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($seen);
                                    $seen =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'seen' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $seen = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                        }

                        # emit_body
                        ::DISPATCH( ::DISPATCH( $self, "term" ),
                            'capture_count', $count,
                            ::DISPATCH( $::Int, 'new', 1 ), $seen );
                        $count;
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => $::Undef,
                            array    => ::DISPATCH(
                                $::List, "new",
                                {
                                    _array => [
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'count',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'quantified',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'seen',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                    ]
                                }
                            ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
    };
    1
}
{

    package Rule::Or;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    # AUTHORS, COPYRIGHT: Please look at the source file.
    use v5;
    use strict;
    no strict "vars";
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    INIT { $_MODIFIED = {} }
    INIT {
        $_ =
          ::DISPATCH( $::Scalar, "new",
            { modified => $_MODIFIED, name => "$_" } );
    }
    do {
        do {
            if (
                ::DISPATCH(
                    ::DISPATCH(
                        ::DISPATCH(
                            (
                                $GLOBAL::Code_VAR_defined =
                                  $GLOBAL::Code_VAR_defined
                                  || ::DISPATCH( $::Routine, "new", )
                            ),
                            'APPLY',
                            $::Rule::Or
                        ),
                        "true"
                    ),
                    "p5landish"
                )
              )
            {
            }
            else {
                do {
                    do {
                        ::MODIFIED($::Rule::Or);
                        $::Rule::Or = ::DISPATCH(
                            ::DISPATCH(
                                $::Class, 'new',
                                ::DISPATCH( $::Str, 'new', 'Rule::Or' )
                            ),
                            'PROTOTYPE',
                        );
                      }
                  }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::Or, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'capture_count' ),
            ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {

                        # emit_declarations
                        my $max;
                        $max =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$max' } )
                          unless defined $max;
                        INIT {
                            $max =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$max' } );
                        }
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $count;
                        $count =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$count' } )
                          unless defined $count;
                        INIT {
                            $count =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$count' } );
                        }
                        my $quantified;
                        $quantified =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$quantified' } )
                          unless defined $quantified;
                        INIT {
                            $quantified = ::DISPATCH(
                                $::Scalar,
                                'new',
                                {
                                    modified => $_MODIFIED,
                                    name     => '$quantified'
                                }
                            );
                        }
                        my $seen;
                        $seen =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$seen' } )
                          unless defined $seen;
                        INIT {
                            $seen =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$seen' } );
                        }

                        # get $self
                        $self = shift;

                        # emit_arguments
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;
                        INIT {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        ::DISPATCH_VAR( $List__, 'STORE',
                            ::DISPATCH( $CAPTURE, 'array', ) );
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        {
                            my $_param_index = 0;
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'count' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($count);
                                    $count =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'count' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $count = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'quantified'
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($quantified);
                                    $quantified = ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'quantified'
                                        )
                                    );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $quantified = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'seen' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($seen);
                                    $seen =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'seen' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $seen = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                        }

                        # emit_body
                        do {
                            ::MODIFIED($max);
                            $max = $count;
                        };
                        ::DISPATCH(
                            ::DISPATCH( $self, "or" ),
                            'map',
                            ::DISPATCH(
                                $::Code, 'new',
                                {
                                    code => sub {
                                        my $last;
                                        $last = ::DISPATCH(
                                            $::Scalar,
                                            'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$last'
                                            }
                                        ) unless defined $last;
                                        INIT {
                                            $last = ::DISPATCH(
                                                $::Scalar,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$last'
                                                }
                                            );
                                        }
                                        my $List__ = ::DISPATCH(
                                            $::ArrayContainer,
                                            'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$List__'
                                            }
                                        );
                                        my $regex;
                                        $regex = ::DISPATCH(
                                            $::Scalar,
                                            'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$regex'
                                            }
                                        ) unless defined $regex;
                                        INIT {
                                            $regex = ::DISPATCH(
                                                $::Scalar,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$regex'
                                                }
                                            );
                                        }
                                        my $CAPTURE;
                                        $CAPTURE = ::DISPATCH(
                                            $::Scalar,
                                            'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$CAPTURE'
                                            }
                                        ) unless defined $CAPTURE;
                                        INIT {
                                            $CAPTURE = ::DISPATCH(
                                                $::Scalar,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$CAPTURE'
                                                }
                                            );
                                        }
                                        my $List__ = ::DISPATCH(
                                            $::ArrayContainer,
                                            'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$List__'
                                            }
                                        );
                                        ::DISPATCH_VAR( $CAPTURE, "STORE",
                                            ::CAPTURIZE( \@_ ) );
                                        ::DISPATCH_VAR( $List__, 'STORE',
                                            ::DISPATCH( $CAPTURE, 'array', ) );
                                        do {
                                            ::MODIFIED($Hash__);
                                            $Hash__ =
                                              ::DISPATCH( $CAPTURE, 'hash', );
                                        };
                                        {
                                            my $_param_index = 0;
                                            if (
                                                ::DISPATCH(
                                                    $GLOBAL::Code_exists,
                                                    'APPLY',
                                                    ::DISPATCH(
                                                        $Hash__, 'LOOKUP',
                                                        ::DISPATCH(
                                                            $::Str, 'new',
                                                            'regex'
                                                        )
                                                    )
                                                )->{_value}
                                              )
                                            {
                                                do {
                                                    ::MODIFIED($regex);
                                                    $regex = ::DISPATCH(
                                                        $Hash__, 'LOOKUP',
                                                        ::DISPATCH(
                                                            $::Str, 'new',
                                                            'regex'
                                                        )
                                                    );
                                                  }
                                            }
                                            elsif (
                                                ::DISPATCH(
                                                    $GLOBAL::Code_exists,
                                                    'APPLY',
                                                    ::DISPATCH(
                                                        $List__, 'INDEX',
                                                        ::DISPATCH(
                                                            $::Int,
                                                            'new',
                                                            $_param_index
                                                        )
                                                    )
                                                )->{_value}
                                              )
                                            {
                                                $regex = ::DISPATCH(
                                                    $List__, 'INDEX',
                                                    ::DISPATCH(
                                                        $::Int,
                                                        'new',
                                                        $_param_index++
                                                    )
                                                );
                                            }
                                        }
                                        do {
                                            ::MODIFIED($last);
                                            $last =
                                              ::DISPATCH( $regex,
                                                'capture_count', $count,
                                                $quantified, $seen );
                                        };
                                        do {
                                            if (
                                                ::DISPATCH(
                                                    ::DISPATCH(
                                                        ::DISPATCH(
                                                            (
                                                                $GLOBAL::Code_infix_58__60__62__62_
                                                                  = $GLOBAL::Code_infix_58__60__62__62_
                                                                  || ::DISPATCH(
                                                                    $::Routine,
                                                                    "new",
                                                                  )
                                                            ),
                                                            'APPLY',
                                                            $last,
                                                            $max
                                                        ),
                                                        "true"
                                                    ),
                                                    "p5landish"
                                                )
                                              )
                                            {
                                                do {
                                                    do {
                                                        ::MODIFIED($max);
                                                        $max = $last;
                                                      }
                                                  }
                                            }
                                            else {
                                                ::DISPATCH( $::Bit, "new", 0 );
                                            }
                                          }
                                    },
                                    signature => ::DISPATCH(
                                        $::Signature,
                                        "new",
                                        {
                                            invocant => $::Undef,
                                            array    => ::DISPATCH(
                                                $::List, "new",
                                                {
                                                    _array => [
                                                        ::DISPATCH(
                                                            $::Signature::Item,
                                                            'new',
                                                            {
                                                                sigil  => '$',
                                                                twigil => '',
                                                                name => 'regex',
                                                                value =>
                                                                  $::Undef,
                                                                has_default =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_named_only =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_optional =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_slurpy =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_multidimensional =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_rw =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_copy =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                            }
                                                        ),
                                                    ]
                                                }
                                            ),
                                            return => $::Undef,
                                        }
                                    ),
                                }
                            )
                        );
                        $max;
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => $::Undef,
                            array    => ::DISPATCH(
                                $::List, "new",
                                {
                                    _array => [
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'count',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'quantified',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'seen',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                    ]
                                }
                            ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
    };
    1
}
{

    package Rule::Concat;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    # AUTHORS, COPYRIGHT: Please look at the source file.
    use v5;
    use strict;
    no strict "vars";
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    INIT { $_MODIFIED = {} }
    INIT {
        $_ =
          ::DISPATCH( $::Scalar, "new",
            { modified => $_MODIFIED, name => "$_" } );
    }
    do {
        do {
            if (
                ::DISPATCH(
                    ::DISPATCH(
                        ::DISPATCH(
                            (
                                $GLOBAL::Code_VAR_defined =
                                  $GLOBAL::Code_VAR_defined
                                  || ::DISPATCH( $::Routine, "new", )
                            ),
                            'APPLY',
                            $::Rule::Concat
                        ),
                        "true"
                    ),
                    "p5landish"
                )
              )
            {
            }
            else {
                do {
                    do {
                        ::MODIFIED($::Rule::Concat);
                        $::Rule::Concat = ::DISPATCH(
                            ::DISPATCH(
                                $::Class, 'new',
                                ::DISPATCH( $::Str, 'new', 'Rule::Concat' )
                            ),
                            'PROTOTYPE',
                        );
                      }
                  }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::Concat, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'capture_count' ),
            ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {

                        # emit_declarations
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $count;
                        $count =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$count' } )
                          unless defined $count;
                        INIT {
                            $count =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$count' } );
                        }
                        my $quantified;
                        $quantified =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$quantified' } )
                          unless defined $quantified;
                        INIT {
                            $quantified = ::DISPATCH(
                                $::Scalar,
                                'new',
                                {
                                    modified => $_MODIFIED,
                                    name     => '$quantified'
                                }
                            );
                        }
                        my $seen;
                        $seen =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$seen' } )
                          unless defined $seen;
                        INIT {
                            $seen =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$seen' } );
                        }

                        # get $self
                        $self = shift;

                        # emit_arguments
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;
                        INIT {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        ::DISPATCH_VAR( $List__, 'STORE',
                            ::DISPATCH( $CAPTURE, 'array', ) );
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        {
                            my $_param_index = 0;
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'count' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($count);
                                    $count =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'count' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $count = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'quantified'
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($quantified);
                                    $quantified = ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'quantified'
                                        )
                                    );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $quantified = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'seen' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($seen);
                                    $seen =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'seen' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $seen = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                        }

                        # emit_body
                        ::DISPATCH(
                            ::DISPATCH( $self, "concat" ),
                            'map',
                            ::DISPATCH(
                                $::Code, 'new',
                                {
                                    code => sub {
                                        my $List__ = ::DISPATCH(
                                            $::ArrayContainer,
                                            'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$List__'
                                            }
                                        );
                                        my $regex;
                                        $regex = ::DISPATCH(
                                            $::Scalar,
                                            'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$regex'
                                            }
                                        ) unless defined $regex;
                                        INIT {
                                            $regex = ::DISPATCH(
                                                $::Scalar,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$regex'
                                                }
                                            );
                                        }
                                        my $CAPTURE;
                                        $CAPTURE = ::DISPATCH(
                                            $::Scalar,
                                            'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$CAPTURE'
                                            }
                                        ) unless defined $CAPTURE;
                                        INIT {
                                            $CAPTURE = ::DISPATCH(
                                                $::Scalar,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$CAPTURE'
                                                }
                                            );
                                        }
                                        my $List__ = ::DISPATCH(
                                            $::ArrayContainer,
                                            'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$List__'
                                            }
                                        );
                                        ::DISPATCH_VAR( $CAPTURE, "STORE",
                                            ::CAPTURIZE( \@_ ) );
                                        ::DISPATCH_VAR( $List__, 'STORE',
                                            ::DISPATCH( $CAPTURE, 'array', ) );
                                        do {
                                            ::MODIFIED($Hash__);
                                            $Hash__ =
                                              ::DISPATCH( $CAPTURE, 'hash', );
                                        };
                                        {
                                            my $_param_index = 0;
                                            if (
                                                ::DISPATCH(
                                                    $GLOBAL::Code_exists,
                                                    'APPLY',
                                                    ::DISPATCH(
                                                        $Hash__, 'LOOKUP',
                                                        ::DISPATCH(
                                                            $::Str, 'new',
                                                            'regex'
                                                        )
                                                    )
                                                )->{_value}
                                              )
                                            {
                                                do {
                                                    ::MODIFIED($regex);
                                                    $regex = ::DISPATCH(
                                                        $Hash__, 'LOOKUP',
                                                        ::DISPATCH(
                                                            $::Str, 'new',
                                                            'regex'
                                                        )
                                                    );
                                                  }
                                            }
                                            elsif (
                                                ::DISPATCH(
                                                    $GLOBAL::Code_exists,
                                                    'APPLY',
                                                    ::DISPATCH(
                                                        $List__, 'INDEX',
                                                        ::DISPATCH(
                                                            $::Int,
                                                            'new',
                                                            $_param_index
                                                        )
                                                    )
                                                )->{_value}
                                              )
                                            {
                                                $regex = ::DISPATCH(
                                                    $List__, 'INDEX',
                                                    ::DISPATCH(
                                                        $::Int,
                                                        'new',
                                                        $_param_index++
                                                    )
                                                );
                                            }
                                        }
                                        do {
                                            ::MODIFIED($count);
                                            $count =
                                              ::DISPATCH( $regex,
                                                'capture_count', $count,
                                                $quantified, $seen );
                                          }
                                    },
                                    signature => ::DISPATCH(
                                        $::Signature,
                                        "new",
                                        {
                                            invocant => $::Undef,
                                            array    => ::DISPATCH(
                                                $::List, "new",
                                                {
                                                    _array => [
                                                        ::DISPATCH(
                                                            $::Signature::Item,
                                                            'new',
                                                            {
                                                                sigil  => '$',
                                                                twigil => '',
                                                                name => 'regex',
                                                                value =>
                                                                  $::Undef,
                                                                has_default =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_named_only =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_optional =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_slurpy =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_multidimensional =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_rw =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_copy =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                            }
                                                        ),
                                                    ]
                                                }
                                            ),
                                            return => $::Undef,
                                        }
                                    ),
                                }
                            )
                        );
                        $count;
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => $::Undef,
                            array    => ::DISPATCH(
                                $::List, "new",
                                {
                                    _array => [
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'count',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'quantified',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'seen',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                    ]
                                }
                            ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
    };
    1
}
{

    package Rule::SubruleNoCapture;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    # AUTHORS, COPYRIGHT: Please look at the source file.
    use v5;
    use strict;
    no strict "vars";
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    INIT { $_MODIFIED = {} }
    INIT {
        $_ =
          ::DISPATCH( $::Scalar, "new",
            { modified => $_MODIFIED, name => "$_" } );
    }
    do {
        do {
            if (
                ::DISPATCH(
                    ::DISPATCH(
                        ::DISPATCH(
                            (
                                $GLOBAL::Code_VAR_defined =
                                  $GLOBAL::Code_VAR_defined
                                  || ::DISPATCH( $::Routine, "new", )
                            ),
                            'APPLY',
                            $::Rule::SubruleNoCapture
                        ),
                        "true"
                    ),
                    "p5landish"
                )
              )
            {
            }
            else {
                do {
                    do {
                        ::MODIFIED($::Rule::SubruleNoCapture);
                        $::Rule::SubruleNoCapture = ::DISPATCH(
                            ::DISPATCH(
                                $::Class, 'new',
                                ::DISPATCH(
                                    $::Str, 'new', 'Rule::SubruleNoCapture'
                                )
                            ),
                            'PROTOTYPE',
                        );
                      }
                  }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::SubruleNoCapture, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'capture_count' ),
            ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {

                        # emit_declarations
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $count;
                        $count =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$count' } )
                          unless defined $count;
                        INIT {
                            $count =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$count' } );
                        }
                        my $quantified;
                        $quantified =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$quantified' } )
                          unless defined $quantified;
                        INIT {
                            $quantified = ::DISPATCH(
                                $::Scalar,
                                'new',
                                {
                                    modified => $_MODIFIED,
                                    name     => '$quantified'
                                }
                            );
                        }
                        my $seen;
                        $seen =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$seen' } )
                          unless defined $seen;
                        INIT {
                            $seen =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$seen' } );
                        }

                        # get $self
                        $self = shift;

                        # emit_arguments
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;
                        INIT {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        ::DISPATCH_VAR( $List__, 'STORE',
                            ::DISPATCH( $CAPTURE, 'array', ) );
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        {
                            my $_param_index = 0;
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'count' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($count);
                                    $count =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'count' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $count = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'quantified'
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($quantified);
                                    $quantified = ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'quantified'
                                        )
                                    );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $quantified = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'seen' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($seen);
                                    $seen =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'seen' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $seen = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                        }

                        # emit_body
                        $count;
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => $::Undef,
                            array    => ::DISPATCH(
                                $::List, "new",
                                {
                                    _array => [
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'count',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'quantified',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'seen',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                    ]
                                }
                            ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
    };
    1
}
{

    package Rule::Var;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    # AUTHORS, COPYRIGHT: Please look at the source file.
    use v5;
    use strict;
    no strict "vars";
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    INIT { $_MODIFIED = {} }
    INIT {
        $_ =
          ::DISPATCH( $::Scalar, "new",
            { modified => $_MODIFIED, name => "$_" } );
    }
    do {
        do {
            if (
                ::DISPATCH(
                    ::DISPATCH(
                        ::DISPATCH(
                            (
                                $GLOBAL::Code_VAR_defined =
                                  $GLOBAL::Code_VAR_defined
                                  || ::DISPATCH( $::Routine, "new", )
                            ),
                            'APPLY',
                            $::Rule::Var
                        ),
                        "true"
                    ),
                    "p5landish"
                )
              )
            {
            }
            else {
                do {
                    do {
                        ::MODIFIED($::Rule::Var);
                        $::Rule::Var = ::DISPATCH(
                            ::DISPATCH(
                                $::Class, 'new',
                                ::DISPATCH( $::Str, 'new', 'Rule::Var' )
                            ),
                            'PROTOTYPE',
                        );
                      }
                  }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::Var, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'capture_count' ),
            ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {

                        # emit_declarations
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $count;
                        $count =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$count' } )
                          unless defined $count;
                        INIT {
                            $count =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$count' } );
                        }
                        my $quantified;
                        $quantified =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$quantified' } )
                          unless defined $quantified;
                        INIT {
                            $quantified = ::DISPATCH(
                                $::Scalar,
                                'new',
                                {
                                    modified => $_MODIFIED,
                                    name     => '$quantified'
                                }
                            );
                        }
                        my $seen;
                        $seen =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$seen' } )
                          unless defined $seen;
                        INIT {
                            $seen =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$seen' } );
                        }

                        # get $self
                        $self = shift;

                        # emit_arguments
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;
                        INIT {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        ::DISPATCH_VAR( $List__, 'STORE',
                            ::DISPATCH( $CAPTURE, 'array', ) );
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        {
                            my $_param_index = 0;
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'count' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($count);
                                    $count =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'count' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $count = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'quantified'
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($quantified);
                                    $quantified = ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'quantified'
                                        )
                                    );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $quantified = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'seen' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($seen);
                                    $seen =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'seen' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $seen = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                        }

                        # emit_body
                        $count;
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => $::Undef,
                            array    => ::DISPATCH(
                                $::List, "new",
                                {
                                    _array => [
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'count',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'quantified',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'seen',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                    ]
                                }
                            ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
    };
    1
}
{

    package Rule::Constant;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    # AUTHORS, COPYRIGHT: Please look at the source file.
    use v5;
    use strict;
    no strict "vars";
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    INIT { $_MODIFIED = {} }
    INIT {
        $_ =
          ::DISPATCH( $::Scalar, "new",
            { modified => $_MODIFIED, name => "$_" } );
    }
    do {
        do {
            if (
                ::DISPATCH(
                    ::DISPATCH(
                        ::DISPATCH(
                            (
                                $GLOBAL::Code_VAR_defined =
                                  $GLOBAL::Code_VAR_defined
                                  || ::DISPATCH( $::Routine, "new", )
                            ),
                            'APPLY',
                            $::Rule::Constant
                        ),
                        "true"
                    ),
                    "p5landish"
                )
              )
            {
            }
            else {
                do {
                    do {
                        ::MODIFIED($::Rule::Constant);
                        $::Rule::Constant = ::DISPATCH(
                            ::DISPATCH(
                                $::Class, 'new',
                                ::DISPATCH( $::Str, 'new', 'Rule::Constant' )
                            ),
                            'PROTOTYPE',
                        );
                      }
                  }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::Constant, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'capture_count' ),
            ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {

                        # emit_declarations
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $count;
                        $count =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$count' } )
                          unless defined $count;
                        INIT {
                            $count =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$count' } );
                        }
                        my $quantified;
                        $quantified =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$quantified' } )
                          unless defined $quantified;
                        INIT {
                            $quantified = ::DISPATCH(
                                $::Scalar,
                                'new',
                                {
                                    modified => $_MODIFIED,
                                    name     => '$quantified'
                                }
                            );
                        }
                        my $seen;
                        $seen =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$seen' } )
                          unless defined $seen;
                        INIT {
                            $seen =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$seen' } );
                        }

                        # get $self
                        $self = shift;

                        # emit_arguments
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;
                        INIT {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        ::DISPATCH_VAR( $List__, 'STORE',
                            ::DISPATCH( $CAPTURE, 'array', ) );
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        {
                            my $_param_index = 0;
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'count' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($count);
                                    $count =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'count' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $count = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'quantified'
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($quantified);
                                    $quantified = ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'quantified'
                                        )
                                    );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $quantified = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'seen' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($seen);
                                    $seen =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'seen' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $seen = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                        }

                        # emit_body
                        $count;
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => $::Undef,
                            array    => ::DISPATCH(
                                $::List, "new",
                                {
                                    _array => [
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'count',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'quantified',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'seen',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                    ]
                                }
                            ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
    };
    1
}
{

    package Rule::Dot;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    # AUTHORS, COPYRIGHT: Please look at the source file.
    use v5;
    use strict;
    no strict "vars";
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    INIT { $_MODIFIED = {} }
    INIT {
        $_ =
          ::DISPATCH( $::Scalar, "new",
            { modified => $_MODIFIED, name => "$_" } );
    }
    do {
        do {
            if (
                ::DISPATCH(
                    ::DISPATCH(
                        ::DISPATCH(
                            (
                                $GLOBAL::Code_VAR_defined =
                                  $GLOBAL::Code_VAR_defined
                                  || ::DISPATCH( $::Routine, "new", )
                            ),
                            'APPLY',
                            $::Rule::Dot
                        ),
                        "true"
                    ),
                    "p5landish"
                )
              )
            {
            }
            else {
                do {
                    do {
                        ::MODIFIED($::Rule::Dot);
                        $::Rule::Dot = ::DISPATCH(
                            ::DISPATCH(
                                $::Class, 'new',
                                ::DISPATCH( $::Str, 'new', 'Rule::Dot' )
                            ),
                            'PROTOTYPE',
                        );
                      }
                  }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::Dot, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'capture_count' ),
            ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {

                        # emit_declarations
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $count;
                        $count =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$count' } )
                          unless defined $count;
                        INIT {
                            $count =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$count' } );
                        }
                        my $quantified;
                        $quantified =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$quantified' } )
                          unless defined $quantified;
                        INIT {
                            $quantified = ::DISPATCH(
                                $::Scalar,
                                'new',
                                {
                                    modified => $_MODIFIED,
                                    name     => '$quantified'
                                }
                            );
                        }
                        my $seen;
                        $seen =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$seen' } )
                          unless defined $seen;
                        INIT {
                            $seen =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$seen' } );
                        }

                        # get $self
                        $self = shift;

                        # emit_arguments
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;
                        INIT {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        ::DISPATCH_VAR( $List__, 'STORE',
                            ::DISPATCH( $CAPTURE, 'array', ) );
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        {
                            my $_param_index = 0;
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'count' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($count);
                                    $count =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'count' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $count = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'quantified'
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($quantified);
                                    $quantified = ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'quantified'
                                        )
                                    );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $quantified = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'seen' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($seen);
                                    $seen =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'seen' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $seen = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                        }

                        # emit_body
                        $count;
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => $::Undef,
                            array    => ::DISPATCH(
                                $::List, "new",
                                {
                                    _array => [
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'count',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'quantified',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'seen',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                    ]
                                }
                            ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
    };
    1
}
{

    package Rule::SpecialChar;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    # AUTHORS, COPYRIGHT: Please look at the source file.
    use v5;
    use strict;
    no strict "vars";
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    INIT { $_MODIFIED = {} }
    INIT {
        $_ =
          ::DISPATCH( $::Scalar, "new",
            { modified => $_MODIFIED, name => "$_" } );
    }
    do {
        do {
            if (
                ::DISPATCH(
                    ::DISPATCH(
                        ::DISPATCH(
                            (
                                $GLOBAL::Code_VAR_defined =
                                  $GLOBAL::Code_VAR_defined
                                  || ::DISPATCH( $::Routine, "new", )
                            ),
                            'APPLY',
                            $::Rule::SpecialChar
                        ),
                        "true"
                    ),
                    "p5landish"
                )
              )
            {
            }
            else {
                do {
                    do {
                        ::MODIFIED($::Rule::SpecialChar);
                        $::Rule::SpecialChar = ::DISPATCH(
                            ::DISPATCH(
                                $::Class, 'new',
                                ::DISPATCH(
                                    $::Str, 'new', 'Rule::SpecialChar'
                                )
                            ),
                            'PROTOTYPE',
                        );
                      }
                  }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::SpecialChar, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'capture_count' ),
            ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {

                        # emit_declarations
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $count;
                        $count =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$count' } )
                          unless defined $count;
                        INIT {
                            $count =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$count' } );
                        }
                        my $quantified;
                        $quantified =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$quantified' } )
                          unless defined $quantified;
                        INIT {
                            $quantified = ::DISPATCH(
                                $::Scalar,
                                'new',
                                {
                                    modified => $_MODIFIED,
                                    name     => '$quantified'
                                }
                            );
                        }
                        my $seen;
                        $seen =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$seen' } )
                          unless defined $seen;
                        INIT {
                            $seen =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$seen' } );
                        }

                        # get $self
                        $self = shift;

                        # emit_arguments
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;
                        INIT {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        ::DISPATCH_VAR( $List__, 'STORE',
                            ::DISPATCH( $CAPTURE, 'array', ) );
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        {
                            my $_param_index = 0;
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'count' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($count);
                                    $count =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'count' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $count = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'quantified'
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($quantified);
                                    $quantified = ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'quantified'
                                        )
                                    );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $quantified = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'seen' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($seen);
                                    $seen =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'seen' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $seen = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                        }

                        # emit_body
                        $count;
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => $::Undef,
                            array    => ::DISPATCH(
                                $::List, "new",
                                {
                                    _array => [
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'count',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'quantified',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'seen',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                    ]
                                }
                            ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
    };
    1
}
{

    package Rule::Block;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    # AUTHORS, COPYRIGHT: Please look at the source file.
    use v5;
    use strict;
    no strict "vars";
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    INIT { $_MODIFIED = {} }
    INIT {
        $_ =
          ::DISPATCH( $::Scalar, "new",
            { modified => $_MODIFIED, name => "$_" } );
    }
    do {
        do {
            if (
                ::DISPATCH(
                    ::DISPATCH(
                        ::DISPATCH(
                            (
                                $GLOBAL::Code_VAR_defined =
                                  $GLOBAL::Code_VAR_defined
                                  || ::DISPATCH( $::Routine, "new", )
                            ),
                            'APPLY',
                            $::Rule::Block
                        ),
                        "true"
                    ),
                    "p5landish"
                )
              )
            {
            }
            else {
                do {
                    do {
                        ::MODIFIED($::Rule::Block);
                        $::Rule::Block = ::DISPATCH(
                            ::DISPATCH(
                                $::Class, 'new',
                                ::DISPATCH( $::Str, 'new', 'Rule::Block' )
                            ),
                            'PROTOTYPE',
                        );
                      }
                  }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::Block, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'capture_count' ),
            ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {

                        # emit_declarations
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $count;
                        $count =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$count' } )
                          unless defined $count;
                        INIT {
                            $count =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$count' } );
                        }
                        my $quantified;
                        $quantified =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$quantified' } )
                          unless defined $quantified;
                        INIT {
                            $quantified = ::DISPATCH(
                                $::Scalar,
                                'new',
                                {
                                    modified => $_MODIFIED,
                                    name     => '$quantified'
                                }
                            );
                        }
                        my $seen;
                        $seen =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$seen' } )
                          unless defined $seen;
                        INIT {
                            $seen =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$seen' } );
                        }

                        # get $self
                        $self = shift;

                        # emit_arguments
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;
                        INIT {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        ::DISPATCH_VAR( $List__, 'STORE',
                            ::DISPATCH( $CAPTURE, 'array', ) );
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        {
                            my $_param_index = 0;
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'count' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($count);
                                    $count =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'count' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $count = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'quantified'
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($quantified);
                                    $quantified = ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'quantified'
                                        )
                                    );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $quantified = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'seen' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($seen);
                                    $seen =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'seen' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $seen = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                        }

                        # emit_body
                        $count;
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => $::Undef,
                            array    => ::DISPATCH(
                                $::List, "new",
                                {
                                    _array => [
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'count',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'quantified',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'seen',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                    ]
                                }
                            ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
    };
    1
}
{

    package Rule::InterpolateVar;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    # AUTHORS, COPYRIGHT: Please look at the source file.
    use v5;
    use strict;
    no strict "vars";
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    INIT { $_MODIFIED = {} }
    INIT {
        $_ =
          ::DISPATCH( $::Scalar, "new",
            { modified => $_MODIFIED, name => "$_" } );
    }
    do {
        do {
            if (
                ::DISPATCH(
                    ::DISPATCH(
                        ::DISPATCH(
                            (
                                $GLOBAL::Code_VAR_defined =
                                  $GLOBAL::Code_VAR_defined
                                  || ::DISPATCH( $::Routine, "new", )
                            ),
                            'APPLY',
                            $::Rule::InterpolateVar
                        ),
                        "true"
                    ),
                    "p5landish"
                )
              )
            {
            }
            else {
                do {
                    do {
                        ::MODIFIED($::Rule::InterpolateVar);
                        $::Rule::InterpolateVar = ::DISPATCH(
                            ::DISPATCH(
                                $::Class, 'new',
                                ::DISPATCH(
                                    $::Str, 'new', 'Rule::InterpolateVar'
                                )
                            ),
                            'PROTOTYPE',
                        );
                      }
                  }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::InterpolateVar, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'capture_count' ),
            ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {

                        # emit_declarations
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $count;
                        $count =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$count' } )
                          unless defined $count;
                        INIT {
                            $count =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$count' } );
                        }
                        my $quantified;
                        $quantified =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$quantified' } )
                          unless defined $quantified;
                        INIT {
                            $quantified = ::DISPATCH(
                                $::Scalar,
                                'new',
                                {
                                    modified => $_MODIFIED,
                                    name     => '$quantified'
                                }
                            );
                        }
                        my $seen;
                        $seen =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$seen' } )
                          unless defined $seen;
                        INIT {
                            $seen =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$seen' } );
                        }

                        # get $self
                        $self = shift;

                        # emit_arguments
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;
                        INIT {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        ::DISPATCH_VAR( $List__, 'STORE',
                            ::DISPATCH( $CAPTURE, 'array', ) );
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        {
                            my $_param_index = 0;
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'count' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($count);
                                    $count =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'count' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $count = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'quantified'
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($quantified);
                                    $quantified = ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'quantified'
                                        )
                                    );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $quantified = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'seen' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($seen);
                                    $seen =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'seen' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $seen = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                        }

                        # emit_body
                        $count;
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => $::Undef,
                            array    => ::DISPATCH(
                                $::List, "new",
                                {
                                    _array => [
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'count',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'quantified',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'seen',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                    ]
                                }
                            ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
    };
    1
}
{

    package Rule::Before;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    # AUTHORS, COPYRIGHT: Please look at the source file.
    use v5;
    use strict;
    no strict "vars";
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    INIT { $_MODIFIED = {} }
    INIT {
        $_ =
          ::DISPATCH( $::Scalar, "new",
            { modified => $_MODIFIED, name => "$_" } );
    }
    do {
        do {
            if (
                ::DISPATCH(
                    ::DISPATCH(
                        ::DISPATCH(
                            (
                                $GLOBAL::Code_VAR_defined =
                                  $GLOBAL::Code_VAR_defined
                                  || ::DISPATCH( $::Routine, "new", )
                            ),
                            'APPLY',
                            $::Rule::Before
                        ),
                        "true"
                    ),
                    "p5landish"
                )
              )
            {
            }
            else {
                do {
                    do {
                        ::MODIFIED($::Rule::Before);
                        $::Rule::Before = ::DISPATCH(
                            ::DISPATCH(
                                $::Class, 'new',
                                ::DISPATCH( $::Str, 'new', 'Rule::Before' )
                            ),
                            'PROTOTYPE',
                        );
                      }
                  }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::Before, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'capture_count' ),
            ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {

                        # emit_declarations
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $count;
                        $count =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$count' } )
                          unless defined $count;
                        INIT {
                            $count =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$count' } );
                        }
                        my $quantified;
                        $quantified =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$quantified' } )
                          unless defined $quantified;
                        INIT {
                            $quantified = ::DISPATCH(
                                $::Scalar,
                                'new',
                                {
                                    modified => $_MODIFIED,
                                    name     => '$quantified'
                                }
                            );
                        }
                        my $seen;
                        $seen =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$seen' } )
                          unless defined $seen;
                        INIT {
                            $seen =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$seen' } );
                        }

                        # get $self
                        $self = shift;

                        # emit_arguments
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;
                        INIT {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        ::DISPATCH_VAR( $List__, 'STORE',
                            ::DISPATCH( $CAPTURE, 'array', ) );
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        {
                            my $_param_index = 0;
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'count' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($count);
                                    $count =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'count' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $count = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'quantified'
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($quantified);
                                    $quantified = ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'quantified'
                                        )
                                    );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $quantified = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'seen' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($seen);
                                    $seen =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'seen' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $seen = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                        }

                        # emit_body
                        do {
                            if (
                                ::DISPATCH(
                                    ::DISPATCH(
                                        ::DISPATCH(
                                            (
                                                $GLOBAL::Code_infix_58__60_ne_62_
                                                  = $GLOBAL::Code_infix_58__60_ne_62_
                                                  || ::DISPATCH(
                                                    $::Routine, "new",
                                                  )
                                            ),
                                            'APPLY',
                                            ::DISPATCH(
                                                $self, "assertion_modifier"
                                            ),
                                            ::DISPATCH( $::Str, 'new', '' )
                                        ),
                                        "true"
                                    ),
                                    "p5landish"
                                )
                              )
                            {
                                do {
                                    return ($count);
                                  }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        do {
                            ::MODIFIED(
                                ::DISPATCH( $self, "capture_to_array" ) );
                            ::DISPATCH( $self, "capture_to_array" ) =
                              ::DISPATCH(
                                (
                                    $GLOBAL::Code_infix_58__60__124__124__62_ =
                                      $GLOBAL::Code_infix_58__60__124__124__62_
                                      || ::DISPATCH( $::Routine, "new", )
                                ),
                                'APPLY',
                                ::DISPATCH(
                                    $::Code, 'new',
                                    {
                                        code => sub {
                                            my $CAPTURE;
                                            $CAPTURE = ::DISPATCH(
                                                $::Scalar,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$CAPTURE'
                                                }
                                            ) unless defined $CAPTURE;
                                            INIT {
                                                $CAPTURE = ::DISPATCH(
                                                    $::Scalar,
                                                    'new',
                                                    {
                                                        modified => $_MODIFIED,
                                                        name     => '$CAPTURE'
                                                    }
                                                );
                                            }
                                            my $List__ = ::DISPATCH(
                                                $::ArrayContainer,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$List__'
                                                }
                                            );
                                            ::DISPATCH_VAR( $CAPTURE, "STORE",
                                                ::CAPTURIZE( \@_ ) );
                                            ::DISPATCH_VAR(
                                                $List__, 'STORE',
                                                ::DISPATCH(
                                                    $CAPTURE, 'array',
                                                )
                                            );
                                            do {
                                                ::MODIFIED($Hash__);
                                                $Hash__ =
                                                  ::DISPATCH( $CAPTURE, 'hash',
                                                  );
                                            };
                                            { my $_param_index = 0; }
                                            $quantified;
                                        },
                                        signature => ::DISPATCH(
                                            $::Signature,
                                            "new",
                                            {
                                                invocant => $::Undef,
                                                array    => ::DISPATCH(
                                                    $::List, "new",
                                                    { _array => [] }
                                                ),
                                                return => $::Undef,
                                            }
                                        ),
                                    }
                                ),
                                ::DISPATCH(
                                    $::Code,
                                    'new',
                                    {
                                        code => sub {
                                            my $CAPTURE;
                                            $CAPTURE = ::DISPATCH(
                                                $::Scalar,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$CAPTURE'
                                                }
                                            ) unless defined $CAPTURE;
                                            INIT {
                                                $CAPTURE = ::DISPATCH(
                                                    $::Scalar,
                                                    'new',
                                                    {
                                                        modified => $_MODIFIED,
                                                        name     => '$CAPTURE'
                                                    }
                                                );
                                            }
                                            my $List__ = ::DISPATCH(
                                                $::ArrayContainer,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$List__'
                                                }
                                            );
                                            ::DISPATCH_VAR( $CAPTURE, "STORE",
                                                ::CAPTURIZE( \@_ ) );
                                            ::DISPATCH_VAR(
                                                $List__, 'STORE',
                                                ::DISPATCH(
                                                    $CAPTURE, 'array',
                                                )
                                            );
                                            do {
                                                ::MODIFIED($Hash__);
                                                $Hash__ =
                                                  ::DISPATCH( $CAPTURE, 'hash',
                                                  );
                                            };
                                            { my $_param_index = 0; }
                                            ::DISPATCH(
                                                (
                                                    $GLOBAL::Code_infix_58__60__38__38__62_
                                                      = $GLOBAL::Code_infix_58__60__38__38__62_
                                                      || ::DISPATCH(
                                                        $::Routine, "new",
                                                      )
                                                ),
                                                'APPLY',
                                                ::DISPATCH(
                                                    $::Code, 'new',
                                                    {
                                                        code => sub {
                                                            my $CAPTURE;
                                                            $CAPTURE =
                                                              ::DISPATCH(
                                                                $::Scalar,
                                                                'new',
                                                                {
                                                                    modified =>
                                                                      $_MODIFIED,
                                                                    name =>
                                                                      '$CAPTURE'
                                                                }
                                                              )
                                                              unless defined
                                                                  $CAPTURE;
                                                            INIT {
                                                                $CAPTURE =
                                                                  ::DISPATCH(
                                                                    $::Scalar,
                                                                    'new',
                                                                    {
                                                                        modified =>
                                                                          $_MODIFIED,
                                                                        name =>
'$CAPTURE'
                                                                    }
                                                                  );
                                                            }
                                                            my $List__ =
                                                              ::DISPATCH(
                                                                $::ArrayContainer,
                                                                'new',
                                                                {
                                                                    modified =>
                                                                      $_MODIFIED,
                                                                    name =>
                                                                      '$List__'
                                                                }
                                                              );
                                                            ::DISPATCH_VAR(
                                                                $CAPTURE,
                                                                "STORE",
                                                                ::CAPTURIZE(
                                                                    \@_
                                                                )
                                                            );
                                                            ::DISPATCH_VAR(
                                                                $List__,
                                                                'STORE',
                                                                ::DISPATCH(
                                                                    $CAPTURE,
                                                                    'array',
                                                                )
                                                            );
                                                            do {
                                                                ::MODIFIED(
                                                                    $Hash__);
                                                                $Hash__ =
                                                                  ::DISPATCH(
                                                                    $CAPTURE,
                                                                    'hash',
                                                                  );
                                                            };
                                                            {
                                                                my $_param_index
                                                                  = 0;
                                                            }
                                                            ::DISPATCH(
                                                                $seen,
                                                                'LOOKUP',
                                                                ::DISPATCH(
                                                                    $::Str,
                                                                    'new',
                                                                    'before'
                                                                )
                                                            );
                                                        },
                                                        signature => ::DISPATCH(
                                                            $::Signature,
                                                            "new",
                                                            {
                                                                invocant =>
                                                                  $::Undef,
                                                                array =>
                                                                  ::DISPATCH(
                                                                    $::List,
                                                                    "new",
                                                                    {
                                                                        _array =>
                                                                          []
                                                                    }
                                                                  ),
                                                                return =>
                                                                  $::Undef,
                                                            }
                                                        ),
                                                    }
                                                ),
                                                ::DISPATCH(
                                                    $::Code,
                                                    'new',
                                                    {
                                                        code => sub {
                                                            my $CAPTURE;
                                                            $CAPTURE =
                                                              ::DISPATCH(
                                                                $::Scalar,
                                                                'new',
                                                                {
                                                                    modified =>
                                                                      $_MODIFIED,
                                                                    name =>
                                                                      '$CAPTURE'
                                                                }
                                                              )
                                                              unless defined
                                                                  $CAPTURE;
                                                            INIT {
                                                                $CAPTURE =
                                                                  ::DISPATCH(
                                                                    $::Scalar,
                                                                    'new',
                                                                    {
                                                                        modified =>
                                                                          $_MODIFIED,
                                                                        name =>
'$CAPTURE'
                                                                    }
                                                                  );
                                                            }
                                                            my $List__ =
                                                              ::DISPATCH(
                                                                $::ArrayContainer,
                                                                'new',
                                                                {
                                                                    modified =>
                                                                      $_MODIFIED,
                                                                    name =>
                                                                      '$List__'
                                                                }
                                                              );
                                                            ::DISPATCH_VAR(
                                                                $CAPTURE,
                                                                "STORE",
                                                                ::CAPTURIZE(
                                                                    \@_
                                                                )
                                                            );
                                                            ::DISPATCH_VAR(
                                                                $List__,
                                                                'STORE',
                                                                ::DISPATCH(
                                                                    $CAPTURE,
                                                                    'array',
                                                                )
                                                            );
                                                            do {
                                                                ::MODIFIED(
                                                                    $Hash__);
                                                                $Hash__ =
                                                                  ::DISPATCH(
                                                                    $CAPTURE,
                                                                    'hash',
                                                                  );
                                                            };
                                                            {
                                                                my $_param_index
                                                                  = 0;
                                                            }
                                                            ::DISPATCH( $::Int,
                                                                'new', 1 );
                                                        },
                                                        signature => ::DISPATCH(
                                                            $::Signature,
                                                            "new",
                                                            {
                                                                invocant =>
                                                                  $::Undef,
                                                                array =>
                                                                  ::DISPATCH(
                                                                    $::List,
                                                                    "new",
                                                                    {
                                                                        _array =>
                                                                          []
                                                                    }
                                                                  ),
                                                                return =>
                                                                  $::Undef,
                                                            }
                                                        ),
                                                    }
                                                )
                                            );
                                        },
                                        signature => ::DISPATCH(
                                            $::Signature,
                                            "new",
                                            {
                                                invocant => $::Undef,
                                                array    => ::DISPATCH(
                                                    $::List, "new",
                                                    { _array => [] }
                                                ),
                                                return => $::Undef,
                                            }
                                        ),
                                    }
                                )
                              );
                        };
                        do {
                            if (
                                ::DISPATCH(
                                    ::DISPATCH(
                                        ::DISPATCH(
                                            $seen, 'LOOKUP',
                                            ::DISPATCH(
                                                $::Str, 'new', 'before'
                                            )
                                        ),
                                        "true"
                                    ),
                                    "p5landish"
                                )
                              )
                            {
                                do {
                                    ::DISPATCH(
                                        ::DISPATCH(
                                            $seen, 'LOOKUP',
                                            ::DISPATCH(
                                                $::Str, 'new', 'before'
                                            )
                                        ),
                                        'capture_to_array',
                                        ::DISPATCH( $::Int, 'new', 1 )
                                    );
                                  }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        ::DISPATCH_VAR(
                            ::DISPATCH(
                                $seen, 'LOOKUP',
                                ::DISPATCH( $::Str, 'new', 'before' )
                            ),
                            "BIND", $self
                        );
                        ::DISPATCH(
                            ::DISPATCH( $self, "rule" ),
                            'capture_count',
                            ::DISPATCH( $::Int,  'new', 0 ),
                            ::DISPATCH( $::Int,  'new', 0 ),
                            ::DISPATCH( $::Hash, 'new', )
                        );
                        $count;
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => $::Undef,
                            array    => ::DISPATCH(
                                $::List, "new",
                                {
                                    _array => [
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'count',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'quantified',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'seen',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                    ]
                                }
                            ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
    };
    1
}
{

    package Rule::After;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    # AUTHORS, COPYRIGHT: Please look at the source file.
    use v5;
    use strict;
    no strict "vars";
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    INIT { $_MODIFIED = {} }
    INIT {
        $_ =
          ::DISPATCH( $::Scalar, "new",
            { modified => $_MODIFIED, name => "$_" } );
    }
    do {
        do {
            if (
                ::DISPATCH(
                    ::DISPATCH(
                        ::DISPATCH(
                            (
                                $GLOBAL::Code_VAR_defined =
                                  $GLOBAL::Code_VAR_defined
                                  || ::DISPATCH( $::Routine, "new", )
                            ),
                            'APPLY',
                            $::Rule::After
                        ),
                        "true"
                    ),
                    "p5landish"
                )
              )
            {
            }
            else {
                do {
                    do {
                        ::MODIFIED($::Rule::After);
                        $::Rule::After = ::DISPATCH(
                            ::DISPATCH(
                                $::Class, 'new',
                                ::DISPATCH( $::Str, 'new', 'Rule::After' )
                            ),
                            'PROTOTYPE',
                        );
                      }
                  }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::After, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'capture_count' ),
            ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {

                        # emit_declarations
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $count;
                        $count =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$count' } )
                          unless defined $count;
                        INIT {
                            $count =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$count' } );
                        }
                        my $quantified;
                        $quantified =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$quantified' } )
                          unless defined $quantified;
                        INIT {
                            $quantified = ::DISPATCH(
                                $::Scalar,
                                'new',
                                {
                                    modified => $_MODIFIED,
                                    name     => '$quantified'
                                }
                            );
                        }
                        my $seen;
                        $seen =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$seen' } )
                          unless defined $seen;
                        INIT {
                            $seen =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$seen' } );
                        }

                        # get $self
                        $self = shift;

                        # emit_arguments
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;
                        INIT {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        ::DISPATCH_VAR( $List__, 'STORE',
                            ::DISPATCH( $CAPTURE, 'array', ) );
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        {
                            my $_param_index = 0;
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'count' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($count);
                                    $count =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'count' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $count = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'quantified'
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($quantified);
                                    $quantified = ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'quantified'
                                        )
                                    );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $quantified = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'seen' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($seen);
                                    $seen =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'seen' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $seen = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                        }

                        # emit_body
                        do {
                            if (
                                ::DISPATCH(
                                    ::DISPATCH(
                                        ::DISPATCH(
                                            (
                                                $GLOBAL::Code_infix_58__60_ne_62_
                                                  = $GLOBAL::Code_infix_58__60_ne_62_
                                                  || ::DISPATCH(
                                                    $::Routine, "new",
                                                  )
                                            ),
                                            'APPLY',
                                            ::DISPATCH(
                                                $self, "assertion_modifier"
                                            ),
                                            ::DISPATCH( $::Str, 'new', '' )
                                        ),
                                        "true"
                                    ),
                                    "p5landish"
                                )
                              )
                            {
                                do {
                                    return ($count);
                                  }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        do {
                            ::MODIFIED(
                                ::DISPATCH( $self, "capture_to_array" ) );
                            ::DISPATCH( $self, "capture_to_array" ) =
                              ::DISPATCH(
                                (
                                    $GLOBAL::Code_infix_58__60__124__124__62_ =
                                      $GLOBAL::Code_infix_58__60__124__124__62_
                                      || ::DISPATCH( $::Routine, "new", )
                                ),
                                'APPLY',
                                ::DISPATCH(
                                    $::Code, 'new',
                                    {
                                        code => sub {
                                            my $CAPTURE;
                                            $CAPTURE = ::DISPATCH(
                                                $::Scalar,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$CAPTURE'
                                                }
                                            ) unless defined $CAPTURE;
                                            INIT {
                                                $CAPTURE = ::DISPATCH(
                                                    $::Scalar,
                                                    'new',
                                                    {
                                                        modified => $_MODIFIED,
                                                        name     => '$CAPTURE'
                                                    }
                                                );
                                            }
                                            my $List__ = ::DISPATCH(
                                                $::ArrayContainer,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$List__'
                                                }
                                            );
                                            ::DISPATCH_VAR( $CAPTURE, "STORE",
                                                ::CAPTURIZE( \@_ ) );
                                            ::DISPATCH_VAR(
                                                $List__, 'STORE',
                                                ::DISPATCH(
                                                    $CAPTURE, 'array',
                                                )
                                            );
                                            do {
                                                ::MODIFIED($Hash__);
                                                $Hash__ =
                                                  ::DISPATCH( $CAPTURE, 'hash',
                                                  );
                                            };
                                            { my $_param_index = 0; }
                                            $quantified;
                                        },
                                        signature => ::DISPATCH(
                                            $::Signature,
                                            "new",
                                            {
                                                invocant => $::Undef,
                                                array    => ::DISPATCH(
                                                    $::List, "new",
                                                    { _array => [] }
                                                ),
                                                return => $::Undef,
                                            }
                                        ),
                                    }
                                ),
                                ::DISPATCH(
                                    $::Code,
                                    'new',
                                    {
                                        code => sub {
                                            my $CAPTURE;
                                            $CAPTURE = ::DISPATCH(
                                                $::Scalar,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$CAPTURE'
                                                }
                                            ) unless defined $CAPTURE;
                                            INIT {
                                                $CAPTURE = ::DISPATCH(
                                                    $::Scalar,
                                                    'new',
                                                    {
                                                        modified => $_MODIFIED,
                                                        name     => '$CAPTURE'
                                                    }
                                                );
                                            }
                                            my $List__ = ::DISPATCH(
                                                $::ArrayContainer,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$List__'
                                                }
                                            );
                                            ::DISPATCH_VAR( $CAPTURE, "STORE",
                                                ::CAPTURIZE( \@_ ) );
                                            ::DISPATCH_VAR(
                                                $List__, 'STORE',
                                                ::DISPATCH(
                                                    $CAPTURE, 'array',
                                                )
                                            );
                                            do {
                                                ::MODIFIED($Hash__);
                                                $Hash__ =
                                                  ::DISPATCH( $CAPTURE, 'hash',
                                                  );
                                            };
                                            { my $_param_index = 0; }
                                            ::DISPATCH(
                                                (
                                                    $GLOBAL::Code_infix_58__60__38__38__62_
                                                      = $GLOBAL::Code_infix_58__60__38__38__62_
                                                      || ::DISPATCH(
                                                        $::Routine, "new",
                                                      )
                                                ),
                                                'APPLY',
                                                ::DISPATCH(
                                                    $::Code, 'new',
                                                    {
                                                        code => sub {
                                                            my $CAPTURE;
                                                            $CAPTURE =
                                                              ::DISPATCH(
                                                                $::Scalar,
                                                                'new',
                                                                {
                                                                    modified =>
                                                                      $_MODIFIED,
                                                                    name =>
                                                                      '$CAPTURE'
                                                                }
                                                              )
                                                              unless defined
                                                                  $CAPTURE;
                                                            INIT {
                                                                $CAPTURE =
                                                                  ::DISPATCH(
                                                                    $::Scalar,
                                                                    'new',
                                                                    {
                                                                        modified =>
                                                                          $_MODIFIED,
                                                                        name =>
'$CAPTURE'
                                                                    }
                                                                  );
                                                            }
                                                            my $List__ =
                                                              ::DISPATCH(
                                                                $::ArrayContainer,
                                                                'new',
                                                                {
                                                                    modified =>
                                                                      $_MODIFIED,
                                                                    name =>
                                                                      '$List__'
                                                                }
                                                              );
                                                            ::DISPATCH_VAR(
                                                                $CAPTURE,
                                                                "STORE",
                                                                ::CAPTURIZE(
                                                                    \@_
                                                                )
                                                            );
                                                            ::DISPATCH_VAR(
                                                                $List__,
                                                                'STORE',
                                                                ::DISPATCH(
                                                                    $CAPTURE,
                                                                    'array',
                                                                )
                                                            );
                                                            do {
                                                                ::MODIFIED(
                                                                    $Hash__);
                                                                $Hash__ =
                                                                  ::DISPATCH(
                                                                    $CAPTURE,
                                                                    'hash',
                                                                  );
                                                            };
                                                            {
                                                                my $_param_index
                                                                  = 0;
                                                            }
                                                            ::DISPATCH(
                                                                $seen,
                                                                'LOOKUP',
                                                                ::DISPATCH(
                                                                    $::Str,
                                                                    'new',
                                                                    'after'
                                                                )
                                                            );
                                                        },
                                                        signature => ::DISPATCH(
                                                            $::Signature,
                                                            "new",
                                                            {
                                                                invocant =>
                                                                  $::Undef,
                                                                array =>
                                                                  ::DISPATCH(
                                                                    $::List,
                                                                    "new",
                                                                    {
                                                                        _array =>
                                                                          []
                                                                    }
                                                                  ),
                                                                return =>
                                                                  $::Undef,
                                                            }
                                                        ),
                                                    }
                                                ),
                                                ::DISPATCH(
                                                    $::Code,
                                                    'new',
                                                    {
                                                        code => sub {
                                                            my $CAPTURE;
                                                            $CAPTURE =
                                                              ::DISPATCH(
                                                                $::Scalar,
                                                                'new',
                                                                {
                                                                    modified =>
                                                                      $_MODIFIED,
                                                                    name =>
                                                                      '$CAPTURE'
                                                                }
                                                              )
                                                              unless defined
                                                                  $CAPTURE;
                                                            INIT {
                                                                $CAPTURE =
                                                                  ::DISPATCH(
                                                                    $::Scalar,
                                                                    'new',
                                                                    {
                                                                        modified =>
                                                                          $_MODIFIED,
                                                                        name =>
'$CAPTURE'
                                                                    }
                                                                  );
                                                            }
                                                            my $List__ =
                                                              ::DISPATCH(
                                                                $::ArrayContainer,
                                                                'new',
                                                                {
                                                                    modified =>
                                                                      $_MODIFIED,
                                                                    name =>
                                                                      '$List__'
                                                                }
                                                              );
                                                            ::DISPATCH_VAR(
                                                                $CAPTURE,
                                                                "STORE",
                                                                ::CAPTURIZE(
                                                                    \@_
                                                                )
                                                            );
                                                            ::DISPATCH_VAR(
                                                                $List__,
                                                                'STORE',
                                                                ::DISPATCH(
                                                                    $CAPTURE,
                                                                    'array',
                                                                )
                                                            );
                                                            do {
                                                                ::MODIFIED(
                                                                    $Hash__);
                                                                $Hash__ =
                                                                  ::DISPATCH(
                                                                    $CAPTURE,
                                                                    'hash',
                                                                  );
                                                            };
                                                            {
                                                                my $_param_index
                                                                  = 0;
                                                            }
                                                            ::DISPATCH( $::Int,
                                                                'new', 1 );
                                                        },
                                                        signature => ::DISPATCH(
                                                            $::Signature,
                                                            "new",
                                                            {
                                                                invocant =>
                                                                  $::Undef,
                                                                array =>
                                                                  ::DISPATCH(
                                                                    $::List,
                                                                    "new",
                                                                    {
                                                                        _array =>
                                                                          []
                                                                    }
                                                                  ),
                                                                return =>
                                                                  $::Undef,
                                                            }
                                                        ),
                                                    }
                                                )
                                            );
                                        },
                                        signature => ::DISPATCH(
                                            $::Signature,
                                            "new",
                                            {
                                                invocant => $::Undef,
                                                array    => ::DISPATCH(
                                                    $::List, "new",
                                                    { _array => [] }
                                                ),
                                                return => $::Undef,
                                            }
                                        ),
                                    }
                                )
                              );
                        };
                        do {
                            if (
                                ::DISPATCH(
                                    ::DISPATCH(
                                        ::DISPATCH(
                                            $seen, 'LOOKUP',
                                            ::DISPATCH(
                                                $::Str, 'new', 'after'
                                            )
                                        ),
                                        "true"
                                    ),
                                    "p5landish"
                                )
                              )
                            {
                                do {
                                    ::DISPATCH(
                                        ::DISPATCH(
                                            $seen, 'LOOKUP',
                                            ::DISPATCH(
                                                $::Str, 'new', 'after'
                                            )
                                        ),
                                        'capture_to_array',
                                        ::DISPATCH( $::Int, 'new', 1 )
                                    );
                                  }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        ::DISPATCH_VAR(
                            ::DISPATCH(
                                $seen, 'LOOKUP',
                                ::DISPATCH( $::Str, 'new', 'after' )
                            ),
                            "BIND", $self
                        );
                        ::DISPATCH(
                            ::DISPATCH( $self, "rule" ),
                            'capture_count',
                            ::DISPATCH( $::Int,  'new', 0 ),
                            ::DISPATCH( $::Int,  'new', 0 ),
                            ::DISPATCH( $::Hash, 'new', )
                        );
                        $count;
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => $::Undef,
                            array    => ::DISPATCH(
                                $::List, "new",
                                {
                                    _array => [
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'count',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'quantified',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'seen',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                    ]
                                }
                            ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
    };
    1
}
{

    package Rule::NegateCharClass;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    # AUTHORS, COPYRIGHT: Please look at the source file.
    use v5;
    use strict;
    no strict "vars";
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    INIT { $_MODIFIED = {} }
    INIT {
        $_ =
          ::DISPATCH( $::Scalar, "new",
            { modified => $_MODIFIED, name => "$_" } );
    }
    do {
        do {
            if (
                ::DISPATCH(
                    ::DISPATCH(
                        ::DISPATCH(
                            (
                                $GLOBAL::Code_VAR_defined =
                                  $GLOBAL::Code_VAR_defined
                                  || ::DISPATCH( $::Routine, "new", )
                            ),
                            'APPLY',
                            $::Rule::NegateCharClass
                        ),
                        "true"
                    ),
                    "p5landish"
                )
              )
            {
            }
            else {
                do {
                    do {
                        ::MODIFIED($::Rule::NegateCharClass);
                        $::Rule::NegateCharClass = ::DISPATCH(
                            ::DISPATCH(
                                $::Class, 'new',
                                ::DISPATCH(
                                    $::Str, 'new', 'Rule::NegateCharClass'
                                )
                            ),
                            'PROTOTYPE',
                        );
                      }
                  }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::NegateCharClass, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'capture_count' ),
            ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {

                        # emit_declarations
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $count;
                        $count =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$count' } )
                          unless defined $count;
                        INIT {
                            $count =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$count' } );
                        }
                        my $quantified;
                        $quantified =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$quantified' } )
                          unless defined $quantified;
                        INIT {
                            $quantified = ::DISPATCH(
                                $::Scalar,
                                'new',
                                {
                                    modified => $_MODIFIED,
                                    name     => '$quantified'
                                }
                            );
                        }
                        my $seen;
                        $seen =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$seen' } )
                          unless defined $seen;
                        INIT {
                            $seen =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$seen' } );
                        }

                        # get $self
                        $self = shift;

                        # emit_arguments
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;
                        INIT {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        ::DISPATCH_VAR( $List__, 'STORE',
                            ::DISPATCH( $CAPTURE, 'array', ) );
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        {
                            my $_param_index = 0;
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'count' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($count);
                                    $count =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'count' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $count = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'quantified'
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($quantified);
                                    $quantified = ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'quantified'
                                        )
                                    );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $quantified = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'seen' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($seen);
                                    $seen =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'seen' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $seen = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                        }

                        # emit_body
                        $count;
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => $::Undef,
                            array    => ::DISPATCH(
                                $::List, "new",
                                {
                                    _array => [
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'count',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'quantified',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'seen',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                    ]
                                }
                            ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
    };
    1
}
{

    package Rule::CharClass;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    # AUTHORS, COPYRIGHT: Please look at the source file.
    use v5;
    use strict;
    no strict "vars";
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    INIT { $_MODIFIED = {} }
    INIT {
        $_ =
          ::DISPATCH( $::Scalar, "new",
            { modified => $_MODIFIED, name => "$_" } );
    }
    do {
        do {
            if (
                ::DISPATCH(
                    ::DISPATCH(
                        ::DISPATCH(
                            (
                                $GLOBAL::Code_VAR_defined =
                                  $GLOBAL::Code_VAR_defined
                                  || ::DISPATCH( $::Routine, "new", )
                            ),
                            'APPLY',
                            $::Rule::CharClass
                        ),
                        "true"
                    ),
                    "p5landish"
                )
              )
            {
            }
            else {
                do {
                    do {
                        ::MODIFIED($::Rule::CharClass);
                        $::Rule::CharClass = ::DISPATCH(
                            ::DISPATCH(
                                $::Class,
                                'new',
                                ::DISPATCH( $::Str, 'new', 'Rule::CharClass' )
                            ),
                            'PROTOTYPE',
                        );
                      }
                  }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::CharClass, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'capture_count' ),
            ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {

                        # emit_declarations
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $count;
                        $count =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$count' } )
                          unless defined $count;
                        INIT {
                            $count =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$count' } );
                        }
                        my $quantified;
                        $quantified =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$quantified' } )
                          unless defined $quantified;
                        INIT {
                            $quantified = ::DISPATCH(
                                $::Scalar,
                                'new',
                                {
                                    modified => $_MODIFIED,
                                    name     => '$quantified'
                                }
                            );
                        }
                        my $seen;
                        $seen =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$seen' } )
                          unless defined $seen;
                        INIT {
                            $seen =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$seen' } );
                        }

                        # get $self
                        $self = shift;

                        # emit_arguments
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;
                        INIT {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        ::DISPATCH_VAR( $List__, 'STORE',
                            ::DISPATCH( $CAPTURE, 'array', ) );
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        {
                            my $_param_index = 0;
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'count' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($count);
                                    $count =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'count' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $count = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'quantified'
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($quantified);
                                    $quantified = ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'quantified'
                                        )
                                    );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $quantified = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'seen' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($seen);
                                    $seen =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'seen' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $seen = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                        }

                        # emit_body
                        $count;
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => $::Undef,
                            array    => ::DISPATCH(
                                $::List, "new",
                                {
                                    _array => [
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'count',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'quantified',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'seen',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                    ]
                                }
                            ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
    };
    1
}
{

    package Rule::Subrule;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    # AUTHORS, COPYRIGHT: Please look at the source file.
    use v5;
    use strict;
    no strict "vars";
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    INIT { $_MODIFIED = {} }
    INIT {
        $_ =
          ::DISPATCH( $::Scalar, "new",
            { modified => $_MODIFIED, name => "$_" } );
    }
    do {
        do {
            if (
                ::DISPATCH(
                    ::DISPATCH(
                        ::DISPATCH(
                            (
                                $GLOBAL::Code_VAR_defined =
                                  $GLOBAL::Code_VAR_defined
                                  || ::DISPATCH( $::Routine, "new", )
                            ),
                            'APPLY',
                            $::Rule::Subrule
                        ),
                        "true"
                    ),
                    "p5landish"
                )
              )
            {
            }
            else {
                do {
                    do {
                        ::MODIFIED($::Rule::Subrule);
                        $::Rule::Subrule = ::DISPATCH(
                            ::DISPATCH(
                                $::Class, 'new',
                                ::DISPATCH( $::Str, 'new', 'Rule::Subrule' )
                            ),
                            'PROTOTYPE',
                        );
                      }
                  }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::Subrule, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'capture_count' ),
            ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {

                        # emit_declarations
                        my $meth;
                        $meth =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$meth' } )
                          unless defined $meth;
                        INIT {
                            $meth =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$meth' } );
                        }
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $count;
                        $count =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$count' } )
                          unless defined $count;
                        INIT {
                            $count =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$count' } );
                        }
                        my $quantified;
                        $quantified =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$quantified' } )
                          unless defined $quantified;
                        INIT {
                            $quantified = ::DISPATCH(
                                $::Scalar,
                                'new',
                                {
                                    modified => $_MODIFIED,
                                    name     => '$quantified'
                                }
                            );
                        }
                        my $seen;
                        $seen =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$seen' } )
                          unless defined $seen;
                        INIT {
                            $seen =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$seen' } );
                        }

                        # get $self
                        $self = shift;

                        # emit_arguments
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;
                        INIT {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        ::DISPATCH_VAR( $List__, 'STORE',
                            ::DISPATCH( $CAPTURE, 'array', ) );
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        {
                            my $_param_index = 0;
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'count' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($count);
                                    $count =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'count' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $count = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'quantified'
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($quantified);
                                    $quantified = ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'quantified'
                                        )
                                    );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $quantified = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'seen' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($seen);
                                    $seen =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'seen' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $seen = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                        }

                        # emit_body
                        do {
                            ::MODIFIED($meth);
                            $meth = ::DISPATCH(
                                (
                                    $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_
                                      = $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_
                                      || ::DISPATCH( $::Routine, "new", )
                                ),
                                'APPLY',
                                ::DISPATCH(
                                    (
                                        $GLOBAL::Code_infix_58__60__43__62_ =
                                          $GLOBAL::Code_infix_58__60__43__62_
                                          || ::DISPATCH( $::Routine, "new", )
                                    ),
                                    'APPLY',
                                    ::DISPATCH( $::Int, 'new', 1 ),
                                    ::DISPATCH(
                                        (
                                            $GLOBAL::Code_index =
                                              $GLOBAL::Code_index
                                              || ::DISPATCH( $::Routine, "new",
                                              )
                                        ),
                                        'APPLY',
                                        ::DISPATCH( $self, "metasyntax" ),
                                        ::DISPATCH( $::Str, 'new', '.' )
                                    )
                                ),
                                ::DISPATCH(
                                    (
                                        $GLOBAL::Code_infix_58__60__126__62_ =
                                          $GLOBAL::Code_infix_58__60__126__62_
                                          || ::DISPATCH( $::Routine, "new", )
                                    ),
                                    'APPLY',
                                    ::DISPATCH( $self, "metasyntax" ),
                                    ::DISPATCH( $::Str, 'new', ' ... TODO ' )
                                ),
                                ::DISPATCH(
                                    (
                                        $GLOBAL::Code_infix_58__60__126__62_ =
                                          $GLOBAL::Code_infix_58__60__126__62_
                                          || ::DISPATCH( $::Routine, "new", )
                                    ),
                                    'APPLY',
                                    ::DISPATCH(
                                        $::Str,
                                        'new',
'\\\'$\\\'.$GLOBAL::_Class.\\\'::_regex_'
                                    ),
                                    ::DISPATCH(
                                        (
                                            $GLOBAL::Code_infix_58__60__126__62_
                                              = $GLOBAL::Code_infix_58__60__126__62_
                                              || ::DISPATCH( $::Routine, "new",
                                              )
                                        ),
                                        'APPLY',
                                        ::DISPATCH( $self, "metasyntax" ),
                                        ::DISPATCH( $::Str, 'new', '\\\'' )
                                    )
                                )
                            );
                        };
                        do {
                            ::MODIFIED( ::DISPATCH( $self, "ident" ) );
                            ::DISPATCH( $self,   "ident" ) =
                              ::DISPATCH( $self, "metasyntax" );
                        };
                        do {
                            ::MODIFIED(
                                ::DISPATCH( $self, "capture_to_array" ) );
                            ::DISPATCH( $self, "capture_to_array" ) =
                              ::DISPATCH(
                                (
                                    $GLOBAL::Code_infix_58__60__124__124__62_ =
                                      $GLOBAL::Code_infix_58__60__124__124__62_
                                      || ::DISPATCH( $::Routine, "new", )
                                ),
                                'APPLY',
                                ::DISPATCH(
                                    $::Code, 'new',
                                    {
                                        code => sub {
                                            my $CAPTURE;
                                            $CAPTURE = ::DISPATCH(
                                                $::Scalar,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$CAPTURE'
                                                }
                                            ) unless defined $CAPTURE;
                                            INIT {
                                                $CAPTURE = ::DISPATCH(
                                                    $::Scalar,
                                                    'new',
                                                    {
                                                        modified => $_MODIFIED,
                                                        name     => '$CAPTURE'
                                                    }
                                                );
                                            }
                                            my $List__ = ::DISPATCH(
                                                $::ArrayContainer,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$List__'
                                                }
                                            );
                                            ::DISPATCH_VAR( $CAPTURE, "STORE",
                                                ::CAPTURIZE( \@_ ) );
                                            ::DISPATCH_VAR(
                                                $List__, 'STORE',
                                                ::DISPATCH(
                                                    $CAPTURE, 'array',
                                                )
                                            );
                                            do {
                                                ::MODIFIED($Hash__);
                                                $Hash__ =
                                                  ::DISPATCH( $CAPTURE, 'hash',
                                                  );
                                            };
                                            { my $_param_index = 0; }
                                            $quantified;
                                        },
                                        signature => ::DISPATCH(
                                            $::Signature,
                                            "new",
                                            {
                                                invocant => $::Undef,
                                                array    => ::DISPATCH(
                                                    $::List, "new",
                                                    { _array => [] }
                                                ),
                                                return => $::Undef,
                                            }
                                        ),
                                    }
                                ),
                                ::DISPATCH(
                                    $::Code,
                                    'new',
                                    {
                                        code => sub {
                                            my $CAPTURE;
                                            $CAPTURE = ::DISPATCH(
                                                $::Scalar,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$CAPTURE'
                                                }
                                            ) unless defined $CAPTURE;
                                            INIT {
                                                $CAPTURE = ::DISPATCH(
                                                    $::Scalar,
                                                    'new',
                                                    {
                                                        modified => $_MODIFIED,
                                                        name     => '$CAPTURE'
                                                    }
                                                );
                                            }
                                            my $List__ = ::DISPATCH(
                                                $::ArrayContainer,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$List__'
                                                }
                                            );
                                            ::DISPATCH_VAR( $CAPTURE, "STORE",
                                                ::CAPTURIZE( \@_ ) );
                                            ::DISPATCH_VAR(
                                                $List__, 'STORE',
                                                ::DISPATCH(
                                                    $CAPTURE, 'array',
                                                )
                                            );
                                            do {
                                                ::MODIFIED($Hash__);
                                                $Hash__ =
                                                  ::DISPATCH( $CAPTURE, 'hash',
                                                  );
                                            };
                                            { my $_param_index = 0; }
                                            ::DISPATCH(
                                                (
                                                    $GLOBAL::Code_infix_58__60__38__38__62_
                                                      = $GLOBAL::Code_infix_58__60__38__38__62_
                                                      || ::DISPATCH(
                                                        $::Routine, "new",
                                                      )
                                                ),
                                                'APPLY',
                                                ::DISPATCH(
                                                    $::Code, 'new',
                                                    {
                                                        code => sub {
                                                            my $CAPTURE;
                                                            $CAPTURE =
                                                              ::DISPATCH(
                                                                $::Scalar,
                                                                'new',
                                                                {
                                                                    modified =>
                                                                      $_MODIFIED,
                                                                    name =>
                                                                      '$CAPTURE'
                                                                }
                                                              )
                                                              unless defined
                                                                  $CAPTURE;
                                                            INIT {
                                                                $CAPTURE =
                                                                  ::DISPATCH(
                                                                    $::Scalar,
                                                                    'new',
                                                                    {
                                                                        modified =>
                                                                          $_MODIFIED,
                                                                        name =>
'$CAPTURE'
                                                                    }
                                                                  );
                                                            }
                                                            my $List__ =
                                                              ::DISPATCH(
                                                                $::ArrayContainer,
                                                                'new',
                                                                {
                                                                    modified =>
                                                                      $_MODIFIED,
                                                                    name =>
                                                                      '$List__'
                                                                }
                                                              );
                                                            ::DISPATCH_VAR(
                                                                $CAPTURE,
                                                                "STORE",
                                                                ::CAPTURIZE(
                                                                    \@_
                                                                )
                                                            );
                                                            ::DISPATCH_VAR(
                                                                $List__,
                                                                'STORE',
                                                                ::DISPATCH(
                                                                    $CAPTURE,
                                                                    'array',
                                                                )
                                                            );
                                                            do {
                                                                ::MODIFIED(
                                                                    $Hash__);
                                                                $Hash__ =
                                                                  ::DISPATCH(
                                                                    $CAPTURE,
                                                                    'hash',
                                                                  );
                                                            };
                                                            {
                                                                my $_param_index
                                                                  = 0;
                                                            }
                                                            ::DISPATCH(
                                                                $seen,
                                                                'LOOKUP',
                                                                ::DISPATCH(
                                                                    $self,
                                                                    "ident"
                                                                )
                                                            );
                                                        },
                                                        signature => ::DISPATCH(
                                                            $::Signature,
                                                            "new",
                                                            {
                                                                invocant =>
                                                                  $::Undef,
                                                                array =>
                                                                  ::DISPATCH(
                                                                    $::List,
                                                                    "new",
                                                                    {
                                                                        _array =>
                                                                          []
                                                                    }
                                                                  ),
                                                                return =>
                                                                  $::Undef,
                                                            }
                                                        ),
                                                    }
                                                ),
                                                ::DISPATCH(
                                                    $::Code,
                                                    'new',
                                                    {
                                                        code => sub {
                                                            my $CAPTURE;
                                                            $CAPTURE =
                                                              ::DISPATCH(
                                                                $::Scalar,
                                                                'new',
                                                                {
                                                                    modified =>
                                                                      $_MODIFIED,
                                                                    name =>
                                                                      '$CAPTURE'
                                                                }
                                                              )
                                                              unless defined
                                                                  $CAPTURE;
                                                            INIT {
                                                                $CAPTURE =
                                                                  ::DISPATCH(
                                                                    $::Scalar,
                                                                    'new',
                                                                    {
                                                                        modified =>
                                                                          $_MODIFIED,
                                                                        name =>
'$CAPTURE'
                                                                    }
                                                                  );
                                                            }
                                                            my $List__ =
                                                              ::DISPATCH(
                                                                $::ArrayContainer,
                                                                'new',
                                                                {
                                                                    modified =>
                                                                      $_MODIFIED,
                                                                    name =>
                                                                      '$List__'
                                                                }
                                                              );
                                                            ::DISPATCH_VAR(
                                                                $CAPTURE,
                                                                "STORE",
                                                                ::CAPTURIZE(
                                                                    \@_
                                                                )
                                                            );
                                                            ::DISPATCH_VAR(
                                                                $List__,
                                                                'STORE',
                                                                ::DISPATCH(
                                                                    $CAPTURE,
                                                                    'array',
                                                                )
                                                            );
                                                            do {
                                                                ::MODIFIED(
                                                                    $Hash__);
                                                                $Hash__ =
                                                                  ::DISPATCH(
                                                                    $CAPTURE,
                                                                    'hash',
                                                                  );
                                                            };
                                                            {
                                                                my $_param_index
                                                                  = 0;
                                                            }
                                                            ::DISPATCH( $::Int,
                                                                'new', 1 );
                                                        },
                                                        signature => ::DISPATCH(
                                                            $::Signature,
                                                            "new",
                                                            {
                                                                invocant =>
                                                                  $::Undef,
                                                                array =>
                                                                  ::DISPATCH(
                                                                    $::List,
                                                                    "new",
                                                                    {
                                                                        _array =>
                                                                          []
                                                                    }
                                                                  ),
                                                                return =>
                                                                  $::Undef,
                                                            }
                                                        ),
                                                    }
                                                )
                                            );
                                        },
                                        signature => ::DISPATCH(
                                            $::Signature,
                                            "new",
                                            {
                                                invocant => $::Undef,
                                                array    => ::DISPATCH(
                                                    $::List, "new",
                                                    { _array => [] }
                                                ),
                                                return => $::Undef,
                                            }
                                        ),
                                    }
                                )
                              );
                        };
                        do {
                            if (
                                ::DISPATCH(
                                    ::DISPATCH(
                                        ::DISPATCH(
                                            $seen, 'LOOKUP',
                                            ::DISPATCH( $self, "ident" )
                                        ),
                                        "true"
                                    ),
                                    "p5landish"
                                )
                              )
                            {
                                do {
                                    ::DISPATCH(
                                        ::DISPATCH(
                                            $seen, 'LOOKUP',
                                            ::DISPATCH( $self, "ident" )
                                        ),
                                        'capture_to_array',
                                        ::DISPATCH( $::Int, 'new', 1 )
                                    );
                                  }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        ::DISPATCH_VAR(
                            ::DISPATCH(
                                $seen, 'LOOKUP',
                                ::DISPATCH( $self, "ident" )
                            ),
                            "BIND", $self
                        );
                        $count;
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => $::Undef,
                            array    => ::DISPATCH(
                                $::List, "new",
                                {
                                    _array => [
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'count',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'quantified',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'seen',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                    ]
                                }
                            ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
    };
    1
}
{

    package Rule::NamedCapture;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    # AUTHORS, COPYRIGHT: Please look at the source file.
    use v5;
    use strict;
    no strict "vars";
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    INIT { $_MODIFIED = {} }
    INIT {
        $_ =
          ::DISPATCH( $::Scalar, "new",
            { modified => $_MODIFIED, name => "$_" } );
    }
    do {
        do {
            if (
                ::DISPATCH(
                    ::DISPATCH(
                        ::DISPATCH(
                            (
                                $GLOBAL::Code_VAR_defined =
                                  $GLOBAL::Code_VAR_defined
                                  || ::DISPATCH( $::Routine, "new", )
                            ),
                            'APPLY',
                            $::Rule::NamedCapture
                        ),
                        "true"
                    ),
                    "p5landish"
                )
              )
            {
            }
            else {
                do {
                    do {
                        ::MODIFIED($::Rule::NamedCapture);
                        $::Rule::NamedCapture = ::DISPATCH(
                            ::DISPATCH(
                                $::Class, 'new',
                                ::DISPATCH(
                                    $::Str, 'new', 'Rule::NamedCapture'
                                )
                            ),
                            'PROTOTYPE',
                        );
                      }
                  }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::NamedCapture, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'capture_count' ),
            ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {

                        # emit_declarations
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $count;
                        $count =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$count' } )
                          unless defined $count;
                        INIT {
                            $count =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$count' } );
                        }
                        my $quantified;
                        $quantified =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$quantified' } )
                          unless defined $quantified;
                        INIT {
                            $quantified = ::DISPATCH(
                                $::Scalar,
                                'new',
                                {
                                    modified => $_MODIFIED,
                                    name     => '$quantified'
                                }
                            );
                        }
                        my $seen;
                        $seen =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$seen' } )
                          unless defined $seen;
                        INIT {
                            $seen =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$seen' } );
                        }

                        # get $self
                        $self = shift;

                        # emit_arguments
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;
                        INIT {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        ::DISPATCH_VAR( $List__, 'STORE',
                            ::DISPATCH( $CAPTURE, 'array', ) );
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        {
                            my $_param_index = 0;
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'count' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($count);
                                    $count =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'count' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $count = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'quantified'
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($quantified);
                                    $quantified = ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'quantified'
                                        )
                                    );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $quantified = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'seen' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($seen);
                                    $seen =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'seen' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $seen = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                        }

                        # emit_body
                        do {
                            ::MODIFIED(
                                ::DISPATCH( $self, "capture_to_array" ) );
                            ::DISPATCH( $self, "capture_to_array" ) =
                              ::DISPATCH(
                                (
                                    $GLOBAL::Code_infix_58__60__124__124__62_ =
                                      $GLOBAL::Code_infix_58__60__124__124__62_
                                      || ::DISPATCH( $::Routine, "new", )
                                ),
                                'APPLY',
                                ::DISPATCH(
                                    $::Code, 'new',
                                    {
                                        code => sub {
                                            my $CAPTURE;
                                            $CAPTURE = ::DISPATCH(
                                                $::Scalar,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$CAPTURE'
                                                }
                                            ) unless defined $CAPTURE;
                                            INIT {
                                                $CAPTURE = ::DISPATCH(
                                                    $::Scalar,
                                                    'new',
                                                    {
                                                        modified => $_MODIFIED,
                                                        name     => '$CAPTURE'
                                                    }
                                                );
                                            }
                                            my $List__ = ::DISPATCH(
                                                $::ArrayContainer,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$List__'
                                                }
                                            );
                                            ::DISPATCH_VAR( $CAPTURE, "STORE",
                                                ::CAPTURIZE( \@_ ) );
                                            ::DISPATCH_VAR(
                                                $List__, 'STORE',
                                                ::DISPATCH(
                                                    $CAPTURE, 'array',
                                                )
                                            );
                                            do {
                                                ::MODIFIED($Hash__);
                                                $Hash__ =
                                                  ::DISPATCH( $CAPTURE, 'hash',
                                                  );
                                            };
                                            { my $_param_index = 0; }
                                            $quantified;
                                        },
                                        signature => ::DISPATCH(
                                            $::Signature,
                                            "new",
                                            {
                                                invocant => $::Undef,
                                                array    => ::DISPATCH(
                                                    $::List, "new",
                                                    { _array => [] }
                                                ),
                                                return => $::Undef,
                                            }
                                        ),
                                    }
                                ),
                                ::DISPATCH(
                                    $::Code,
                                    'new',
                                    {
                                        code => sub {
                                            my $CAPTURE;
                                            $CAPTURE = ::DISPATCH(
                                                $::Scalar,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$CAPTURE'
                                                }
                                            ) unless defined $CAPTURE;
                                            INIT {
                                                $CAPTURE = ::DISPATCH(
                                                    $::Scalar,
                                                    'new',
                                                    {
                                                        modified => $_MODIFIED,
                                                        name     => '$CAPTURE'
                                                    }
                                                );
                                            }
                                            my $List__ = ::DISPATCH(
                                                $::ArrayContainer,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$List__'
                                                }
                                            );
                                            ::DISPATCH_VAR( $CAPTURE, "STORE",
                                                ::CAPTURIZE( \@_ ) );
                                            ::DISPATCH_VAR(
                                                $List__, 'STORE',
                                                ::DISPATCH(
                                                    $CAPTURE, 'array',
                                                )
                                            );
                                            do {
                                                ::MODIFIED($Hash__);
                                                $Hash__ =
                                                  ::DISPATCH( $CAPTURE, 'hash',
                                                  );
                                            };
                                            { my $_param_index = 0; }
                                            ::DISPATCH(
                                                (
                                                    $GLOBAL::Code_infix_58__60__38__38__62_
                                                      = $GLOBAL::Code_infix_58__60__38__38__62_
                                                      || ::DISPATCH(
                                                        $::Routine, "new",
                                                      )
                                                ),
                                                'APPLY',
                                                ::DISPATCH(
                                                    $::Code, 'new',
                                                    {
                                                        code => sub {
                                                            my $CAPTURE;
                                                            $CAPTURE =
                                                              ::DISPATCH(
                                                                $::Scalar,
                                                                'new',
                                                                {
                                                                    modified =>
                                                                      $_MODIFIED,
                                                                    name =>
                                                                      '$CAPTURE'
                                                                }
                                                              )
                                                              unless defined
                                                                  $CAPTURE;
                                                            INIT {
                                                                $CAPTURE =
                                                                  ::DISPATCH(
                                                                    $::Scalar,
                                                                    'new',
                                                                    {
                                                                        modified =>
                                                                          $_MODIFIED,
                                                                        name =>
'$CAPTURE'
                                                                    }
                                                                  );
                                                            }
                                                            my $List__ =
                                                              ::DISPATCH(
                                                                $::ArrayContainer,
                                                                'new',
                                                                {
                                                                    modified =>
                                                                      $_MODIFIED,
                                                                    name =>
                                                                      '$List__'
                                                                }
                                                              );
                                                            ::DISPATCH_VAR(
                                                                $CAPTURE,
                                                                "STORE",
                                                                ::CAPTURIZE(
                                                                    \@_
                                                                )
                                                            );
                                                            ::DISPATCH_VAR(
                                                                $List__,
                                                                'STORE',
                                                                ::DISPATCH(
                                                                    $CAPTURE,
                                                                    'array',
                                                                )
                                                            );
                                                            do {
                                                                ::MODIFIED(
                                                                    $Hash__);
                                                                $Hash__ =
                                                                  ::DISPATCH(
                                                                    $CAPTURE,
                                                                    'hash',
                                                                  );
                                                            };
                                                            {
                                                                my $_param_index
                                                                  = 0;
                                                            }
                                                            ::DISPATCH(
                                                                $seen,
                                                                'LOOKUP',
                                                                ::DISPATCH(
                                                                    $self,
                                                                    "ident"
                                                                )
                                                            );
                                                        },
                                                        signature => ::DISPATCH(
                                                            $::Signature,
                                                            "new",
                                                            {
                                                                invocant =>
                                                                  $::Undef,
                                                                array =>
                                                                  ::DISPATCH(
                                                                    $::List,
                                                                    "new",
                                                                    {
                                                                        _array =>
                                                                          []
                                                                    }
                                                                  ),
                                                                return =>
                                                                  $::Undef,
                                                            }
                                                        ),
                                                    }
                                                ),
                                                ::DISPATCH(
                                                    $::Code,
                                                    'new',
                                                    {
                                                        code => sub {
                                                            my $CAPTURE;
                                                            $CAPTURE =
                                                              ::DISPATCH(
                                                                $::Scalar,
                                                                'new',
                                                                {
                                                                    modified =>
                                                                      $_MODIFIED,
                                                                    name =>
                                                                      '$CAPTURE'
                                                                }
                                                              )
                                                              unless defined
                                                                  $CAPTURE;
                                                            INIT {
                                                                $CAPTURE =
                                                                  ::DISPATCH(
                                                                    $::Scalar,
                                                                    'new',
                                                                    {
                                                                        modified =>
                                                                          $_MODIFIED,
                                                                        name =>
'$CAPTURE'
                                                                    }
                                                                  );
                                                            }
                                                            my $List__ =
                                                              ::DISPATCH(
                                                                $::ArrayContainer,
                                                                'new',
                                                                {
                                                                    modified =>
                                                                      $_MODIFIED,
                                                                    name =>
                                                                      '$List__'
                                                                }
                                                              );
                                                            ::DISPATCH_VAR(
                                                                $CAPTURE,
                                                                "STORE",
                                                                ::CAPTURIZE(
                                                                    \@_
                                                                )
                                                            );
                                                            ::DISPATCH_VAR(
                                                                $List__,
                                                                'STORE',
                                                                ::DISPATCH(
                                                                    $CAPTURE,
                                                                    'array',
                                                                )
                                                            );
                                                            do {
                                                                ::MODIFIED(
                                                                    $Hash__);
                                                                $Hash__ =
                                                                  ::DISPATCH(
                                                                    $CAPTURE,
                                                                    'hash',
                                                                  );
                                                            };
                                                            {
                                                                my $_param_index
                                                                  = 0;
                                                            }
                                                            ::DISPATCH( $::Int,
                                                                'new', 1 );
                                                        },
                                                        signature => ::DISPATCH(
                                                            $::Signature,
                                                            "new",
                                                            {
                                                                invocant =>
                                                                  $::Undef,
                                                                array =>
                                                                  ::DISPATCH(
                                                                    $::List,
                                                                    "new",
                                                                    {
                                                                        _array =>
                                                                          []
                                                                    }
                                                                  ),
                                                                return =>
                                                                  $::Undef,
                                                            }
                                                        ),
                                                    }
                                                )
                                            );
                                        },
                                        signature => ::DISPATCH(
                                            $::Signature,
                                            "new",
                                            {
                                                invocant => $::Undef,
                                                array    => ::DISPATCH(
                                                    $::List, "new",
                                                    { _array => [] }
                                                ),
                                                return => $::Undef,
                                            }
                                        ),
                                    }
                                )
                              );
                        };
                        ::DISPATCH(
                            ::DISPATCH( $self, "rule" ),
                            'capture_count',
                            ::DISPATCH( $::Int,  'new', 0 ),
                            ::DISPATCH( $::Int,  'new', 0 ),
                            ::DISPATCH( $::Hash, 'new', )
                        );
                        do {
                            if (
                                ::DISPATCH(
                                    ::DISPATCH(
                                        ::DISPATCH(
                                            $seen, 'LOOKUP',
                                            ::DISPATCH( $self, "ident" )
                                        ),
                                        "true"
                                    ),
                                    "p5landish"
                                )
                              )
                            {
                                do {
                                    ::DISPATCH(
                                        ::DISPATCH(
                                            $seen, 'LOOKUP',
                                            ::DISPATCH( $self, "ident" )
                                        ),
                                        'capture_to_array',
                                        ::DISPATCH( $::Int, 'new', 1 )
                                    );
                                  }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        ::DISPATCH_VAR(
                            ::DISPATCH(
                                $seen, 'LOOKUP',
                                ::DISPATCH( $self, "ident" )
                            ),
                            "BIND", $self
                        );
                        $count;
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => $::Undef,
                            array    => ::DISPATCH(
                                $::List, "new",
                                {
                                    _array => [
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'count',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'quantified',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'seen',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                    ]
                                }
                            ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
    };
    1
}
{

    package Rule::Capture;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    # AUTHORS, COPYRIGHT: Please look at the source file.
    use v5;
    use strict;
    no strict "vars";
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    INIT { $_MODIFIED = {} }
    INIT {
        $_ =
          ::DISPATCH( $::Scalar, "new",
            { modified => $_MODIFIED, name => "$_" } );
    }
    do {
        do {
            if (
                ::DISPATCH(
                    ::DISPATCH(
                        ::DISPATCH(
                            (
                                $GLOBAL::Code_VAR_defined =
                                  $GLOBAL::Code_VAR_defined
                                  || ::DISPATCH( $::Routine, "new", )
                            ),
                            'APPLY',
                            $::Rule::Capture
                        ),
                        "true"
                    ),
                    "p5landish"
                )
              )
            {
            }
            else {
                do {
                    do {
                        ::MODIFIED($::Rule::Capture);
                        $::Rule::Capture = ::DISPATCH(
                            ::DISPATCH(
                                $::Class, 'new',
                                ::DISPATCH( $::Str, 'new', 'Rule::Capture' )
                            ),
                            'PROTOTYPE',
                        );
                      }
                  }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Rule::Capture, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'capture_count' ),
            ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {

                        # emit_declarations
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $count;
                        $count =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$count' } )
                          unless defined $count;
                        INIT {
                            $count =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$count' } );
                        }
                        my $quantified;
                        $quantified =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$quantified' } )
                          unless defined $quantified;
                        INIT {
                            $quantified = ::DISPATCH(
                                $::Scalar,
                                'new',
                                {
                                    modified => $_MODIFIED,
                                    name     => '$quantified'
                                }
                            );
                        }
                        my $seen;
                        $seen =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$seen' } )
                          unless defined $seen;
                        INIT {
                            $seen =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$seen' } );
                        }

                        # get $self
                        $self = shift;

                        # emit_arguments
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;
                        INIT {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        ::DISPATCH_VAR( $List__, 'STORE',
                            ::DISPATCH( $CAPTURE, 'array', ) );
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        {
                            my $_param_index = 0;
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'count' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($count);
                                    $count =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'count' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $count = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'quantified'
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($quantified);
                                    $quantified = ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH(
                                            $::Str, 'new', 'quantified'
                                        )
                                    );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $quantified = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'seen' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($seen);
                                    $seen =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'seen' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $seen = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                        }

                        # emit_body
                        do {
                            ::MODIFIED( ::DISPATCH( $self, "position" ) );
                            ::DISPATCH( $self, "position" ) = $count;
                        };
                        do {
                            ::MODIFIED(
                                ::DISPATCH( $self, "capture_to_array" ) );
                            ::DISPATCH( $self, "capture_to_array" ) =
                              ::DISPATCH(
                                (
                                    $GLOBAL::Code_infix_58__60__124__124__62_ =
                                      $GLOBAL::Code_infix_58__60__124__124__62_
                                      || ::DISPATCH( $::Routine, "new", )
                                ),
                                'APPLY',
                                ::DISPATCH(
                                    $::Code, 'new',
                                    {
                                        code => sub {
                                            my $CAPTURE;
                                            $CAPTURE = ::DISPATCH(
                                                $::Scalar,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$CAPTURE'
                                                }
                                            ) unless defined $CAPTURE;
                                            INIT {
                                                $CAPTURE = ::DISPATCH(
                                                    $::Scalar,
                                                    'new',
                                                    {
                                                        modified => $_MODIFIED,
                                                        name     => '$CAPTURE'
                                                    }
                                                );
                                            }
                                            my $List__ = ::DISPATCH(
                                                $::ArrayContainer,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$List__'
                                                }
                                            );
                                            ::DISPATCH_VAR( $CAPTURE, "STORE",
                                                ::CAPTURIZE( \@_ ) );
                                            ::DISPATCH_VAR(
                                                $List__, 'STORE',
                                                ::DISPATCH(
                                                    $CAPTURE, 'array',
                                                )
                                            );
                                            do {
                                                ::MODIFIED($Hash__);
                                                $Hash__ =
                                                  ::DISPATCH( $CAPTURE, 'hash',
                                                  );
                                            };
                                            { my $_param_index = 0; }
                                            $quantified;
                                        },
                                        signature => ::DISPATCH(
                                            $::Signature,
                                            "new",
                                            {
                                                invocant => $::Undef,
                                                array    => ::DISPATCH(
                                                    $::List, "new",
                                                    { _array => [] }
                                                ),
                                                return => $::Undef,
                                            }
                                        ),
                                    }
                                ),
                                ::DISPATCH(
                                    $::Code,
                                    'new',
                                    {
                                        code => sub {
                                            my $CAPTURE;
                                            $CAPTURE = ::DISPATCH(
                                                $::Scalar,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$CAPTURE'
                                                }
                                            ) unless defined $CAPTURE;
                                            INIT {
                                                $CAPTURE = ::DISPATCH(
                                                    $::Scalar,
                                                    'new',
                                                    {
                                                        modified => $_MODIFIED,
                                                        name     => '$CAPTURE'
                                                    }
                                                );
                                            }
                                            my $List__ = ::DISPATCH(
                                                $::ArrayContainer,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$List__'
                                                }
                                            );
                                            ::DISPATCH_VAR( $CAPTURE, "STORE",
                                                ::CAPTURIZE( \@_ ) );
                                            ::DISPATCH_VAR(
                                                $List__, 'STORE',
                                                ::DISPATCH(
                                                    $CAPTURE, 'array',
                                                )
                                            );
                                            do {
                                                ::MODIFIED($Hash__);
                                                $Hash__ =
                                                  ::DISPATCH( $CAPTURE, 'hash',
                                                  );
                                            };
                                            { my $_param_index = 0; }
                                            ::DISPATCH(
                                                (
                                                    $GLOBAL::Code_infix_58__60__38__38__62_
                                                      = $GLOBAL::Code_infix_58__60__38__38__62_
                                                      || ::DISPATCH(
                                                        $::Routine, "new",
                                                      )
                                                ),
                                                'APPLY',
                                                ::DISPATCH(
                                                    $::Code, 'new',
                                                    {
                                                        code => sub {
                                                            my $CAPTURE;
                                                            $CAPTURE =
                                                              ::DISPATCH(
                                                                $::Scalar,
                                                                'new',
                                                                {
                                                                    modified =>
                                                                      $_MODIFIED,
                                                                    name =>
                                                                      '$CAPTURE'
                                                                }
                                                              )
                                                              unless defined
                                                                  $CAPTURE;
                                                            INIT {
                                                                $CAPTURE =
                                                                  ::DISPATCH(
                                                                    $::Scalar,
                                                                    'new',
                                                                    {
                                                                        modified =>
                                                                          $_MODIFIED,
                                                                        name =>
'$CAPTURE'
                                                                    }
                                                                  );
                                                            }
                                                            my $List__ =
                                                              ::DISPATCH(
                                                                $::ArrayContainer,
                                                                'new',
                                                                {
                                                                    modified =>
                                                                      $_MODIFIED,
                                                                    name =>
                                                                      '$List__'
                                                                }
                                                              );
                                                            ::DISPATCH_VAR(
                                                                $CAPTURE,
                                                                "STORE",
                                                                ::CAPTURIZE(
                                                                    \@_
                                                                )
                                                            );
                                                            ::DISPATCH_VAR(
                                                                $List__,
                                                                'STORE',
                                                                ::DISPATCH(
                                                                    $CAPTURE,
                                                                    'array',
                                                                )
                                                            );
                                                            do {
                                                                ::MODIFIED(
                                                                    $Hash__);
                                                                $Hash__ =
                                                                  ::DISPATCH(
                                                                    $CAPTURE,
                                                                    'hash',
                                                                  );
                                                            };
                                                            {
                                                                my $_param_index
                                                                  = 0;
                                                            }
                                                            ::DISPATCH(
                                                                $seen,
                                                                'LOOKUP',
                                                                ::DISPATCH(
                                                                    $self,
                                                                    "ident"
                                                                )
                                                            );
                                                        },
                                                        signature => ::DISPATCH(
                                                            $::Signature,
                                                            "new",
                                                            {
                                                                invocant =>
                                                                  $::Undef,
                                                                array =>
                                                                  ::DISPATCH(
                                                                    $::List,
                                                                    "new",
                                                                    {
                                                                        _array =>
                                                                          []
                                                                    }
                                                                  ),
                                                                return =>
                                                                  $::Undef,
                                                            }
                                                        ),
                                                    }
                                                ),
                                                ::DISPATCH(
                                                    $::Code,
                                                    'new',
                                                    {
                                                        code => sub {
                                                            my $CAPTURE;
                                                            $CAPTURE =
                                                              ::DISPATCH(
                                                                $::Scalar,
                                                                'new',
                                                                {
                                                                    modified =>
                                                                      $_MODIFIED,
                                                                    name =>
                                                                      '$CAPTURE'
                                                                }
                                                              )
                                                              unless defined
                                                                  $CAPTURE;
                                                            INIT {
                                                                $CAPTURE =
                                                                  ::DISPATCH(
                                                                    $::Scalar,
                                                                    'new',
                                                                    {
                                                                        modified =>
                                                                          $_MODIFIED,
                                                                        name =>
'$CAPTURE'
                                                                    }
                                                                  );
                                                            }
                                                            my $List__ =
                                                              ::DISPATCH(
                                                                $::ArrayContainer,
                                                                'new',
                                                                {
                                                                    modified =>
                                                                      $_MODIFIED,
                                                                    name =>
                                                                      '$List__'
                                                                }
                                                              );
                                                            ::DISPATCH_VAR(
                                                                $CAPTURE,
                                                                "STORE",
                                                                ::CAPTURIZE(
                                                                    \@_
                                                                )
                                                            );
                                                            ::DISPATCH_VAR(
                                                                $List__,
                                                                'STORE',
                                                                ::DISPATCH(
                                                                    $CAPTURE,
                                                                    'array',
                                                                )
                                                            );
                                                            do {
                                                                ::MODIFIED(
                                                                    $Hash__);
                                                                $Hash__ =
                                                                  ::DISPATCH(
                                                                    $CAPTURE,
                                                                    'hash',
                                                                  );
                                                            };
                                                            {
                                                                my $_param_index
                                                                  = 0;
                                                            }
                                                            ::DISPATCH( $::Int,
                                                                'new', 1 );
                                                        },
                                                        signature => ::DISPATCH(
                                                            $::Signature,
                                                            "new",
                                                            {
                                                                invocant =>
                                                                  $::Undef,
                                                                array =>
                                                                  ::DISPATCH(
                                                                    $::List,
                                                                    "new",
                                                                    {
                                                                        _array =>
                                                                          []
                                                                    }
                                                                  ),
                                                                return =>
                                                                  $::Undef,
                                                            }
                                                        ),
                                                    }
                                                )
                                            );
                                        },
                                        signature => ::DISPATCH(
                                            $::Signature,
                                            "new",
                                            {
                                                invocant => $::Undef,
                                                array    => ::DISPATCH(
                                                    $::List, "new",
                                                    { _array => [] }
                                                ),
                                                return => $::Undef,
                                            }
                                        ),
                                    }
                                )
                              );
                        };
                        do {
                            if (
                                ::DISPATCH(
                                    ::DISPATCH(
                                        ::DISPATCH(
                                            $seen, 'LOOKUP',
                                            ::DISPATCH( $self, "ident" )
                                        ),
                                        "true"
                                    ),
                                    "p5landish"
                                )
                              )
                            {
                                do {
                                    ::DISPATCH(
                                        ::DISPATCH(
                                            $seen, 'LOOKUP',
                                            ::DISPATCH( $self, "ident" )
                                        ),
                                        'capture_to_array',
                                        ::DISPATCH( $::Int, 'new', 1 )
                                    );
                                  }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        ::DISPATCH_VAR( ::DISPATCH( $seen, 'LOOKUP', $count ),
                            "BIND", $self );
                        ::DISPATCH(
                            ::DISPATCH( $self, "rule" ),
                            'capture_count',
                            ::DISPATCH( $::Int,  'new', 0 ),
                            ::DISPATCH( $::Int,  'new', 0 ),
                            ::DISPATCH( $::Hash, 'new', )
                        );
                        ::DISPATCH(
                            (
                                $GLOBAL::Code_infix_58__60__43__62_ =
                                  $GLOBAL::Code_infix_58__60__43__62_
                                  || ::DISPATCH( $::Routine, "new", )
                            ),
                            'APPLY', $count,
                            ::DISPATCH( $::Int, 'new', 1 )
                        );
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => $::Undef,
                            array    => ::DISPATCH(
                                $::List, "new",
                                {
                                    _array => [
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'count',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'quantified',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'seen',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                    ]
                                }
                            ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
    };
    1
}
