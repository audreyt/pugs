{

    package Junction;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }

    BEGIN {
        $_ =
          ::DISPATCH( $::Scalar, "new",
            { modified => $_MODIFIED, name => "$_" } );
    }
    do {
        if (
            ::DISPATCH(
                ::DISPATCH(
                    ::DISPATCH(
                        $GLOBAL::Code_VAR_defined, 'APPLY', $::Junction
                    ),
                    "true"
                ),
                "p5landish"
            )
          )
        {
        }
        else {
            do {
                ::MODIFIED($::Junction);
                $::Junction = ::DISPATCH(
                    ::DISPATCH(
                        $::Class, 'new',
                        ::DISPATCH( $::Str, 'new', 'Junction' )
                    ),
                    'PROTOTYPE',
                );
              }
        }
    };
    ::DISPATCH(
        ::DISPATCH( $::Junction, 'HOW', ),
        'add_attribute',
        ::DISPATCH( $::Str, 'new', 'type' )
    );
    ::DISPATCH(
        ::DISPATCH( $::Junction, 'HOW', ),
        'add_attribute',
        ::DISPATCH( $::Str, 'new', 'things' )
    );
    ::DISPATCH(
        ::DISPATCH( $::Junction, 'HOW', ),
        'add_method',
        ::DISPATCH( $::Str, 'new', 'str' ),
        ::DISPATCH(
            $::Method,
            'new',
            sub {
                my $Hash_sep =
                  ::DISPATCH( $::Hash, 'new',
                    { modified => $_MODIFIED, name => '$Hash_sep' } );
                my $List__ =
                  ::DISPATCH( $::Array, 'new',
                    { modified => $_MODIFIED, name => '$List__' } );
                my $self;
                $self =
                  ::DISPATCH( $::Scalar, 'new',
                    { modified => $_MODIFIED, name => '$self' } )
                  unless defined $self;

                BEGIN {
                    $self =
                      ::DISPATCH( $::Scalar, 'new',
                        { modified => $_MODIFIED, name => '$self' } );
                }
                $self = shift;
                my $CAPTURE;
                $CAPTURE =
                  ::DISPATCH( $::Scalar, 'new',
                    { modified => $_MODIFIED, name => '$CAPTURE' } )
                  unless defined $CAPTURE;

                BEGIN {
                    $CAPTURE =
                      ::DISPATCH( $::Scalar, 'new',
                        { modified => $_MODIFIED, name => '$CAPTURE' } );
                }
                ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                do {
                    ::MODIFIED($List__);
                    $List__ = ::DISPATCH( $CAPTURE, 'array', );
                };
                ::DISPATCH_VAR(
                    $Hash_sep,
                    'STORE',
                    ::DISPATCH(
                        $::Hash, "new",
                        {
                            _hash => {
                                ::DISPATCH( $::Str, 'new', 'any' )->{_value} =>
                                  ::DISPATCH( $::Str, 'new', ' | ' ),
                                ::DISPATCH( $::Str, 'new', 'none' )->{_value} =>
                                  ::DISPATCH( $::Str, 'new', ' , ' ),
                                ::DISPATCH( $::Str, 'new', 'all' )->{_value} =>
                                  ::DISPATCH( $::Str, 'new', ' & ' ),
                                ::DISPATCH( $::Str, 'new', 'one' )->{_value} =>
                                  ::DISPATCH( $::Str, 'new', ' ^ ' ),
                            }
                        }
                    )
                );
                ::DISPATCH(
                    $GLOBAL::Code_infix_58__60__126__62_,
                    'APPLY',
                    ::DISPATCH(
                        $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_,
                        'APPLY',
                        ::DISPATCH(
                            $GLOBAL::Code_infix_58__60_eq_62_,
                            'APPLY',
                            ::DISPATCH( $self, "type" ),
                            ::DISPATCH( $::Str, 'new', '!' )
                        ),
                        ::DISPATCH( $::Str, 'new', 'none' ),
                        ::DISPATCH( $::Str, 'new', '' )
                    ),
                    ::DISPATCH(
                        $GLOBAL::Code_infix_58__60__126__62_,
                        'APPLY',
                        ::DISPATCH( $::Str, 'new', '( ' ),
                        ::DISPATCH(
                            $GLOBAL::Code_infix_58__60__126__62_,
                            'APPLY',
                            ::DISPATCH(
                                ::DISPATCH(
                                    $GLOBAL::Code_prefix_58__60__64__62_,
                                    'APPLY',
                                    ::DISPATCH( $self, "things" )
                                ),
                                'join',
                                ::DISPATCH(
                                    $Hash_sep, 'LOOKUP',
                                    ::DISPATCH( $self, "type" )
                                )
                            ),
                            ::DISPATCH( $::Str, 'new', ' )' )
                        )
                    )
                );
            }
        )
    );
    ::DISPATCH(
        ::DISPATCH( $::Junction, 'HOW', ),
        'add_method',
        ::DISPATCH( $::Str, 'new', 'true' ),
        ::DISPATCH(
            $::Method,
            'new',
            sub {
                my $thing;
                $thing =
                  ::DISPATCH( $::Scalar, 'new',
                    { modified => $_MODIFIED, name => '$thing' } )
                  unless defined $thing;

                BEGIN {
                    $thing =
                      ::DISPATCH( $::Scalar, 'new',
                        { modified => $_MODIFIED, name => '$thing' } );
                }
                my $List__ =
                  ::DISPATCH( $::Array, 'new',
                    { modified => $_MODIFIED, name => '$List__' } );
                my $self;
                $self =
                  ::DISPATCH( $::Scalar, 'new',
                    { modified => $_MODIFIED, name => '$self' } )
                  unless defined $self;

                BEGIN {
                    $self =
                      ::DISPATCH( $::Scalar, 'new',
                        { modified => $_MODIFIED, name => '$self' } );
                }
                $self = shift;
                my $CAPTURE;
                $CAPTURE =
                  ::DISPATCH( $::Scalar, 'new',
                    { modified => $_MODIFIED, name => '$CAPTURE' } )
                  unless defined $CAPTURE;

                BEGIN {
                    $CAPTURE =
                      ::DISPATCH( $::Scalar, 'new',
                        { modified => $_MODIFIED, name => '$CAPTURE' } );
                }
                ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                do {
                    ::MODIFIED($List__);
                    $List__ = ::DISPATCH( $CAPTURE, 'array', );
                };
                $thing;
                do {
                    if (
                        ::DISPATCH(
                            ::DISPATCH(
                                ::DISPATCH(
                                    $GLOBAL::Code_infix_58__60_eq_62_,
                                    'APPLY',
                                    ::DISPATCH( $self, "type" ),
                                    ::DISPATCH( $::Str, 'new', 'any' )
                                ),
                                "true"
                            ),
                            "p5landish"
                        )
                      )
                    {
                        do {
                            for my $thing (
                                @{ ::DISPATCH(
                                        $GLOBAL::Code_prefix_58__60__64__62_,
                                        'APPLY',
                                        ::DISPATCH(
                                            $GLOBAL::Code_prefix_58__60__64__62_,
                                            'APPLY',
                                            ::DISPATCH( $self, "things" )
                                        )
                                      )->{_value}{_array}
                                }
                              )
                            {
                                my $thing;
                                $thing = ::DISPATCH(
                                    $::Scalar,
                                    'new',
                                    {
                       BEGIN {
                            $pair =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$pair' } );
                        }
                        ::DISPATCH_VAR(
                            $s, 'STORE',
                            ::DISPATCH(
                                $GLOBAL::Code_infix_58__60__126__62_,
                                'APPLY', $s,
                                ::DISPATCH(
                                    $GLOBAL::Code_infix_58__60__126__62_,
                                    'APPLY',
                                    ::DISPATCH( $pair, 'key', ),
                                    ::DISPATCH(
                                        $GLOBAL::Code_infix_58__60__126__62_,
                                        'APPLY',
                                        ::DISPATCH( $::Str, 'new', '  ' ),
                                        ::DISPATCH(
                                            $GLOBAL::Code_infix_58__60__126__62_,
                                            'APPLY',
                                            ::DISPATCH( $pair, 'value', ),
                                            ::DISPATCH( $::Str, 'new', ', ' )
                                        )
                                    )
                                )
                            )
                        );
                    }
                };
                return ($s);
            }
        )
    );
    ::DISPATCH(
        ::DISPATCH( $::Hash, 'HOW', ),
        'add_method',
        ::DISPATCH( $::Str, 'new', 'keys' ),
        ::DISPATCH(
            $::Method,
            'new',
            sub {
                my $pairs;
                $pairs =
                  ::DISPATCH( $::Scalar, 'new',
                    { modified => $_MODIFIED, name => '$pairs' } )
                  unless defined $pairs;

                BEGIN {
                    $pairs =
                      ::DISPATCH( $::Scalar, 'new',
                        { modified => $_MODIFIED, name => '$pairs' } );
                }
                my $List__ =
                  ::DISPATCH( $::Array, 'new',
                    { modified => $_MODIFIED, name => '$List__' } );
                my $self;
                $self =
                  ::DISPATCH( $::Scalar, 'new',
                    { modified => $_MODIFIED, name => '$self' } )
                  unless defined $self;

                BEGIN {
                    $self =
                      ::DISPATCH( $::Scalar, 'new',
                        { modified => $_MODIFIED, name => '$self' } );
                }
                $self = shift;
                my $CAPTURE;
                $CAPTURE =
                  ::DISPATCH( $::Scalar, 'new',
                    { modified => $_MODIFIED, name => '$CAPTURE' } )
                  unless defined $CAPTURE;

                BEGIN {
                    $CAPTURE =
                      ::DISPATCH( $::Scalar, 'new',
                        { modified => $_MODIFIED, name => '$CAPTURE' } );
                }
                ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                do {
                    ::MODIFIED($List__);
                    $List__ = ::DISPATCH( $CAPTURE, 'array', );
                };
                ::DISPATCH_VAR( $pairs, 'STORE',
                    ::DISPATCH( $self, 'pairs', ) );
                ::DISPATCH(
                    $pairs, 'map',
                    ::DISPATCH(
                        $::Code, 'new',
                        {
                            code => sub {
                                my $List__ = ::DISPATCH(
                                    $::Array, 'new',
                                    {
                                        modified => $_MODIFIED,
                                        name     => '$List__'
                                    }
                                );
                                my $pair;
                                $pair = ::DISPATCH( $::Scalar, 'new',
                                    { modified => $_MODIFIED, name => '$pair' }
                                ) unless defined $pair;

                                BEGIN {
                                    $pair = ::DISPATCH(
                                        $::Scalar,
                                        'new',
                                        {
                                            modified => $_MODIFIED,
                                            name     => '$pair'
                                        }
                                    );
                                }
                                my $CAPTURE;
                                $CAPTURE = ::DISPATCH(
                                    $::Scalar,
                                    'new',
                                    {
                                        modified => $_MODIFIED,
                                        name     => '$CAPTURE'
                                    }
                                ) unless defined $CAPTURE;

                                BEGIN {
                                    $CAPTURE = ::DISPATCH(
                                        $::Scalar,
                                        'new',
                                        {
                                            modified => $_MODIFIED,
                                            name     => '$CAPTURE'
                                        }
                                    );
                                }
                                ::DISPATCH_VAR( $CAPTURE, "STORE",
                                    ::CAPTURIZE( \@_ ) );
                                do {
                                    ::MODIFIED($List__);
                                    $List__ = ::DISPATCH( $CAPTURE, 'array', );
                                };
                                do {
                                    ::MODIFIED($pair);
                                    $pair =
                                      ::DISPATCH( $List__, 'INDEX',
                                        ::DISPATCH( $::Int, 'new', 0 ) );
                                };
                                ::DISPATCH( $pair, 'key', );
                            },
                            signature => ::DISPATCH(
                                $::Signature,
                                "new",
                                {
                                    invocant => $::Undef,
                                    array    => ::DISPATCH(
                                        $::Array, "new",
                                        {
                                            _array => [
                                                ::DISPATCH(
                                                    $::Signature::Item,
                                                    "new",
                                                    {
                                                        sigil  => '$',
                                                        twigil => '',
                                                        name   => 'pair',
                                                    }
                                                ),
                                            ]
                                        }
                                    ),
                                    hash => ::DISPATCH(
                                        $::Hash, "new", { _hash => {} }
                                    ),
                                    return => $::Undef,
                                }
                            ),
                        }
                    )
                );
            }
        )
    );
    ::DISPATCH(
        ::DISPATCH( $::Hash, 'HOW', ),
        'add_method',
        ::DISPATCH( $::Str, 'new', 'values' ),
        ::DISPATCH(
            $::Method,
            'new',
            sub {
                my $pairs;
                $pairs =
                  ::DISPATCH( $::Scalar, 'new',
                    { modified => $_MODIFIED, name => '$pairs' } )
                  unless defined $pairs;

                BEGIN {
                    $pairs =
                      ::DISPATCH( $::Scalar, 'new',
                        { modified => $_MODIFIED, name => '$pairs' } );
                }
                my $List__ =
                  ::DISPATCH( $::Array, 'new',
                    { modified => $_MODIFIED, name => '$List__' } );
                my $self;
                $self =
                  ::DISPATCH( $::Scalar, 'new',
                    { modified => $_MODIFIED, name => '$self' } )
                  unless defined $self;

                BEGIN {
                    $self =
                      ::DISPATCH( $::Scalar, 'new',
                        { modified => $_MODIFIED, name => '$self' } );
                }
                $self = shift;
                my $CAPTURE;
                $CAPTURE =
                  ::DISPATCH( $::Scalar, 'new',
                    { modified => $_MODIFIED, name => '$CAPTURE' } )
                  unless defined $CAPTURE;

                BEGIN {
                    $CAPTURE =
                      ::DISPATCH( $::Scalar, 'new',
                        { modified => $_MODIFIED, name => '$CAPTURE' } );
                }
                ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                do {
                    ::MODIFIED($List__);
                    $List__ = ::DISPATCH( $CAPTURE, 'array', );
                };
                ::DISPATCH_VAR( $pairs, 'STORE',
                    ::DISPATCH( $self, 'pairs', ) );
                ::DISPATCH(
                    $pairs, 'map',
                    ::DISPATCH(
                        $::Code, 'new',
                        {
                            code => sub {
                                my $List__ = ::DISPATCH(
                                    $::Array, 'new',
                                    {
                                        modified => $_MODIFIED,
                                        name     => '$List__'
                                    }
                                );
                                my $pair;
                                $pair = ::DISPATCH( $::Scalar, 'new',
                                    { modified => $_MODIFIED, name => '$pair' }
                                ) unless defined $pair;

                                BEGIN {
                                    $pair = ::DISPATCH(
                                        $::Scalar,
                                        'new',
                                        {
                                            modified => $_MODIFIED,
                                            name     => '$pair'
                                        }
                                    );
                                }
                                my $CAPTURE;
                                $CAPTURE = ::DISPATCH(
                                    $::Scalar,
                                    'new',
                                    {
                                        modified => $_MODIFIED,
                                        name     => '$CAPTURE'
                                    }
                                ) unless defined $CAPTURE;

                                BEGIN {
                                    $CAPTURE = ::DISPATCH(
                                        $::Scalar,
                                        'new',
                                        {
                                            modified => $_MODIFIED,
                                            name     => '$CAPTURE'
                                        }
                                    );
                                }
                                ::DISPATCH_VAR( $CAPTURE, "STORE",
                                    ::CAPTURIZE( \@_ ) );
                                do {
                                    ::MODIFIED($List__);
                                    $List__ = ::DISPATCH( $CAPTURE, 'array', );
                                };
                                do {
                                    ::MODIFIED($pair);
                                    $pair =
                                      ::DISPATCH( $List__, 'INDEX',
                                        ::DISPATCH( $::Int, 'new', 0 ) );
                                };
                                ::DISPATCH( $pair, 'value', );
                            },
                            signature => ::DISPATCH(
                                $::Signature,
                                "new",
                                {
                                    invocant => $::Undef,
                                    array    => ::DISPATCH(
                                        $::Array, "new",
                                        {
                                            _array => [
                                                ::DISPATCH(
                                                    $::Signature::Item,
                                                    "new",
                                                    {
                                                        sigil  => '$',
                                                        twigil => '',
                                                        name   => 'pair',
                                                    }
                                                ),
                                            ]
                                        }
                                    ),
                                    hash => ::DISPATCH(
                                        $::Hash, "new", { _hash => {} }
                                    ),
                                    return => $::Undef,
                                }
                            ),
                        }
                    )
                );
            }
        )
    );
    ::DISPATCH(
        ::DISPATCH( $::Hash, 'HOW', ),
        'add_method',
        ::DISPATCH( $::Str, 'new', 'true' ),
        ::DISPATCH(
            $::Method,
            'new',
            sub {
                my $List__ =
                  ::DISPATCH( $::Array, 'new',
                    { modified => $_MODIFIED, name => '$List__' } );
                my $self;
                $self =
                  ::DISPATCH( $::Scalar, 'new',
                    { modified => $_MODIFIED, name => '$self' } )
                  unless defined $self;

                BEGIN {
                    $self =
                      ::DISPATCH( $::Scalar, 'new',
                        { modified => $_MODIFIED, name => '$self' } );
                }
                $self = shift;
                my $CAPTURE;
                $CAPTURE =
                  ::DISPATCH( $::Scalar, 'new',
                    { modified => $_MODIFIED, name => '$CAPTURE' } )
                  unless defined $CAPTURE;

                BEGIN {
                    $CAPTURE =
                      ::DISPATCH( $::Scalar, 'new',
                        { modified => $_MODIFIED, name => '$CAPTURE' } );
                }
                ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                do {
                    ::MODIFIED($List__);
                    $List__ = ::DISPATCH( $CAPTURE, 'array', );
                };
                ::DISPATCH(
                    $GLOBAL::Code_infix_58__60__33__61__62_,
                    'APPLY',
                    ::DISPATCH( $self, 'elems', ),
                    ::DISPATCH( $::Int, 'new', 0 )
                );
            }
        )
    );
    ::DISPATCH(
        ::DISPATCH( $::Hash, 'HOW', ),
        'add_method',
        ::DISPATCH( $::Str, 'new', 'int' ),
        ::DISPATCH(
            $::Method,
            'new',
            sub {
                my $List__ =
                  ::DISPATCH( $::Array, 'new',
                    { modified => $_MODIFIED, name => '$List__' } );
                my $self;
                $self =
                  ::DISPATCH( $::Scalar, 'new',
                    { modified => $_MODIFIED, name => '$self' } )
                  unless defined $self;

                BEGIN {
                    $self =
                      ::DISPATCH( $::Scalar, 'new',
                        { modified => $_MODIFIED, name => '$self' } );
                }
                $self = shift;
                my $CAPTURE;
                $CAPTURE =
                  ::DISPATCH( $::Scalar, 'new',
                    { modified => $_MODIFIED, name => '$CAPTURE' } )
                  unless defined $CAPTURE;

                BEGIN {
                    $CAPTURE =
                      ::DISPATCH( $::Scalar, 'new',
                        { modified => $_MODIFIED, name => '$CAPTURE' } );
                }
                ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                do {
                    ::MODIFIED($List__);
                    $List__ = ::DISPATCH( $CAPTURE, 'array', );
                };
                ::DISPATCH( $self, 'elems', );
            }
        )
    );
    ::DISPATCH(
        ::DISPATCH( $::Hash, 'HOW', ),
        'add_method',
        ::DISPATCH( $::Str, 'new', 'hash' ),
        ::DISPATCH(
            $::Method,
            'new',
            sub {
                my $List__ =
                  ::DISPATCH( $::Array, 'new',
                    { modified => $_MODIFIED, name => '$List__' } );
                my $self;
                $self =
                  ::DISPATCH( $::Scalar, 'new',
                    { modified => $_MODIFIED, name => '$self' } )
                  unless defined $self;

                BEGIN {
                    $self =
                      ::DISPATCH( $::Scalar, 'new',
                        { modified => $_MODIFIED, name => '$self' } );
                }
                $self = shift;
                my $CAPTURE;
                $CAPTURE =
                  ::DISPATCH( $::Scalar, 'new',
                    { modified => $_MODIFIED, name => '$CAPTURE' } )
                  unless defined $CAPTURE;

                BEGIN {
                    $CAPTURE =
                      ::DISPATCH( $::Scalar, 'new',
                        { modified => $_MODIFIED, name => '$CAPTURE' } );
                }
                ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                do {
                    ::MODIFIED($List__);
                    $List__ = ::DISPATCH( $CAPTURE, 'array', );
                };
                $self;
            }
        )
      )

      ;
    1
}

