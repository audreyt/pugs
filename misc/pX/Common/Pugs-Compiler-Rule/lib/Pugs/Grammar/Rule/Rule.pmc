# Generated file - do not edit!
##################((( 32-bit Checksum Validator )))##################
BEGIN { use 5.006; local (*F, $/); ($F = __FILE__) =~ s!c$!!; open(F)
or die "Cannot open $F: $!"; binmode(F, ':crlf'); unpack('%32N*',<F>)
== 0xEFBCF6C2 or die "Checksum failed for outdated .pmc file: ${F}c"}
#####################################################################
package Pugs::Grammar::Rule;
*{'Pugs::Grammar::Rule::p6ws'} = sub {

    my $grammar = shift;

    warn "rule argument is undefined" unless defined $_[0];

    my $bool = $_[0] =~ /^((?:\s|\#(?-s:.)*)+)(.*)$/sx;

    return {

        bool  => $bool,

        match => $1,

        tail  => $2,

        #capture => $1,

    }

};

*{'Pugs::Grammar::Rule::variable'} = sub {

    my $grammar = shift;

    warn "rule argument is undefined" unless defined $_[0];

    my $bool = $_[0] =~ /^([$%@](?:(?:\:\:)?[_[:alnum:]]+)+)(.*)$/sx;

    return {

        bool  => $bool,

        match => $1,

        tail  => $2,

        #capture => $1,

    }

};

*{'Pugs::Grammar::Rule::ident'} = sub {

    my $grammar = shift;

    warn "rule argument is undefined" unless defined $_[0];

    my $bool = $_[0] =~ /^((?:(?:\:\:)?[_[:alnum:]]+)+)(.*)$/sx;

    return {

        bool  => $bool,

        match => $1,

        tail  => $2,

        #capture => $1,

    }

};

*{'Pugs::Grammar::Rule::dot'} = 
sub {
    my $grammar = shift;
    warn 'rule argument is undefined' unless defined $_[0];
    package Pugs::Runtime::Rule;
    rule_wrapper( $_[0], (
        concat(
          constant( "\." )
        ,
          Pugs::Runtime::Rule::abort(
              sub {
                  return { bool => 1, tail => $_[0], return => sub { return { 'dot' => 1 ,} } };
              }
          )
        ,
        ),
        )->( @_ )
    )
};
    unshift @Pugs::Grammar::Rule::rule_terms, 'dot';
*{'Pugs::Grammar::Rule::_word'} = sub {

    my $grammar = shift;

    warn "rule argument is undefined" unless defined $_[0];

    my $bool = $_[0] =~ /^([_[:alnum:]]+)(.*)$/sx;

    return {

        bool  => $bool,

        match => $1,

        tail  => $2,

        #capture => $1,

    }

};

*{'Pugs::Grammar::Rule::word'} = 
sub {
    my $grammar = shift;
    warn 'rule argument is undefined' unless defined $_[0];
    package Pugs::Runtime::Rule;
    rule_wrapper( $_[0], (
        concat(
          capture( '_word', sub{ $grammar->_word(@_) } )
        ,
          Pugs::Runtime::Rule::abort(
              sub {
                  return { bool => 1, tail => $_[0], return => sub { return { 'constant' => $_[0]{_word}() ,} } };
              }
          )
        ,
        ),
        )->( @_ )
    )
};
    unshift @Pugs::Grammar::Rule::rule_terms, 'word';
*{'Pugs::Grammar::Rule::escaped_char'} = sub {

    my $grammar = shift;

    warn "rule argument is undefined" unless defined $_[0];

    my $bool = $_[0] =~ /^\\(.)(.*)$/sx;

    return {

        bool  => $bool,

        match => $1,

        tail  => $2,

        #capture => $1,

    }

};

    unshift @Pugs::Grammar::Rule::rule_terms, 'escaped_char';
*{'Pugs::Grammar::Rule::non_capturing_subrule'} = sub {

    my $grammar = shift;

    warn "rule argument is undefined" unless defined $_[0];

    my $bool = $_[0] =~ /^\<\?(.*?)\>(.*)$/sx;

    return {

        bool  => $bool,

        match => $1,

        tail  => $2,

        #capture => $1,

    }

};

    push @Pugs::Grammar::Rule::rule_terms, 'non_capturing_subrule';
*{'Pugs::Grammar::Rule::negated_subrule'} = sub {

    my $grammar = shift;

    warn "rule argument is undefined" unless defined $_[0];

    my $bool = $_[0] =~ /^\<\!(.*?)\>(.*)$/sx;

    return {

        bool  => $bool,

        match => $1,

        tail  => $2,

        #capture => $1,

    }

};

    push @Pugs::Grammar::Rule::rule_terms, 'negated_subrule';
*{'Pugs::Grammar::Rule::subrule'} = sub {

    my $grammar = shift;

    warn "rule argument is undefined" unless defined $_[0];

    my $bool = $_[0] =~ /^\<(.*?)\>(.*)$/sx;

    return {

        bool  => $bool,

        match => $1,

        tail  => $2,

        #capture => $1,

    }

};

    push @Pugs::Grammar::Rule::rule_terms, 'subrule';
*{'Pugs::Grammar::Rule::non_capturing_group'} = 
sub {
    my $grammar = shift;
    warn 'rule argument is undefined' unless defined $_[0];
    package Pugs::Runtime::Rule;
    rule_wrapper( $_[0], (
        concat(
          constant( "\[" )
        ,
          capture( 'rule', sub{ $grammar->rule(@_) } )
        ,
          constant( "\]" )
        ,
          Pugs::Runtime::Rule::abort(
              sub {
                  return { bool => 1, tail => $_[0], return => sub { return $_[0]{rule}() } };
              }
          )
        ,
        ),
        )->( @_ )
    )
};
    push @Pugs::Grammar::Rule::rule_terms, 'non_capturing_group';
*{'Pugs::Grammar::Rule::closure_rule'} = 
sub {
    my $grammar = shift;
    warn 'rule argument is undefined' unless defined $_[0];
    package Pugs::Runtime::Rule;
    rule_wrapper( $_[0], (
        concat(
          capture( 'code', sub{ $grammar->code(@_) } )
        ,
          Pugs::Runtime::Rule::abort(
              sub {
                  return { bool => 1, tail => $_[0], return => sub { return { closure => $_[0]{code}() ,} } };
              }
          )
        ,
        ),
        )->( @_ )
    )
};
    unshift @Pugs::Grammar::Rule::rule_terms, 'closure_rule';
*{'Pugs::Grammar::Rule::variable_rule'} = 
sub {
    my $grammar = shift;
    warn 'rule argument is undefined' unless defined $_[0];
    package Pugs::Runtime::Rule;
    rule_wrapper( $_[0], (
        concat(
          capture( 'variable', sub{ $grammar->variable(@_) } )
        ,
          Pugs::Runtime::Rule::abort(
              sub {
                  return { bool => 1, tail => $_[0], return => sub { return { variable =>  $_[0]->()  ,} } };
              }
          )
        ,
        ),
        )->( @_ )
    )
};
    unshift @Pugs::Grammar::Rule::rule_terms, 'variable_rule';
*{'Pugs::Grammar::Rule::runtime_alternation'} = 
sub {
    my $grammar = shift;
    warn 'rule argument is undefined' unless defined $_[0];
    package Pugs::Runtime::Rule;
    rule_wrapper( $_[0], (
        concat(
          constant( "\<" )
        ,
          capture( 'variable', sub{ $grammar->variable(@_) } )
        ,
          constant( "\>" )
        ,
          Pugs::Runtime::Rule::abort(
              sub {
                  return { bool => 1, tail => $_[0], return => sub { return { runtime_alternation =>  $_[0]->()  ,} } };
              }
          )
        ,
        ),
        )->( @_ )
    )
};
    unshift @Pugs::Grammar::Rule::rule_terms, 'runtime_alternation';
*{'Pugs::Grammar::Rule::named_capture'} = 
sub {
    my $grammar = shift;
    warn 'rule argument is undefined' unless defined $_[0];
    package Pugs::Runtime::Rule;
    rule_wrapper( $_[0], (
        concat(
          constant( "\$" )
        ,
          constant( "\<" )
        ,
          capture( 'ident', sub{ $grammar->ident(@_) } )
        ,
          constant( "\>" )
        ,
          optional(
              sub{ $grammar->p6ws(@_) }
            ,
          )
        ,
          constant( "\:" )
        ,
          constant( "\=" )
        ,
          optional(
              sub{ $grammar->p6ws(@_) }
            ,
          )
        ,
          constant( "\(" )
        ,
          capture( 'rule', sub{ $grammar->rule(@_) } )
        ,
          constant( "\)" )
        ,
          Pugs::Runtime::Rule::abort(
              sub {
                  return { bool => 1, tail => $_[0], return => sub { return { named_capture => {
                ident => $_[0]{ident}(),
                rule  => $_[0]{rule}(),
            }, } 
        } };
              }
          )
        ,
        ),
        )->( @_ )
    )
};
    unshift @Pugs::Grammar::Rule::rule_terms, 'named_capture';
*{'Pugs::Grammar::Rule::capturing_group'} = 
sub {
    my $grammar = shift;
    warn 'rule argument is undefined' unless defined $_[0];
    package Pugs::Runtime::Rule;
    rule_wrapper( $_[0], (
        concat(
          constant( "\(" )
        ,
          capture( 'rule', sub{ $grammar->rule(@_) } )
        ,
          constant( "\)" )
        ,
          Pugs::Runtime::Rule::abort(
              sub {
                  return { bool => 1, tail => $_[0], return => sub { return { capturing_group => $_[0]{rule}() ,} } };
              }
          )
        ,
        ),
        )->( @_ )
    )
};
    unshift @Pugs::Grammar::Rule::rule_terms, 'capturing_group';
*{'Pugs::Grammar::Rule::constant'} = 
sub {
    my $grammar = shift;
    warn 'rule argument is undefined' unless defined $_[0];
    package Pugs::Runtime::Rule;
    rule_wrapper( $_[0], (
        concat(
          constant( "\<" )
        ,
          capture( 'literal', sub{ $grammar->literal(@_) } )
        ,
          constant( "\>" )
        ,
          Pugs::Runtime::Rule::abort(
              sub {
                  return { bool => 1, tail => $_[0], return => sub { return { constant =>  $_[0]->()  } } };
              }
          )
        ,
        ),
        )->( @_ )
    )
};
    unshift @Pugs::Grammar::Rule::rule_terms, 'constant';
*{'Pugs::Grammar::Rule::colon1'} = 
sub {
    my $grammar = shift;
    warn 'rule argument is undefined' unless defined $_[0];
    package Pugs::Runtime::Rule;
    rule_wrapper( $_[0], (
        concat(
          constant( "\:" )
        ,
          Pugs::Runtime::Rule::abort(
              sub {
                  return { bool => 1, tail => $_[0], return => sub { return { colon => 1 ,} } };
              }
          )
        ,
        ),
        )->( @_ )
    )
};
    push @Pugs::Grammar::Rule::rule_terms, 'colon1';
*{'Pugs::Grammar::Rule::quantifier'} = 
sub {
    my $grammar = shift;
    warn 'rule argument is undefined' unless defined $_[0];
    package Pugs::Runtime::Rule;
    rule_wrapper( $_[0], (
        concat(
          optional(
              sub{ $grammar->p6ws(@_) }
            ,
          )
        ,
          capture( 'term', 
              alternation( \@Pugs::Grammar::Rule::rule_terms )
            ,
          )
        ,
          optional(
              sub{ $grammar->p6ws(@_) }
            ,
          )
        ,
          capture( 'quant', 
              optional(
                  alternation( [
                      concat(
                        constant( "\?" )
                      ,
                        constant( "\?" )
                      ,
                      ),
                      concat(
                        constant( "\*" )
                      ,
                        constant( "\?" )
                      ,
                      ),
                      concat(
                        constant( "\+" )
                      ,
                        constant( "\?" )
                      ,
                      ),
                        constant( "\?" )
                      ,
                        constant( "\*" )
                      ,
                        constant( "\+" )
                      ,
                  ] )
                ,
              )
            ,
          )
        ,
          optional(
              sub{ $grammar->p6ws(@_) }
            ,
          )
        ,
          Pugs::Runtime::Rule::abort(
              sub {
                  return { bool => 1, tail => $_[0], return => sub { return {  
            term =>  $_[0]{term}(),
            quant => $_[0]{quant}(),
        } 
    } };
              }
          )
        ,
        ),
        )->( @_ )
    )
};
*{'Pugs::Grammar::Rule::concat'} = 
sub {
    my $grammar = shift;
    warn 'rule argument is undefined' unless defined $_[0];
    package Pugs::Runtime::Rule;
    rule_wrapper( $_[0], (
          alternation( [
              concat(
                capture( 'q1', 
                    capture( 'quantifier', sub{ $grammar->quantifier(@_) } )
                  ,
                )
              ,
                capture( 'q2', 
                    capture( 'concat', sub{ $grammar->concat(@_) } )
                  ,
                )
              ,
                Pugs::Runtime::Rule::abort(
                    sub {
                        return { bool => 1, tail => $_[0], return => sub { return { concat => [ 
                { quant => $_[0]{q1}() ,}, 
                $_[0]{q2}(),
            ] ,} 
        } };
                    }
                )
              ,
              ),
              concat(
                capture( 'quantifier', sub{ $grammar->quantifier(@_) } )
              ,
                Pugs::Runtime::Rule::abort(
                    sub {
                        return { bool => 1, tail => $_[0], return => sub { return { quant => $_[0]{quantifier}() ,} } };
                    }
                )
              ,
              ),
          ] )
        ,
        )->( @_ )
    )
};
*{'Pugs::Grammar::Rule::rule'} = 
sub {
    my $grammar = shift;
    warn 'rule argument is undefined' unless defined $_[0];
    package Pugs::Runtime::Rule;
    rule_wrapper( $_[0], (
          alternation( [
              concat(
                capture( 'q1', 
                    capture( 'concat', sub{ $grammar->concat(@_) } )
                  ,
                )
              ,
                constant( "\|" )
              ,
                capture( 'q2', 
                    capture( 'rule', sub{ $grammar->rule(@_) } )
                  ,
                )
              ,
                Pugs::Runtime::Rule::abort(
                    sub {
                        return { bool => 1, tail => $_[0], return => sub { return { alt => [ 
                $_[0]{q1}(), 
                $_[0]{q2}(),
            ] ,} 
        } };
                    }
                )
              ,
              ),
              concat(
                capture( 'concat', sub{ $grammar->concat(@_) } )
              ,
                Pugs::Runtime::Rule::abort(
                    sub {
                        return { bool => 1, tail => $_[0], return => sub { return $_[0]{concat}() } };
                    }
                )
              ,
              ),
          ] )
        ,
        )->( @_ )
    )
};
