
=head1 NAME

kp6-roadmap - The "KindaPerl6" Project Roadmap

=head1 DESCRIPTION

This document describes the current status of the "KindaPerl6" development project.



=head1 OBJECTIVE

KindaPerl6 ("kp6") aims for a "Perl 6 in Perl 6" design and implementation.



=head2 KindaPerl6 Project overview

Phase 1 - bootstrap 

  This phase is finished

Phase 2 - improved compiler architecture 

  This phase is finished

Phase 3 - regex compiler refactoring 

  This is the current phase

Phase 4 - improved runtime

  The runtime libraries needed by the Perl-6.0.0-STD parser will be specified and implemented

Phase 5 - improved grammar

  Upgrade to Perl-6.0.0-STD Grammar

Phase 6 - optimizer

  Target speed is 1/200x Perl 5

Phase 7 - aggressive optimizer

  Target speed is 1/20x Perl 5




=head1 Phase 3 - regex compiler refactoring

The goal for this phase is to refactor the regex compiler, to take advantage of the KindaPerl6 compiler architecture.

As a side effect, kp6 will also be able to use a native regex engine, if available.
For example, PGE in the Parrot backend, and Pugs::Compiler::Rule in the Perl 5 backend.
The kp6-regex engine will still be supported, for benefit of perl6-in-jvm and other backends.


=head2 Milestone 3.1 - Regex AST refactoring  

The regex AST will be refactored from hash-of-hashes to Object-oriented.

=head3 Status

Finished.

=head3 Dependencies

=over

=item * KindaPerl6 compiler architecture code-review

* under way

We need someone to review the previous phase results, in order to consider the "compiler architecture" phase finished.
This is a non-blocking task.

From irc discussions:

    > - One of my basic design principles was to implement AST
    > transformations as "pluggable" modules, using a visitor pattern.
    > Do you see potential problems with this approach?

    No problems with the visitor pattern, but the way that "aspects" are
    implemented in the AST-plugins might cause hard-to-detect errors.
    For example, if the AST is changed in one place and the AST-plugin is
    not updated, no error will be reported (pmurias++).

    * this has been refactored; it's now more difficult to have an undetected bug

    > - BEGIN block side-effects are recorded in a hash. This adds an
    > overhead to all assignment operations. Do you see a better way to
    > check for side-effects?

    This will probably be discussed in an irc meeting scheduled for next week.

    Yesterday, we discussed the way the compiling environment is
    represented internally. It's complex, but it works. We don't have a
    simpler solution yet.


=item * KindaPerl6 syntax review

* under way

We need to verify that the KindaPerl6 grammar is a valid subset of Perl 6.
This is a non-blocking task.

  * POD cannot contain #-comments in Pugs (bug)
    - workaround: move comments outside the pod (example: Grammar::Regex)
    
  * POD should finish in '=end', not '=cut'
  
  * ::Obj( val => 1 )  should be   Obj.new( val => 1 )
  
  * $obj.val(1)  should be  $obj.val := 1
    - the accessor declaration is "has $.val is rw"
    
  * s/<'...'>/'...'/g in several places in the grammar
  
  * (this one is no longer necessary; the spec now says the statements are returned in the right order) 
    XXX '@.body.>>emit' is wrong, because it would emit the statements in any order

=back

=head3 Tasks

=over

=item * Create the regex AST node classes

* finished

=item * Rewrite the hash constructors in the regex grammar to OO style

* finished

=back


=head3 Test Plan

The resulting code will be tested by running the existing test suite.


=head2 Milestone 3.2 - Regex AST processor  

The regex compiler will use the AST processor engine.

=head3 Status

* Some tasks finished.

=head3 Dependencies

=over

=item * OO regex AST

The regex AST created in Milestone 1 must be fully implemented and tested.

=back

=head3 Tasks

=over

=item * Create an AST ".perl" dumper

* finished

This will be used for debugging

=item * Create an AST-to-Perl6 dumper

* finished

This will finish replacing the current kp6 code

=item * Merge the regex AST processor with the main AST processor

* finished

Currently, the grammar for "regex" returns Perl 6 procedural AST. 
This is because the regex AST processor is being called too early.

In this phase, the grammar will be refactored to return plain regex AST.
This AST will be processed to procedural code later, by applying an optional plugin module.

=back


=head3 Test Plan

The resulting code will be tested by running the existing test suite.


=head2 Milestone 3.3 - Additional Regex AST processors

The regex compiler will use the AST processor engine to implement additional semantics.

=head3 Status

* started.

=head3 Dependencies

=over

=item * OO regex AST

The regex AST created in Milestone 1 must be fully implemented and tested.

=back

=head3 Tasks

=over

=item * Identify which regex features are needed for parsing Perl-6.0.0-STD

=item * Identify which regex AST transformations are needed in order to implement the Perl-6.0.0-STD parser

=item * Create regex tests for the new features

=item * Implement the AST transformations

This task may require implementing additional regex runtime.

* Status: the 'RegexCapture' processor implements AST annotation for positional capture numbering, 
and for "capture to array" flags.

=back


=head3 Test Plan

The resulting code will be tested by bootstrapping the compiler, and by running the improved test suite.



=head2 Bonus Tasks  

These tasks are not required for the successful completion of this phase.

=head3 Tasks

=over

=item * Add support for optionally using Perl6regex-on-Perl5regex, 
as described in v6/v6-KindaPerl6/temp/backtracking-recursive-subrule.pl

* Status: under way; 
implemented as Visitor::EmitPerl5Regex; 
added a '-perl5rx' backend to kp6, that performs the p6rx-on-p5rx compilation.

=item * Add support for optionally using Pugs::Compiler::Rule in the Perl 5 backend

=item * Add support for optionally using Parrot Grammar Engine in the Parrot backend

=item * Regex backtracking

Choose one or more backtracking models, and implement them.
This is specially important for Perl6regex-in-Perl6 (as implemented in Visitor::Token)

* Status: the '-perl5rx' kp6 backend implements backtracking by using the Perl5.8 regex engine.

=item * Special variables

Create C<COMPILING::<$?PARSER>>, C<$?FILE>, C<$?LINE>

=item * Finer-grained error messages

=item * Grammar and precedence parser merged from Perl6-STD

=item * Lexically modifieable Grammar

=back
