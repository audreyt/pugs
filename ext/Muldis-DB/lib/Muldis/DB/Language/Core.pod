=pod

=encoding utf8

=head1 NAME

Muldis::DB::Language::Core -
Muldis D core data types and operators

=head1 VERSION

This document is Muldis::DB::Language::Core version 0.2.0.

=head1 PREFACE

This document is part of the Muldis D language specification, whose root
document is L<Muldis::DB::Language>; you should read that root document
before you read this one, which provides subservient details.

=head1 DESCRIPTION

Muldis D has a mandatory core set of system-defined (eternally available)
entities, which is referred to as the I<Muldis D core> or the I<core>; they
are the minimal entities that all Muldis D implementations need to provide;
they are mutually self-describing and are used to bootstrap the language;
any entities outside the core, called I<Muldis D extensions>, are
non-mandatory and are defined in terms of the core or each other, but the
reverse isn't true.

A significant subset of the Muldis D core entities are specific to being or
implementing the Muldis D system catalog / meta-model, and aren't used
elsewhere by the system; these are documented in the
L<Muldis::DB::Language::Catalog> document; all the other core entities are
described in the current C<Core> document.  TODO: EDIT THIS PARAGRAPH.

This current C<Core> document features the boolean, order, integer, bit
string, and character string types and operators, plus the tuple and
relation type constructors (and quasi- variants) and operators, plus the
type system minimal and maximal types, and the polymorphic operators that
all types, or some types including core types, have defined over them.

Extensions are in these other documents: L<Muldis::DB::Language::Ext::Num>,
L<Muldis::DB::Language::Ext::Temporal>,
L<Muldis::DB::Language::Ext::Spatial>.

=head1 TYPE SUMMARY

Following are all the data types and data type factories described in this
document, arranged in a type graph according to their proper sub|supertype
relationships:

    sys.type.Universal

        sys.type.Empty

        sys.type.Scalar
            sys.type.Ordinal

                # The following are all regular ordinal scalar types.

                sys.type.Bool
                sys.type.Order
                sys.type.Int
                    sys.type.UInt
                        sys.type.PInt
                            sys.type.PInt2_36
                sys.type.Blob
                    sys.type.NEBlob
                sys.type.Text
                    sys.type.NEText

        # The following are all nonscalar type factories.

        sys.type.Tuple
            sys.type.Database

        sys.type.Relation
            sys.type.Set
                sys.type.Maybe
            sys.type.Seq
            sys.type.Bag

        # The following are all quasi-nonscalar type factories.

        sys.type.QuasiTuple

        sys.type.QuasiRelation
            sys.type.QuasiSet
                sys.type.QuasiMaybe
            sys.type.QuasiSeq
            sys.type.QuasiBag

Note that C<sys.type.Empty> is a proper subtype of all of the other types
in this graph, but every other type has only one immediate supertype shown,
and hence the graph of them is a simple hierarchy.

=head1 SYSTEM-DEFINED CORE MAXIMAL AND MINIMAL DATA TYPES

These core data types are special and are the only Muldis D types that are
neither scalar nor nonscalar nor quasi-nonscalar types.  They are all
system-defined and it is impossible for users to define more types of this
nature.

=over

=item C<sys.type.Universal>

The C<Universal> type is the maximal type of the entire Muldis D type
system, and contains every value that can possibly exist.  Every other type
is implicitly a proper subtype of C<Universal>, and C<Universal> is
implicitly a union type over all other types.  Its default value is
C<Bool:false>.  The cardinality of this type is infinity.

=item C<sys.type.Empty>

The C<Empty> type is the minimal type of the entire Muldis D type system,
and is the only type that contains exactly zero values.  Every other type
is implicitly a proper supertype of C<Empty> and C<Empty> is implicitly an
intersection type over all other types.  It has no default value.  The
cardinality of this type is zero.

=back

=head1 SYSTEM-DEFINED CORE PSEUDO-TYPES

These are pseudo-types (that is, they aren't types at all) which represent
generic contexts that could accept a multiplicity of types, but are not the
same as contexts named after some actual types.  For example, they are used
as the declared parameter types of some dyadic polymorphic operators to
refer to, per instance, 2 given types that need to be compatible, but the
compatibility isn't simply defined by a "are any 2 subtypes of" such as is
true with most operators.  They are all system-defined and it is impossible
for users to define more types of this nature.

=over

=item C<sys.type.Some.Universal>

Contexts defined by the C<Some.Universal> pseudo-type accept values of
potentially any type of C<Universal>.

=item C<sys.type.Some.Ordinal>

Contexts defined by the C<Some.Ordinal> pseudo-type accept values of
potentially any type of C<Ordinal>.

=back

=head1 SYSTEM-DEFINED CORE SCALAR DATA TYPES

These core scalar data types are the most fundamental Muldis D types.  Each
one has zero possreps, and hence has no named components that can be
referenced.  Concrete Muldis D provides a specific syntax per type to
select a value of one of these types, which does not look like a routine
invocation, but rather like a scalar literal in a typical programming
language; details of that syntax are not given here, but in
L<Muldis::DB::Language::Grammar>.  Abstract Muldis D as hosted in another
language will essentially use literals of corresponding host language
types, whatever they use for eg booleans and integers and character
strings, but tagged with extra meta-data if the host language is more
weakly typed or lacks one-to-one type correspondence.

=over

=item C<sys.type.Scalar>

The C<Scalar> type is the maximal type of all Muldis D scalar types, and
contains every scalar value that can possibly exist.  Every other scalar
type is implicitly a proper subtype of C<Scalar>, and C<Scalar> is
implicitly a union type over all other scalar types.  Its default value is
C<Bool:false>.  The cardinality of this type is infinity.

=item C<sys.type.Ordinal>

The C<Ordinal> type is a proper subtype of C<Scalar> that is a proper
supertype of all scalar types that are considered ordinal.  Any scalar
types which consider themselves ordinal, which happens to include every
system-defined core scalar root type, will explicitly declare themselves as
subtypes of C<Ordinal> in their type definitions; the definition of
C<Ordinal> does not specify what other types it is a union over.  Its
default value is C<Bool:false>.  The cardinality of this type is infinity.

=item C<sys.type.Bool>

A C<Bool> is an enumeration consisting of the 2 values C<Bool:false> and
C<Bool:true>.  It represents a truth value, and is the result type of any
C<equal> or C<not_equal> routine; it is the only essential scalar data type
of a B<D> language.  Its default value is C<Bool:false>.  The cardinality
of this type is 2.

=item C<sys.type.Order>

A C<Order> is an enumeration consisting of the 3 values C<Order:increase>,
C<Order:same>, C<Order:decrease>.  It is the result type of any C<compare>
routine that is used on 2 values of a C<sys.type.Ordinal> subtype.  Its
default value is C<Order:same>.  The cardinality of this type is 3.

=item C<sys.type.Int>

An C<Int> is a single integral number of any magnitude.  Its default value
is zero.  The cardinality of this type is infinity; to define a
most-generalized finite C<Int> subtype, you must specify the 2 integer
end-points of the inclusive range that all its values are in.

=item C<sys.type.UInt>

A C<UInt> (unsigned integer) is a proper subtype of C<Int> where all member
values are non-negative / greater than or equal to zero.

=item C<sys.type.PInt>

A C<PInt> (positive integer) is a proper subtype of C<UInt> where all
member values are positive / greater than or equal to one.  Its default
value is one.

=item C<sys.type.PInt2_36>

A C<PInt2_36> is a proper subtype of C<PInt> where all member values are
between 2 and 36.  (The significance of the number 36 is 10 digits plus 26
letters.)  The cardinality of this type is 35.

=item C<sys.type.Blob>

A C<Blob> is an undifferentiated string of bits.  Its default value is the
empty string.  The cardinality of this type is infinity; to define a
most-generalized finite C<Blob> subtype, you must specify a maximum length
in characters that the subtype's strings are.

=item C<sys.type.NEBlob>

A C<NEBlob> (non-empty blob) is a proper subtype of C<Blob> where its
length in bits must be at least 1; it can be any C<Blob> except for the
empty string.  Its default value is a single zero bit.

=item C<sys.type.Text>

A C<Text> is a string of characters.  Its default value is the empty
string.  Note that there is only one system-defined character repertoire
for C<Text> types, which is the newest Unicode repertoire (5.0.0).  The
cardinality of this type is infinity; to define a most-generalized finite
C<Text> subtype, you must specify a maximum length in characters (that is,
eg, in NFC graphemes) that the subtype's strings are.

=item C<sys.type.NEText>

A C<NEText> (non-empty text) is a proper subtype of C<Text> where its
length in characters must be more than zero; it can be any C<Text> except
for the empty string.  Its default value is a single "space" character.

=back

=head1 SYSTEM-DEFINED CORE NONSCALAR PARAMETERIZED DATA TYPES

These are only called nonscalar data types in a loose sense, because by
themselves they are incomplete type definitions.  Actual nonscalar data
type definitions are derived from these by supplying the balance of the
type definitions, such as what their attributes are and/or what their
attribute types are.  Associated with these incomplete type definitions are
a set of system-defined routines that can be applied to values of any
actual nonscalar types derived from them; such are called I<generic
nonscalar operators>.  In the Muldis D type system, these incomplete
nonscalar types are defined as union types over all actual types derived
from them, and are proper supertypes of said.

Some actual nonscalar data types are system-defined, for use in defining
the Muldis D system catalog / meta-model (see
L<Muldis::DB::Language::Catalog> for more details), but all other actual
nonscalar data types are user-defined.  Users can also define their own
incomplete nonscalar data types that are tuple or relation types.

=over

=item C<sys.type.Tuple>

The C<Tuple> type is the maximal type of all Muldis D tuple (nonscalar)
types, and contains every tuple value that could possibly exist.  A
C<Tuple> is an unordered heterogeneous collection of 0..N named attributes
(the count of attributes being its I<degree>), where all attribute names
are mutually distinct, and each attribute may be of distinct types; the
mapping of a tuple's attribute names and their declared data types is
called the tuple's I<heading>.  Its default value is the sole value of the
sole tuple data type that has zero attributes.  The cardinality of this
type is equal to the product of the number of permutations drawable from
the values of each of its attributes' declared data types; for a C<Tuple>
subtype to be finite, all of its attribute types must be.

=item C<sys.type.Database>

A C<Database> is a proper subtype of C<Tuple> where all of its attributes
are of relation types; it is otherwise the same.

=item C<sys.type.Relation>

The C<Relation> type is the maximal type of all Muldis D relation
(nonscalar) types, and contains every relation value that could possibly
exist.  A C<Relation> is analogous to a set of 0..N tuples where all tuples
have the same heading (the degrees match and all attribute names and
corresponding declared data types match), but that a C<Relation> data type
still has its own corresponding heading (attribute names and declared data
types) even when it consists of zero tuples.  Its default value is the
zero-tuple value of the sole relation data type that has zero attributes.
Matters of its cardinality are generally the same as for C<Tuple>.  A
relation data type can also have (unique) keys each defined over a subset
of its attributes, which constrain its set of values relative to there
being no explicit keys, but having the keys won't turn an infinite relation
type into a finite one.

=item C<sys.type.Set>

A C<Set> is a proper subtype of C<Relation> that has 1 attribute, and its
name is C<value>; it can be of any declared type.  A C<Set> subtype is
normally used by any system-defined N-ary operators where the order of
their argument elements or result is not significant, and that duplicate
values are not significant.  Its default value has zero tuples.

=item C<sys.type.Maybe>

A C<Maybe> is a proper subtype of C<Set> that may have at most one element;
that is, it is a unary C<Relation> with a nullary key.  Operators that work
specifically with C<Maybe> subtypes can provide a syntactic shorthand for
working with sparse data; so Muldis D has something which is conceptually
close to SQL's nullable types without actually having 3-valued logic; it
would probably be convenient for code that round-trips SQL by way of
Muldis D to use the C<Maybe> type.  Its default value has zero tuples.

=item C<sys.type.Seq>

An C<Seq> is a proper subtype of C<Relation> that has 2 attributes,
and their names are C<index> and C<value>, where C<index> is a unary key
and its declared type is an C<UInt> subtype (C<value> can be non-unique and
of any declared type).  A Seq is considered dense, and all C<index>
values in one are numbered consecutively from 0 to 1 less than the count of
tuples, like array indices in typical programming languages.  A C<Seq>
subtype is normally used by any system-defined N-ary operators where the
order of their argument elements or result is significant (and duplicate
values are significant); specifically, C<index> defines an explicit
ordering for C<values>.  Its default value has zero tuples.

=item C<sys.type.Bag>

A C<Bag> is a proper subtype of C<Relation> that has 2 attributes, and
their names are C<value> and C<count>, where C<value> is a unary key (that
can have any declared type) and C<count> is a C<PInt> subtype.  A C<Bag>
subtype is normally used by any system-defined N-ary operators where the
order of their argument elements or result is not significant, but that
duplicate values are significant; specifically, C<count> defines an
explicit count of occurrences for C<values>.  Its default value has zero
tuples.

=back

=head1 SYSTEM-DEFINED CORE QUASI-NONSCALAR PARAMETERIZED DATA TYPES

These quasi-nonscalar incomplete data type definitions correspond to their
similarly-named (differing only by the C<Quasi>) nonscalar data types, and
their use is intended to be limited to the few situations where the
corresponding nonscalar data types can't be used.  It should be noted in
particular that there is no "QuasiDatabase" type, since all normal data or
catalog databases should be composed of normal relations only; but all of
the other nonscalar incomplete types have counterparts here.

=over

=item C<sys.type.QuasiTuple>

A C<QuasiTuple> is like a C<Tuple> but that the declared types of its
attributes can be anything at all.  Its cardinality is infinite.

=item C<sys.type.QuasiRelation>

A C<QuasiRelation> is like a C<Relation> but that the declared types of its
attributes can be anything at all.  Its cardinality is infinite.

=item C<sys.type.QuasiSet>

A C<QuasiSet> is a proper subtype of C<QuasiRelation> in the corresponding
manner to C<Set> being a proper subtype of C<Relation>.  Its cardinality is
infinite.

=item C<sys.type.QuasiMaybe>

A C<QuasiMaybe> is a proper subtype of C<QuasiRelation> in the
corresponding manner to C<Maybe> being a proper subtype of C<Relation>.
Its cardinality is infinite.

=item C<sys.type.QuasiSeq>

A C<QuasiSeq> is a proper subtype of C<QuasiRelation> in the corresponding
manner to C<Seq> being a proper subtype of C<Relation>.  Its cardinality is
infinite.

=item C<sys.type.QuasiBag>

A C<QuasiBag> is a proper subtype of C<QuasiRelation> in the corresponding
manner to C<Bag> being a proper subtype of C<Relation>.  Its cardinality is
infinite.

=back

=head1 SYSTEM-DEFINED GENERIC UNIVERSAL FUNCTIONS

These functions are applicable to values of any data type at all.

=over

=item C<sys.rtn.Universal.equal (RO: Some.Universal $v1, Some.Universal
$v2)>

This function results in C<Bool:true> iff its 2 arguments are exactly the
same value, and C<Bool:false> otherwise.  This function's arguments must be
of compatible declared types; in this case, 2 declared types are compatible
iff at least one of the following is true: 1. they are both subtypes of a
common scalar root type; 2. they are both subtypes of a common
non-incomplete tuple or relation type, that is they essentially have the
same headings; 3. at least one type is a generic (eg-C<Universal>) or
incomplete (eg-C<Seq>) type, and it is a supertype of the other.  This
function is commutative.

=item C<sys.rtn.Universal.not_equal (RO: Some.Universal $v1, Some.Universal
$v2)>

This function is exactly the same as C<sys.rtn.Universal.equal> except that
it results in the opposite boolean value when given the same arguments.

=back

=head1 SYSTEM-DEFINED GENERIC UNIVERSAL UPDATE OPERATORS

These update operators are applicable to values of any data type at all.

=over

=item C<sys.rtn.Universal.assign (UPD: Some.Universal $target ; RO:
Some.Universal $v)>

This update operator will update the variable supplied as its C<$target>
argument so that it holds the value supplied as its C<$v> argument.  This
update operator's arguments must be of compatible declared types; in this
case, C<$v> must be a subtype of C<$target>.

=back

=head1 SYSTEM-DEFINED GENERIC ORDINAL FUNCTIONS

These functions are applicable to values of any data type which is a
subtype of C<Ordinal>.  They provide a common syntax for sort-related
functionality, though technically every type having these functions is
re-implementing its own version.  If values of an ordinal data type can
conceivably be sorted using multiple criteria (such as different text
collations), then these functions just represent the default criteria; any
additional criteria are represented by additional functions declared for
just the types they apply to.

=over

=item C<sys.rtn.Ordinal.compare of Order (RO: Some.Ordinal $v1,
Some.Ordinal $v2)>

This function results in C<Order:same> iff its 2 arguments are exactly the
same value, and otherwise it results in C<Order:increase> if the value of
the C<$v2> argument is considered to be an increase (as defined by the
type) over the value of the C<$v1> argument, and otherwise it results in
C<Order:decrease> as the reverse of the last condition would be true.  This
function's arguments must be of compatible declared types; in this case, 2
declared types are compatible iff they are both subtypes of a common scalar
type that declares itself an C<Ordinal> subtype.  Note that C<compare> is
considered the only fundamental ordinal-specific operator, and all others
are defined over it.

=item C<sys.rtn.Ordinal.reverse_compare of Order (RO: Some.Ordinal $v1,
Some.Ordinal $v2)>

This function is exactly the same as C<sys.rtn.Ordinal.compare> except that
it results in the reverse value when given the same arguments.  It is a
short-hand for applying C<sys.rtn.Order.reverse> to the result of
C<sys.rtn.Ordinal.compare> with the same arguments.

=item C<sys.rtn.Ordinal.is_increase of Bool (RO: Some.Ordinal $v1,
Some.Ordinal $v2)>

This function results in C<Bool:true> iff C<sys.rtn.Ordinal.compare> would
result in C<Order:increase> when given the same arguments, and
C<Bool:false> otherwise.

=item C<sys.rtn.Ordinal.is_decrease of Bool (RO: Some.Ordinal $v1,
Some.Ordinal $v2)>

This function results in C<Bool:true> iff C<sys.rtn.Ordinal.compare> would
result in C<Order:decrease> when given the same arguments, and
C<Bool:false> otherwise.

=item C<sys.rtn.Ordinal.min of Maybe{Some.Ordinal} (RO: Set{Some.Ordinal}
$v)>

This function is a reduction operator that recursively takes each pair of
its N input element values and picks the minimum of the 2 (a process which
is both commutative and associative) until just one is left, a C<Maybe>
whose single element is which is the function's result.  If C<$v> has zero
values, then C<min> results in a same-typed C<Maybe> with zero elements.
I<Note that, while C<min> could conceivably have been defined instead to
not result in a C<Maybe>, but rather to result in the appropriate ordinal
type's concept of negative infinity, this option is avoided for now citing
practical concerns in the face of infinite (especially non-numeric) types.>

=item C<sys.rtn.Ordinal.max of Maybe{Some.Ordinal} (RO: Set{Some.Ordinal}
$v)>

This function is exactly the same as C<sys.rtn.Ordinal.max> except that it
results in the maximum input element value rather than the minimum one.

=back

=head1 SYSTEM-DEFINED CORE SCALAR FUNCTIONS

These functions are applicable to just one or more specific system-defined
core scalar data type.

=head2 Functions for sys.type.Bool

These functions select values of the C<Bool> enumeration.

=over

=item C<sys.rtn.Bool.false of Bool ()>

This selector function results in the C<Bool:false> value.

=item C<sys.rtn.Bool.true of Bool ()>

This selector function results in the C<Bool:true> value.

=back

These functions implement commonly used boolean operations.

=over

=item C<sys.rtn.Bool.not of Bool (RO: Bool $v)>

This function results in the logical I<not> of its argument.

=item C<sys.rtn.Bool.and of Bool (RO: Set{Bool} $v)>

This function is a reduction operator that recursively takes each pair of
its N input element values and does a logical I<and> (which is both
commutative and associative) on them until just one is left, which is the
function's result.  If C<$v> has zero values, then C<and> results in
C<Bool:true>, which is the identity value for logical I<and>.

=item C<sys.rtn.Bool.or of Bool (RO: Set{Bool} $v)>

This function is a reduction operator that recursively takes each pair of
its N input element values and does a logical inclusive-or (which is both
commutative and associative) on them until just one is left, which is the
function's result.  If C<$v> has zero values, then C<or> results in
C<Bool:false>, which is the identity value for logical inclusive-or.

=item C<sys.rtn.Bool.xor of Bool (RO: Bag{Bool} $v)>

This function is a reduction operator that recursively takes each pair of
its N input element values and does a logical exclusive-or (which is both
commutative and associative) on them until just one is left, which is the
function's result.  If C<$v> has zero values, then C<xor> results in
C<Bool:false>, which is the identity value for logical exclusive-or.

=back

=head2 Functions for sys.type.Order

These functions select values of the C<Order> enumeration.

=over

=item C<sys.rtn.Order.increase of Order ()>

This selector function results in the C<Order:increase> value.

=item C<sys.rtn.Order.same of Order ()>

This selector function results in the C<Order:same> value.

=item C<sys.rtn.Order.decrease of Order ()>

This selector function results in the C<Order:decrease> value.

=back

These functions implement commonly used order-enumeration operations.

=over

=item C<sys.rtn.Order.reverse of Order (RO: Order $v)>

This function results in the reverse value of its argument; an
C<Order:increase> or C<Order:decrease> argument results in the other one of
the two; an C<Order:same> argument results in C<Order:same>.

=back

=head2 Functions for sys.type.Int

These functions implement commonly used integer operations.

=over

=item C<sys.rtn.Int.sum of Int (RO: Bag{Int} $addends)>

This function results in the sum of the N element values of its argument;
it is a reduction operator that recursively takes each pair of input values
and adds (which is both commutative and associative) them together until
just one is left, which is the result.  If C<$addends> has zero values,
then C<sum> results in the integer zero, which is the identity value for
addition.

=item C<sys.rtn.Int.difference of Int (RO: Int $minuend, Int $subtrahend)>

This function results in the difference when its C<$subtrahend> argument is
subtracted from its C<$minuend> argument.

=item C<sys.rtn.Int.product of Int (RO: Bag{Int} $factors)>

This function results in the product of the N element values of its
argument; it is a reduction operator that recursively takes each pair of
input values and multiplies (which is both commutative and associative)
them together until just one is left, which is the result.  If C<$factors>
has zero values, then C<product> results in the integer 1, which is the
identity value for multiplication.

=item C<sys.rtn.Int.quotient of Int (RO: Int $dividend, Int $divisor)>

This function results in the quotient when its C<$dividend> argument is
divided by its C<$divisor> argument using integer division.  This function
will fail if C<$divisor> is zero.

=item C<sys.rtn.Int.remainder of UInt (RO: Int $dividend, Int $divisor)>

This function results in the remainder when its C<$dividend> argument is
divided by its C<$divisor> argument using integer division.  This function
will fail if C<$divisor> is zero.

=item C<sys.rtn.Int.abs of UInt (RO: Int $v)>

This function results in the absolute value of its argument.

=item C<sys.rtn.Int.power of Int (RO: Int $radix, PInt $exponent)>

This function results in its C<$radix> argument taken to the power of its
(positive integer) C<$exponent> argument.

=back

These functions convert between C<Int> values and canonically formatted
representations of integers as character strings.

=over

=item C<sys.rtn.Int.Int_from_Text of Int (RO: NEText $text, PInt2_36
$radix)>

This selector function results in the C<Int> value that its C<$text>
argument maps to when the whole character string is evaluated as a
base-C<$radix> integer.  Extending the typical formats of [base-2, base-8,
base-10, base-16], this function supports base-2 through base-36; to get
the latter, the characters 0-9 and A-Z represent values in 0-35.  This
function will fail if C<$text> can't be mapped as specified.

=item C<sys.rtn.Int.Text_from_Int of NEText (RO: Int $int, PInt2_36
$radix)>

This selector function results in the C<Text> value where its C<$int>
argument is formatted as a base-C<$radix> integer.

=back

These functions convert between C<Int> values and canonically formatted
representations of integers as binary strings.  I<Conjecture: These may not
actually be useful, and perhaps only operators that take an argument
specifying a fixed-length field size, with big and little endian versions,
would be appropriate instead.  Or maybe both kinds are necessary.>

=over

=item C<sys.rtn.Int.Int_from_Blob_S_VBE of Int (RO: NEBlob $blob)>

This selector function results in the C<Int> value that its C<$blob>
argument maps to when the whole bit string is treated literally as a
variable-length binary (two's complement) signed integer of 1 or more bits
in length.  The first bit is taken as the sign bit, and any other bits
provide greater precision than the -1 thru 0 range.  The bit string is
assumed to be big-endian, since it may not be possible to use little-endian
in situations where the bit length isn't a multiple of 8.

=item C<sys.rtn.Int.Blob_S_VBE_from_Int of NEBlob (RO: Int $int)>

This selector function results in the C<Blob> value where its C<$int>
argument is formatted as a variable-length binary (two's complement) signed
integer of 1 or more bits in length; the smallest number of bits necessary
to store C<$int> is used.

=item C<sys.rtn.Int.Int_from_Blob_U_VBE of UInt (RO: NEBlob $blob)>

This function is the same as C<sys.rtn.Int.Int_from_Blob_S_VBE> but that it
does unsigned integers.

=item C<sys.rtn.Int.Blob_U_VBE_from_Int of UInt (RO: NEBlob $blob)>

This function is the same as C<sys.rtn.Int.Blob_S_VBE_from_Int> but that it
does unsigned integers.

=back

=head2 Functions for sys.type.Blob

These functions implement commonly used binary string operations.

=over

=item C<sys.rtn.Blob.catenate of Blob (RO: Seq{Blob} $v)>

This function results in the catenation of the N element values of its
argument; it is a reduction operator that recursively takes each
consecutive pair of input values and catenates (which is associative) them
together until just one is left, which is the result.  If C<$v> has zero
values, then C<catenate> results in the empty string value, which is the
identity value for catenate.

=item C<sys.rtn.Blob.repeat of Blob (RO: Blob $v, UInt $count)>

This function results in the catenation of C<$count> instances of C<$v>.

=item C<sys.rtn.Blob.length_in_bits of UInt (RO: Blob $v)>

This function results in the length of its argument in bits.

=item C<sys.rtn.Blob.contains of Bool (RO: Blob $look_in, Blob $look_for,
Bool $fixed_start, Bool $fixed_end)>

This function results in C<Bool:true> iff its C<$look_for> argument is a
substring of its C<$look_in> argument as per the optional C<$fixed_start>
and C<$fixed_end> constraints, and C<Bool:false> otherwise.  If
C<$fixed_start> or C<$fixed_end> are C<Bool:true>, then C<$look_for> must
occur right at the start or end, respectively, of C<$look_in> in order for
C<contains> to results in C<Bool:true>; if either flag is C<Bool:false>,
its additional constraint doesn't apply.

=item C<sys.rtn.Blob.not of Blob (RO: Blob $v)>

This function results in the bitwise I<not> of its argument.

=item C<sys.rtn.Blob.and of Maybe{Blob} (RO: Set{Blob} $v)>

This function is a reduction operator that recursively takes each pair of
its N input element values and does a bitwise I<and> (which is both
commutative and associative) on them until just one is left, a C<Maybe>
whose single element is which is the function's result.  This function will
fail if not all input values are of the same length in bits.  If C<$v> has
zero values, then C<and> results in a same-typed C<Maybe> with zero
elements.  I<Note that, while C<and> could conceivably have been defined
instead to not result in a C<Maybe>, but rather to result in the
appropriate string of identity-valued bits, this option is avoided for now
citing practical concerns in the face of infinite blob types; also, a
default empty string result is being avoided.>

=item C<sys.rtn.Blob.or of Maybe{Blob} (RO: Set{Blob} $v)>

This function is a reduction operator that recursively takes each pair of
its N input element values and does a bitwise inclusive-or (which is both
commutative and associative) on them until just one is left, a C<Maybe>
whose single element is which is the function's result.  This function will
fail if not all input values are of the same length in bits.  If C<$v> has
zero values, then C<or> results in a same-typed C<Maybe> with zero
elements.  I<The note for C<and> applies to C<or> too.>

=item C<sys.rtn.Blob.xor of Maybe{Blob} (RO: Bag{Blob} $v)>

This function is a reduction operator that recursively takes each pair of
its N input element values and does a bitwise exclusive-or (which is both
commutative and associative) on them until just one is left, a C<Maybe>
whose single element is which is the function's result.  This function will
fail if not all input values are of the same length in bits.  If C<$v> has
zero values, then C<xor> results in a same-typed C<Maybe> with zero
elements.  I<The note for C<and> applies to C<xor> too.>

=back

These functions convert between C<Blob> values and canonically formatted
representations of binary strings as character strings.

=over

=item C<sys.rtn.Blob.Blob_from_Text_2 of Blob (RO: Text $text)>

This selector function results in the C<Blob> value that its argument maps
to when each input character is a [0-1] and represents a bit.

=item C<sys.rtn.Blob.Text_from_Blob_2 of Text (RO: Blob $blob)>

This selector function results in the C<Text> value where its argument is
encoded using a [0-1] character for each bit.

=item C<sys.rtn.Blob.Blob_from_Text_16 of Blob (RO: Text $text)>

This selector function results in the C<Blob> value that its argument maps
to when each input character is a [0-9A-F] and represents a hex digit.

=item C<sys.rtn.Blob.Text_from_Blob_16 of Text (RO: Blob $blob)>

This selector function results in the C<Text> value where its argument is
encoded using a [0-9A-F] character for each bit.

=back

=head2 Functions for sys.type.Text

These functions implement commonly used character string operations.

=over

=item C<sys.rtn.Text.catenate of Text (RO: Seq{Text} $v)>

This function results in the catenation of the N element values of its
argument; it is a reduction operator that recursively takes each
consecutive pair of input values and catenates (which is associative) them
together until just one is left, which is the result.  If C<$v> has zero
values, then C<catenate> results in the empty string value, which is the
identity value for catenate.

=item C<sys.rtn.Text.repeat of Text (RO: Text $v, UInt $count)>

This function results in the catenation of C<$count> instances of C<$v>.

=item C<sys.rtn.Text.length_in_nfd_graphs of UInt (RO: Text $v)>

This function results in the length of its argument in Unicode
Normalization Form D graphemes.

=item C<sys.rtn.Text.length_in_nfc_graphs of UInt (RO: Text $v)>

This function results in the length of its argument in Unicode
Normalization Form C graphemes.

=item C<sys.rtn.Text.length_in_nfd_codes of UInt (RO: Text $v)>

This function results in the length of its argument in Unicode
Normalization Form D code points.

=item C<sys.rtn.Text.length_in_nfc_codes of UInt (RO: Text $v)>

This function results in the length of its argument in Unicode
Normalization Form C code points.

=item C<sys.rtn.Text.contains of Bool (RO: Text $look_in, Text $look_for,
Bool $fixed_start, Bool $fixed_end)>

This function results in C<Bool:true> iff its C<$look_for> argument is a
substring of its C<$look_in> argument as per the optional C<$fixed_start>
and C<$fixed_end> constraints, and C<Bool:false> otherwise.  If
C<$fixed_start> or C<$fixed_end> are C<Bool:true>, then C<$look_for> must
occur right at the start or end, respectively, of C<$look_in> in order for
C<contains> to result in C<Bool:true>; if either flag is C<Bool:false>, its
additional constraint doesn't apply.

=item C<sys.rtn.Text.fold_case_to_upper (RO: Text $v)>

This function results in the transformation of its argument where any Latin
letters are folded to (capital) uppercase.

=item C<sys.rtn.Text.fold_case_to_lower (RO: Text $v)>

This function results in the transformation of its argument where any Latin
letters are folded to (small) lowercase.

=item C<sys.rtn.Text.trim_whitespace (RO: Text $v)>

This function results in the value of its argument but that any leading or
trailing whitespace characters are trimmed.

=back

=head1 SYSTEM-DEFINED CORE SCALAR UPDATE OPERATORS

These update operators are applicable to just one or more specific
system-defined core scalar data type.

I<This documentation is pending.>

=head1 SYSTEM-DEFINED CORE SCALAR SYSTEM SERVICES

These system services are applicable to just one or more specific
system-defined core scalar data type.

I<This documentation is pending.>

=head1 SYSTEM-DEFINED CORE GENERIC NONSCALAR FUNCTIONS

These functions are applicable to mainly nonscalar types, but are generic
in that they typically work with any nonscalar types.

=head2 Functions for sys.type.Tuple

These functions implement commonly used relational operations that take a
single tuple as input.

=over

=item C<sys.rtn.Tuple.degree of UInt (RO: Tuple $v)>

This function results in the degree of its argument (that is, the count of
attributes it has).

=item C<sys.rtn.Tuple.rename of Tuple (RO: Tuple $v, Cat.AttrRenameMap
$map)>

This function results in a C<Tuple> value that is the same as its C<$v>
argument but that some of its attributes have different names.  Each tuple
of the argument C<$map> specifies how to rename one C<$v> attribute, with
the C<before> and C<after> attributes of a C<$map> tuple representing the
old and new names of a C<$v> attribute, respectively.  As a trivial case,
this function's result is C<$v> if C<$map> has no tuples.  This function
supports renaming attributes to each others' names.  This function will
fail if C<$map> specifies any old names that C<$v> doesn't have, or any new
names that are the same as C<$v> attributes that aren't being renamed.

=item C<sys.rtn.Tuple.project of Tuple (RO: Tuple $v, Cat.ShortNameSet
$attrs)>

This function results in the projection of its C<$v> argument that has just
the subset of attributes of C<$v> which are named in its C<$attrs>
argument.  As a trivial case, this function's result is C<$v> if C<$attrs>
lists all attributes of C<$v>; or, it is the nullary tuple if C<$attrs> is
empty.  This function will fail if C<$attrs> specifies any attribute names
that C<$v> doesn't have.

=item C<sys.rtn.Tuple.remove of Tuple (RO: Tuple $v, Cat.ShortNameSet
$attrs)>

This function is the same as C<project> but that it results in the
complementary subset of attributes of C<$v> when given the same arguments.

=item C<sys.rtn.Tuple.wrap of Tuple (RO: Tuple $v, Cat.ShortNameSet $inner,
Cat.ShortName $outer)>

This function results in a C<Tuple> value that is the same as its C<$v>
argument but that some of its attributes have been wrapped up into a new
C<Tuple>-typed attribute, which exists in place of the original attributes.
The C<$inner> argument specifies which C<$v> attributes are to be removed
and wrapped up, and the C<$outer> argument specifies the name of their
replacement attribute.  As a trivial case, if C<$inner> is empty, then the
result has all the same attributes as before plus a new nullary tuple
attribute; or, if C<$inner> lists all attributes of C<$v>, then the result
has a single attribute whose value is the same as C<$v>.  This function
supports the new attribute having the same name as an old one being wrapped
into it.  This function will fail if C<$inner> specifies any attribute
names that C<$v> doesn't have, or if C<$outer> is the same as C<$v>
attributes that aren't being wrapped.

=item C<sys.rtn.Tuple.unwrap of Tuple (RO: Tuple $v, Cat.ShortName $outer)>

This function is the inverse of C<sys.rtn.Tuple.wrap>, such that it will
unwrap a C<Tuple>-type attribute into its member attributes.  This function
will fail if C<$outer> specifies any attribute name that C<$v> doesn't
have, or if an attribute of C<$v{$outer}> is the same as a C<$v> attribute.

=item C<sys.rtn.Tuple.extend>

I<TODO.>

=back

=head2 Functions for sys.type.Relation

These functions implement commonly used relational operations that take a
single relation as input.

=over

=item C<sys.rtn.Relation.degree of UInt (RO: Relation $v)>

This function results in the degree of its argument (that is, the count of
attributes it has).

=item C<sys.rtn.Relation.cardinality of UInt (RO: Relation $v)>

This function results in the cardinality of its argument (that is, the
count of tuples its body has).

=item C<sys.rtn.Relation.empty of Bool (RO: Relation $v)>

This function results in C<Bool:true> iff its argument has zero tuples, and
C<Bool:false> otherwise.  Note that if you are using a C<Maybe> to
represent a sparse data item, analagously to a SQL nullable context, then
testing the C<Maybe> with C<empty> is analagous to testing a SQL nullable
with C<is null>.

=item C<sys.rtn.Relation.not_empty of Bool (RO: Relation $v)>

This function is exactly the same as C<sys.rtn.Relation.empty> except that
it results in the opposite boolean value when given the same argument.  And
following the analogy with C<empty>, C<not_empty> is analagous to SQL's
C<is not null>.

=item C<sys.rtn.Relation.exists of Bool (RO: Relation $r, Tuple $t)>

This function results in C<Bool:true> iff its C<$t> argument matches a
tuple of its C<$r> argument, and C<Bool:false> otherwise.  This function is
like C<sys.rtn.Relation.contains> except that the tuple being looked for
doesn't have to be wrapped in a relation.  This function will fail if the 2
arguments don't have the same heading.

=item C<sys.rtn.Relation.Tuple_from_Relation of Tuple (RO: Relation $v)>

This function results in the C<Tuple> that is the sole member tuple of its
argument.  This function will fail if its argument does not have exactly
one tuple.

=item C<sys.rtn.Relation.Relation_from_Tuple of Relation (RO: Tuple $v)>

This function results in the C<Relation> value those body has just the one
C<Tuple> that is its argument.

=item C<sys.rtn.Relation.insert of Relation (RO: Relation $r, Tuple $t)>

This function results in a C<Relation> that is the relational union of
C<$r> and a relation whose sole tuple is C<$t>; that is, conceptually the
result is C<$t> inserted into C<$r>.  As a trivial case, if C<$t> already
exists in C<$r>, then the result is just C<$r>.

=item C<sys.rtn.Relation.delete of Relation (RO: Relation $r, Tuple $t)>

This function results in a C<Relation> that is the relational difference of
a relation whose sole tuple is C<$t> and C<$r>; that is, conceptually the
result is C<$t> deleted from C<$r>.  As a trivial case, if C<$t> already
doesn't exist in C<$r>, then the result is just C<$r>.

=item C<sys.rtn.Relation.evacuate of Relation (RO: Relation $v)>

This function results in a C<Relation> that has the same heading as its
argument, but with an empty body.

=item C<sys.rtn.Relation.rename of Relation (RO: Relation $v,
Cat.AttrRenameMap $map)>

This function is the same as C<sys.rtn.Tuple.rename> but that it operates
on and results in a C<Relation> rather than a C<Tuple>.

=item C<sys.rtn.Relation.project of Relation (RO: Relation $v,
Cat.ShortNameSet $attrs)>

This function is the same as C<sys.rtn.Tuple.project> but that it operates
on and results in a C<Relation> rather than a C<Tuple>.  But note that the
result relation will have fewer tuples than C<$v> if any C<$v> tuples were
non-distinct for just the projected attributes.

=item C<sys.rtn.Relation.remove of Relation (RO: Relation $v,
Cat.ShortNameSet $attrs)>

This function is the same as C<sys.rtn.Tuple.remove> but that it operates
on and results in a C<Relation> rather than a C<Tuple>.

=item C<sys.rtn.Relation.wrap of Relation (RO: Relation $v,
Cat.ShortNameSet $inner, Cat.ShortName $outer)>

This function is the same as C<sys.rtn.Tuple.wrap> but that it operates on
and results in a C<Relation> rather than a C<Tuple>, where each of its
member tuples was transformed as per C<sys.rtn.Tuple.wrap>.

=item C<sys.rtn.Relation.unwrap of Relation (RO: Relation $v, Cat.ShortName
$outer)>

This function is the inverse of C<sys.rtn.Relation.wrap> as
C<sys.rtn.Tuple.unwrap> is to C<sys.rtn.Tuple.wrap>.

=item C<sys.rtn.Relation.group of Relation (RO: Relation $v,
Cat.ShortNameSet $inner, Cat.ShortName $outer)>

I<TODO.>

=item C<sys.rtn.Relation.ungroup of Relation (RO: Relation $v,
Cat.ShortName $outer)>

I<TODO.>

=item C<sys.rtn.Relation.tclose of Relation (RO: Relation $v)>

This function results in the transitive closure of its argument.  The
argument is a binary relation whose attributes are both of the same
declared type, and the result is a relation having the same heading and a
body which is a superset of the argument's tuples.  Assuming that the
argument represents all of the node pairs in a directed graph that have an
arc between them, and so each argument tuple represents an arc, C<tclose>
will determine all of the node pairs in that graph which have a path
between them (a recursive operation), so each tuple of the result
represents a path.  The result is a superset since all arcs are also
complete paths.  The C<tclose> function is intended to support recursive
queries, such as in connection with the "part explosion problem" (the
problem of finding all components, at all levels, of some specified part).

=item C<sys.rtn.Relation.restrict>

I<TODO.>

=item C<sys.rtn.Relation.extend>

I<TODO.>

=item C<sys.rtn.Relation.summarize>

I<TODO.>

=item C<sys.rtn.Relation.substitute>

I<TODO.>

=back

These functions implement commonly used relational operations that take a
multiple relations as input.

=over

=item C<sys.rtn.Relation.contains of Bool (RO: Relation $look_in, Relation
$look_for)>

This function results in C<Bool:true> iff the set of tuples comprising
C<$look_for> is a subset of the set of tuples comprising C<$look_in>, and
C<Bool:false> otherwise.  This function will fail if the 2 arguments don't
have the same heading.

=item C<sys.rtn.Relation.union of Relation (RO: Set{Relation} $v)>

This function results in the relational union/inclusive-or of the N element
values of its argument; it is a reduction operator that recursively takes
each pair of input values and relationally unions (which is both
commutative and associative) them together until just one is left, which is
the result.  The result relation has the same heading as all of its inputs,
and its body contains every tuple that is in any of the input relations.
If C<$v> has zero values, then C<union> results in the empty relation with
the same heading, which is the per-distinct-heading identity value for
relational union.

=item C<sys.rtn.Relation.exclusion of Relation (RO: Bag{Relation} $v)>

This function results in the relational exclusion/exclusive-or of the N
element values of its argument; it is a reduction operator that recursively
takes each pair of input values and relationally excludes (which is both
commutative and associative) them together until just one is left, which is
the result.  The result relation has the same heading as all of its inputs,
and its body contains every tuple that is in just an odd number of the
input relations.  If C<$v> has zero values, then C<exclusion> results in
the empty relation with the same heading, which is the per-distinct-heading
identity value for relational exclusion.  Note that this operation is also
legitimately known as I<symmetric difference>, or I<disjoint union>.

=item C<sys.rtn.Relation.intersection of Relation (RO: Set{Relation} $v)>

This function results in the relational intersection/and of the N element
values of its argument; it is a reduction operator that recursively takes
each pair of input values and relationally intersects (which is both
commutative and associative) them together until just one is left, which is
the result.  The result relation has the same heading as all of its inputs,
and its body contains only the tuples that are in every one of the input
relations.  If C<$v> has zero values, then C<union> results in the empty
relation with the same heading, which is the per-distinct-heading identity
value for relational intersection.  Note that this I<intersection> operator
is conceptually a special case of C<join>, applicable when the headings of
the inputs are the same, and the other will produce the same result as this
when given the same inputs, but with the exception that I<intersection> has
a different identity value when given zero inputs.

=item C<sys.rtn.Relation.difference of Relation (RO: Relation $source,
Relation $filter)>

This function results in the relational difference when its C<$filter>
argument is subtracted from its C<$source> argument.  The result relation
has the same heading as both of its arguments, and its body contains only
the tuples that are in C<$source> and are not in C<$filter>.  This function
will fail if its 2 arguments do not have the same heading.  Note that this
I<difference> operator is conceptually a special case of I<semidifference>,
applicable when the headings of the inputs are the same.

=item C<sys.rtn.Relation.semidifference of Relation (RO: Relation $source,
Relation $filter)>

This function is the same as C<semijoin> but that it results in the
complementary subset of tuples of C<$source> when given the same arguments.

=item C<sys.rtn.Relation.semijoin of Relation (RO: Relation $source,
Relation $filter)>

This function results in the relational semijoin of its C<$source> and
C<$filter> arguments.  The result relation has the same heading as
C<$source>, and its body contains the subset of C<$source> tuples that
match those of C<$filter> as per C<join>.  Note that relational semijoin is
conceptually a short-hand for first doing an ordinary relational join
between its 2 arguments, and then performing a relational projection on all
of the attributes that just C<$source> has.  This function will fail any
time that C<join> would fail on the same 2 input relations.

=item C<sys.rtn.Relation.join of Relation (RO: QuasiSet{Relation} $v)>

This function results in the relational join of the N element values of its
argument; it is a reduction operator that recursively takes each pair of
input values and relationally joins (which is both commutative and
associative) them together until just one is left, which is the result. The
result relation has a heading that is a union of all of the headings of its
inputs, and its body is the result of first pairwise-matching every tuple
of each input relation with every tuple of each other input relation, then
where each member of a tuple pair has attribute names in common,
eliminating pairs where the values of those attributes differ and unioning
the remaining said tuple pairs, then eliminating any result tuples that
duplicate others.  If C<$v> has zero values, then C<join> results in the
nullary relation with one tuple, which is the identity value for relational
join.  As a trivial case, if any input relation has zero tuples, then the
function's result will too; or, if any input is the nullary relation with
one tuple, that input can be ignored (see identity value); or, if any 2
inputs have no attribute names in common, then the join of just those 2 is
a cartesian product; or, if any 2 inputs have all attribute names in
common, then the join of just those 2 is an intersection; or, if for 2
inputs, one's set of attribute names is a proper subset of another's, then
the join of just those to is a semijoin with the former filtering the
latter.  This function will fail if any input relations have attributes
with common names but different/incompatible declared types.  Note that
this operation is also legitimately known as I<natural inner join>.

=item C<sys.rtn.Relation.compose of Relation (RO: Relation $v1, Relation
$v2)>

This function results in the relational composition of its 2 arguments.  It
is conceptually a short-hand for first doing an ordinary relational join
between its 2 arguments, and then performing a relational projection on all
of the attributes that only one of the arguments has; that is, the result
has all of and just the attributes that were not involved in matching the
tuples of the 2 arguments.  This function will fail any time that C<join>
would fail on the same 2 input relations.

=item C<sys.rtn.Relation.divide>

I<TODO.>

=back

=head1 SYSTEM-DEFINED CORE GENERIC NONSCALAR UPDATE OPERATORS

These update operators are applicable to mainly nonscalar types, but are
generic in that they typically work with any nonscalar types.

=head1 SYSTEM-DEFINED CORE GENERIC QUASI-NONSCALAR FUNCTIONS

I<This documentation is pending.>

=head1 SYSTEM-DEFINED CORE GENERIC QUASI-NONSCALAR UPDATE OPERATORS

I<This documentation is pending.>

=head1 SEE ALSO

Go to L<Muldis::DB> for the majority of distribution-internal references,
and L<Muldis::DB::SeeAlso> for the majority of distribution-external
references.

=head1 AUTHOR

Darren Duncan (C<perl@DarrenDuncan.net>)

=head1 LICENSE AND COPYRIGHT

This file is part of the Muldis::DB framework.

Muldis::DB is Copyright © 2002-2007, Darren Duncan.

See the LICENSE AND COPYRIGHT of L<Muldis::DB> for details.

=head1 ACKNOWLEDGEMENTS

The ACKNOWLEDGEMENTS in L<Muldis::DB> apply to this file too.

=cut
