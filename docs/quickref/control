Subroutines

    Whitespace matters

        foo 42;           # calls &foo, one positional argument (number 42)
        foo(42);          # same, the parens are subcall parens (postfix .())
        foo (42);         # same, but the parens are grouping parens

        foo 42, 23;       # two positional arguments (42 and 23)
        foo(42, 23);      # same

        foo (42, 23);     # one positional argument (the array (42, 23))

    Parentheses matter

        foo bar => 42;    # one named argument (42)
        foo :bar(42);     # same
        foo(bar => 42);   # same
        foo(:bar(42));    # same

        foo (bar => 42);  # one positional argument (the pair (bar => 42))
        foo (:bar(42));   # same

    Splatting

        foo $pair;        # one positional argument ($pair)
        foo *$pair;       # one named argument
                          # ($pair.value passed by the name $pair.key)

        foo @array;       # one positional argument (the array @array)
        foo *@array;      # many positional arguments
                          # (@array's contents are passed positionally)

        foo %hash;        # one positional argument (the hash %hash)
        foo *%hash;       # many named arguments
                          # (%hash.values are passed by the names %hash.keys)

Loop Structures

    loop { ... };
    loop { ... } while EXPR;
    loop { ... } until EXPR;
    loop $i = 0; $i < 10; $i++ { ... }
    
    while EXPR { ... }
    until EXPR { ... }
    
For Loop structures

    for @foo { ... }
    for @foo -> $x { ... }
    for @foo -> $x, $y, $x { ... }
    for @foo.kv -> $index, $value { ... }
    
    for %hash.kv -> $key, $value { ... }
    
    for =<> {...} # was while (<>) { ... } in p5
    
Switch/Case style control elements

    given $x { ... }   # $x is now topic for block
    when EXPR { ... }  # perform $_ ~~ EXPR execute block and break
    default { ... }    # same as when true { ... }    

Closure traits

    BEGIN { ... }      # Body executed at compile-time, as soon as possible
    CHECK { ... }      # Body executed at compile-time, as last as possible
    INIT  { ... }      # Body executed at runtime, as soon as possible
    END   { ... }      # Body executed at runtime, as last as possible
    FIRST { ... }      # Body only executed once

    sub foo {
      FIRST {
        # Initialize environment, e.g. create some files, etc.
      }

      ...;
    }
    foo();  # Runs initialization block
    foo();  # Does not run initialization block again
    foo();  # ditto
