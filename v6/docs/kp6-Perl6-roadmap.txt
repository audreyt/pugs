"KindaPerl6" --> "full 6-in-6" Roadmap

Phase I - bootstrap (MiniPerl6)

- definition of the minimal language for bootstrapping
- v6.pm improved/fixed in order to host the compiler
- compiler implemented 
- compiler self-hosted; we have one image that runs in Perl 5

- Bonus milestones

-- compile to a language supported by the Parrot VM
-- compile to a language supported by the JVM
-- compile to a standalone language, such as C, C++, D, Lisp
-- bootstrap in other language than Perl 5
-- have Perl6-in-parrot reuse parts of the MiniPerl6 architecture

Phase II - improved compiler architecture (KindaPerl6)

- Architecture

-- pluggable AST processors

- Semantics

-- lexical subs 
-- object metamodel
-- lexical classes
-- begin blocks
-- containers

- Bonus milestones

-- test suite
-- bootstrapped kp6
-- lazy containers
-- runtime written in Perl 6
-- improved usability; packaged for CPAN 

Phase III - ** under planning **

** no particular order, yet

- reorganize directories

- translate perl5 runtime to mp6?
- translate the compiler front-end to mp6
- test suite
- debugging
- minimal runtime
- bootstrap?
- plan Perl6-in-Perl6

- Bonus milestones

-- parse Perl6-STD
-- use Perl6-STD as the compiler grammar

Related Work

- Perl6-in-Parrot 
-- TGE and PGE
- Perl6-in-Haskell (Pugs)
-- Javascript and Perl5 backends
- v6.pm (Perl5 module)
-- "lrep" bootstrapping compiler
- Perl6-STD (official Perl 6 grammar)

