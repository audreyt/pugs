# Do not edit this file - Generated by MiniPerl6
use v5;
use strict;
use MiniPerl6::Perl5::Runtime;
use MiniPerl6::Perl5::Match;

package KindaPerl6::Visitor::Global;
sub new { shift; bless {@_}, "KindaPerl6::Visitor::Global" }

sub visit {
    my $self   = shift;
    my $List__ = \@_;
    my $node;
    my $node_name;
    do { $node = $List__->[0]; $node_name = $List__->[1]; [ $node, $node_name ] };
    do {
        if ( ( $node_name eq 'CompUnit' ) ) {
            do {
                if ( $node->body() ) { $node->body()->emit($self); return ($node) }
                else { }
                }
        }
        else { }
    };
    do {
        if ( ( $node_name eq 'Lit::Code' ) ) {
            COMPILER::put_pad( $node->pad() );
            my $stmt;
            do {
                for my $stmt ( @{ $node->body() } ) { $stmt->emit($self) }
            };
            COMPILER::drop_pad();
            return ($node);
        }
        else { }
    };
    do {
        if ( ( $node_name eq 'Var' ) ) {
            do {
                if ( COMPILER::current_pad()->declaration($node) ) { }
                else {
                    do {
                        if   ( ( ( $node->name() eq '/' ) || ( ( $node->name() eq '_' ) || ( ( $node->twigil() eq '.' ) || ( ( $node->sigil() eq '&' ) && ( $node->name() eq 'self' ) ) ) ) ) ) { }
                        else                                                                                                                                                                    { $node->namespace( ['GLOBAL'] ) }
                        }
                }
            };
            return ($node);
        }
        else { }
    };
    return ( (undef) );
}

1;
