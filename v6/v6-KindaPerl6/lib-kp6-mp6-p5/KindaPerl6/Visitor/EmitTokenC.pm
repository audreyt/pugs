# Do not edit this file - Generated by MiniPerl6
use v5;
use strict;
use MiniPerl6::Perl5::Runtime;
use MiniPerl6::Perl5::Match;
package KindaPerl6::Visitor::EmitTokenC;
sub new { shift; bless { @_ }, "KindaPerl6::Visitor::EmitTokenC" }
sub visit { my $self = shift; my $List__ = \@_; my $node; my $node_name; do {  $node = $List__->[0];  $node_name = $List__->[1]; [$node, $node_name] }; $node->emit_c() }


;
package Token;
sub new { shift; bless { @_ }, "Token" }
sub emit_c { my $self = shift; my $List__ = \@_; do { [] }; return(('match ' . ($self->{name} . (' (char *str,int str_len,int pos) {match m;m.match_str = str;m.from=pos;m.boolean = (' . ($self->{regex}->emit_c() . ');m.to = pos;return m;}'))))) }


;
package CompUnit;
sub new { shift; bless { @_ }, "CompUnit" }
sub emit_c { my $self = shift; my $List__ = \@_; do { [] }; $self->{body}->emit_c() }


;
package Lit::Code;
sub new { shift; bless { @_ }, "Lit::Code" }
sub emit_c { my $self = shift; my $List__ = \@_; do { [] }; Main::join([ map { $_->emit_c() } @{ $self->{body} } ], '') }


;
package Rule::Or;
sub new { shift; bless { @_ }, "Rule::Or" }
sub emit_c { my $self = shift; my $List__ = \@_; do { [] }; return(('({int saved_pos=pos;' . (Main::join([ map { $_->emit_c() } @{ $self->{or} } ], '||') . '|| (pos=saved_pos,0);})'))) }


;
package Rule::Concat;
sub new { shift; bless { @_ }, "Rule::Concat" }
sub emit_c { my $self = shift; my $List__ = \@_; do { [] }; return(('(' . (Main::join([ map { $_->emit_c() } @{ $self->{concat} } ], '&&') . ')'))) }


;
package Rule::Constant;
sub new { shift; bless { @_ }, "Rule::Constant" }
sub emit_c { my $self = shift; my $List__ = \@_; do { [] }; return(('(str_len >= pos + ' . (length($self->{constant}) . ('&& strncmp("' . ($self->{constant} . ('",str+pos,' . (length($self->{constant}) . (') == 0 && (pos += ' . (length($self->{constant}) . '))'))))))))) };
sub emit_perl5 { my $self = shift; my $List__ = \@_; do { [] }; ('{ ' . ($self->emit_declarations() . ($self->emit_body() . ' }'))) }


;
1;
