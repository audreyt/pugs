# !!! DO NOT EDIT !!!
# This file was generated by util/gen-rule-pmc.pl at Thu Jul  5 01:24:14 2007

package Pugs::Grammar::Rule;
use utf8;
no strict 'refs';
use Pugs::Runtime::Match;
use Pugs::Runtime::Regex;

our %rule_terms;
our %variables;
*pod_begin = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
           ( $pad{I1559} = $pos or 1 ) 
           && (
           (
              (   ( $pad{I1560} = $pos or 1 ) && 
               ( ( substr( $s, $pos ) =~ m/^((?:\n\r?|\r\n?))/ )  
                   ? ( $pos += length( $1 ) or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I1560} ) && 0 ) )
           &&
             ( ( substr( $s, $pos, 1 ) eq '=' ) 
                 ? ( $pos += 1 or 1 )
                 : 0
             )
           &&
             ( ( substr( $s, $pos, 1 ) eq 'e' ) 
                 ? ( $pos += 1 or 1 )
                 : 0
             )
           &&
             ( ( substr( $s, $pos, 1 ) eq 'n' ) 
                 ? ( $pos += 1 or 1 )
                 : 0
             )
           &&
              (   ( $pad{I1561} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 1 ) eq 'd' ) 
                   ? ( $pos += 1 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I1561} ) && 0 ) )
           &&
             do { while (
              (   ( $pad{I1562} = $pos or 1 ) && 
                 ( ( substr( $s, $pos ) =~ m/^((?!\n\r?|\r\n?).)/ )  
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I1562} ) && 0 ) )) {}; $bool = 1 }
           )
           ) 
         || ( 
           ( ( $bool = 1 ) && ( $pos = $pad{I1559} ) or 1 ) 
           &&            (
              (   ( $pad{I1563} = $pos or 1 ) && 
               ( substr( $s, $pos++, 1 ) ne '' ) ||    ( ( $pos = $pad{I1563} ) && 0 ) )
           &&
             do { while (
              (   ( $pad{I1564} = $pos or 1 ) && 
                 ( ( substr( $s, $pos ) =~ m/^((?!\n\r?|\r\n?).)/ )  
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I1564} ) && 0 ) )) {}; $bool = 1 }
           &&
              (   ( $pad{I1565} = $pos or 1 ) && 
               do { 
                    my $prior = $::_V6_PRIOR_; 
                    my $match = 
                           $grammar->pod_begin( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior; 
                    my $bool = (!$match != 1);
                    $pos = $match->to if $bool;
                    $match;
               } ||    ( ( $pos = $pad{I1565} ) && 0 ) )
           )
         )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for pod_begin
 # Data::Bind->sub_signature
#  (\&pod_begin, );
;
*pod_other = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
           ( $pad{I1566} = $pos or 1 ) 
           && (
           (
              (   ( $pad{I1567} = $pos or 1 ) && 
               ( ( substr( $s, $pos ) =~ m/^((?:\n\r?|\r\n?))/ )  
                   ? ( $pos += length( $1 ) or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I1567} ) && 0 ) )
           &&
             ( ( substr( $s, $pos, 1 ) eq '=' ) 
                 ? ( $pos += 1 or 1 )
                 : 0
             )
           &&
             ( ( substr( $s, $pos, 1 ) eq 'c' ) 
                 ? ( $pos += 1 or 1 )
                 : 0
             )
           &&
             ( ( substr( $s, $pos, 1 ) eq 'u' ) 
                 ? ( $pos += 1 or 1 )
                 : 0
             )
           &&
              (   ( $pad{I1568} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 1 ) eq 't' ) 
                   ? ( $pos += 1 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I1568} ) && 0 ) )
           &&
             do { while (
              (   ( $pad{I1569} = $pos or 1 ) && 
                 ( ( substr( $s, $pos ) =~ m/^((?!\n\r?|\r\n?).)/ )  
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I1569} ) && 0 ) )) {}; $bool = 1 }
           )
           ) 
         || ( 
           ( ( $bool = 1 ) && ( $pos = $pad{I1566} ) or 1 ) 
           &&            (
              (   ( $pad{I1570} = $pos or 1 ) && 
               ( substr( $s, $pos++, 1 ) ne '' ) ||    ( ( $pos = $pad{I1570} ) && 0 ) )
           &&
             do { while (
              (   ( $pad{I1571} = $pos or 1 ) && 
                 ( ( substr( $s, $pos ) =~ m/^((?!\n\r?|\r\n?).)/ )  
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I1571} ) && 0 ) )) {}; $bool = 1 }
           &&
              (   ( $pad{I1572} = $pos or 1 ) && 
               do { 
                    my $prior = $::_V6_PRIOR_; 
                    my $match = 
                           $grammar->pod_other( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior; 
                    my $bool = (!$match != 1);
                    $pos = $match->to if $bool;
                    $match;
               } ||    ( ( $pos = $pad{I1572} ) && 0 ) )
           )
         )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for pod_other
 # Data::Bind->sub_signature
#  (\&pod_other, );
;
*ws = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
        (   ( $pad{I1573} = $pos or 1 ) && 
           (
               ( $pad{I1574} = $pos or 1 ) 
               && (
               (
                  (   ( $pad{I1575} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '#' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1575} ) && 0 ) )
               &&
                 do { while (
                  (   ( $pad{I1576} = $pos or 1 ) && 
                     ( ( substr( $s, $pos ) =~ m/^((?!\n\r?|\r\n?).)/ )  
                         ? ( $pos += length( $1 ) or 1 )
                         : 0
                     ) ||    ( ( $pos = $pad{I1576} ) && 0 ) )) {}; $bool = 1 }
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1574} ) or 1 ) 
               &&                (
                  (   ( $pad{I1577} = $pos or 1 ) && 
                   ( ( substr( $s, $pos ) =~ m/^((?:\n\r?|\r\n?))/ )  
                       ? ( $pos += length( $1 ) or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1577} ) && 0 ) )
               &&
                 (
                  (   ( $pad{I1578} = $pos or 1 ) && 
                     (
                        (   ( $pad{I1579} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq '=' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I1579} ) && 0 ) )
                     &&
                       (
                        (   ( $pad{I1580} = $pos or 1 ) && 
                           (
                               ( $pad{I1581} = $pos or 1 ) 
                               && (
                               (
                                  (   ( $pad{I1582} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'b' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I1582} ) && 0 ) )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'e' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'g' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'i' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                  (   ( $pad{I1583} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'n' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I1583} ) && 0 ) )
                               &&
                                  (   ( $pad{I1584} = $pos or 1 ) && 
                                   do { 
                                        my $prior = $::_V6_PRIOR_; 
                                        my $match = 
                                               $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior; 
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   } ||    ( ( $pos = $pad{I1584} ) && 0 ) )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'E' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'N' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                  (   ( $pad{I1585} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'D' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I1585} ) && 0 ) )
                               &&
                                 do { while (
                                  (   ( $pad{I1586} = $pos or 1 ) && 
                                     ( ( substr( $s, $pos ) =~ m/^((?!\n\r?|\r\n?).)/ )  
                                         ? ( $pos += length( $1 ) or 1 )
                                         : 0
                                     ) ||    ( ( $pos = $pad{I1586} ) && 0 ) )) {}; $bool = 1 }
                               &&
                                 do { while (
                                  (   ( $pad{I1587} = $pos or 1 ) && 
                                     ( substr( $s, $pos++, 1 ) ne '' ) ||    ( ( $pos = $pad{I1587} ) && 0 ) )) {}; $bool = 1 }
                               )
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I1581} ) or 1 ) 
                               &&                                (
                                  (   ( $pad{I1588} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'b' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I1588} ) && 0 ) )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'e' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'g' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'i' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                  (   ( $pad{I1589} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'n' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I1589} ) && 0 ) )
                               &&
                                  (   ( $pad{I1590} = $pos or 1 ) && 
                                   do { 
                                        my $prior = $::_V6_PRIOR_; 
                                        my $match = 
                                               $grammar->pod_begin( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior; 
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   } ||    ( ( $pos = $pad{I1590} ) && 0 ) )
                               )
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I1581} ) or 1 ) 
                               &&                                (
                                  (   ( $pad{I1591} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'k' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I1591} ) && 0 ) )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'w' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'i' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                  (   ( $pad{I1592} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'd' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I1592} ) && 0 ) )
                               &&
                                  (   ( $pad{I1593} = $pos or 1 ) && 
                                   do { 
                                        my $prior = $::_V6_PRIOR_; 
                                        my $match = 
                                               $grammar->pod_other( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior; 
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   } ||    ( ( $pos = $pad{I1593} ) && 0 ) )
                               )
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I1581} ) or 1 ) 
                               &&                                (
                                  (   ( $pad{I1594} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'p' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I1594} ) && 0 ) )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'o' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                  (   ( $pad{I1595} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'd' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I1595} ) && 0 ) )
                               &&
                                  (   ( $pad{I1596} = $pos or 1 ) && 
                                   do { 
                                        my $prior = $::_V6_PRIOR_; 
                                        my $match = 
                                               $grammar->pod_other( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior; 
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   } ||    ( ( $pos = $pad{I1596} ) && 0 ) )
                               )
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I1581} ) or 1 ) 
                               &&                                (
                                  (   ( $pad{I1597} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'f' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I1597} ) && 0 ) )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'o' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                  (   ( $pad{I1598} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'r' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I1598} ) && 0 ) )
                               &&
                                  (   ( $pad{I1599} = $pos or 1 ) && 
                                   do { 
                                        my $prior = $::_V6_PRIOR_; 
                                        my $match = 
                                               $grammar->pod_other( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior; 
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   } ||    ( ( $pos = $pad{I1599} ) && 0 ) )
                               )
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I1581} ) or 1 ) 
                               &&                                (
                                  (   ( $pad{I1600} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'h' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I1600} ) && 0 ) )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'e' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'a' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'd' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                  (   ( $pad{I1601} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq '1' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I1601} ) && 0 ) )
                               &&
                                  (   ( $pad{I1602} = $pos or 1 ) && 
                                   do { 
                                        my $prior = $::_V6_PRIOR_; 
                                        my $match = 
                                               $grammar->pod_other( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior; 
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   } ||    ( ( $pos = $pad{I1602} ) && 0 ) )
                               )
                             )
                           ) ||    ( ( $pos = $pad{I1580} ) && 0 ) )
                       || ( $bool = 1 )
                       ) 
                     ) ||    ( ( $pos = $pad{I1578} ) && 0 ) )
                 || ( $bool = 1 )
                 ) 
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1574} ) or 1 ) 
               &&                 (   ( $pad{I1603} = $pos or 1 ) && 
                 ( ( substr( $s, $pos ) =~ m/^(\s)/ )  
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I1603} ) && 0 ) )
             )
           ) ||    ( ( $pos = $pad{I1573} ) && 0 ) )
       && do { while (
        (   ( $pad{I1573} = $pos or 1 ) && 
           (
               ( $pad{I1574} = $pos or 1 ) 
               && (
               (
                  (   ( $pad{I1575} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '#' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1575} ) && 0 ) )
               &&
                 do { while (
                  (   ( $pad{I1576} = $pos or 1 ) && 
                     ( ( substr( $s, $pos ) =~ m/^((?!\n\r?|\r\n?).)/ )  
                         ? ( $pos += length( $1 ) or 1 )
                         : 0
                     ) ||    ( ( $pos = $pad{I1576} ) && 0 ) )) {}; $bool = 1 }
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1574} ) or 1 ) 
               &&                (
                  (   ( $pad{I1577} = $pos or 1 ) && 
                   ( ( substr( $s, $pos ) =~ m/^((?:\n\r?|\r\n?))/ )  
                       ? ( $pos += length( $1 ) or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1577} ) && 0 ) )
               &&
                 (
                  (   ( $pad{I1578} = $pos or 1 ) && 
                     (
                        (   ( $pad{I1579} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq '=' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I1579} ) && 0 ) )
                     &&
                       (
                        (   ( $pad{I1580} = $pos or 1 ) && 
                           (
                               ( $pad{I1581} = $pos or 1 ) 
                               && (
                               (
                                  (   ( $pad{I1582} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'b' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I1582} ) && 0 ) )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'e' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'g' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'i' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                  (   ( $pad{I1583} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'n' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I1583} ) && 0 ) )
                               &&
                                  (   ( $pad{I1584} = $pos or 1 ) && 
                                   do { 
                                        my $prior = $::_V6_PRIOR_; 
                                        my $match = 
                                               $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior; 
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   } ||    ( ( $pos = $pad{I1584} ) && 0 ) )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'E' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'N' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                  (   ( $pad{I1585} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'D' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I1585} ) && 0 ) )
                               &&
                                 do { while (
                                  (   ( $pad{I1586} = $pos or 1 ) && 
                                     ( ( substr( $s, $pos ) =~ m/^((?!\n\r?|\r\n?).)/ )  
                                         ? ( $pos += length( $1 ) or 1 )
                                         : 0
                                     ) ||    ( ( $pos = $pad{I1586} ) && 0 ) )) {}; $bool = 1 }
                               &&
                                 do { while (
                                  (   ( $pad{I1587} = $pos or 1 ) && 
                                     ( substr( $s, $pos++, 1 ) ne '' ) ||    ( ( $pos = $pad{I1587} ) && 0 ) )) {}; $bool = 1 }
                               )
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I1581} ) or 1 ) 
                               &&                                (
                                  (   ( $pad{I1588} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'b' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I1588} ) && 0 ) )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'e' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'g' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'i' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                  (   ( $pad{I1589} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'n' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I1589} ) && 0 ) )
                               &&
                                  (   ( $pad{I1590} = $pos or 1 ) && 
                                   do { 
                                        my $prior = $::_V6_PRIOR_; 
                                        my $match = 
                                               $grammar->pod_begin( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior; 
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   } ||    ( ( $pos = $pad{I1590} ) && 0 ) )
                               )
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I1581} ) or 1 ) 
                               &&                                (
                                  (   ( $pad{I1591} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'k' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I1591} ) && 0 ) )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'w' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'i' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                  (   ( $pad{I1592} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'd' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I1592} ) && 0 ) )
                               &&
                                  (   ( $pad{I1593} = $pos or 1 ) && 
                                   do { 
                                        my $prior = $::_V6_PRIOR_; 
                                        my $match = 
                                               $grammar->pod_other( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior; 
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   } ||    ( ( $pos = $pad{I1593} ) && 0 ) )
                               )
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I1581} ) or 1 ) 
                               &&                                (
                                  (   ( $pad{I1594} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'p' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I1594} ) && 0 ) )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'o' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                  (   ( $pad{I1595} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'd' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I1595} ) && 0 ) )
                               &&
                                  (   ( $pad{I1596} = $pos or 1 ) && 
                                   do { 
                                        my $prior = $::_V6_PRIOR_; 
                                        my $match = 
                                               $grammar->pod_other( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior; 
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   } ||    ( ( $pos = $pad{I1596} ) && 0 ) )
                               )
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I1581} ) or 1 ) 
                               &&                                (
                                  (   ( $pad{I1597} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'f' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I1597} ) && 0 ) )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'o' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                  (   ( $pad{I1598} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'r' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I1598} ) && 0 ) )
                               &&
                                  (   ( $pad{I1599} = $pos or 1 ) && 
                                   do { 
                                        my $prior = $::_V6_PRIOR_; 
                                        my $match = 
                                               $grammar->pod_other( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior; 
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   } ||    ( ( $pos = $pad{I1599} ) && 0 ) )
                               )
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I1581} ) or 1 ) 
                               &&                                (
                                  (   ( $pad{I1600} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'h' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I1600} ) && 0 ) )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'e' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'a' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'd' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                  (   ( $pad{I1601} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq '1' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I1601} ) && 0 ) )
                               &&
                                  (   ( $pad{I1602} = $pos or 1 ) && 
                                   do { 
                                        my $prior = $::_V6_PRIOR_; 
                                        my $match = 
                                               $grammar->pod_other( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior; 
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   } ||    ( ( $pos = $pad{I1602} ) && 0 ) )
                               )
                             )
                           ) ||    ( ( $pos = $pad{I1580} ) && 0 ) )
                       || ( $bool = 1 )
                       ) 
                     ) ||    ( ( $pos = $pad{I1578} ) && 0 ) )
                 || ( $bool = 1 )
                 ) 
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1574} ) or 1 ) 
               &&                 (   ( $pad{I1603} = $pos or 1 ) && 
                 ( ( substr( $s, $pos ) =~ m/^(\s)/ )  
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I1603} ) && 0 ) )
             )
           ) ||    ( ( $pos = $pad{I1573} ) && 0 ) )) {}; $bool = 1 }
       ) ;
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for ws
 # Data::Bind->sub_signature
#  (\&ws, );
;
*ident = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
        (   ( $pad{I1604} = $pos or 1 ) && 
           (
               ( $pad{I1605} = $pos or 1 ) 
               && (
                (   ( $pad{I1606} = $pos or 1 ) && 
                 do { 
                      my $prior = $::_V6_PRIOR_; 
                      my $match = 
                             $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                      $::_V6_PRIOR_ = $prior; 
                      my $bool = (!$match != 1);
                      $pos = $match->to if $bool;
                      $match;
                 } ||    ( ( $pos = $pad{I1606} ) && 0 ) )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1605} ) or 1 ) 
               &&                 (   ( $pad{I1607} = $pos or 1 ) && 
                 ( ( substr( $s, $pos, 1 ) eq '_' ) 
                     ? ( $pos += 1 or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I1607} ) && 0 ) )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1605} ) or 1 ) 
               &&                 (   ( $pad{I1608} = $pos or 1 ) && 
                 ( ( substr( $s, $pos, 2 ) eq '::' ) 
                     ? ( $pos += 2 or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I1608} ) && 0 ) )
             )
           ) ||    ( ( $pos = $pad{I1604} ) && 0 ) )
       && do { while (
        (   ( $pad{I1604} = $pos or 1 ) && 
           (
               ( $pad{I1605} = $pos or 1 ) 
               && (
                (   ( $pad{I1606} = $pos or 1 ) && 
                 do { 
                      my $prior = $::_V6_PRIOR_; 
                      my $match = 
                             $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                      $::_V6_PRIOR_ = $prior; 
                      my $bool = (!$match != 1);
                      $pos = $match->to if $bool;
                      $match;
                 } ||    ( ( $pos = $pad{I1606} ) && 0 ) )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1605} ) or 1 ) 
               &&                 (   ( $pad{I1607} = $pos or 1 ) && 
                 ( ( substr( $s, $pos, 1 ) eq '_' ) 
                     ? ( $pos += 1 or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I1607} ) && 0 ) )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1605} ) or 1 ) 
               &&                 (   ( $pad{I1608} = $pos or 1 ) && 
                 ( ( substr( $s, $pos, 2 ) eq '::' ) 
                     ? ( $pos += 2 or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I1608} ) && 0 ) )
             )
           ) ||    ( ( $pos = $pad{I1604} ) && 0 ) )) {}; $bool = 1 }
       ) ;
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for ident
 # Data::Bind->sub_signature
#  (\&ident, );
;
*special_char = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
           ( $pad{I1609} = $pos or 1 ) 
           && (
           (
              (   ( $pad{I1610} = $pos or 1 ) && 
               do{ 
                   my $hash = do {
                     my $bool = 1;
                     my $from = $pos;
                     my @match;
                     my %named;
                     $bool = 0 unless
                       (
                           ( $pad{I1611} = $pos or 1 ) 
                           && (
                            (   ( $pad{I1612} = $pos or 1 ) && 
                             ( ( substr( $s, $pos, 1 ) eq 'c' ) 
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             ) ||    ( ( $pos = $pad{I1612} ) && 0 ) )
                           ) 
                         || ( 
                           ( ( $bool = 1 ) && ( $pos = $pad{I1611} ) or 1 ) 
                           &&                             (   ( $pad{I1613} = $pos or 1 ) && 
                             ( ( substr( $s, $pos, 1 ) eq 'C' ) 
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             ) ||    ( ( $pos = $pad{I1613} ) && 0 ) )
                         )
                       );
                     { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                   };
                   my $bool = ${$hash->{'bool'}};
                   $match[ 0 ] = Pugs::Runtime::Match->new( $hash );
                   $bool;
               } ||    ( ( $pos = $pad{I1610} ) && 0 ) )
           &&
              (   ( $pad{I1614} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 1 ) eq '[' ) 
                   ? ( $pos += 1 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I1614} ) && 0 ) )
           &&
              (   ( $pad{I1615} = $pos or 1 ) && 
               do{ 
                   my $hash = do {
                     my $bool = 1;
                     my $from = $pos;
                     my @match;
                     my %named;
                     $bool = 0 unless
                       (
                        (   ( $pad{I1616} = $pos or 1 ) && 
                           (
                               ( $pad{I1617} = $pos or 1 ) 
                               && (
                               do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                                           $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'alnum'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            }
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I1617} ) or 1 ) 
                               &&                                ( ( substr( $s, $pos ) =~ m/^(\s)/ )  
                                   ? ( $pos += length( $1 ) or 1 )
                                   : 0
                               )
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I1617} ) or 1 ) 
                               &&                                 (   ( $pad{I1618} = $pos or 1 ) && 
                                 ( ( substr( $s, $pos, 1 ) eq ';' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 ) ||    ( ( $pos = $pad{I1618} ) && 0 ) )
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I1617} ) or 1 ) 
                               &&                                 (   ( $pad{I1619} = $pos or 1 ) && 
                                 ( ( substr( $s, $pos, 1 ) eq '(' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 ) ||    ( ( $pos = $pad{I1619} ) && 0 ) )
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I1617} ) or 1 ) 
                               &&                                 (   ( $pad{I1620} = $pos or 1 ) && 
                                 ( ( substr( $s, $pos, 1 ) eq ')' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 ) ||    ( ( $pos = $pad{I1620} ) && 0 ) )
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I1617} ) or 1 ) 
                               &&                                 (   ( $pad{I1621} = $pos or 1 ) && 
                                 ( ( substr( $s, $pos, 1 ) eq '-' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 ) ||    ( ( $pos = $pad{I1621} ) && 0 ) )
                             )
                           ) ||    ( ( $pos = $pad{I1616} ) && 0 ) )
                       && do { while (
                        (   ( $pad{I1616} = $pos or 1 ) && 
                           (
                               ( $pad{I1617} = $pos or 1 ) 
                               && (
                               do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                                           $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'alnum'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            }
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I1617} ) or 1 ) 
                               &&                                ( ( substr( $s, $pos ) =~ m/^(\s)/ )  
                                   ? ( $pos += length( $1 ) or 1 )
                                   : 0
                               )
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I1617} ) or 1 ) 
                               &&                                 (   ( $pad{I1618} = $pos or 1 ) && 
                                 ( ( substr( $s, $pos, 1 ) eq ';' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 ) ||    ( ( $pos = $pad{I1618} ) && 0 ) )
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I1617} ) or 1 ) 
                               &&                                 (   ( $pad{I1619} = $pos or 1 ) && 
                                 ( ( substr( $s, $pos, 1 ) eq '(' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 ) ||    ( ( $pos = $pad{I1619} ) && 0 ) )
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I1617} ) or 1 ) 
                               &&                                 (   ( $pad{I1620} = $pos or 1 ) && 
                                 ( ( substr( $s, $pos, 1 ) eq ')' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 ) ||    ( ( $pos = $pad{I1620} ) && 0 ) )
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I1617} ) or 1 ) 
                               &&                                 (   ( $pad{I1621} = $pos or 1 ) && 
                                 ( ( substr( $s, $pos, 1 ) eq '-' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 ) ||    ( ( $pos = $pad{I1621} ) && 0 ) )
                             )
                           ) ||    ( ( $pos = $pad{I1616} ) && 0 ) )) {}; $bool = 1 }
                       ) ;
                     { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                   };
                   my $bool = ${$hash->{'bool'}};
                   $match[ 1 ] = Pugs::Runtime::Match->new( $hash );
                   $bool;
               } ||    ( ( $pos = $pad{I1615} ) && 0 ) )
           &&
              (   ( $pad{I1622} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 1 ) eq ']' ) 
                   ? ( $pos += 1 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I1622} ) && 0 ) )
           &&
              (   ( $pad{I1623} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub  { return({'special_char' => '\\' . $::_V6_MATCH_->[0] . $::_V6_MATCH_->[1]});
 } ->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1623} ) && 0 ) )
           )
           ) 
         || ( 
           ( ( $bool = 1 ) && ( $pos = $pad{I1609} ) or 1 ) 
           &&            (
              (   ( $pad{I1624} = $pos or 1 ) && 
               (
                   ( $pad{I1625} = $pos or 1 ) 
                   && (
                    (   ( $pad{I1626} = $pos or 1 ) && 
                     ( ( substr( $s, $pos, 1 ) eq 'x' ) 
                         ? ( $pos += 1 or 1 )
                         : 0
                     ) ||    ( ( $pos = $pad{I1626} ) && 0 ) )
                   ) 
                 || ( 
                   ( ( $bool = 1 ) && ( $pos = $pad{I1625} ) or 1 ) 
                   &&                     (   ( $pad{I1627} = $pos or 1 ) && 
                     ( ( substr( $s, $pos, 1 ) eq 'X' ) 
                         ? ( $pos += 1 or 1 )
                         : 0
                     ) ||    ( ( $pos = $pad{I1627} ) && 0 ) )
                 )
               ) ||    ( ( $pos = $pad{I1624} ) && 0 ) )
           &&
             (
              (   ( $pad{I1628} = $pos or 1 ) && 
                 do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                             $grammar->xdigit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'xdigit'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1628} ) && 0 ) )
             && do { while (
              (   ( $pad{I1628} = $pos or 1 ) && 
                 do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                             $grammar->xdigit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'xdigit'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1628} ) && 0 ) )) {}; $bool = 1 }
             ) 
           &&
              (   ( $pad{I1629} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub  { return({'special_char' => '\\' . $::_V6_MATCH_});
 } ->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1629} ) && 0 ) )
           )
           ) 
         || ( 
           ( ( $bool = 1 ) && ( $pos = $pad{I1609} ) or 1 ) 
           &&            (
              (   ( $pad{I1630} = $pos or 1 ) && 
               do{ 
                   my $hash = do {
                     my $bool = 1;
                     my $from = $pos;
                     my @match;
                     my %named;
                     $bool = 0 unless
                       (
                           ( $pad{I1631} = $pos or 1 ) 
                           && (
                            (   ( $pad{I1632} = $pos or 1 ) && 
                             ( ( substr( $s, $pos, 1 ) eq 'x' ) 
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             ) ||    ( ( $pos = $pad{I1632} ) && 0 ) )
                           ) 
                         || ( 
                           ( ( $bool = 1 ) && ( $pos = $pad{I1631} ) or 1 ) 
                           &&                             (   ( $pad{I1633} = $pos or 1 ) && 
                             ( ( substr( $s, $pos, 1 ) eq 'X' ) 
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             ) ||    ( ( $pos = $pad{I1633} ) && 0 ) )
                         )
                       );
                     { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                   };
                   my $bool = ${$hash->{'bool'}};
                   $match[ 0 ] = Pugs::Runtime::Match->new( $hash );
                   $bool;
               } ||    ( ( $pos = $pad{I1630} ) && 0 ) )
           &&
              (   ( $pad{I1634} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 1 ) eq '[' ) 
                   ? ( $pos += 1 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I1634} ) && 0 ) )
           &&
              (   ( $pad{I1635} = $pos or 1 ) && 
               do{ 
                   my $hash = do {
                     my $bool = 1;
                     my $from = $pos;
                     my @match;
                     my %named;
                     $bool = 0 unless
                       (
                        (   ( $pad{I1636} = $pos or 1 ) && 
                           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                                       $grammar->xdigit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'xdigit'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1636} ) && 0 ) )
                       && do { while (
                        (   ( $pad{I1636} = $pos or 1 ) && 
                           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                                       $grammar->xdigit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'xdigit'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1636} ) && 0 ) )) {}; $bool = 1 }
                       ) ;
                     { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                   };
                   my $bool = ${$hash->{'bool'}};
                   $match[ 1 ] = Pugs::Runtime::Match->new( $hash );
                   $bool;
               } ||    ( ( $pos = $pad{I1635} ) && 0 ) )
           &&
              (   ( $pad{I1637} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 1 ) eq ']' ) 
                   ? ( $pos += 1 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I1637} ) && 0 ) )
           &&
              (   ( $pad{I1638} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub  { return({'special_char' => '\\' . $::_V6_MATCH_->[0] . $::_V6_MATCH_->[1]});
 } ->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1638} ) && 0 ) )
           )
           ) 
         || ( 
           ( ( $bool = 1 ) && ( $pos = $pad{I1609} ) or 1 ) 
           &&            (
              (   ( $pad{I1639} = $pos or 1 ) && 
               (
                   ( $pad{I1640} = $pos or 1 ) 
                   && (
                    (   ( $pad{I1641} = $pos or 1 ) && 
                     ( ( substr( $s, $pos, 1 ) eq 'o' ) 
                         ? ( $pos += 1 or 1 )
                         : 0
                     ) ||    ( ( $pos = $pad{I1641} ) && 0 ) )
                   ) 
                 || ( 
                   ( ( $bool = 1 ) && ( $pos = $pad{I1640} ) or 1 ) 
                   &&                     (   ( $pad{I1642} = $pos or 1 ) && 
                     ( ( substr( $s, $pos, 1 ) eq 'O' ) 
                         ? ( $pos += 1 or 1 )
                         : 0
                     ) ||    ( ( $pos = $pad{I1642} ) && 0 ) )
                 )
               ) ||    ( ( $pos = $pad{I1639} ) && 0 ) )
           &&
             (
              (   ( $pad{I1643} = $pos or 1 ) && 
                 ( ( substr( $s, $pos ) =~ m/^(\d)/ )  
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I1643} ) && 0 ) )
             && do { while (
              (   ( $pad{I1643} = $pos or 1 ) && 
                 ( ( substr( $s, $pos ) =~ m/^(\d)/ )  
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I1643} ) && 0 ) )) {}; $bool = 1 }
             ) 
           &&
              (   ( $pad{I1644} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub  { return({'special_char' => '\\' . $::_V6_MATCH_});
 } ->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1644} ) && 0 ) )
           )
           ) 
         || ( 
           ( ( $bool = 1 ) && ( $pos = $pad{I1609} ) or 1 ) 
           &&            (
              (   ( $pad{I1645} = $pos or 1 ) && 
               do{ 
                   my $hash = do {
                     my $bool = 1;
                     my $from = $pos;
                     my @match;
                     my %named;
                     $bool = 0 unless
                       (
                           ( $pad{I1646} = $pos or 1 ) 
                           && (
                            (   ( $pad{I1647} = $pos or 1 ) && 
                             ( ( substr( $s, $pos, 1 ) eq 'o' ) 
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             ) ||    ( ( $pos = $pad{I1647} ) && 0 ) )
                           ) 
                         || ( 
                           ( ( $bool = 1 ) && ( $pos = $pad{I1646} ) or 1 ) 
                           &&                             (   ( $pad{I1648} = $pos or 1 ) && 
                             ( ( substr( $s, $pos, 1 ) eq 'O' ) 
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             ) ||    ( ( $pos = $pad{I1648} ) && 0 ) )
                         )
                       );
                     { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                   };
                   my $bool = ${$hash->{'bool'}};
                   $match[ 0 ] = Pugs::Runtime::Match->new( $hash );
                   $bool;
               } ||    ( ( $pos = $pad{I1645} ) && 0 ) )
           &&
              (   ( $pad{I1649} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 1 ) eq '[' ) 
                   ? ( $pos += 1 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I1649} ) && 0 ) )
           &&
              (   ( $pad{I1650} = $pos or 1 ) && 
               do{ 
                   my $hash = do {
                     my $bool = 1;
                     my $from = $pos;
                     my @match;
                     my %named;
                     $bool = 0 unless
                       (
                        (   ( $pad{I1651} = $pos or 1 ) && 
                           ( ( substr( $s, $pos ) =~ m/^(\d)/ )  
                               ? ( $pos += length( $1 ) or 1 )
                               : 0
                           ) ||    ( ( $pos = $pad{I1651} ) && 0 ) )
                       && do { while (
                        (   ( $pad{I1651} = $pos or 1 ) && 
                           ( ( substr( $s, $pos ) =~ m/^(\d)/ )  
                               ? ( $pos += length( $1 ) or 1 )
                               : 0
                           ) ||    ( ( $pos = $pad{I1651} ) && 0 ) )) {}; $bool = 1 }
                       ) ;
                     { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                   };
                   my $bool = ${$hash->{'bool'}};
                   $match[ 1 ] = Pugs::Runtime::Match->new( $hash );
                   $bool;
               } ||    ( ( $pos = $pad{I1650} ) && 0 ) )
           &&
              (   ( $pad{I1652} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 1 ) eq ']' ) 
                   ? ( $pos += 1 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I1652} ) && 0 ) )
           &&
              (   ( $pad{I1653} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub  { return({'special_char' => '\\' . $::_V6_MATCH_->[0] . $::_V6_MATCH_->[1]});
 } ->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1653} ) && 0 ) )
           )
           ) 
         || ( 
           ( ( $bool = 1 ) && ( $pos = $pad{I1609} ) or 1 ) 
           &&            (
              (   ( $pad{I1654} = $pos or 1 ) && 
               ( substr( $s, $pos++, 1 ) ne '' ) ||    ( ( $pos = $pad{I1654} ) && 0 ) )
           &&
              (   ( $pad{I1655} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub  { return({'special_char' => '\\' . $::_V6_MATCH_});
 } ->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1655} ) && 0 ) )
           )
         )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for special_char
 # Data::Bind->sub_signature
#  (\&special_char, );
;
*literal = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       do { while (
        (   ( $pad{I1656} = $pos or 1 ) && 
           (
               ( $pad{I1657} = $pos or 1 ) 
               && (
               (
                  (   ( $pad{I1658} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '\\' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1658} ) && 0 ) )
               &&
                  (   ( $pad{I1659} = $pos or 1 ) && 
                   do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                               $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'special_char'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1659} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1657} ) or 1 ) 
               &&                 (   ( $pad{I1660} = $pos or 1 ) && 
                 ( ( substr( $s, $pos ) =~ m/^((?:(?![\']))\X)/ )  
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I1660} ) && 0 ) )
             )
           ) ||    ( ( $pos = $pad{I1656} ) && 0 ) )) {}; $bool = 1 };
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for literal
 # Data::Bind->sub_signature
#  (\&literal, );
;
*double_quoted = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       do { while (
        (   ( $pad{I1661} = $pos or 1 ) && 
           (
               ( $pad{I1662} = $pos or 1 ) 
               && (
               (
                  (   ( $pad{I1663} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '\\' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1663} ) && 0 ) )
               &&
                  (   ( $pad{I1664} = $pos or 1 ) && 
                   do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                               $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'special_char'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1664} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1662} ) or 1 ) 
               &&                 (   ( $pad{I1665} = $pos or 1 ) && 
                 do{ 
                my $match = 
          do {
            our $I1666;
            our $I1666_sizes;
            unless ( $I1666 ) {
                my $hash = \%Pugs::Grammar::Rule::variables;
                my %sizes = map { length($_) => 1 } keys %$hash;
                $I1666_sizes = [ sort { $b <=> $a } keys %sizes ];
                $I1666 = $hash;
            }
            my $match = 0;
            my $key;
            for ( @$I1666_sizes ) {
                $key = ( $pos <= length( $s ) 
                            ? substr( $s, $pos, $_ )
                            : '' );
                if ( exists $I1666->{$key} ) {
                    #$named{KEY} = $key;
                    #$::_V6_MATCH_ = $m; 
                    #print "m: ", Dumper( $::_V6_MATCH_->data )
                    #    if ( $key eq 'until' );
                    $match = Pugs::Runtime::Regex::preprocess_hash( $I1666, $key )->( $s, $grammar, { p => ( $pos + $_ ), positionals => [ ], args => { KEY => $key } }, undef );
                    last if $match;
                }
            }
            if ( $match ) {
                $pos = $match->to;
                #print "match: $key at $pos = ", Dumper( $match->data );
                $bool = 1;
            }; # else { $bool = 0 }
            $match;
          };
                if ( $match ) { push @{$named{'Pugs::Grammar::Rule::variables'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1665} ) && 0 ) )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1662} ) or 1 ) 
               &&                 (   ( $pad{I1667} = $pos or 1 ) && 
                 ( ( substr( $s, $pos ) =~ m/^((?:(?![\"]))\X)/ )  
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I1667} ) && 0 ) )
             )
           ) ||    ( ( $pos = $pad{I1661} ) && 0 ) )) {}; $bool = 1 };
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for double_quoted
 # Data::Bind->sub_signature
#  (\&double_quoted, );
;
*metasyntax = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
        (   ( $pad{I1668} = $pos or 1 ) && 
           (
               ( $pad{I1669} = $pos or 1 ) 
               && (
               (
                  (   ( $pad{I1670} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '\\' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1670} ) && 0 ) )
               &&
                  (   ( $pad{I1671} = $pos or 1 ) && 
                   do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                               $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'special_char'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1671} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1669} ) or 1 ) 
               &&                (
                  (   ( $pad{I1672} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq chr(39) ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1672} ) && 0 ) )
               &&
                  (   ( $pad{I1673} = $pos or 1 ) && 
                   do { 
                        my $prior = $::_V6_PRIOR_; 
                        my $match = 
                               $grammar->literal( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior; 
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   } ||    ( ( $pos = $pad{I1673} ) && 0 ) )
               &&
                  (   ( $pad{I1674} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq chr(39) ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1674} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1669} ) or 1 ) 
               &&                (
                  (   ( $pad{I1675} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '"' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1675} ) && 0 ) )
               &&
                  (   ( $pad{I1676} = $pos or 1 ) && 
                   do { 
                        my $prior = $::_V6_PRIOR_; 
                        my $match = 
                               $grammar->double_quoted( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior; 
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   } ||    ( ( $pos = $pad{I1676} ) && 0 ) )
               &&
                  (   ( $pad{I1677} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '"' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1677} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1669} ) or 1 ) 
               &&                (
                  (   ( $pad{I1678} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '{' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1678} ) && 0 ) )
               &&
                  (   ( $pad{I1679} = $pos or 1 ) && 
                   do { 
                        my $prior = $::_V6_PRIOR_; 
                        my $match = 
                               $grammar->string_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior; 
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   } ||    ( ( $pos = $pad{I1679} ) && 0 ) )
               &&
                  (   ( $pad{I1680} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '}' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1680} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1669} ) or 1 ) 
               &&                (
                  (   ( $pad{I1681} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '<' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1681} ) && 0 ) )
               &&
                  (   ( $pad{I1682} = $pos or 1 ) && 
                   do { 
                        my $prior = $::_V6_PRIOR_; 
                        my $match = 
                               $grammar->metasyntax( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior; 
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   } ||    ( ( $pos = $pad{I1682} ) && 0 ) )
               &&
                  (   ( $pad{I1683} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '>' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1683} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1669} ) or 1 ) 
               &&                 (   ( $pad{I1684} = $pos or 1 ) && 
                 ( ( substr( $s, $pos ) =~ m/^((?:(?![\>]))\X)/ )  
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I1684} ) && 0 ) )
             )
           ) ||    ( ( $pos = $pad{I1668} ) && 0 ) )
       && do { while (
        (   ( $pad{I1668} = $pos or 1 ) && 
           (
               ( $pad{I1669} = $pos or 1 ) 
               && (
               (
                  (   ( $pad{I1670} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '\\' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1670} ) && 0 ) )
               &&
                  (   ( $pad{I1671} = $pos or 1 ) && 
                   do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                               $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'special_char'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1671} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1669} ) or 1 ) 
               &&                (
                  (   ( $pad{I1672} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq chr(39) ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1672} ) && 0 ) )
               &&
                  (   ( $pad{I1673} = $pos or 1 ) && 
                   do { 
                        my $prior = $::_V6_PRIOR_; 
                        my $match = 
                               $grammar->literal( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior; 
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   } ||    ( ( $pos = $pad{I1673} ) && 0 ) )
               &&
                  (   ( $pad{I1674} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq chr(39) ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1674} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1669} ) or 1 ) 
               &&                (
                  (   ( $pad{I1675} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '"' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1675} ) && 0 ) )
               &&
                  (   ( $pad{I1676} = $pos or 1 ) && 
                   do { 
                        my $prior = $::_V6_PRIOR_; 
                        my $match = 
                               $grammar->double_quoted( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior; 
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   } ||    ( ( $pos = $pad{I1676} ) && 0 ) )
               &&
                  (   ( $pad{I1677} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '"' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1677} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1669} ) or 1 ) 
               &&                (
                  (   ( $pad{I1678} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '{' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1678} ) && 0 ) )
               &&
                  (   ( $pad{I1679} = $pos or 1 ) && 
                   do { 
                        my $prior = $::_V6_PRIOR_; 
                        my $match = 
                               $grammar->string_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior; 
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   } ||    ( ( $pos = $pad{I1679} ) && 0 ) )
               &&
                  (   ( $pad{I1680} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '}' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1680} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1669} ) or 1 ) 
               &&                (
                  (   ( $pad{I1681} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '<' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1681} ) && 0 ) )
               &&
                  (   ( $pad{I1682} = $pos or 1 ) && 
                   do { 
                        my $prior = $::_V6_PRIOR_; 
                        my $match = 
                               $grammar->metasyntax( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior; 
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   } ||    ( ( $pos = $pad{I1682} ) && 0 ) )
               &&
                  (   ( $pad{I1683} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '>' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1683} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1669} ) or 1 ) 
               &&                 (   ( $pad{I1684} = $pos or 1 ) && 
                 ( ( substr( $s, $pos ) =~ m/^((?:(?![\>]))\X)/ )  
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I1684} ) && 0 ) )
             )
           ) ||    ( ( $pos = $pad{I1668} ) && 0 ) )) {}; $bool = 1 }
       ) ;
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for metasyntax
 # Data::Bind->sub_signature
#  (\&metasyntax, );
;
*char_range = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
        (   ( $pad{I1685} = $pos or 1 ) && 
           (
               ( $pad{I1686} = $pos or 1 ) 
               && (
               (
                  (   ( $pad{I1687} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '\\' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1687} ) && 0 ) )
               &&
                  (   ( $pad{I1688} = $pos or 1 ) && 
                   do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                               $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'special_char'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1688} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1686} ) or 1 ) 
               &&                 (   ( $pad{I1689} = $pos or 1 ) && 
                 ( ( substr( $s, $pos ) =~ m/^((?:(?![\]]))\X)/ )  
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I1689} ) && 0 ) )
             )
           ) ||    ( ( $pos = $pad{I1685} ) && 0 ) )
       && do { while (
        (   ( $pad{I1685} = $pos or 1 ) && 
           (
               ( $pad{I1686} = $pos or 1 ) 
               && (
               (
                  (   ( $pad{I1687} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '\\' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1687} ) && 0 ) )
               &&
                  (   ( $pad{I1688} = $pos or 1 ) && 
                   do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                               $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'special_char'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1688} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1686} ) or 1 ) 
               &&                 (   ( $pad{I1689} = $pos or 1 ) && 
                 ( ( substr( $s, $pos ) =~ m/^((?:(?![\]]))\X)/ )  
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I1689} ) && 0 ) )
             )
           ) ||    ( ( $pos = $pad{I1685} ) && 0 ) )) {}; $bool = 1 }
       ) ;
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for char_range
 # Data::Bind->sub_signature
#  (\&char_range, );
;
*char_class = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
           ( $pad{I1690} = $pos or 1 ) 
           && (
           (
            (   ( $pad{I1691} = $pos or 1 ) && 
               do { 
                    my $prior = $::_V6_PRIOR_; 
                    my $match = 
                           $grammar->alpha( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior; 
                    my $bool = (!$match != 1);
                    $pos = $match->to if $bool;
                    $match;
               } ||    ( ( $pos = $pad{I1691} ) && 0 ) )
           && do { while (
            (   ( $pad{I1691} = $pos or 1 ) && 
               do { 
                    my $prior = $::_V6_PRIOR_; 
                    my $match = 
                           $grammar->alpha( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior; 
                    my $bool = (!$match != 1);
                    $pos = $match->to if $bool;
                    $match;
               } ||    ( ( $pos = $pad{I1691} ) && 0 ) )) {}; $bool = 1 }
           ) 
           ) 
         || ( 
           ( ( $bool = 1 ) && ( $pos = $pad{I1690} ) or 1 ) 
           &&            (
              (   ( $pad{I1692} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 1 ) eq '[' ) 
                   ? ( $pos += 1 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I1692} ) && 0 ) )
           &&
              (   ( $pad{I1693} = $pos or 1 ) && 
               do { 
                    my $prior = $::_V6_PRIOR_; 
                    my $match = 
                           $grammar->char_range( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior; 
                    my $bool = (!$match != 1);
                    $pos = $match->to if $bool;
                    $match;
               } ||    ( ( $pos = $pad{I1693} ) && 0 ) )
           &&
              (   ( $pad{I1694} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 1 ) eq ']' ) 
                   ? ( $pos += 1 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I1694} ) && 0 ) )
           )
         )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for char_class
 # Data::Bind->sub_signature
#  (\&char_class, );
;
*string_code = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
        (   ( $pad{I1695} = $pos or 1 ) && 
           (
               ( $pad{I1696} = $pos or 1 ) 
               && (
               (
                  (   ( $pad{I1697} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '\\' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1697} ) && 0 ) )
               &&
                  (   ( $pad{I1698} = $pos or 1 ) && 
                   do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                               $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'special_char'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1698} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1696} ) or 1 ) 
               &&                (
                  (   ( $pad{I1699} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq chr(39) ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1699} ) && 0 ) )
               &&
                  (   ( $pad{I1700} = $pos or 1 ) && 
                   do { 
                        my $prior = $::_V6_PRIOR_; 
                        my $match = 
                               $grammar->literal( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior; 
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   } ||    ( ( $pos = $pad{I1700} ) && 0 ) )
               &&
                  (   ( $pad{I1701} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq chr(39) ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1701} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1696} ) or 1 ) 
               &&                (
                  (   ( $pad{I1702} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '"' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1702} ) && 0 ) )
               &&
                  (   ( $pad{I1703} = $pos or 1 ) && 
                   do { 
                        my $prior = $::_V6_PRIOR_; 
                        my $match = 
                               $grammar->double_quoted( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior; 
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   } ||    ( ( $pos = $pad{I1703} ) && 0 ) )
               &&
                  (   ( $pad{I1704} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '"' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1704} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1696} ) or 1 ) 
               &&                (
                  (   ( $pad{I1705} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '{' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1705} ) && 0 ) )
               &&
                  (   ( $pad{I1706} = $pos or 1 ) && 
                   (
                       ( $pad{I1707} = $pos or 1 ) 
                       && (
                        (   ( $pad{I1708} = $pos or 1 ) && 
                         do { 
                              my $prior = $::_V6_PRIOR_; 
                              my $match = 
                                     $grammar->string_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                              $::_V6_PRIOR_ = $prior; 
                              my $bool = (!$match != 1);
                              $pos = $match->to if $bool;
                              $match;
                         } ||    ( ( $pos = $pad{I1708} ) && 0 ) )
                       ) 
                     || ( 
                       ( ( $bool = 1 ) && ( $pos = $pad{I1707} ) or 1 ) 
                       &&                         (   ( $pad{I1709} = $pos or 1 ) && 
 1 # null constant
 ||    ( ( $pos = $pad{I1709} ) && 0 ) )
                     )
                   ) ||    ( ( $pos = $pad{I1706} ) && 0 ) )
               &&
                  (   ( $pad{I1710} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '}' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1710} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1696} ) or 1 ) 
               &&                (
                  (   ( $pad{I1711} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '(' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1711} ) && 0 ) )
               &&
                  (   ( $pad{I1712} = $pos or 1 ) && 
                   (
                       ( $pad{I1713} = $pos or 1 ) 
                       && (
                        (   ( $pad{I1714} = $pos or 1 ) && 
                         do { 
                              my $prior = $::_V6_PRIOR_; 
                              my $match = 
                                     $grammar->string_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                              $::_V6_PRIOR_ = $prior; 
                              my $bool = (!$match != 1);
                              $pos = $match->to if $bool;
                              $match;
                         } ||    ( ( $pos = $pad{I1714} ) && 0 ) )
                       ) 
                     || ( 
                       ( ( $bool = 1 ) && ( $pos = $pad{I1713} ) or 1 ) 
                       &&                         (   ( $pad{I1715} = $pos or 1 ) && 
 1 # null constant
 ||    ( ( $pos = $pad{I1715} ) && 0 ) )
                     )
                   ) ||    ( ( $pos = $pad{I1712} ) && 0 ) )
               &&
                  (   ( $pad{I1716} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq ')' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1716} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1696} ) or 1 ) 
               &&                (
                  (   ( $pad{I1717} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '<' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1717} ) && 0 ) )
               &&
                  (   ( $pad{I1718} = $pos or 1 ) && 
                   (
                       ( $pad{I1719} = $pos or 1 ) 
                       && (
                        (   ( $pad{I1720} = $pos or 1 ) && 
                         do { 
                              my $prior = $::_V6_PRIOR_; 
                              my $match = 
                                     $grammar->string_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                              $::_V6_PRIOR_ = $prior; 
                              my $bool = (!$match != 1);
                              $pos = $match->to if $bool;
                              $match;
                         } ||    ( ( $pos = $pad{I1720} ) && 0 ) )
                       ) 
                     || ( 
                       ( ( $bool = 1 ) && ( $pos = $pad{I1719} ) or 1 ) 
                       &&                         (   ( $pad{I1721} = $pos or 1 ) && 
 1 # null constant
 ||    ( ( $pos = $pad{I1721} ) && 0 ) )
                     )
                   ) ||    ( ( $pos = $pad{I1718} ) && 0 ) )
               &&
                  (   ( $pad{I1722} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '>' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1722} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1696} ) or 1 ) 
               &&                (
                  (   ( $pad{I1723} = $pos or 1 ) && 
                   (
                       ( $pad{I1724} = $pos or 1 ) 
                       && (
                        (   ( $pad{I1725} = $pos or 1 ) && 
                         do { 
                              my $prior = $::_V6_PRIOR_; 
                              my $match = 
                                     $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                              $::_V6_PRIOR_ = $prior; 
                              my $bool = (!$match != 1);
                              $pos = $match->to if $bool;
                              $match;
                         } ||    ( ( $pos = $pad{I1725} ) && 0 ) )
                       ) 
                     || ( 
                       ( ( $bool = 1 ) && ( $pos = $pad{I1724} ) or 1 ) 
                       &&                         (   ( $pad{I1726} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq '>' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I1726} ) && 0 ) )
                       ) 
                     || ( 
                       ( ( $bool = 1 ) && ( $pos = $pad{I1724} ) or 1 ) 
                       &&                         (   ( $pad{I1727} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq '=' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I1727} ) && 0 ) )
                       ) 
                     || ( 
                       ( ( $bool = 1 ) && ( $pos = $pad{I1724} ) or 1 ) 
                       &&                         (   ( $pad{I1728} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq '-' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I1728} ) && 0 ) )
                     )
                   ) ||    ( ( $pos = $pad{I1723} ) && 0 ) )
               &&
                  (   ( $pad{I1729} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '>' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1729} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1696} ) or 1 ) 
               &&                 (   ( $pad{I1730} = $pos or 1 ) && 
                 do { 
                      my $prior = $::_V6_PRIOR_; 
                      my $match = 
                             $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                      $::_V6_PRIOR_ = $prior; 
                      my $bool = (!$match != 1);
                      $pos = $match->to if $bool;
                      $match;
                 } ||    ( ( $pos = $pad{I1730} ) && 0 ) )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1696} ) or 1 ) 
               &&                 (   ( $pad{I1731} = $pos or 1 ) && 
                 ( ( substr( $s, $pos ) =~ m/^((?:(?![\}\)\>]))\X)/ )  
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I1731} ) && 0 ) )
             )
           ) ||    ( ( $pos = $pad{I1695} ) && 0 ) )
       && do { while (
        (   ( $pad{I1695} = $pos or 1 ) && 
           (
               ( $pad{I1696} = $pos or 1 ) 
               && (
               (
                  (   ( $pad{I1697} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '\\' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1697} ) && 0 ) )
               &&
                  (   ( $pad{I1698} = $pos or 1 ) && 
                   do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                               $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'special_char'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1698} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1696} ) or 1 ) 
               &&                (
                  (   ( $pad{I1699} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq chr(39) ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1699} ) && 0 ) )
               &&
                  (   ( $pad{I1700} = $pos or 1 ) && 
                   do { 
                        my $prior = $::_V6_PRIOR_; 
                        my $match = 
                               $grammar->literal( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior; 
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   } ||    ( ( $pos = $pad{I1700} ) && 0 ) )
               &&
                  (   ( $pad{I1701} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq chr(39) ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1701} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1696} ) or 1 ) 
               &&                (
                  (   ( $pad{I1702} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '"' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1702} ) && 0 ) )
               &&
                  (   ( $pad{I1703} = $pos or 1 ) && 
                   do { 
                        my $prior = $::_V6_PRIOR_; 
                        my $match = 
                               $grammar->double_quoted( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior; 
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   } ||    ( ( $pos = $pad{I1703} ) && 0 ) )
               &&
                  (   ( $pad{I1704} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '"' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1704} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1696} ) or 1 ) 
               &&                (
                  (   ( $pad{I1705} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '{' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1705} ) && 0 ) )
               &&
                  (   ( $pad{I1706} = $pos or 1 ) && 
                   (
                       ( $pad{I1707} = $pos or 1 ) 
                       && (
                        (   ( $pad{I1708} = $pos or 1 ) && 
                         do { 
                              my $prior = $::_V6_PRIOR_; 
                              my $match = 
                                     $grammar->string_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                              $::_V6_PRIOR_ = $prior; 
                              my $bool = (!$match != 1);
                              $pos = $match->to if $bool;
                              $match;
                         } ||    ( ( $pos = $pad{I1708} ) && 0 ) )
                       ) 
                     || ( 
                       ( ( $bool = 1 ) && ( $pos = $pad{I1707} ) or 1 ) 
                       &&                         (   ( $pad{I1709} = $pos or 1 ) && 
 1 # null constant
 ||    ( ( $pos = $pad{I1709} ) && 0 ) )
                     )
                   ) ||    ( ( $pos = $pad{I1706} ) && 0 ) )
               &&
                  (   ( $pad{I1710} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '}' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1710} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1696} ) or 1 ) 
               &&                (
                  (   ( $pad{I1711} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '(' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1711} ) && 0 ) )
               &&
                  (   ( $pad{I1712} = $pos or 1 ) && 
                   (
                       ( $pad{I1713} = $pos or 1 ) 
                       && (
                        (   ( $pad{I1714} = $pos or 1 ) && 
                         do { 
                              my $prior = $::_V6_PRIOR_; 
                              my $match = 
                                     $grammar->string_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                              $::_V6_PRIOR_ = $prior; 
                              my $bool = (!$match != 1);
                              $pos = $match->to if $bool;
                              $match;
                         } ||    ( ( $pos = $pad{I1714} ) && 0 ) )
                       ) 
                     || ( 
                       ( ( $bool = 1 ) && ( $pos = $pad{I1713} ) or 1 ) 
                       &&                         (   ( $pad{I1715} = $pos or 1 ) && 
 1 # null constant
 ||    ( ( $pos = $pad{I1715} ) && 0 ) )
                     )
                   ) ||    ( ( $pos = $pad{I1712} ) && 0 ) )
               &&
                  (   ( $pad{I1716} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq ')' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1716} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1696} ) or 1 ) 
               &&                (
                  (   ( $pad{I1717} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '<' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1717} ) && 0 ) )
               &&
                  (   ( $pad{I1718} = $pos or 1 ) && 
                   (
                       ( $pad{I1719} = $pos or 1 ) 
                       && (
                        (   ( $pad{I1720} = $pos or 1 ) && 
                         do { 
                              my $prior = $::_V6_PRIOR_; 
                              my $match = 
                                     $grammar->string_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                              $::_V6_PRIOR_ = $prior; 
                              my $bool = (!$match != 1);
                              $pos = $match->to if $bool;
                              $match;
                         } ||    ( ( $pos = $pad{I1720} ) && 0 ) )
                       ) 
                     || ( 
                       ( ( $bool = 1 ) && ( $pos = $pad{I1719} ) or 1 ) 
                       &&                         (   ( $pad{I1721} = $pos or 1 ) && 
 1 # null constant
 ||    ( ( $pos = $pad{I1721} ) && 0 ) )
                     )
                   ) ||    ( ( $pos = $pad{I1718} ) && 0 ) )
               &&
                  (   ( $pad{I1722} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '>' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1722} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1696} ) or 1 ) 
               &&                (
                  (   ( $pad{I1723} = $pos or 1 ) && 
                   (
                       ( $pad{I1724} = $pos or 1 ) 
                       && (
                        (   ( $pad{I1725} = $pos or 1 ) && 
                         do { 
                              my $prior = $::_V6_PRIOR_; 
                              my $match = 
                                     $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                              $::_V6_PRIOR_ = $prior; 
                              my $bool = (!$match != 1);
                              $pos = $match->to if $bool;
                              $match;
                         } ||    ( ( $pos = $pad{I1725} ) && 0 ) )
                       ) 
                     || ( 
                       ( ( $bool = 1 ) && ( $pos = $pad{I1724} ) or 1 ) 
                       &&                         (   ( $pad{I1726} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq '>' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I1726} ) && 0 ) )
                       ) 
                     || ( 
                       ( ( $bool = 1 ) && ( $pos = $pad{I1724} ) or 1 ) 
                       &&                         (   ( $pad{I1727} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq '=' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I1727} ) && 0 ) )
                       ) 
                     || ( 
                       ( ( $bool = 1 ) && ( $pos = $pad{I1724} ) or 1 ) 
                       &&                         (   ( $pad{I1728} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq '-' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I1728} ) && 0 ) )
                     )
                   ) ||    ( ( $pos = $pad{I1723} ) && 0 ) )
               &&
                  (   ( $pad{I1729} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '>' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1729} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1696} ) or 1 ) 
               &&                 (   ( $pad{I1730} = $pos or 1 ) && 
                 do { 
                      my $prior = $::_V6_PRIOR_; 
                      my $match = 
                             $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                      $::_V6_PRIOR_ = $prior; 
                      my $bool = (!$match != 1);
                      $pos = $match->to if $bool;
                      $match;
                 } ||    ( ( $pos = $pad{I1730} ) && 0 ) )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1696} ) or 1 ) 
               &&                 (   ( $pad{I1731} = $pos or 1 ) && 
                 ( ( substr( $s, $pos ) =~ m/^((?:(?![\}\)\>]))\X)/ )  
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I1731} ) && 0 ) )
             )
           ) ||    ( ( $pos = $pad{I1695} ) && 0 ) )) {}; $bool = 1 }
       ) ;
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for string_code
 # Data::Bind->sub_signature
#  (\&string_code, );
;
*parsed_code = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I1732} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->string_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                my $bool = (!$match != 1);
                $pos = $match->to if $bool;
                $match;
           } ||    ( ( $pos = $pad{I1732} ) && 0 ) )
       &&
          (   ( $pad{I1733} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return('{' . $::_V6_MATCH_ . '}');
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1733} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for parsed_code
 # Data::Bind->sub_signature
#  (\&parsed_code, );
;
*named_capture_body = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
           ( $pad{I1734} = $pos or 1 ) 
           && (
           (
              (   ( $pad{I1735} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 1 ) eq '(' ) 
                   ? ( $pos += 1 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I1735} ) && 0 ) )
           &&
              (   ( $pad{I1736} = $pos or 1 ) && 
               do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                           $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1736} ) && 0 ) )
           &&
              (   ( $pad{I1737} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 1 ) eq ')' ) 
                   ? ( $pos += 1 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I1737} ) && 0 ) )
           &&
              (   ( $pad{I1738} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub  { return({'capturing_group' => ${ $::_V6_MATCH_->{'rule'}}});
 } ->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1738} ) && 0 ) )
           )
           ) 
         || ( 
           ( ( $bool = 1 ) && ( $pos = $pad{I1734} ) or 1 ) 
           &&            (
              (   ( $pad{I1739} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 1 ) eq '[' ) 
                   ? ( $pos += 1 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I1739} ) && 0 ) )
           &&
              (   ( $pad{I1740} = $pos or 1 ) && 
               do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                           $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1740} ) && 0 ) )
           &&
              (   ( $pad{I1741} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 1 ) eq ']' ) 
                   ? ( $pos += 1 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I1741} ) && 0 ) )
           &&
              (   ( $pad{I1742} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub  { return(${ $::_V6_MATCH_->{'rule'}});
 } ->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1742} ) && 0 ) )
           )
           ) 
         || ( 
           ( ( $bool = 1 ) && ( $pos = $pad{I1734} ) or 1 ) 
           &&            (
              (   ( $pad{I1743} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 1 ) eq '<' ) 
                   ? ( $pos += 1 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I1743} ) && 0 ) )
           &&
              (   ( $pad{I1744} = $pos or 1 ) && 
               do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                           $grammar->parse_metasyntax( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'parse_metasyntax'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1744} ) && 0 ) )
           &&
              (   ( $pad{I1745} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub  { return(${ $::_V6_MATCH_->{'parse_metasyntax'}});
 } ->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1745} ) && 0 ) )
           )
           ) 
         || ( 
           ( ( $bool = 1 ) && ( $pos = $pad{I1734} ) or 1 ) 
           &&            (
              (   ( $pad{I1746} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 1 ) eq chr(39) ) 
                   ? ( $pos += 1 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I1746} ) && 0 ) )
           &&
              (   ( $pad{I1747} = $pos or 1 ) && 
               do { 
                    my $prior = $::_V6_PRIOR_; 
                    my $match = 
                           $grammar->literal( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior; 
                    my $bool = (!$match != 1);
                    $pos = $match->to if $bool;
                    $match;
               } ||    ( ( $pos = $pad{I1747} ) && 0 ) )
           &&
              (   ( $pad{I1748} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 1 ) eq chr(39) ) 
                   ? ( $pos += 1 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I1748} ) && 0 ) )
           &&
              (   ( $pad{I1749} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub  { return({'metasyntax' => {'metasyntax' =>  "" . ${$::_V6_MATCH_}}});
 } ->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1749} ) && 0 ) )
           )
           ) 
         || ( 
           ( ( $bool = 1 ) && ( $pos = $pad{I1734} ) or 1 ) 
           &&             (   ( $pad{I1750} = $pos or 1 ) && 
             do { 
               local $::_V6_SUCCEED = 1;
               $::_V6_MATCH_ = $m;
               $m->data->{capture} = \( sub  { die("invalid alias syntax");
return( undef );
 } ->( $m ) ); 
               $bool = $::_V6_SUCCEED;
               $::_V6_MATCH_ = $m if $bool; 
               return $m if $bool; 
             } ||    ( ( $pos = $pad{I1750} ) && 0 ) )
         )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for named_capture_body
 # Data::Bind->sub_signature
#  (\&named_capture_body, );
;
*parse_metasyntax = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I1751} = $pos or 1 ) && 
           do{ 
                my $from = $pos;
                my $bool =                    (
                       ( $pad{I1752} = $pos or 1 ) 
                       && (
                        (   ( $pad{I1753} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq '!' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I1753} ) && 0 ) )
                       ) 
                     || ( 
                       ( ( $bool = 1 ) && ( $pos = $pad{I1752} ) or 1 ) 
                       &&                         (   ( $pad{I1754} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq '?' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I1754} ) && 0 ) )
                       ) 
                     || ( 
                       ( ( $bool = 1 ) && ( $pos = $pad{I1752} ) or 1 ) 
                       &&                         (   ( $pad{I1755} = $pos or 1 ) && 
 1 # null constant
 ||    ( ( $pos = $pad{I1755} ) && 0 ) )
                     )
                   );
                my $match = Pugs::Runtime::Match->new( 
                    { str => \$s, from => \$from, match => [], named => {}, bool => \1, to => \(0+$pos), capture => undef }
                ); $named{'modifier'} = $match;
                $bool
            } ||    ( ( $pos = $pad{I1751} ) && 0 ) )
       &&
          (   ( $pad{I1756} = $pos or 1 ) && 
           (
               ( $pad{I1757} = $pos or 1 ) 
               && (
               (
                  (   ( $pad{I1758} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '{' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1758} ) && 0 ) )
               &&
                  (   ( $pad{I1759} = $pos or 1 ) && 
                   do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                               $grammar->parsed_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'parsed_code'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1759} ) && 0 ) )
               &&
                  (   ( $pad{I1760} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 2 ) eq '}>' ) 
                       ? ( $pos += 2 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1760} ) && 0 ) )
               &&
                  (   ( $pad{I1761} = $pos or 1 ) && 
                   do { 
                     local $::_V6_SUCCEED = 1;
                     $::_V6_MATCH_ = $m;
                     $m->data->{capture} = \( sub  { return({'closure' => {'closure' => ${ $::_V6_MATCH_->{'parsed_code'}}, 'modifier' => ${ $::_V6_MATCH_->{'modifier'}}}});
 } ->( $m ) ); 
                     $bool = $::_V6_SUCCEED;
                     $::_V6_MATCH_ = $m if $bool; 
                     return $m if $bool; 
                   } ||    ( ( $pos = $pad{I1761} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1757} ) or 1 ) 
               &&                (
                  (   ( $pad{I1762} = $pos or 1 ) && 
                   do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                               $grammar->char_class( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'char_class'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1762} ) && 0 ) )
               &&
                 (
                  (   ( $pad{I1763} = $pos or 1 ) && 
                     do{ 
                         my $hash = do {
                           my $bool = 1;
                           my $from = $pos;
                           my @match;
                           my %named;
                           $bool = 0 unless
                             (
                                (   ( $pad{I1764} = $pos or 1 ) && 
                                 ( ( substr( $s, $pos ) =~ m/^((?:(?=[+-]))\X)/ )  
                                     ? ( $pos += length( $1 ) or 1 )
                                     : 0
                                 ) ||    ( ( $pos = $pad{I1764} ) && 0 ) )
                             &&
                                (   ( $pad{I1765} = $pos or 1 ) && 
                                 do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                                             $grammar->char_class( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'char_class'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1765} ) && 0 ) )
                             );
                           { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                         };
                         my $bool = ${$hash->{'bool'}};
                         if ( $bool ) {
                             push @{ $match[ 0 ] }, Pugs::Runtime::Match->new( $hash );
                         }
                         $bool;
                     } ||    ( ( $pos = $pad{I1763} ) && 0 ) )
                 && do { while (
                  (   ( $pad{I1763} = $pos or 1 ) && 
                     do{ 
                         my $hash = do {
                           my $bool = 1;
                           my $from = $pos;
                           my @match;
                           my %named;
                           $bool = 0 unless
                             (
                                (   ( $pad{I1764} = $pos or 1 ) && 
                                 ( ( substr( $s, $pos ) =~ m/^((?:(?=[+-]))\X)/ )  
                                     ? ( $pos += length( $1 ) or 1 )
                                     : 0
                                 ) ||    ( ( $pos = $pad{I1764} ) && 0 ) )
                             &&
                                (   ( $pad{I1765} = $pos or 1 ) && 
                                 do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                                             $grammar->char_class( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'char_class'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1765} ) && 0 ) )
                             );
                           { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                         };
                         my $bool = ${$hash->{'bool'}};
                         if ( $bool ) {
                             push @{ $match[ 0 ] }, Pugs::Runtime::Match->new( $hash );
                         }
                         $bool;
                     } ||    ( ( $pos = $pad{I1763} ) && 0 ) )) {}; $bool = 1 }
                 ) 
               &&
                  (   ( $pad{I1766} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '>' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1766} ) && 0 ) )
               &&
                  (   ( $pad{I1767} = $pos or 1 ) && 
                   do { 
                     local $::_V6_SUCCEED = 1;
                     $::_V6_MATCH_ = $m;
                     $m->data->{capture} = \( sub  { if(${ $::_V6_MATCH_->{'modifier'}} eq '!') { return({'negate' => {'char_class' => ['+' .  $::_V6_MATCH_->{'char_class'},
@{($::_V6_MATCH_->[0])}]}});
 } 
;
return({'char_class' => ['+' .  $::_V6_MATCH_->{'char_class'},
@{($::_V6_MATCH_->[0])}]});
 } ->( $m ) ); 
                     $bool = $::_V6_SUCCEED;
                     $::_V6_MATCH_ = $m if $bool; 
                     return $m if $bool; 
                   } ||    ( ( $pos = $pad{I1767} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1757} ) or 1 ) 
               &&                (
                  (   ( $pad{I1768} = $pos or 1 ) && 
                   do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                               $grammar->ident( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'ident'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1768} ) && 0 ) )
               &&
                  (   ( $pad{I1769} = $pos or 1 ) && 
                   (
                       ( $pad{I1770} = $pos or 1 ) 
                       && (
                       (
                          (   ( $pad{I1771} = $pos or 1 ) && 
                           do { 
                                my $prior = $::_V6_PRIOR_; 
                                my $match = 
                                       $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                $::_V6_PRIOR_ = $prior; 
                                my $bool = (!$match != 1);
                                $pos = $match->to if $bool;
                                $match;
                           } ||    ( ( $pos = $pad{I1771} ) && 0 ) )
                       &&
                          (   ( $pad{I1772} = $pos or 1 ) && 
                           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1772} ) && 0 ) )
                       &&
                          (   ( $pad{I1773} = $pos or 1 ) && 
                           ( ( substr( $s, $pos, 1 ) eq '>' ) 
                               ? ( $pos += 1 or 1 )
                               : 0
                           ) ||    ( ( $pos = $pad{I1773} ) && 0 ) )
                       &&
                          (   ( $pad{I1774} = $pos or 1 ) && 
                           do { 
                             local $::_V6_SUCCEED = 1;
                             $::_V6_MATCH_ = $m;
                             $m->data->{capture} = \( sub  { if((${ $::_V6_MATCH_->{'ident'}} eq 'before' || ${ $::_V6_MATCH_->{'ident'}} eq 'after')) { return({${ $::_V6_MATCH_->{'ident'}} => {'rule' => ${ $::_V6_MATCH_->{'rule'}}, 'modifier' => ${ $::_V6_MATCH_->{'modifier'}}}});
 } 
;
return({'metasyntax' => {'metasyntax' => ${ $::_V6_MATCH_->{'ident'}}, 'rule' => ${ $::_V6_MATCH_->{'rule'}}, 'modifier' => ${ $::_V6_MATCH_->{'modifier'}}}});
 } ->( $m ) ); 
                             $bool = $::_V6_SUCCEED;
                             $::_V6_MATCH_ = $m if $bool; 
                             return $m if $bool; 
                           } ||    ( ( $pos = $pad{I1774} ) && 0 ) )
                       )
                       ) 
                     || ( 
                       ( ( $bool = 1 ) && ( $pos = $pad{I1770} ) or 1 ) 
                       &&                        (
                          (   ( $pad{I1775} = $pos or 1 ) && 
                           ( ( substr( $s, $pos, 1 ) eq ':' ) 
                               ? ( $pos += 1 or 1 )
                               : 0
                           ) ||    ( ( $pos = $pad{I1775} ) && 0 ) )
                       &&
                         (
                          (   ( $pad{I1776} = $pos or 1 ) && 
                             do { 
                                  my $prior = $::_V6_PRIOR_; 
                                  my $match = 
                                         $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                  $::_V6_PRIOR_ = $prior; 
                                  my $bool = (!$match != 1);
                                  $pos = $match->to if $bool;
                                  $match;
                             } ||    ( ( $pos = $pad{I1776} ) && 0 ) )
                         || ( $bool = 1 )
                         ) 
                       &&
                          (   ( $pad{I1777} = $pos or 1 ) && 
                           do{ 
                my $from = $pos;
                my $bool =                                    do { while (
                                    (   ( $pad{I1778} = $pos or 1 ) && 
                                       (
                                           ( $pad{I1779} = $pos or 1 ) 
                                           && (
                                           (
                                              (   ( $pad{I1780} = $pos or 1 ) && 
                                               ( ( substr( $s, $pos, 1 ) eq '\\' ) 
                                                   ? ( $pos += 1 or 1 )
                                                   : 0
                                               ) ||    ( ( $pos = $pad{I1780} ) && 0 ) )
                                           &&
                                              (   ( $pad{I1781} = $pos or 1 ) && 
                                               do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                                                           $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'special_char'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1781} ) && 0 ) )
                                           )
                                           ) 
                                         || ( 
                                           ( ( $bool = 1 ) && ( $pos = $pad{I1779} ) or 1 ) 
                                           &&                                             (   ( $pad{I1782} = $pos or 1 ) && 
                                             do{ 
                my $match = 
          do {
            our $I1783;
            our $I1783_sizes;
            unless ( $I1783 ) {
                my $hash = \%Pugs::Grammar::Rule::variables;
                my %sizes = map { length($_) => 1 } keys %$hash;
                $I1783_sizes = [ sort { $b <=> $a } keys %sizes ];
                $I1783 = $hash;
            }
            my $match = 0;
            my $key;
            for ( @$I1783_sizes ) {
                $key = ( $pos <= length( $s ) 
                            ? substr( $s, $pos, $_ )
                            : '' );
                if ( exists $I1783->{$key} ) {
                    #$named{KEY} = $key;
                    #$::_V6_MATCH_ = $m; 
                    #print "m: ", Dumper( $::_V6_MATCH_->data )
                    #    if ( $key eq 'until' );
                    $match = Pugs::Runtime::Regex::preprocess_hash( $I1783, $key )->( $s, $grammar, { p => ( $pos + $_ ), positionals => [ ], args => { KEY => $key } }, undef );
                    last if $match;
                }
            }
            if ( $match ) {
                $pos = $match->to;
                #print "match: $key at $pos = ", Dumper( $match->data );
                $bool = 1;
            }; # else { $bool = 0 }
            $match;
          };
                if ( $match ) { push @{$named{'Pugs::Grammar::Rule::variables'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1782} ) && 0 ) )
                                           ) 
                                         || ( 
                                           ( ( $bool = 1 ) && ( $pos = $pad{I1779} ) or 1 ) 
                                           &&                                             (   ( $pad{I1784} = $pos or 1 ) && 
                                             ( ( substr( $s, $pos ) =~ m/^((?:(?![\>]))\X)/ )  
                                                 ? ( $pos += length( $1 ) or 1 )
                                                 : 0
                                             ) ||    ( ( $pos = $pad{I1784} ) && 0 ) )
                                         )
                                       ) ||    ( ( $pos = $pad{I1778} ) && 0 ) )) {}; $bool = 1 };
                my $match = Pugs::Runtime::Match->new( 
                    { str => \$s, from => \$from, match => [], named => {}, bool => \1, to => \(0+$pos), capture => undef }
                ); $named{'str'} = $match;
                $bool
            } ||    ( ( $pos = $pad{I1777} ) && 0 ) )
                       &&
                          (   ( $pad{I1785} = $pos or 1 ) && 
                           ( ( substr( $s, $pos, 1 ) eq '>' ) 
                               ? ( $pos += 1 or 1 )
                               : 0
                           ) ||    ( ( $pos = $pad{I1785} ) && 0 ) )
                       &&
                          (   ( $pad{I1786} = $pos or 1 ) && 
                           do { 
                             local $::_V6_SUCCEED = 1;
                             $::_V6_MATCH_ = $m;
                             $m->data->{capture} = \( sub  { if((${ $::_V6_MATCH_->{'ident'}} eq 'before' || ${ $::_V6_MATCH_->{'ident'}} eq 'after')) { return({${ $::_V6_MATCH_->{'ident'}} => {'rule' => {'metasyntax' => {'metasyntax' => '\'' . ${ $::_V6_MATCH_->{'str'}} . '\''}}, 'modifier' => ${ $::_V6_MATCH_->{'modifier'}}}});
 } 
;
return({'metasyntax' => {'metasyntax' => ${ $::_V6_MATCH_->{'ident'}}, 'string' => ${ $::_V6_MATCH_->{'str'}}, 'modifier' => ${ $::_V6_MATCH_->{'modifier'}}}});
 } ->( $m ) ); 
                             $bool = $::_V6_SUCCEED;
                             $::_V6_MATCH_ = $m if $bool; 
                             return $m if $bool; 
                           } ||    ( ( $pos = $pad{I1786} ) && 0 ) )
                       )
                       ) 
                     || ( 
                       ( ( $bool = 1 ) && ( $pos = $pad{I1770} ) or 1 ) 
                       &&                        (
                          (   ( $pad{I1787} = $pos or 1 ) && 
                           ( ( substr( $s, $pos, 1 ) eq '(' ) 
                               ? ( $pos += 1 or 1 )
                               : 0
                           ) ||    ( ( $pos = $pad{I1787} ) && 0 ) )
                       &&
                          (   ( $pad{I1788} = $pos or 1 ) && 
                           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                                       $grammar->parsed_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'parsed_code'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1788} ) && 0 ) )
                       &&
                          (   ( $pad{I1789} = $pos or 1 ) && 
                           ( ( substr( $s, $pos, 1 ) eq ')' ) 
                               ? ( $pos += 1 or 1 )
                               : 0
                           ) ||    ( ( $pos = $pad{I1789} ) && 0 ) )
                       &&
                          (   ( $pad{I1790} = $pos or 1 ) && 
                           ( ( substr( $s, $pos, 1 ) eq '>' ) 
                               ? ( $pos += 1 or 1 )
                               : 0
                           ) ||    ( ( $pos = $pad{I1790} ) && 0 ) )
                       &&
                          (   ( $pad{I1791} = $pos or 1 ) && 
                           do { 
                             local $::_V6_SUCCEED = 1;
                             $::_V6_MATCH_ = $m;
                             $m->data->{capture} = \( sub  { return({'call' => {'method' => ${ $::_V6_MATCH_->{'ident'}}, 'params' => ${ $::_V6_MATCH_->{'parsed_code'}}, 'modifier' => ${ $::_V6_MATCH_->{'modifier'}}}});
 } ->( $m ) ); 
                             $bool = $::_V6_SUCCEED;
                             $::_V6_MATCH_ = $m if $bool; 
                             return $m if $bool; 
                           } ||    ( ( $pos = $pad{I1791} ) && 0 ) )
                       )
                     )
                   ) ||    ( ( $pos = $pad{I1769} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I1757} ) or 1 ) 
               &&                (
                  (   ( $pad{I1792} = $pos or 1 ) && 
                   do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                               $grammar->metasyntax( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'metasyntax'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1792} ) && 0 ) )
               &&
                  (   ( $pad{I1793} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '>' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I1793} ) && 0 ) )
               &&
                  (   ( $pad{I1794} = $pos or 1 ) && 
                   do { 
                     local $::_V6_SUCCEED = 1;
                     $::_V6_MATCH_ = $m;
                     $m->data->{capture} = \( sub  { return({'metasyntax' => {'metasyntax' =>  "" . ${ $::_V6_MATCH_->{'metasyntax'}}, 'modifier' => ${ $::_V6_MATCH_->{'modifier'}}}});
 } ->( $m ) ); 
                     $bool = $::_V6_SUCCEED;
                     $::_V6_MATCH_ = $m if $bool; 
                     return $m if $bool; 
                   } ||    ( ( $pos = $pad{I1794} ) && 0 ) )
               )
             )
           ) ||    ( ( $pos = $pad{I1756} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for parse_metasyntax
 # Data::Bind->sub_signature
#  (\&parse_metasyntax, );
;
%variables = ('$<' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I1795} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->ident( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'ident'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1795} ) && 0 ) )
       &&
          (   ( $pad{I1796} = $pos or 1 ) && 
           ( ( substr( $s, $pos, 1 ) eq '>' ) 
               ? ( $pos += 1 or 1 )
               : 0
           ) ||    ( ( $pos = $pad{I1796} ) && 0 ) )
       &&
          (   ( $pad{I1797} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return({'match_variable' => '$' .  $::_V6_MATCH_->{'ident'}});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1797} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'$' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
           ( $pad{I1798} = $pos or 1 ) 
           && (
           (
             (
              (   ( $pad{I1799} = $pos or 1 ) && 
                 do { 
                      my $prior = $::_V6_PRIOR_; 
                      my $match = 
                             $grammar->digit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                      $::_V6_PRIOR_ = $prior; 
                      my $bool = (!$match != 1);
                      $pos = $match->to if $bool;
                      $match;
                 } ||    ( ( $pos = $pad{I1799} ) && 0 ) )
             && do { while (
              (   ( $pad{I1799} = $pos or 1 ) && 
                 do { 
                      my $prior = $::_V6_PRIOR_; 
                      my $match = 
                             $grammar->digit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                      $::_V6_PRIOR_ = $prior; 
                      my $bool = (!$match != 1);
                      $pos = $match->to if $bool;
                      $match;
                 } ||    ( ( $pos = $pad{I1799} ) && 0 ) )) {}; $bool = 1 }
             ) 
           &&
              (   ( $pad{I1800} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub  { return({'match_variable' => '$' . $::_V6_MATCH_});
 } ->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1800} ) && 0 ) )
           )
           ) 
         || ( 
           ( ( $bool = 1 ) && ( $pos = $pad{I1798} ) or 1 ) 
           &&            (
             (
              (   ( $pad{I1801} = $pos or 1 ) && 
                 ( ( substr( $s, $pos, 1 ) eq '^' ) 
                     ? ( $pos += 1 or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I1801} ) && 0 ) )
             || ( $bool = 1 )
             ) 
           &&
             (
              (   ( $pad{I1802} = $pos or 1 ) && 
                 (
                     ( $pad{I1803} = $pos or 1 ) 
                     && (
                      (   ( $pad{I1804} = $pos or 1 ) && 
                       do { 
                            my $prior = $::_V6_PRIOR_; 
                            my $match = 
                                   $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                            $::_V6_PRIOR_ = $prior; 
                            my $bool = (!$match != 1);
                            $pos = $match->to if $bool;
                            $match;
                       } ||    ( ( $pos = $pad{I1804} ) && 0 ) )
                     ) 
                   || ( 
                     ( ( $bool = 1 ) && ( $pos = $pad{I1803} ) or 1 ) 
                     &&                       (   ( $pad{I1805} = $pos or 1 ) && 
                       ( ( substr( $s, $pos, 1 ) eq '_' ) 
                           ? ( $pos += 1 or 1 )
                           : 0
                       ) ||    ( ( $pos = $pad{I1805} ) && 0 ) )
                     ) 
                   || ( 
                     ( ( $bool = 1 ) && ( $pos = $pad{I1803} ) or 1 ) 
                     &&                      (
                        (   ( $pad{I1806} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq ':' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I1806} ) && 0 ) )
                     &&
                        (   ( $pad{I1807} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq ':' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I1807} ) && 0 ) )
                     )
                   )
                 ) ||    ( ( $pos = $pad{I1802} ) && 0 ) )
             && do { while (
              (   ( $pad{I1802} = $pos or 1 ) && 
                 (
                     ( $pad{I1803} = $pos or 1 ) 
                     && (
                      (   ( $pad{I1804} = $pos or 1 ) && 
                       do { 
                            my $prior = $::_V6_PRIOR_; 
                            my $match = 
                                   $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                            $::_V6_PRIOR_ = $prior; 
                            my $bool = (!$match != 1);
                            $pos = $match->to if $bool;
                            $match;
                       } ||    ( ( $pos = $pad{I1804} ) && 0 ) )
                     ) 
                   || ( 
                     ( ( $bool = 1 ) && ( $pos = $pad{I1803} ) or 1 ) 
                     &&                       (   ( $pad{I1805} = $pos or 1 ) && 
                       ( ( substr( $s, $pos, 1 ) eq '_' ) 
                           ? ( $pos += 1 or 1 )
                           : 0
                       ) ||    ( ( $pos = $pad{I1805} ) && 0 ) )
                     ) 
                   || ( 
                     ( ( $bool = 1 ) && ( $pos = $pad{I1803} ) or 1 ) 
                     &&                      (
                        (   ( $pad{I1806} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq ':' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I1806} ) && 0 ) )
                     &&
                        (   ( $pad{I1807} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq ':' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I1807} ) && 0 ) )
                     )
                   )
                 ) ||    ( ( $pos = $pad{I1802} ) && 0 ) )) {}; $bool = 1 }
             ) 
           &&
              (   ( $pad{I1808} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub  { return({'variable' => '$' . $::_V6_MATCH_});
 } ->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1808} ) && 0 ) )
           )
         )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'@' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
           ( $pad{I1809} = $pos or 1 ) 
           && (
           (
             (
              (   ( $pad{I1810} = $pos or 1 ) && 
                 do { 
                      my $prior = $::_V6_PRIOR_; 
                      my $match = 
                             $grammar->digit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                      $::_V6_PRIOR_ = $prior; 
                      my $bool = (!$match != 1);
                      $pos = $match->to if $bool;
                      $match;
                 } ||    ( ( $pos = $pad{I1810} ) && 0 ) )
             && do { while (
              (   ( $pad{I1810} = $pos or 1 ) && 
                 do { 
                      my $prior = $::_V6_PRIOR_; 
                      my $match = 
                             $grammar->digit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                      $::_V6_PRIOR_ = $prior; 
                      my $bool = (!$match != 1);
                      $pos = $match->to if $bool;
                      $match;
                 } ||    ( ( $pos = $pad{I1810} ) && 0 ) )) {}; $bool = 1 }
             ) 
           &&
              (   ( $pad{I1811} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub  { return({'match_variable' => '@' . $::_V6_MATCH_});
 } ->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1811} ) && 0 ) )
           )
           ) 
         || ( 
           ( ( $bool = 1 ) && ( $pos = $pad{I1809} ) or 1 ) 
           &&            (
             (
              (   ( $pad{I1812} = $pos or 1 ) && 
                 ( ( substr( $s, $pos, 1 ) eq '^' ) 
                     ? ( $pos += 1 or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I1812} ) && 0 ) )
             || ( $bool = 1 )
             ) 
           &&
             (
              (   ( $pad{I1813} = $pos or 1 ) && 
                 (
                     ( $pad{I1814} = $pos or 1 ) 
                     && (
                      (   ( $pad{I1815} = $pos or 1 ) && 
                       do { 
                            my $prior = $::_V6_PRIOR_; 
                            my $match = 
                                   $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                            $::_V6_PRIOR_ = $prior; 
                            my $bool = (!$match != 1);
                            $pos = $match->to if $bool;
                            $match;
                       } ||    ( ( $pos = $pad{I1815} ) && 0 ) )
                     ) 
                   || ( 
                     ( ( $bool = 1 ) && ( $pos = $pad{I1814} ) or 1 ) 
                     &&                       (   ( $pad{I1816} = $pos or 1 ) && 
                       ( ( substr( $s, $pos, 1 ) eq '_' ) 
                           ? ( $pos += 1 or 1 )
                           : 0
                       ) ||    ( ( $pos = $pad{I1816} ) && 0 ) )
                     ) 
                   || ( 
                     ( ( $bool = 1 ) && ( $pos = $pad{I1814} ) or 1 ) 
                     &&                      (
                        (   ( $pad{I1817} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq ':' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I1817} ) && 0 ) )
                     &&
                        (   ( $pad{I1818} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq ':' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I1818} ) && 0 ) )
                     )
                   )
                 ) ||    ( ( $pos = $pad{I1813} ) && 0 ) )
             && do { while (
              (   ( $pad{I1813} = $pos or 1 ) && 
                 (
                     ( $pad{I1814} = $pos or 1 ) 
                     && (
                      (   ( $pad{I1815} = $pos or 1 ) && 
                       do { 
                            my $prior = $::_V6_PRIOR_; 
                            my $match = 
                                   $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                            $::_V6_PRIOR_ = $prior; 
                            my $bool = (!$match != 1);
                            $pos = $match->to if $bool;
                            $match;
                       } ||    ( ( $pos = $pad{I1815} ) && 0 ) )
                     ) 
                   || ( 
                     ( ( $bool = 1 ) && ( $pos = $pad{I1814} ) or 1 ) 
                     &&                       (   ( $pad{I1816} = $pos or 1 ) && 
                       ( ( substr( $s, $pos, 1 ) eq '_' ) 
                           ? ( $pos += 1 or 1 )
                           : 0
                       ) ||    ( ( $pos = $pad{I1816} ) && 0 ) )
                     ) 
                   || ( 
                     ( ( $bool = 1 ) && ( $pos = $pad{I1814} ) or 1 ) 
                     &&                      (
                        (   ( $pad{I1817} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq ':' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I1817} ) && 0 ) )
                     &&
                        (   ( $pad{I1818} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq ':' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I1818} ) && 0 ) )
                     )
                   )
                 ) ||    ( ( $pos = $pad{I1813} ) && 0 ) )) {}; $bool = 1 }
             ) 
           &&
              (   ( $pad{I1819} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub  { return({'variable' => '@' . $::_V6_MATCH_});
 } ->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1819} ) && 0 ) )
           )
         )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'%' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
           ( $pad{I1820} = $pos or 1 ) 
           && (
           (
             (
              (   ( $pad{I1821} = $pos or 1 ) && 
                 do { 
                      my $prior = $::_V6_PRIOR_; 
                      my $match = 
                             $grammar->digit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                      $::_V6_PRIOR_ = $prior; 
                      my $bool = (!$match != 1);
                      $pos = $match->to if $bool;
                      $match;
                 } ||    ( ( $pos = $pad{I1821} ) && 0 ) )
             && do { while (
              (   ( $pad{I1821} = $pos or 1 ) && 
                 do { 
                      my $prior = $::_V6_PRIOR_; 
                      my $match = 
                             $grammar->digit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                      $::_V6_PRIOR_ = $prior; 
                      my $bool = (!$match != 1);
                      $pos = $match->to if $bool;
                      $match;
                 } ||    ( ( $pos = $pad{I1821} ) && 0 ) )) {}; $bool = 1 }
             ) 
           &&
              (   ( $pad{I1822} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub  { return({'match_variable' => '%' . $::_V6_MATCH_});
 } ->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1822} ) && 0 ) )
           )
           ) 
         || ( 
           ( ( $bool = 1 ) && ( $pos = $pad{I1820} ) or 1 ) 
           &&            (
             (
              (   ( $pad{I1823} = $pos or 1 ) && 
                 ( ( substr( $s, $pos, 1 ) eq '^' ) 
                     ? ( $pos += 1 or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I1823} ) && 0 ) )
             || ( $bool = 1 )
             ) 
           &&
             (
              (   ( $pad{I1824} = $pos or 1 ) && 
                 (
                     ( $pad{I1825} = $pos or 1 ) 
                     && (
                      (   ( $pad{I1826} = $pos or 1 ) && 
                       do { 
                            my $prior = $::_V6_PRIOR_; 
                            my $match = 
                                   $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                            $::_V6_PRIOR_ = $prior; 
                            my $bool = (!$match != 1);
                            $pos = $match->to if $bool;
                            $match;
                       } ||    ( ( $pos = $pad{I1826} ) && 0 ) )
                     ) 
                   || ( 
                     ( ( $bool = 1 ) && ( $pos = $pad{I1825} ) or 1 ) 
                     &&                       (   ( $pad{I1827} = $pos or 1 ) && 
                       ( ( substr( $s, $pos, 1 ) eq '_' ) 
                           ? ( $pos += 1 or 1 )
                           : 0
                       ) ||    ( ( $pos = $pad{I1827} ) && 0 ) )
                     ) 
                   || ( 
                     ( ( $bool = 1 ) && ( $pos = $pad{I1825} ) or 1 ) 
                     &&                      (
                        (   ( $pad{I1828} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq ':' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I1828} ) && 0 ) )
                     &&
                        (   ( $pad{I1829} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq ':' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I1829} ) && 0 ) )
                     )
                   )
                 ) ||    ( ( $pos = $pad{I1824} ) && 0 ) )
             && do { while (
              (   ( $pad{I1824} = $pos or 1 ) && 
                 (
                     ( $pad{I1825} = $pos or 1 ) 
                     && (
                      (   ( $pad{I1826} = $pos or 1 ) && 
                       do { 
                            my $prior = $::_V6_PRIOR_; 
                            my $match = 
                                   $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                            $::_V6_PRIOR_ = $prior; 
                            my $bool = (!$match != 1);
                            $pos = $match->to if $bool;
                            $match;
                       } ||    ( ( $pos = $pad{I1826} ) && 0 ) )
                     ) 
                   || ( 
                     ( ( $bool = 1 ) && ( $pos = $pad{I1825} ) or 1 ) 
                     &&                       (   ( $pad{I1827} = $pos or 1 ) && 
                       ( ( substr( $s, $pos, 1 ) eq '_' ) 
                           ? ( $pos += 1 or 1 )
                           : 0
                       ) ||    ( ( $pos = $pad{I1827} ) && 0 ) )
                     ) 
                   || ( 
                     ( ( $bool = 1 ) && ( $pos = $pad{I1825} ) or 1 ) 
                     &&                      (
                        (   ( $pad{I1828} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq ':' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I1828} ) && 0 ) )
                     &&
                        (   ( $pad{I1829} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq ':' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I1829} ) && 0 ) )
                     )
                   )
                 ) ||    ( ( $pos = $pad{I1824} ) && 0 ) )) {}; $bool = 1 }
             ) 
           &&
              (   ( $pad{I1830} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub  { return({'variable' => '%' . $::_V6_MATCH_});
 } ->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1830} ) && 0 ) )
           )
         )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
);
%rule_terms = ('{*}' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
        (   ( $pad{I1831} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub  { return({'metasyntax' => {'metasyntax' => 'null'}});
 } ->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I1831} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'\'' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I1832} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->literal( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                my $bool = (!$match != 1);
                $pos = $match->to if $bool;
                $match;
           } ||    ( ( $pos = $pad{I1832} ) && 0 ) )
       &&
          (   ( $pad{I1833} = $pos or 1 ) && 
           ( ( substr( $s, $pos, 1 ) eq chr(39) ) 
               ? ( $pos += 1 or 1 )
               : 0
           ) ||    ( ( $pos = $pad{I1833} ) && 0 ) )
       &&
          (   ( $pad{I1834} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return({'metasyntax' => {'metasyntax' => '\'' . ${$::_V6_MATCH_}}});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1834} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'(' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I1835} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1835} ) && 0 ) )
       &&
          (   ( $pad{I1836} = $pos or 1 ) && 
           ( ( substr( $s, $pos, 1 ) eq ')' ) 
               ? ( $pos += 1 or 1 )
               : 0
           ) ||    ( ( $pos = $pad{I1836} ) && 0 ) )
       &&
          (   ( $pad{I1837} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return({'capturing_group' => ${ $::_V6_MATCH_->{'rule'}}});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1837} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'<(' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I1838} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1838} ) && 0 ) )
       &&
          (   ( $pad{I1839} = $pos or 1 ) && 
           ( ( substr( $s, $pos, 2 ) eq ')>' ) 
               ? ( $pos += 2 or 1 )
               : 0
           ) ||    ( ( $pos = $pad{I1839} ) && 0 ) )
       &&
          (   ( $pad{I1840} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return({'capture_as_result' => ${ $::_V6_MATCH_->{'rule'}}});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1840} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'<+' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I1841} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->char_class( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'char_class'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1841} ) && 0 ) )
       &&
         do { while (
          (   ( $pad{I1842} = $pos or 1 ) && 
             do{ 
                 my $hash = do {
                   my $bool = 1;
                   my $from = $pos;
                   my @match;
                   my %named;
                   $bool = 0 unless
                     (
                        (   ( $pad{I1843} = $pos or 1 ) && 
                         ( ( substr( $s, $pos ) =~ m/^((?:(?=[+-]))\X)/ )  
                             ? ( $pos += length( $1 ) or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I1843} ) && 0 ) )
                     &&
                        (   ( $pad{I1844} = $pos or 1 ) && 
                         do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                                     $grammar->char_class( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'char_class'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1844} ) && 0 ) )
                     );
                   { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                 };
                 my $bool = ${$hash->{'bool'}};
                 if ( $bool ) {
                     push @{ $match[ 0 ] }, Pugs::Runtime::Match->new( $hash );
                 }
                 $bool;
             } ||    ( ( $pos = $pad{I1842} ) && 0 ) )) {}; $bool = 1 }
       &&
          (   ( $pad{I1845} = $pos or 1 ) && 
           ( ( substr( $s, $pos, 1 ) eq '>' ) 
               ? ( $pos += 1 or 1 )
               : 0
           ) ||    ( ( $pos = $pad{I1845} ) && 0 ) )
       &&
          (   ( $pad{I1846} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return({'char_class' => ['+' .  $::_V6_MATCH_->{'char_class'},
@{($::_V6_MATCH_->[0])}]});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1846} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'<-' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I1847} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->char_class( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'char_class'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1847} ) && 0 ) )
       &&
         do { while (
          (   ( $pad{I1848} = $pos or 1 ) && 
             do{ 
                 my $hash = do {
                   my $bool = 1;
                   my $from = $pos;
                   my @match;
                   my %named;
                   $bool = 0 unless
                     (
                        (   ( $pad{I1849} = $pos or 1 ) && 
                         ( ( substr( $s, $pos ) =~ m/^((?:(?=[+-]))\X)/ )  
                             ? ( $pos += length( $1 ) or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I1849} ) && 0 ) )
                     &&
                        (   ( $pad{I1850} = $pos or 1 ) && 
                         do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                                     $grammar->char_class( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'char_class'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1850} ) && 0 ) )
                     );
                   { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                 };
                 my $bool = ${$hash->{'bool'}};
                 if ( $bool ) {
                     push @{ $match[ 0 ] }, Pugs::Runtime::Match->new( $hash );
                 }
                 $bool;
             } ||    ( ( $pos = $pad{I1848} ) && 0 ) )) {}; $bool = 1 }
       &&
          (   ( $pad{I1851} = $pos or 1 ) && 
           ( ( substr( $s, $pos, 1 ) eq '>' ) 
               ? ( $pos += 1 or 1 )
               : 0
           ) ||    ( ( $pos = $pad{I1851} ) && 0 ) )
       &&
          (   ( $pad{I1852} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return({'char_class' => ['-' .  $::_V6_MATCH_->{'char_class'},
@{($::_V6_MATCH_->[0])}]});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1852} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'<[' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I1853} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->char_range( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'char_range'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1853} ) && 0 ) )
       &&
          (   ( $pad{I1854} = $pos or 1 ) && 
           ( ( substr( $s, $pos, 1 ) eq ']' ) 
               ? ( $pos += 1 or 1 )
               : 0
           ) ||    ( ( $pos = $pad{I1854} ) && 0 ) )
       &&
         do { while (
          (   ( $pad{I1855} = $pos or 1 ) && 
             do{ 
                 my $hash = do {
                   my $bool = 1;
                   my $from = $pos;
                   my @match;
                   my %named;
                   $bool = 0 unless
                     (
                        (   ( $pad{I1856} = $pos or 1 ) && 
                         ( ( substr( $s, $pos ) =~ m/^((?:(?=[+-]))\X)/ )  
                             ? ( $pos += length( $1 ) or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I1856} ) && 0 ) )
                     &&
                        (   ( $pad{I1857} = $pos or 1 ) && 
                         do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                                     $grammar->char_class( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'char_class'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1857} ) && 0 ) )
                     );
                   { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                 };
                 my $bool = ${$hash->{'bool'}};
                 if ( $bool ) {
                     push @{ $match[ 0 ] }, Pugs::Runtime::Match->new( $hash );
                 }
                 $bool;
             } ||    ( ( $pos = $pad{I1855} ) && 0 ) )) {}; $bool = 1 }
       &&
          (   ( $pad{I1858} = $pos or 1 ) && 
           ( ( substr( $s, $pos, 1 ) eq '>' ) 
               ? ( $pos += 1 or 1 )
               : 0
           ) ||    ( ( $pos = $pad{I1858} ) && 0 ) )
       &&
          (   ( $pad{I1859} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return({'char_class' => ['+[' .  $::_V6_MATCH_->{'char_range'} . ']',
@{($::_V6_MATCH_->[0])}]});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1859} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'<' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I1860} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->parse_metasyntax( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'parse_metasyntax'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1860} ) && 0 ) )
       &&
          (   ( $pad{I1861} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return(${ $::_V6_MATCH_->{'parse_metasyntax'}});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1861} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'{' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I1862} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->parsed_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'parsed_code'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1862} ) && 0 ) )
       &&
          (   ( $pad{I1863} = $pos or 1 ) && 
           ( ( substr( $s, $pos, 1 ) eq '}' ) 
               ? ( $pos += 1 or 1 )
               : 0
           ) ||    ( ( $pos = $pad{I1863} ) && 0 ) )
       &&
          (   ( $pad{I1864} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return({'closure' => {'closure' => ${ $::_V6_MATCH_->{'parsed_code'}}, 'modifier' => 'plain'}});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1864} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'\\' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I1865} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'special_char'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1865} ) && 0 ) )
       &&
          (   ( $pad{I1866} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return(${ $::_V6_MATCH_->{'special_char'}});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1866} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'.' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
        (   ( $pad{I1867} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub  { return({'dot' => 1});
 } ->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I1867} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'[' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I1868} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1868} ) && 0 ) )
       &&
          (   ( $pad{I1869} = $pos or 1 ) && 
           ( ( substr( $s, $pos, 1 ) eq ']' ) 
               ? ( $pos += 1 or 1 )
               : 0
           ) ||    ( ( $pos = $pad{I1869} ) && 0 ) )
       &&
          (   ( $pad{I1870} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return(${ $::_V6_MATCH_->{'rule'}});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1870} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
':::' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
        (   ( $pad{I1871} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub  { return({'colon' => ':::'});
 } ->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I1871} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
':?' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
        (   ( $pad{I1872} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub  { return({'colon' => ':?'});
 } ->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I1872} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
':+' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
        (   ( $pad{I1873} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub  { return({'colon' => ':+'});
 } ->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I1873} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'::' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
        (   ( $pad{I1874} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub  { return({'colon' => '::'});
 } ->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I1874} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
':' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
        (   ( $pad{I1875} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub  { return({'colon' => ':'});
 } ->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I1875} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'$$' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
        (   ( $pad{I1876} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub  { return({'colon' => '$$'});
 } ->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I1876} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'$' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
        (   ( $pad{I1877} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub  { return({'colon' => '$'});
 } ->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I1877} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'^^' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
        (   ( $pad{I1878} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub  { return({'colon' => '^^'});
 } ->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I1878} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'^' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
        (   ( $pad{I1879} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub  { return({'colon' => '^'});
 } ->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I1879} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'>>' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
        (   ( $pad{I1880} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub  { return({'colon' => '>>'});
 } ->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I1880} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'»' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
        (   ( $pad{I1881} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub  { return({'colon' => '>>'});
 } ->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I1881} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'<<' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
        (   ( $pad{I1882} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub  { return({'colon' => '<<'});
 } ->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I1882} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'«' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
        (   ( $pad{I1883} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub  { return({'colon' => '<<'});
 } ->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I1883} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
':i' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I1884} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                my $bool = (!$match != 1);
                $pos = $match->to if $bool;
                $match;
           } ||    ( ( $pos = $pad{I1884} ) && 0 ) )
       &&
          (   ( $pad{I1885} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1885} ) && 0 ) )
       &&
          (   ( $pad{I1886} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return({'modifier' => {'modifier' => 'ignorecase', 'rule'=>${ $::_V6_MATCH_->{ qw(rule) }}}});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1886} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
':ignorecase' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I1887} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                my $bool = (!$match != 1);
                $pos = $match->to if $bool;
                $match;
           } ||    ( ( $pos = $pad{I1887} ) && 0 ) )
       &&
          (   ( $pad{I1888} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1888} ) && 0 ) )
       &&
          (   ( $pad{I1889} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return({'modifier' => {'modifier' => 'ignorecase', 'rule'=>${ $::_V6_MATCH_->{ qw(rule) }}}});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1889} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
':s' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I1890} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                my $bool = (!$match != 1);
                $pos = $match->to if $bool;
                $match;
           } ||    ( ( $pos = $pad{I1890} ) && 0 ) )
       &&
          (   ( $pad{I1891} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1891} ) && 0 ) )
       &&
          (   ( $pad{I1892} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return({'modifier' => 'sigspace', 'rule'=>${ $::_V6_MATCH_->{ qw(rule) }}});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1892} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
':sigspace' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I1893} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                my $bool = (!$match != 1);
                $pos = $match->to if $bool;
                $match;
           } ||    ( ( $pos = $pad{I1893} ) && 0 ) )
       &&
          (   ( $pad{I1894} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1894} ) && 0 ) )
       &&
          (   ( $pad{I1895} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return({'modifier' => 'sigspace', 'rule'=>${ $::_V6_MATCH_->{ qw(rule) }}});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1895} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
':P5' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I1896} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                my $bool = (!$match != 1);
                $pos = $match->to if $bool;
                $match;
           } ||    ( ( $pos = $pad{I1896} ) && 0 ) )
       &&
          (   ( $pad{I1897} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1897} ) && 0 ) )
       &&
          (   ( $pad{I1898} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return({'modifier' => 'Perl5', 'rule'=>${ $::_V6_MATCH_->{ qw(rule) }}});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1898} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
':Perl5' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I1899} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                my $bool = (!$match != 1);
                $pos = $match->to if $bool;
                $match;
           } ||    ( ( $pos = $pad{I1899} ) && 0 ) )
       &&
          (   ( $pad{I1900} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1900} ) && 0 ) )
       &&
          (   ( $pad{I1901} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return({'modifier' => 'Perl5', 'rule'=>${ $::_V6_MATCH_->{ qw(rule) }}});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1901} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
':bytes' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I1902} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                my $bool = (!$match != 1);
                $pos = $match->to if $bool;
                $match;
           } ||    ( ( $pos = $pad{I1902} ) && 0 ) )
       &&
          (   ( $pad{I1903} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1903} ) && 0 ) )
       &&
          (   ( $pad{I1904} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return({'modifier' => 'bytes', 'rule'=>${ $::_V6_MATCH_->{ qw(rule) }}});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1904} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
':codes' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I1905} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                my $bool = (!$match != 1);
                $pos = $match->to if $bool;
                $match;
           } ||    ( ( $pos = $pad{I1905} ) && 0 ) )
       &&
          (   ( $pad{I1906} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1906} ) && 0 ) )
       &&
          (   ( $pad{I1907} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return({'modifier' => 'codes', 'rule'=>${ $::_V6_MATCH_->{ qw(rule) }}});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1907} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
':graphs' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I1908} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                my $bool = (!$match != 1);
                $pos = $match->to if $bool;
                $match;
           } ||    ( ( $pos = $pad{I1908} ) && 0 ) )
       &&
          (   ( $pad{I1909} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1909} ) && 0 ) )
       &&
          (   ( $pad{I1910} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return({'modifier' => 'graphs', 'rule'=>${ $::_V6_MATCH_->{ qw(rule) }}});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1910} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
':langs' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I1911} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                my $bool = (!$match != 1);
                $pos = $match->to if $bool;
                $match;
           } ||    ( ( $pos = $pad{I1911} ) && 0 ) )
       &&
          (   ( $pad{I1912} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1912} ) && 0 ) )
       &&
          (   ( $pad{I1913} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return({'modifier' => 'langs', 'rule'=>${ $::_V6_MATCH_->{ qw(rule) }}});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1913} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
);
*term = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
           ( $pad{I1914} = $pos or 1 ) 
           && (
           (
              (   ( $pad{I1915} = $pos or 1 ) && 
               do{ 
                my $match = 
          do {
            our $I1916;
            our $I1916_sizes;
            unless ( $I1916 ) {
                my $hash = \%Pugs::Grammar::Rule::variables;
                my %sizes = map { length($_) => 1 } keys %$hash;
                $I1916_sizes = [ sort { $b <=> $a } keys %sizes ];
                $I1916 = $hash;
            }
            my $match = 0;
            my $key;
            for ( @$I1916_sizes ) {
                $key = ( $pos <= length( $s ) 
                            ? substr( $s, $pos, $_ )
                            : '' );
                if ( exists $I1916->{$key} ) {
                    #$named{KEY} = $key;
                    #$::_V6_MATCH_ = $m; 
                    #print "m: ", Dumper( $::_V6_MATCH_->data )
                    #    if ( $key eq 'until' );
                    $match = Pugs::Runtime::Regex::preprocess_hash( $I1916, $key )->( $s, $grammar, { p => ( $pos + $_ ), positionals => [ ], args => { KEY => $key } }, undef );
                    last if $match;
                }
            }
            if ( $match ) {
                $pos = $match->to;
                #print "match: $key at $pos = ", Dumper( $match->data );
                $bool = 1;
            }; # else { $bool = 0 }
            $match;
          };
                if ( $match ) { $named{'Pugs::Grammar::Rule::variables'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1915} ) && 0 ) )
           &&
              (   ( $pad{I1917} = $pos or 1 ) && 
               (
                   ( $pad{I1918} = $pos or 1 ) 
                   && (
                   (
                     (
                      (   ( $pad{I1919} = $pos or 1 ) && 
                         do { 
                              my $prior = $::_V6_PRIOR_; 
                              my $match = 
                                     $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                              $::_V6_PRIOR_ = $prior; 
                              my $bool = (!$match != 1);
                              $pos = $match->to if $bool;
                              $match;
                         } ||    ( ( $pos = $pad{I1919} ) && 0 ) )
                     || ( $bool = 1 )
                     ) 
                   &&
                      (   ( $pad{I1920} = $pos or 1 ) && 
                       ( ( substr( $s, $pos, 2 ) eq ':=' ) 
                           ? ( $pos += 2 or 1 )
                           : 0
                       ) ||    ( ( $pos = $pad{I1920} ) && 0 ) )
                   &&
                     (
                      (   ( $pad{I1921} = $pos or 1 ) && 
                         do { 
                              my $prior = $::_V6_PRIOR_; 
                              my $match = 
                                     $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                              $::_V6_PRIOR_ = $prior; 
                              my $bool = (!$match != 1);
                              $pos = $match->to if $bool;
                              $match;
                         } ||    ( ( $pos = $pad{I1921} ) && 0 ) )
                     || ( $bool = 1 )
                     ) 
                   &&
                      (   ( $pad{I1922} = $pos or 1 ) && 
                       do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                                   $grammar->named_capture_body( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'named_capture_body'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1922} ) && 0 ) )
                   &&
                      (   ( $pad{I1923} = $pos or 1 ) && 
                       do { 
                         local $::_V6_SUCCEED = 1;
                         $::_V6_MATCH_ = $m;
                         $m->data->{capture} = \( sub  { return({'named_capture' => {'rule' => ${ $::_V6_MATCH_->{'named_capture_body'}}, 'ident' => ${ $::_V6_MATCH_->{'Pugs::Grammar::Rule::variables'}}}});
 } ->( $m ) ); 
                         $bool = $::_V6_SUCCEED;
                         $::_V6_MATCH_ = $m if $bool; 
                         return $m if $bool; 
                       } ||    ( ( $pos = $pad{I1923} ) && 0 ) )
                   )
                   ) 
                 || ( 
                   ( ( $bool = 1 ) && ( $pos = $pad{I1918} ) or 1 ) 
                   &&                     (   ( $pad{I1924} = $pos or 1 ) && 
                     do { 
                       local $::_V6_SUCCEED = 1;
                       $::_V6_MATCH_ = $m;
                       $m->data->{capture} = \( sub  { return(${ $::_V6_MATCH_->{'Pugs::Grammar::Rule::variables'}});
 } ->( $m ) ); 
                       $bool = $::_V6_SUCCEED;
                       $::_V6_MATCH_ = $m if $bool; 
                       return $m if $bool; 
                     } ||    ( ( $pos = $pad{I1924} ) && 0 ) )
                 )
               ) ||    ( ( $pos = $pad{I1917} ) && 0 ) )
           )
           ) 
         || ( 
           ( ( $bool = 1 ) && ( $pos = $pad{I1914} ) or 1 ) 
           &&            (
              (   ( $pad{I1925} = $pos or 1 ) && 
               do{ 
                my $match = 
          do {
            our $I1926;
            our $I1926_sizes;
            unless ( $I1926 ) {
                my $hash = \%Pugs::Grammar::Rule::rule_terms;
                my %sizes = map { length($_) => 1 } keys %$hash;
                $I1926_sizes = [ sort { $b <=> $a } keys %sizes ];
                $I1926 = $hash;
            }
            my $match = 0;
            my $key;
            for ( @$I1926_sizes ) {
                $key = ( $pos <= length( $s ) 
                            ? substr( $s, $pos, $_ )
                            : '' );
                if ( exists $I1926->{$key} ) {
                    #$named{KEY} = $key;
                    #$::_V6_MATCH_ = $m; 
                    #print "m: ", Dumper( $::_V6_MATCH_->data )
                    #    if ( $key eq 'until' );
                    $match = Pugs::Runtime::Regex::preprocess_hash( $I1926, $key )->( $s, $grammar, { p => ( $pos + $_ ), positionals => [ ], args => { KEY => $key } }, undef );
                    last if $match;
                }
            }
            if ( $match ) {
                $pos = $match->to;
                #print "match: $key at $pos = ", Dumper( $match->data );
                $bool = 1;
            }; # else { $bool = 0 }
            $match;
          };
                if ( $match ) { $named{'Pugs::Grammar::Rule::rule_terms'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1925} ) && 0 ) )
           &&
              (   ( $pad{I1927} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub  { return(${ $::_V6_MATCH_->{'Pugs::Grammar::Rule::rule_terms'}});
 } ->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1927} ) && 0 ) )
           )
           ) 
         || ( 
           ( ( $bool = 1 ) && ( $pos = $pad{I1914} ) or 1 ) 
           &&            (
              (   ( $pad{I1928} = $pos or 1 ) && 
               ( ( substr( $s, $pos ) =~ m/^((?:(?![\]\}\)\>\:\?\+\*\|\&]))\X)/ )  
                   ? ( $pos += length( $1 ) or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I1928} ) && 0 ) )
           &&
              (   ( $pad{I1929} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub  { return({'constant' => ${$::_V6_MATCH_}});
 } ->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1929} ) && 0 ) )
           )
         )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for term
 # Data::Bind->sub_signature
#  (\&term, );
;
*quant = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
           ( $pad{I1930} = $pos or 1 ) 
           && (
           (
              (   ( $pad{I1931} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 2 ) eq '**' ) 
                   ? ( $pos += 2 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I1931} ) && 0 ) )
           &&
             (
              (   ( $pad{I1932} = $pos or 1 ) && 
                 do { 
                      my $prior = $::_V6_PRIOR_; 
                      my $match = 
                             $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                      $::_V6_PRIOR_ = $prior; 
                      my $bool = (!$match != 1);
                      $pos = $match->to if $bool;
                      $match;
                 } ||    ( ( $pos = $pad{I1932} ) && 0 ) )
             || ( $bool = 1 )
             ) 
           &&
              (   ( $pad{I1933} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 1 ) eq '{' ) 
                   ? ( $pos += 1 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I1933} ) && 0 ) )
           &&
              (   ( $pad{I1934} = $pos or 1 ) && 
               do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                           $grammar->parsed_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'parsed_code'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1934} ) && 0 ) )
           &&
              (   ( $pad{I1935} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 1 ) eq '}' ) 
                   ? ( $pos += 1 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I1935} ) && 0 ) )
           &&
              (   ( $pad{I1936} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub  { return({'closure' => ${ $::_V6_MATCH_->{'parsed_code'}}});
 } ->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1936} ) && 0 ) )
           )
           ) 
         || ( 
           ( ( $bool = 1 ) && ( $pos = $pad{I1930} ) or 1 ) 
           &&            (
            (   ( $pad{I1937} = $pos or 1 ) && 
               ( ( substr( $s, $pos ) =~ m/^((?:(?=[\?\*\+]))\X)/ )  
                   ? ( $pos += length( $1 ) or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I1937} ) && 0 ) )
           || ( $bool = 1 )
           ) 
         )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for quant
 # Data::Bind->sub_signature
#  (\&quant, );
;
*quantifier = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I1938} = $pos or 1 ) && 
           do{ 
                my $match = Pugs::Runtime::Match->new( do {
                    my $bool = 1;
                    my $from = $pos;
                    my @match;
                    my %named;
                    $bool = 0 unless                    do{ 
                       my $hash = do {
                         my $bool = 1;
                         my $from = $pos;
                         my @match;
                         my %named;
                         $bool = 0 unless
                           (
                            (   ( $pad{I1939} = $pos or 1 ) && 
                               do { 
                                    my $prior = $::_V6_PRIOR_; 
                                    my $match = 
                                           $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                    $::_V6_PRIOR_ = $prior; 
                                    my $bool = (!$match != 1);
                                    $pos = $match->to if $bool;
                                    $match;
                               } ||    ( ( $pos = $pad{I1939} ) && 0 ) )
                           || ( $bool = 1 )
                           ) ;
                         { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                       };
                       my $bool = ${$hash->{'bool'}};
                       $match[ 0 ] = Pugs::Runtime::Match->new( $hash );
                       $bool;
                   };
                    { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                } );
                if ( $match ) { $named{'ws1'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1938} ) && 0 ) )
       &&
          (   ( $pad{I1940} = $pos or 1 ) && 
           do{ 
               my $pos1 = $pos;
               do {
                 my $pos = $pos1;
                 my $from = $pos;
                 my @match;
                 my %named;
                 $bool =                      do{ 
                         my $pos1 = $pos;
                         do {
                           my $pos = $pos1;
                           my $from = $pos;
                           my @match;
                           my %named;
                           $bool = 0 unless
                                (   ( $pad{I1941} = $pos or 1 ) && 
                                 ( ( substr( $s, $pos ) =~ m/^((?:(?=[\}\]\)]))\X)/ )  
                                     ? ( $pos += length( $1 ) or 1 )
                                     : 0
                                 ) ||    ( ( $pos = $pad{I1941} ) && 0 ) );
                           $bool;
                         };
                     } ? 0 : 1;
                 $bool;
               };
           } ||    ( ( $pos = $pad{I1940} ) && 0 ) )
       &&
          (   ( $pad{I1942} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->term( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'term'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1942} ) && 0 ) )
       &&
          (   ( $pad{I1943} = $pos or 1 ) && 
           do{ 
                my $match = Pugs::Runtime::Match->new( do {
                    my $bool = 1;
                    my $from = $pos;
                    my @match;
                    my %named;
                    $bool = 0 unless                    do{ 
                       my $hash = do {
                         my $bool = 1;
                         my $from = $pos;
                         my @match;
                         my %named;
                         $bool = 0 unless
                           (
                            (   ( $pad{I1944} = $pos or 1 ) && 
                               do { 
                                    my $prior = $::_V6_PRIOR_; 
                                    my $match = 
                                           $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                    $::_V6_PRIOR_ = $prior; 
                                    my $bool = (!$match != 1);
                                    $pos = $match->to if $bool;
                                    $match;
                               } ||    ( ( $pos = $pad{I1944} ) && 0 ) )
                           || ( $bool = 1 )
                           ) ;
                         { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                       };
                       my $bool = ${$hash->{'bool'}};
                       $match[ 0 ] = Pugs::Runtime::Match->new( $hash );
                       $bool;
                   };
                    { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                } );
                if ( $match ) { $named{'ws2'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1943} ) && 0 ) )
       &&
          (   ( $pad{I1945} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->quant( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'quant'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1945} ) && 0 ) )
       &&
          (   ( $pad{I1946} = $pos or 1 ) && 
           do{ 
                my $match = Pugs::Runtime::Match->new( do {
                    my $bool = 1;
                    my $from = $pos;
                    my @match;
                    my %named;
                    $bool = 0 unless                    do{ 
                       my $hash = do {
                         my $bool = 1;
                         my $from = $pos;
                         my @match;
                         my %named;
                         $bool = 0 unless
                           (
                            (   ( $pad{I1947} = $pos or 1 ) && 
                               ( ( substr( $s, $pos ) =~ m/^((?:(?=[\?\+]))\X)/ )  
                                   ? ( $pos += length( $1 ) or 1 )
                                   : 0
                               ) ||    ( ( $pos = $pad{I1947} ) && 0 ) )
                           || ( $bool = 1 )
                           ) ;
                         { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                       };
                       my $bool = ${$hash->{'bool'}};
                       $match[ 0 ] = Pugs::Runtime::Match->new( $hash );
                       $bool;
                   };
                    { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                } );
                if ( $match ) { $named{'greedy'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1946} ) && 0 ) )
       &&
          (   ( $pad{I1948} = $pos or 1 ) && 
           do{ 
                my $match = Pugs::Runtime::Match->new( do {
                    my $bool = 1;
                    my $from = $pos;
                    my @match;
                    my %named;
                    $bool = 0 unless                    do{ 
                       my $hash = do {
                         my $bool = 1;
                         my $from = $pos;
                         my @match;
                         my %named;
                         $bool = 0 unless
                           (
                            (   ( $pad{I1949} = $pos or 1 ) && 
                               do { 
                                    my $prior = $::_V6_PRIOR_; 
                                    my $match = 
                                           $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                    $::_V6_PRIOR_ = $prior; 
                                    my $bool = (!$match != 1);
                                    $pos = $match->to if $bool;
                                    $match;
                               } ||    ( ( $pos = $pad{I1949} ) && 0 ) )
                           || ( $bool = 1 )
                           ) ;
                         { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                       };
                       my $bool = ${$hash->{'bool'}};
                       $match[ 0 ] = Pugs::Runtime::Match->new( $hash );
                       $bool;
                   };
                    { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                } );
                if ( $match ) { $named{'ws3'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1948} ) && 0 ) )
       &&
          (   ( $pad{I1950} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { if((${ $::_V6_MATCH_->{'quant'}} eq '' && (${ $::_V6_MATCH_->{'greedy'}} eq '' && (${ $::_V6_MATCH_->{'ws1'}} eq '' && (${ $::_V6_MATCH_->{'ws2'}} eq '' && ${ $::_V6_MATCH_->{'ws3'}} eq ''))))) { return(${ $::_V6_MATCH_->{'term'}});
 } 
;
return({'quant' => {'term' => ${ $::_V6_MATCH_->{'term'}}, 'quant' => ${ $::_V6_MATCH_->{'quant'}}, 'greedy' => ${ $::_V6_MATCH_->{'greedy'}}, 'ws1' => ${ $::_V6_MATCH_->{'ws1'}}, 'ws2' => ${ $::_V6_MATCH_->{'ws2'}}, 'ws3' => ${ $::_V6_MATCH_->{'ws3'}}}});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1950} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for quantifier
 # Data::Bind->sub_signature
#  (\&quantifier, );
;
*concat = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
         (
          (   ( $pad{I1951} = $pos or 1 ) && 
             do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                         $grammar->quantifier( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'quantifier'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1951} ) && 0 ) )
         && do { while (
          (   ( $pad{I1951} = $pos or 1 ) && 
             do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                         $grammar->quantifier( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'quantifier'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1951} ) && 0 ) )) {}; $bool = 1 }
         ) 
       &&
          (   ( $pad{I1952} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { 
        my @a = map {  $_->()  }  @{ $::_V6_MATCH_->{'quantifier'} };
        return { concat => \@a ,}  if scalar @a > 1;
        return $a[0];;
 # use v6
;
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1952} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for concat
 # Data::Bind->sub_signature
#  (\&concat, );
;
*conjunctive1 = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
         (
          (   ( $pad{I1953} = $pos or 1 ) && 
             (
               (
                (   ( $pad{I1954} = $pos or 1 ) && 
                   do { 
                        my $prior = $::_V6_PRIOR_; 
                        my $match = 
                               $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior; 
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   } ||    ( ( $pos = $pad{I1954} ) && 0 ) )
               || ( $bool = 1 )
               ) 
             &&
                (   ( $pad{I1955} = $pos or 1 ) && 
                 ( ( substr( $s, $pos, 1 ) eq '&' ) 
                     ? ( $pos += 1 or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I1955} ) && 0 ) )
             &&
                (   ( $pad{I1956} = $pos or 1 ) && 
                 do{ 
                     my $pos1 = $pos;
                     do {
                       my $pos = $pos1;
                       my $from = $pos;
                       my @match;
                       my %named;
                       $bool =                            do{ 
                               my $pos1 = $pos;
                               do {
                                 my $pos = $pos1;
                                 my $from = $pos;
                                 my @match;
                                 my %named;
                                 $bool = 0 unless
                                      (   ( $pad{I1957} = $pos or 1 ) && 
                                       ( ( substr( $s, $pos, 1 ) eq '&' ) 
                                           ? ( $pos += 1 or 1 )
                                           : 0
                                       ) ||    ( ( $pos = $pad{I1957} ) && 0 ) );
                                 $bool;
                               };
                           } ? 0 : 1;
                       $bool;
                     };
                 } ||    ( ( $pos = $pad{I1956} ) && 0 ) )
             ) ||    ( ( $pos = $pad{I1953} ) && 0 ) )
         || ( $bool = 1 )
         ) 
       &&
         (
           (   ( $pad{I1958} = $pos or 1 ) && 
             do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                         $grammar->concat( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'concat'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1958} ) && 0 ) )
         ) 
       &&
         do { while (
          (   ( $pad{I1959} = $pos or 1 ) && 
             (
                (   ( $pad{I1960} = $pos or 1 ) && 
                 ( ( substr( $s, $pos, 1 ) eq '&' ) 
                     ? ( $pos += 1 or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I1960} ) && 0 ) )
             &&
                (   ( $pad{I1961} = $pos or 1 ) && 
                 do{ 
                     my $pos1 = $pos;
                     do {
                       my $pos = $pos1;
                       my $from = $pos;
                       my @match;
                       my %named;
                       $bool =                            do{ 
                               my $pos1 = $pos;
                               do {
                                 my $pos = $pos1;
                                 my $from = $pos;
                                 my @match;
                                 my %named;
                                 $bool = 0 unless
                                      (   ( $pad{I1962} = $pos or 1 ) && 
                                       ( ( substr( $s, $pos, 1 ) eq '&' ) 
                                           ? ( $pos += 1 or 1 )
                                           : 0
                                       ) ||    ( ( $pos = $pad{I1962} ) && 0 ) );
                                 $bool;
                               };
                           } ? 0 : 1;
                       $bool;
                     };
                 } ||    ( ( $pos = $pad{I1961} ) && 0 ) )
             &&
                (   ( $pad{I1963} = $pos or 1 ) && 
                 do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                             $grammar->concat( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'concat'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1963} ) && 0 ) )
             ) ||    ( ( $pos = $pad{I1959} ) && 0 ) )) {}; $bool = 1 }
       &&
          (   ( $pad{I1964} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { 
        my @a = map {  $$_  }  @{ $::_V6_MATCH_->{'concat'} };
        return { conjunctive1 => \@a ,}  if scalar @a > 1;
        return $a[0];;
 # use v6
;
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1964} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for conjunctive1
 # Data::Bind->sub_signature
#  (\&conjunctive1, );
;
*disjunctive1 = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
         (
          (   ( $pad{I1965} = $pos or 1 ) && 
             (
               (
                (   ( $pad{I1966} = $pos or 1 ) && 
                   do { 
                        my $prior = $::_V6_PRIOR_; 
                        my $match = 
                               $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior; 
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   } ||    ( ( $pos = $pad{I1966} ) && 0 ) )
               || ( $bool = 1 )
               ) 
             &&
                (   ( $pad{I1967} = $pos or 1 ) && 
                 ( ( substr( $s, $pos, 1 ) eq '|' ) 
                     ? ( $pos += 1 or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I1967} ) && 0 ) )
             &&
                (   ( $pad{I1968} = $pos or 1 ) && 
                 do{ 
                     my $pos1 = $pos;
                     do {
                       my $pos = $pos1;
                       my $from = $pos;
                       my @match;
                       my %named;
                       $bool =                            do{ 
                               my $pos1 = $pos;
                               do {
                                 my $pos = $pos1;
                                 my $from = $pos;
                                 my @match;
                                 my %named;
                                 $bool = 0 unless
                                      (   ( $pad{I1969} = $pos or 1 ) && 
                                       ( ( substr( $s, $pos, 1 ) eq '|' ) 
                                           ? ( $pos += 1 or 1 )
                                           : 0
                                       ) ||    ( ( $pos = $pad{I1969} ) && 0 ) );
                                 $bool;
                               };
                           } ? 0 : 1;
                       $bool;
                     };
                 } ||    ( ( $pos = $pad{I1968} ) && 0 ) )
             ) ||    ( ( $pos = $pad{I1965} ) && 0 ) )
         || ( $bool = 1 )
         ) 
       &&
         (
           (   ( $pad{I1970} = $pos or 1 ) && 
             do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                         $grammar->conjunctive1( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'conjunctive1'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1970} ) && 0 ) )
         ) 
       &&
         do { while (
          (   ( $pad{I1971} = $pos or 1 ) && 
             (
                (   ( $pad{I1972} = $pos or 1 ) && 
                 ( ( substr( $s, $pos, 1 ) eq '|' ) 
                     ? ( $pos += 1 or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I1972} ) && 0 ) )
             &&
                (   ( $pad{I1973} = $pos or 1 ) && 
                 do{ 
                     my $pos1 = $pos;
                     do {
                       my $pos = $pos1;
                       my $from = $pos;
                       my @match;
                       my %named;
                       $bool =                            do{ 
                               my $pos1 = $pos;
                               do {
                                 my $pos = $pos1;
                                 my $from = $pos;
                                 my @match;
                                 my %named;
                                 $bool = 0 unless
                                      (   ( $pad{I1974} = $pos or 1 ) && 
                                       ( ( substr( $s, $pos, 1 ) eq '|' ) 
                                           ? ( $pos += 1 or 1 )
                                           : 0
                                       ) ||    ( ( $pos = $pad{I1974} ) && 0 ) );
                                 $bool;
                               };
                           } ? 0 : 1;
                       $bool;
                     };
                 } ||    ( ( $pos = $pad{I1973} ) && 0 ) )
             &&
                (   ( $pad{I1975} = $pos or 1 ) && 
                 do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                             $grammar->conjunctive1( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'conjunctive1'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1975} ) && 0 ) )
             ) ||    ( ( $pos = $pad{I1971} ) && 0 ) )) {}; $bool = 1 }
       &&
          (   ( $pad{I1976} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { 
        my @a = map {  $$_  }  @{ $::_V6_MATCH_->{'conjunctive1'} };
        return { alt1 => \@a ,}  if scalar @a > 1;
        return $a[0];;
 # use v6
;
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1976} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for disjunctive1
 # Data::Bind->sub_signature
#  (\&disjunctive1, );
;
*conjunctive = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
         (
          (   ( $pad{I1977} = $pos or 1 ) && 
             (
               (
                (   ( $pad{I1978} = $pos or 1 ) && 
                   do { 
                        my $prior = $::_V6_PRIOR_; 
                        my $match = 
                               $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior; 
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   } ||    ( ( $pos = $pad{I1978} ) && 0 ) )
               || ( $bool = 1 )
               ) 
             &&
                (   ( $pad{I1979} = $pos or 1 ) && 
                 ( ( substr( $s, $pos, 1 ) eq '&' ) 
                     ? ( $pos += 1 or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I1979} ) && 0 ) )
             &&
                (   ( $pad{I1980} = $pos or 1 ) && 
                 ( ( substr( $s, $pos, 1 ) eq '&' ) 
                     ? ( $pos += 1 or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I1980} ) && 0 ) )
             ) ||    ( ( $pos = $pad{I1977} ) && 0 ) )
         || ( $bool = 1 )
         ) 
       &&
         (
           (   ( $pad{I1981} = $pos or 1 ) && 
             do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                         $grammar->disjunctive1( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'disjunctive1'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1981} ) && 0 ) )
         ) 
       &&
         do { while (
          (   ( $pad{I1982} = $pos or 1 ) && 
             (
                (   ( $pad{I1983} = $pos or 1 ) && 
                 ( ( substr( $s, $pos, 1 ) eq '&' ) 
                     ? ( $pos += 1 or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I1983} ) && 0 ) )
             &&
                (   ( $pad{I1984} = $pos or 1 ) && 
                 ( ( substr( $s, $pos, 1 ) eq '&' ) 
                     ? ( $pos += 1 or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I1984} ) && 0 ) )
             &&
                (   ( $pad{I1985} = $pos or 1 ) && 
                 do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                             $grammar->disjunctive1( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'disjunctive1'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1985} ) && 0 ) )
             ) ||    ( ( $pos = $pad{I1982} ) && 0 ) )) {}; $bool = 1 }
       &&
          (   ( $pad{I1986} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { 
        my @a = map {  $$_  }  @{ $::_V6_MATCH_->{'disjunctive1'} };
        return { conjunctive => \@a ,}  if scalar @a > 1;
        return $a[0];;
 # use v6
;
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1986} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for conjunctive
 # Data::Bind->sub_signature
#  (\&conjunctive, );
;
*rule = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
         (
          (   ( $pad{I1987} = $pos or 1 ) && 
             (
               (
                (   ( $pad{I1988} = $pos or 1 ) && 
                   do { 
                        my $prior = $::_V6_PRIOR_; 
                        my $match = 
                               $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior; 
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   } ||    ( ( $pos = $pad{I1988} ) && 0 ) )
               || ( $bool = 1 )
               ) 
             &&
                (   ( $pad{I1989} = $pos or 1 ) && 
                 ( ( substr( $s, $pos, 1 ) eq '|' ) 
                     ? ( $pos += 1 or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I1989} ) && 0 ) )
             &&
                (   ( $pad{I1990} = $pos or 1 ) && 
                 ( ( substr( $s, $pos, 1 ) eq '|' ) 
                     ? ( $pos += 1 or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I1990} ) && 0 ) )
             ) ||    ( ( $pos = $pad{I1987} ) && 0 ) )
         || ( $bool = 1 )
         ) 
       &&
         (
           (   ( $pad{I1991} = $pos or 1 ) && 
             do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                         $grammar->conjunctive( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'conjunctive'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1991} ) && 0 ) )
         ) 
       &&
         do { while (
          (   ( $pad{I1992} = $pos or 1 ) && 
             (
                (   ( $pad{I1993} = $pos or 1 ) && 
                 ( ( substr( $s, $pos, 1 ) eq '|' ) 
                     ? ( $pos += 1 or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I1993} ) && 0 ) )
             &&
                (   ( $pad{I1994} = $pos or 1 ) && 
                 ( ( substr( $s, $pos, 1 ) eq '|' ) 
                     ? ( $pos += 1 or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I1994} ) && 0 ) )
             &&
                (   ( $pad{I1995} = $pos or 1 ) && 
                 do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                             $grammar->conjunctive( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'conjunctive'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I1995} ) && 0 ) )
             ) ||    ( ( $pos = $pad{I1992} ) && 0 ) )) {}; $bool = 1 }
       &&
          (   ( $pad{I1996} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { 
        my @a = map {  $$_  }  @{ $::_V6_MATCH_->{'conjunctive'} };
        return { alt => \@a ,}  if scalar @a > 1;
        return $a[0];;
 # use v6
;
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1996} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for rule
 # Data::Bind->sub_signature
#  (\&rule, );
;

; 1;
