{

    package Match;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }

    BEGIN {
        $_ =
          $::Scalar->{_dispatch}( $::Scalar, "new",
            { modified => $_MODIFIED, name => "$_" } );
    }
    $::Class->{_dispatch}( $::Class, 'new',
        $::Str->{_dispatch}( $::Str, 'new', 'Match' ) );
    $::Match->{_dispatch}( $::Match, 'HOW', )->{_dispatch}(
        $::Match->{_dispatch}( $::Match, 'HOW', ),
        'add_attribute', $::Str->{_dispatch}( $::Str, 'new', 'from' )
    );
    $::Match->{_dispatch}( $::Match, 'HOW', )->{_dispatch}(
        $::Match->{_dispatch}( $::Match, 'HOW', ),
        'add_attribute', $::Str->{_dispatch}( $::Str, 'new', 'to' )
    );
    $::Match->{_dispatch}( $::Match, 'HOW', )->{_dispatch}(
        $::Match->{_dispatch}( $::Match, 'HOW', ),
        'add_attribute', $::Str->{_dispatch}( $::Str, 'new', 'result' )
    );
    $::Match->{_dispatch}( $::Match, 'HOW', )->{_dispatch}(
        $::Match->{_dispatch}( $::Match, 'HOW', ),
        'add_attribute', $::Str->{_dispatch}( $::Str, 'new', 'bool' )
    );
    $::Match->{_dispatch}( $::Match, 'HOW', )->{_dispatch}(
        $::Match->{_dispatch}( $::Match, 'HOW', ),
        'add_attribute', $::Str->{_dispatch}( $::Str, 'new', 'match_str' )
    );
    $::Match->{_dispatch}( $::Match, 'HOW', )->{_dispatch}(
        $::Match->{_dispatch}( $::Match, 'HOW', ),
        'add_attribute', $::Str->{_dispatch}( $::Str, 'new', 'array' )
    );
    $::Match->{_dispatch}( $::Match, 'HOW', )->{_dispatch}(
        $::Match->{_dispatch}( $::Match, 'HOW', ),
        'add_attribute', $::Str->{_dispatch}( $::Str, 'new', 'hash' )
    );
    1
}

{

    package Signature;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }

    BEGIN {
        $_ =
          $::Scalar->{_dispatch}( $::Scalar, "new",
            { modified => $_MODIFIED, name => "$_" } );
    }
    $::Class->{_dispatch}( $::Class, 'new',
        $::Str->{_dispatch}( $::Str, 'new', 'Signature' ) );
    $::Signature->{_dispatch}( $::Signature, 'HOW', )->{_dispatch}(
        $::Signature->{_dispatch}( $::Signature, 'HOW', ),
        'add_attribute', $::Str->{_dispatch}( $::Str, 'new', 'scalar' )
    );
    $::Signature->{_dispatch}( $::Signature, 'HOW', )->{_dispatch}(
        $::Signature->{_dispatch}( $::Signature, 'HOW', ),
        'add_attribute', $::Str->{_dispatch}( $::Str, 'new', 'array' )
    );
    $::Signature->{_dispatch}( $::Signature, 'HOW', )->{_dispatch}(
        $::Signature->{_dispatch}( $::Signature, 'HOW', ),
        'add_attribute', $::Str->{_dispatch}( $::Str, 'new', 'hash' )
    );
    1
}

{

    package Capture;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }

    BEGIN {
        $_ =
          $::Scalar->{_dispatch}( $::Scalar, "new",
            { modified => $_MODIFIED, name => "$_" } );
    }
    $::Class->{_dispatch}( $::Class, 'new',
        $::Str->{_dispatch}( $::Str, 'new', 'Capture' ) );
    $::Capture->{_dispatch}( $::Capture, 'HOW', )->{_dispatch}(
        $::Capture->{_dispatch}( $::Capture, 'HOW', ),
        'add_attribute', $::Str->{_dispatch}( $::Str, 'new', 'scalar' )
    );
    $::Capture->{_dispatch}( $::Capture, 'HOW', )->{_dispatch}(
        $::Capture->{_dispatch}( $::Capture, 'HOW', ),
        'add_attribute', $::Str->{_dispatch}( $::Str, 'new', 'array' )
    );
    $::Capture->{_dispatch}( $::Capture, 'HOW', )->{_dispatch}(
        $::Capture->{_dispatch}( $::Capture, 'HOW', ),
        'add_attribute', $::Str->{_dispatch}( $::Str, 'new', 'hash' )
    );
    1
}

{

    package Scalar;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }

    BEGIN {
        $_ =
          $::Scalar->{_dispatch}( $::Scalar, "new",
            { modified => $_MODIFIED, name => "$_" } );
    }
    $::Class->{_dispatch}( $::Class, 'new',
        $::Str->{_dispatch}( $::Str, 'new', 'Scalar' ) );
    $::Scalar->{_dispatch}( $::Scalar, 'HOW', )->{_dispatch}(
        $::Scalar->{_dispatch}( $::Scalar, 'HOW', ),
        'add_role', $::Str->{_dispatch}( $::Str, 'new', 'Container' )
    );
    $::Scalar->{_dispatch}( $::Scalar, 'HOW', )->{_dispatch}(
        $::Scalar->{_dispatch}( $::Scalar, 'HOW', ),
        'add_attribute', $::Str->{_dispatch}( $::Str, 'new', 'value' )
    );
    1
}

{

    package Array;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }

    BEGIN {
        $_ =
          $::Scalar->{_dispatch}( $::Scalar, "new",
            { modified => $_MODIFIED, name => "$_" } );
    }
    $::Class->{_dispatch}( $::Class, 'new',
        $::Str->{_dispatch}( $::Str, 'new', 'Array' ) );
    $::Array->{_dispatch}( $::Array, 'HOW', )->{_dispatch}(
        $::Array->{_dispatch}( $::Array, 'HOW', ),
        'add_role', $::Str->{_dispatch}( $::Str, 'new', 'Container' )
    );
    $::Array->{_dispatch}( $::Array, 'HOW', )->{_dispatch}(
        $::Array->{_dispatch}( $::Array, 'HOW', ),
        'add_attribute', $::Str->{_dispatch}( $::Str, 'new', 'value' )
    );
    1
}

{

    package Hash;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }

    BEGIN {
        $_ =
          $::Scalar->{_dispatch}( $::Scalar, "new",
            { modified => $_MODIFIED, name => "$_" } );
    }
    $::Class->{_dispatch}( $::Class, 'new',
        $::Str->{_dispatch}( $::Str, 'new', 'Hash' ) );
    $::Hash->{_dispatch}( $::Hash, 'HOW', )->{_dispatch}(
        $::Hash->{_dispatch}( $::Hash, 'HOW', ),
        'add_role', $::Str->{_dispatch}( $::Str, 'new', 'Container' )
    );
    $::Hash->{_dispatch}( $::Hash, 'HOW', )->{_dispatch}(
        $::Hash->{_dispatch}( $::Hash, 'HOW', ),
        'add_attribute', $::Str->{_dispatch}( $::Str, 'new', 'value' )
    );
    1
}

