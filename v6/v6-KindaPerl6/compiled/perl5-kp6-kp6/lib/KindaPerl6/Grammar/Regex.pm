{

    package KindaPerl6::Grammar::Regex;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict "vars";
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }

    BEGIN {
        $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } );
    }
    do {
        my $Hash_rule_terms = ::DISPATCH( $::Hash, 'new', { modified => $_MODIFIED, name => '$Hash_rule_terms' } );
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::KindaPerl6::Grammar::Regex ), "true" ), "p5landish" ) ) {
            }
            else {
                do {
                    my $Hash_rule_terms = ::DISPATCH( $::Hash, 'new', { modified => $_MODIFIED, name => '$Hash_rule_terms' } );
                    do {
                        ::MODIFIED($::KindaPerl6::Grammar::Regex);
                        $::KindaPerl6::Grammar::Regex = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'KindaPerl6::Grammar::Regex' ) ), 'PROTOTYPE', );
                        }
                    }
            }
        };
        $Hash_rule_terms;
        do {
            use vars qw($_rule_ws);
            $_rule_ws
                = qr/(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; $GLOBAL::_M2 = $GLOBAL::_M; })(?:(?:(?:(??{ eval '$_rule_KindaPerl6::Grammar.ws' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; }))))(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; $GLOBAL::_M2 = $GLOBAL::_M; })/x;
            ::DISPATCH(
                ::DISPATCH( $::KindaPerl6::Grammar::Regex, "HOW" ),
                "add_method",
                ::DISPATCH( $::Str, "new", "ws" ),
                ::DISPATCH(
                    $::Method,
                    "new",
                    sub {
                        local $GLOBAL::_Class = shift;
                        undef $GLOBAL::_M2;
                        (   ref($_)
                            ? $_->{_dispatch}( $_, "Str" )->{_value}
                            : $_
                        ) =~ /$_rule_ws/;
                        if ( $GLOBAL::_M2->[1] eq 'to' ) {
                            Match::from_global_data($GLOBAL::_M2);
                            $MATCH = $GLOBAL::MATCH = pop @Match::Matches;
                        }
                        else { $MATCH = $GLOBAL::MATCH = Match->new(); }
                        @Match::Matches = ();
                        return $MATCH;
                    }
                ),
            );
        };
        do {
            use vars qw($_rule_ident);
            $_rule_ident
                = qr/(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; $GLOBAL::_M2 = $GLOBAL::_M; })(?:(?:(?:(??{ eval '$_rule_KindaPerl6::Grammar.full_ident' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; })))|(?:(?:(??{ eval '$_rule_digit' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "digit" ]; }))))(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; $GLOBAL::_M2 = $GLOBAL::_M; })/x;
            ::DISPATCH(
                ::DISPATCH( $::KindaPerl6::Grammar::Regex, "HOW" ),
                "add_method",
                ::DISPATCH( $::Str, "new", "ident" ),
                ::DISPATCH(
                    $::Method,
                    "new",
                    sub {
                        local $GLOBAL::_Class = shift;
                        undef $GLOBAL::_M2;
                        (   ref($_)
                            ? $_->{_dispatch}( $_, "Str" )->{_value}
                            : $_
                        ) =~ /$_rule_ident/;
                        if ( $GLOBAL::_M2->[1] eq 'to' ) {
                            Match::from_global_data($GLOBAL::_M2);
                            $MATCH = $GLOBAL::MATCH = pop @Match::Matches;
                        }
                        else { $MATCH = $GLOBAL::MATCH = Match->new(); }
                        @Match::Matches = ();
                        return $MATCH;
                    }
                ),
            );
        };
        do {
            use vars qw($_rule_any);
            $_rule_any = qr/(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; $GLOBAL::_M2 = $GLOBAL::_M; })(?:(?:(?:\n\r?|\r\n?|\X)))(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; $GLOBAL::_M2 = $GLOBAL::_M; })/x;
            ::DISPATCH(
                ::DISPATCH( $::KindaPerl6::Grammar::Regex, "HOW" ),
                "add_method",
                ::DISPATCH( $::Str, "new", "any" ),
                ::DISPATCH(
                    $::Method,
                    "new",
                    sub {
                        local $GLOBAL::_Class = shift;
                        undef $GLOBAL::_M2;
                        (   ref($_)
                            ? $_->{_dispatch}( $_, "Str" )->{_value}
                            : $_
                        ) =~ /$_rule_any/;
                        if ( $GLOBAL::_M2->[1] eq 'to' ) {
                            Match::from_global_data($GLOBAL::_M2);
                            $MATCH = $GLOBAL::MATCH = pop @Match::Matches;
                        }
                        else { $MATCH = $GLOBAL::MATCH = Match->new(); }
                        @Match::Matches = ();
                        return $MATCH;
                    }
                ),
            );
        };
        do {
            use vars qw($_rule_literal);
            $_rule_literal
                = qr/(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; $GLOBAL::_M2 = $GLOBAL::_M; })(?:(?:\\(?:\n\r?|\r\n?|\X)(?:(??{ eval '$_rule_literal' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture_to_array", "literal" ]; })))|(?:(?!(?:(?:\')))(?:\n\r?|\r\n?|\X)(?:(??{ eval '$_rule_literal' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture_to_array", "literal" ]; })))|(?:))(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; $GLOBAL::_M2 = $GLOBAL::_M; })/x;
            ::DISPATCH(
                ::DISPATCH( $::KindaPerl6::Grammar::Regex, "HOW" ),
                "add_method",
                ::DISPATCH( $::Str, "new", "literal" ),
                ::DISPATCH(
                    $::Method,
                    "new",
                    sub {
                        local $GLOBAL::_Class = shift;
                        undef $GLOBAL::_M2;
                        (   ref($_)
                            ? $_->{_dispatch}( $_, "Str" )->{_value}
                            : $_
                        ) =~ /$_rule_literal/;
                        if ( $GLOBAL::_M2->[1] eq 'to' ) {
                            Match::from_global_data($GLOBAL::_M2);
                            $MATCH = $GLOBAL::MATCH = pop @Match::Matches;
                        }
                        else { $MATCH = $GLOBAL::MATCH = Match->new(); }
                        @Match::Matches = ();
                        return $MATCH;
                    }
                ),
            );
        };
        do {
            use vars qw($_rule_metasyntax);
            $_rule_metasyntax
                = qr/(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; $GLOBAL::_M2 = $GLOBAL::_M; })(?:(?:(?:(?:\\(?:\n\r?|\r\n?|\X))|(?:\'(?:(??{ eval '$_rule_literal' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; }))\')|(?:\{(?:(??{ eval '$_rule_parsed_code' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; })))|(?:\<(?:(??{ eval '$_rule_metasyntax' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; }))\>)|(?:(?!(?:(?:\>)))(?:\n\r?|\r\n?|\X)))(?:(?:(?:(??{ eval '$_rule_metasyntax' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "metasyntax" ]; })))|(?:))))(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; $GLOBAL::_M2 = $GLOBAL::_M; })/x;
            ::DISPATCH(
                ::DISPATCH( $::KindaPerl6::Grammar::Regex, "HOW" ),
                "add_method",
                ::DISPATCH( $::Str, "new", "metasyntax" ),
                ::DISPATCH(
                    $::Method,
                    "new",
                    sub {
                        local $GLOBAL::_Class = shift;
                        undef $GLOBAL::_M2;
                        (   ref($_)
                            ? $_->{_dispatch}( $_, "Str" )->{_value}
                            : $_
                        ) =~ /$_rule_metasyntax/;
                        if ( $GLOBAL::_M2->[1] eq 'to' ) {
                            Match::from_global_data($GLOBAL::_M2);
                            $MATCH = $GLOBAL::MATCH = pop @Match::Matches;
                        }
                        else { $MATCH = $GLOBAL::MATCH = Match->new(); }
                        @Match::Matches = ();
                        return $MATCH;
                    }
                ),
            );
        };
        do {
            use vars qw($_rule_char_range);
            $_rule_char_range
                = qr/(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; $GLOBAL::_M2 = $GLOBAL::_M; })(?:(?:(?:(?:\\(?:\n\r?|\r\n?|\X))|(?:(?!(?:(?:\])))(?:\n\r?|\r\n?|\X)))(?:(?:(?:(??{ eval '$_rule_char_range' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "char_range" ]; })))|(?:))))(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; $GLOBAL::_M2 = $GLOBAL::_M; })/x;
            ::DISPATCH(
                ::DISPATCH( $::KindaPerl6::Grammar::Regex, "HOW" ),
                "add_method",
                ::DISPATCH( $::Str, "new", "char_range" ),
                ::DISPATCH(
                    $::Method,
                    "new",
                    sub {
                        local $GLOBAL::_Class = shift;
                        undef $GLOBAL::_M2;
                        (   ref($_)
                            ? $_->{_dispatch}( $_, "Str" )->{_value}
                            : $_
                        ) =~ /$_rule_char_range/;
                        if ( $GLOBAL::_M2->[1] eq 'to' ) {
                            Match::from_global_data($GLOBAL::_M2);
                            $MATCH = $GLOBAL::MATCH = pop @Match::Matches;
                        }
                        else { $MATCH = $GLOBAL::MATCH = Match->new(); }
                        @Match::Matches = ();
                        return $MATCH;
                    }
                ),
            );
        };
        do {
            use vars qw($_rule_char_class);
            $_rule_char_class
                = qr/(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; $GLOBAL::_M2 = $GLOBAL::_M; })(?:(?:(?:(??{ eval '$_rule_ident' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; })))|(?:\[(?:(??{ eval '$_rule_char_range' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; }))\]))(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; $GLOBAL::_M2 = $GLOBAL::_M; })/x;
            ::DISPATCH(
                ::DISPATCH( $::KindaPerl6::Grammar::Regex, "HOW" ),
                "add_method",
                ::DISPATCH( $::Str, "new", "char_class" ),
                ::DISPATCH(
                    $::Method,
                    "new",
                    sub {
                        local $GLOBAL::_Class = shift;
                        undef $GLOBAL::_M2;
                        (   ref($_)
                            ? $_->{_dispatch}( $_, "Str" )->{_value}
                            : $_
                        ) =~ /$_rule_char_class/;
                        if ( $GLOBAL::_M2->[1] eq 'to' ) {
                            Match::from_global_data($GLOBAL::_M2);
                            $MATCH = $GLOBAL::MATCH = pop @Match::Matches;
                        }
                        else { $MATCH = $GLOBAL::MATCH = Match->new(); }
                        @Match::Matches = ();
                        return $MATCH;
                    }
                ),
            );
        };
        do {
            use vars qw($_rule_parsed_code);
            $_rule_parsed_code
                = qr/(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; $GLOBAL::_M2 = $GLOBAL::_M; })(?:(?:(?:(??{ eval '$_rule_KindaPerl6::Grammar.opt_ws' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; }))(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { ::DISPATCH( $COMPILER::Code_add_pad, 'APPLY', $KindaPerl6::Grammar::Class_name )
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; })(?:(??{ eval '$_rule_KindaPerl6::Grammar.exp_stmts' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "KindaPerl6::Grammar.exp_stmts" ]; }))(?:(??{ eval '$_rule_KindaPerl6::Grammar.opt_ws' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; }))}(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { my $env; $env = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$env' } )  unless defined $env; BEGIN { $env = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$env' } ) }
;
do {::MODIFIED($env);
$env = ::DISPATCH( $COMPILER::Code_current_pad, 'APPLY',  )
}; ::DISPATCH( $COMPILER::Code_drop_pad, 'APPLY',  )
; return(::DISPATCH( $::Lit::Code, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'pad' )
, value           => $env,  } ), ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'state' )
, value           => ::DISPATCH( $::Hash, 'new', { _hash => {  } }
 )
,  } ), ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'sig' )
, value           => ::DISPATCH( $::Sig, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'invocant' )
, value           => $::Undef,  } ), ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'positional' )
, value           => ::DISPATCH( $::Array, 'new', { _array => [] }
 )
,  } ),  )
,  } ), ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'body' )
, value           => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'KindaPerl6::Grammar.exp_stmts' )
 )
 )
,  } ),  )
)
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; })))(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; $GLOBAL::_M2 = $GLOBAL::_M; })/x;
            ::DISPATCH(
                ::DISPATCH( $::KindaPerl6::Grammar::Regex, "HOW" ),
                "add_method",
                ::DISPATCH( $::Str, "new", "parsed_code" ),
                ::DISPATCH(
                    $::Method,
                    "new",
                    sub {
                        local $GLOBAL::_Class = shift;
                        undef $GLOBAL::_M2;
                        (   ref($_)
                            ? $_->{_dispatch}( $_, "Str" )->{_value}
                            : $_
                        ) =~ /$_rule_parsed_code/;
                        if ( $GLOBAL::_M2->[1] eq 'to' ) {
                            Match::from_global_data($GLOBAL::_M2);
                            $MATCH = $GLOBAL::MATCH = pop @Match::Matches;
                        }
                        else { $MATCH = $GLOBAL::MATCH = Match->new(); }
                        @Match::Matches = ();
                        return $MATCH;
                    }
                ),
            );
        };
        do {
            use vars qw($_rule_named_capture_body);
            $_rule_named_capture_body
                = qr/(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; $GLOBAL::_M2 = $GLOBAL::_M; })(?:(?:\((?:(??{ eval '$_rule_rule' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture_to_array", "rule" ]; }))\)(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(::DISPATCH( $::Rule::Capture, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'rule' )
, value           => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'rule' )
 )
 )
,  } ),  )
)
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; }))|(?:\[(?:(??{ eval '$_rule_rule' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture_to_array", "rule" ]; }))\](?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'rule' )
 )
 )
)
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; }))|(?:\<(?:(??{ eval '$_rule_metasyntax' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "metasyntax" ]; }))\>(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(::DISPATCH( $::Rule::Subrule, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'metasyntax' )
, value           => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'metasyntax' )
 )
 )
,  } ),  )
)
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; }))|(?:(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { ::DISPATCH( $GLOBAL::Code_die, 'APPLY', ::DISPATCH( $::Str, 'new', 'invalid alias syntax' )
 )
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; })))(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; $GLOBAL::_M2 = $GLOBAL::_M; })/x;
            ::DISPATCH(
                ::DISPATCH( $::KindaPerl6::Grammar::Regex, "HOW" ),
                "add_method",
                ::DISPATCH( $::Str, "new", "named_capture_body" ),
                ::DISPATCH(
                    $::Method,
                    "new",
                    sub {
                        local $GLOBAL::_Class = shift;
                        undef $GLOBAL::_M2;
                        (   ref($_)
                            ? $_->{_dispatch}( $_, "Str" )->{_value}
                            : $_
                        ) =~ /$_rule_named_capture_body/;
                        if ( $GLOBAL::_M2->[1] eq 'to' ) {
                            Match::from_global_data($GLOBAL::_M2);
                            $MATCH = $GLOBAL::MATCH = pop @Match::Matches;
                        }
                        else { $MATCH = $GLOBAL::MATCH = Match->new(); }
                        @Match::Matches = ();
                        return $MATCH;
                    }
                ),
            );
        };
        do {
            use vars qw($_rule_variables);
            $_rule_variables
                = qr/(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; $GLOBAL::_M2 = $GLOBAL::_M; })(?:(?:$<(?:(??{ eval '$_rule_ident' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "ident" ]; }))\>(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( $::Str, 'new', '$/
                {
                ' )
, ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, ' APPLY ', ::DISPATCH( $::Str, ' new ', ' \\\'' ),
                ::DISPATCH(
                        $GLOBAL::Code_infix_58__60__126__62_, 'APPLY',
                        ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'ident' ) ), ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( $::Str, 'new', '\\\'' ), ::DISPATCH( $::Str, 'new', '}' ) )
                    ) ) ) )
                };
            "974^213";
            }
            )->();
        if ( $ret ne "974^213" ) {
                $GLOBAL::_M = [ [@$GLOBAL::_M], "result", $ret ];
        }
        }
        ) ) | ( ?:(? : ( ?? { eval '$_rule_KindaPerl6::Grammar.sigil' } ) ( ?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture_to_array", "KindaPerl6::Grammar.sigil" ]; }))(? : ( ?? { eval '$_rule_KindaPerl6::Grammar.digits' } ) (
                    ?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "KindaPerl6::Grammar.digits" ]; }))(? { local $GLOBAL::_M = $GLOBAL::_M;
                            Match::from_global_data($GLOBAL::_M);
                            $MATCH = $GLOBAL::MATCH = pop @Match::Matches;
                            @Match::Matches = ();
                            my $ret = ( sub {
                                do {
                                    return (
                                        ::DISPATCH(
                                            $GLOBAL::Code_infix_58__60__126__62_,
                                            'APPLY',
                                            ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'KindaPerl6::Grammar.sigil' ) ),
                                            ::DISPATCH(
                                                $GLOBAL::Code_infix_58__60__126__62_,
                                                'APPLY',
                                                ::DISPATCH( $::Str, 'new', '/[' ),
                                                ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'KindaPerl6::Grammar.digits' ) ), ::DISPATCH( $::Str, 'new', ']' ) )
                                            )
                                        )
                                    );
                                };
                                "974^213";
                                } )->();
                            if ( $ret ne "974^213" ) {
                            $GLOBAL::_M = [ [@$GLOBAL::_M], "result", $ret ];
                        }
                        } ) ) | ( ?:(? : ( ?? { eval '$_rule_KindaPerl6::Grammar.sigil' } ) ( ?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture_to_array", "KindaPerl6::Grammar.sigil" ]; }))(? : ( ?? { eval '$_rule_KindaPerl6::Grammar.twigil' } ) (
                        ?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "KindaPerl6::Grammar.twigil" ]; }))(? : ( ?? { eval '$_rule_KindaPerl6::Grammar.full_ident' } ) (
                            ?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "KindaPerl6::Grammar.full_ident" ]; }))(? { local $GLOBAL::_M = $GLOBAL::_M;
                                    Match::from_global_data($GLOBAL::_M);
                                    $MATCH = $GLOBAL::MATCH = pop @Match::Matches;
                                    @Match::Matches = ();
                                    my $ret = (
                                    sub {
                                        do {
                                            return (
                                                ::DISPATCH(
                                                    $::Rule::Var,
                                                    'new',
                                                    ::DISPATCH(
                                                        $::NamedArgument,
                                                        "new",
                                                        {   _argument_name_ => ::DISPATCH( $::Str,                                'new',   'sigil' ),
                                                            value           => ::DISPATCH( $GLOBAL::Code_prefix_58__60__126__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'KindaPerl6::Grammar.sigil' ) ) ),
                                                        }
                                                    ),
                                                    ::DISPATCH(
                                                        $::NamedArgument,
                                                        "new",
                                                        {   _argument_name_ => ::DISPATCH( $::Str,                                'new',   'twigil' ),
                                                            value           => ::DISPATCH( $GLOBAL::Code_prefix_58__60__126__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'KindaPerl6::Grammar.twigil' ) ) ),
                                                        }
                                                    ),
                                                    ::DISPATCH(
                                                        $::NamedArgument,
                                                        "new",
                                                        {   _argument_name_ => ::DISPATCH( $::Str,                                'new',   'name' ),
                                                            value           => ::DISPATCH( $GLOBAL::Code_prefix_58__60__126__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'KindaPerl6::Grammar.full_ident' ) ) ),
                                                        }
                                                    ),
                                                )
                                            );
                                        };
                                        "974^213";
                                    }
                                    )->();
                                    if ( $ret ne "974^213" ) {
                                    $GLOBAL::_M = [ [@$GLOBAL::_M], "result", $ret ];
                                }
                                } ) ) ) ( ?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; $GLOBAL::_M2 = $GLOBAL::_M; })/x; 
::DISPATCH(::DISPATCH($::KindaPerl6::Grammar::Regex,"HOW"),"add_method", ::DISPATCH( $::Str, "new", "variables" ), ::DISPATCH( $::Method, "new", sub { local $GLOBAL::_Class = shift; undef $GLOBAL::_M2; ( ref($_) ?
                        $_->{_dispatch}( $_, "Str" )->{_value} : $_ ) =~ /$_rule_variables/;
                    if ( $GLOBAL::_M2->[1] eq 'to' ) {
                    Match::from_global_data($GLOBAL::_M2);
                    $MATCH = $GLOBAL::MATCH = pop @Match::Matches;
                }
                else { $MATCH = $GLOBAL::MATCH = Match->new(); }
                @Match::Matches = ();
                    return $MATCH;
            } ), );
};
do {
    use vars qw($_rule_assertion_modifier);
    $_rule_assertion_modifier = qr/(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; $GLOBAL::_M2 = $GLOBAL::_M; })(?:(?:!)|(?:?)|(?:))(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; $GLOBAL::_M2 = $GLOBAL::_M; })/x;
    ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, "HOW" ), "add_method", ::DISPATCH( $::Str, "new", "assertion_modifier" ), ::DISPATCH( $::Method, "new", sub {
                local $GLOBAL::_Class = shift;
                undef $GLOBAL::_M2;
                ( ref($_)
                    ? $_->{_dispatch}( $_, "Str" )->{_value}
                    : $_ ) =~ /$_rule_assertion_modifier/;
                if ( $GLOBAL::_M2->[1] eq 'to' ) {
                    Match::from_global_data($GLOBAL::_M2);
                    $MATCH = $GLOBAL::MATCH = pop @Match::Matches;
                }
                else { $MATCH = $GLOBAL::MATCH = Match->new(); }
                @Match::Matches = ();
                return $MATCH;
                } ), );
    };
do {
    use vars qw($_rule_rule_terms);
    $_rule_rule_terms
        = qr/(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; $GLOBAL::_M2 = $GLOBAL::_M; })(?:(?:((?:(??{ eval '$_rule_rule' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture_to_array", "rule" ]; }))\)(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(::DISPATCH( $::Rule::Capture, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'rule' )
, value           => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'rule' )
 )
 )
,  } ),  )
)
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; }))|(?:<((?:(??{ eval '$_rule_rule' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture_to_array", "rule" ]; })))>(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(::DISPATCH( $::Rule::CaptureResult, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'rule' )
, value           => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'rule' )
 )
 )
,  } ),  )
)
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; }))|(?:<(?:(??{ eval '$_rule_assertion_modifier' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture_to_array", "assertion_modifier" ]; }))after(?:(??{ eval '$_rule_ws' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; }))(?:(??{ eval '$_rule_rule' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture_to_array", "rule" ]; }))\>(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(::DISPATCH( $::Rule::After, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'rule' )
, value           => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'rule' )
 )
 )
,  } ), ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'assertion_modifier' )
, value           => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'assertion_modifier' )
 )
 )
,  } ),  )
)
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; }))|(?:<(?:(??{ eval '$_rule_assertion_modifier' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture_to_array", "assertion_modifier" ]; }))before(?:(??{ eval '$_rule_ws' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; }))(?:(??{ eval '$_rule_rule' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture_to_array", "rule" ]; }))\>(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(::DISPATCH( $::Rule::Before, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'rule' )
, value           => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'rule' )
 )
 )
,  } ), ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'assertion_modifier' )
, value           => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'assertion_modifier' )
 )
 )
,  } ),  )
)
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; }))|(?:<!(?:(??{ eval '$_rule_metasyntax' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture_to_array", "metasyntax" ]; }))\>(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(do { ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'negate' )
, value => do { ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'metasyntax' )
, value => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'metasyntax' )
 )
 )
 } )
 } } )
 })
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; }))|(?:<+(?:(??{ eval '$_rule_char_class' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture_to_array", "char_class" ]; }))\>(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(::DISPATCH( $::Rule::CharClass, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'chars' )
, value           => ::DISPATCH( $GLOBAL::Code_prefix_58__60__126__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'char_class' )
 )
 )
,  } ),  )
)
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; }))|(?:<-(?:(??{ eval '$_rule_char_class' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture_to_array", "char_class" ]; }))\>(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(::DISPATCH( $::Rule::NegateCharClass, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'chars' )
, value           => ::DISPATCH( $GLOBAL::Code_prefix_58__60__126__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'char_class' )
 )
 )
,  } ),  )
)
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; }))|(?:\'(?:(??{ eval '$_rule_literal' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "literal" ]; }))\'(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(::DISPATCH( $::Rule::Constant, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'constant' )
, value           => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'literal' )
 )
 )
,  } ),  )
)
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; }))|(?:\<(?:(?:(?:(??{ eval '$_rule_variables' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "variables" ]; }))\>(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(::DISPATCH( $::Rule::InterpolateVar, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'var' )
, value           => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'variables' )
 )
 )
,  } ),  )
)
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; }))|(?:\?(?:(??{ eval '$_rule_metasyntax' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture_to_array", "metasyntax" ]; }))\>(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(::DISPATCH( $::Rule::SubruleNoCapture, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'metasyntax' )
, value           => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'metasyntax' )
 )
 )
,  } ),  )
)
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; }))|(?:(?:(??{ eval '$_rule_metasyntax' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture_to_array", "metasyntax" ]; }))\>(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(::DISPATCH( $::Rule::Subrule, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'metasyntax' )
, value           => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'metasyntax' )
 )
 )
,  } ),  )
)
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; }))))|(?:\{(?:(??{ eval '$_rule_parsed_code' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "parsed_code" ]; }))(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(::DISPATCH( $::Rule::Block, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'closure' )
, value           => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'parsed_code' )
 )
 )
,  } ),  )
)
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; }))|(?:(?:(??{ eval '$_rule_KindaPerl6::Grammar.backslash' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "KindaPerl6::Grammar.backslash" ]; }))(?:(?:(?:(??{ eval '$_rule_any' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "any" ]; }))(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(::DISPATCH( $::Rule::SpecialChar, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'char' )
, value           => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'any' )
 )
 )
,  } ),  )
)
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; }))))|(?:\.(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(::DISPATCH( $::Rule::Dot, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'dot' )
, value           => ::DISPATCH( $::Int, 'new', 1 )
,  } ),  )
)
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; }))|(?:[(?:(??{ eval '$_rule_rule' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture_to_array", "rule" ]; }))](?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'rule' )
 )
 )
)
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; })))(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; $GLOBAL::_M2 = $GLOBAL::_M; })/x;
    ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, "HOW" ), "add_method", ::DISPATCH( $::Str, "new", "rule_terms" ), ::DISPATCH( $::Method, "new", sub {
                local $GLOBAL::_Class = shift;
                undef $GLOBAL::_M2;
                ( ref($_)
                    ? $_->{_dispatch}( $_, "Str" )->{_value}
                    : $_ ) =~ /$_rule_rule_terms/;
                if ( $GLOBAL::_M2->[1] eq 'to' ) {
                    Match::from_global_data($GLOBAL::_M2);
                    $MATCH = $GLOBAL::MATCH = pop @Match::Matches;
                }
                else { $MATCH = $GLOBAL::MATCH = Match->new(); }
                @Match::Matches = ();
                return $MATCH;
                } ), );
    };
do {
    use vars qw($_rule_term);
    $_rule_term
        = qr/(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; $GLOBAL::_M2 = $GLOBAL::_M; })(?:(?:$<(?:(??{ eval '$_rule_ident' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "ident" ]; }))>(?:(??{ eval '$_rule_ws' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; }))?:=(?:(??{ eval '$_rule_ws' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; }))?((?:(??{ eval '$_rule_rule' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "rule" ]; })))(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(::DISPATCH( $::Rule::NamedCapture, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'rule' )
, value           => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'rule' )
 )
 )
,  } ), ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'ident' )
, value           => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'ident' )
 )
 )
,  } ),  )
)
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; }))|(?:(?:(??{ eval '$_rule_variables' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "variables" ]; }))(?:(?:(?:(??{ eval '$_rule_ws' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; }))?:=(?:(??{ eval '$_rule_ws' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; }))?(?:(??{ eval '$_rule_named_capture_body' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "named_capture_body" ]; }))(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(::DISPATCH( $::Rule::NamedCapture, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'rule' )
, value           => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'named_capture_body' )
 )
 )
,  } ), ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'ident' )
, value           => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'variables' )
 )
 )
,  } ),  )
)
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; }))|(?:(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'variables' )
 )
 )
)
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; }))))|(?:(?:(??{ eval '$_rule_rule_terms' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "rule_terms" ]; }))(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'rule_terms' )
 )
 )
)
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; }))|(?:(?!(?:(?:\])|(?:\})|(?:\))|(?:\>)|(?:\:)|(?:\?)|(?:\+)|(?:\*)|(?:\|)|(?:\&)|(?:\/)))(?:(??{ eval '$_rule_any' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "any" ]; }))(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(::DISPATCH( $::Rule::Constant, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'constant' )
, value           => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'any' )
 )
 )
,  } ),  )
)
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; })))(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; $GLOBAL::_M2 = $GLOBAL::_M; })/x;
    ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, "HOW" ), "add_method", ::DISPATCH( $::Str, "new", "term" ), ::DISPATCH( $::Method, "new", sub {
                local $GLOBAL::_Class = shift;
                undef $GLOBAL::_M2;
                ( ref($_)
                    ? $_->{_dispatch}( $_, "Str" )->{_value}
                    : $_ ) =~ /$_rule_term/;
                if ( $GLOBAL::_M2->[1] eq 'to' ) {
                    Match::from_global_data($GLOBAL::_M2);
                    $MATCH = $GLOBAL::MATCH = pop @Match::Matches;
                }
                else { $MATCH = $GLOBAL::MATCH = Match->new(); }
                @Match::Matches = ();
                return $MATCH;
                } ), );
    };
do {
    use vars qw($_rule_quant);
    $_rule_quant
        = qr/(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; $GLOBAL::_M2 = $GLOBAL::_M; })(?:(?:**(?:(??{ eval '$_rule_KindaPerl6::Grammar.opt_ws' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; }))\{(?:(??{ eval '$_rule_parsed_code' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "parsed_code" ]; }))(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(do { ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'closure' )
, value => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'parsed_code' )
 )
 )
 } )
 })
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; }))|(?:(?:(?:\?)|(?:\*)|(?:\+))))(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; $GLOBAL::_M2 = $GLOBAL::_M; })/x;
    ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, "HOW" ), "add_method", ::DISPATCH( $::Str, "new", "quant" ), ::DISPATCH( $::Method, "new", sub {
                local $GLOBAL::_Class = shift;
                undef $GLOBAL::_M2;
                ( ref($_)
                    ? $_->{_dispatch}( $_, "Str" )->{_value}
                    : $_ ) =~ /$_rule_quant/;
                if ( $GLOBAL::_M2->[1] eq 'to' ) {
                    Match::from_global_data($GLOBAL::_M2);
                    $MATCH = $GLOBAL::MATCH = pop @Match::Matches;
                }
                else { $MATCH = $GLOBAL::MATCH = Match->new(); }
                @Match::Matches = ();
                return $MATCH;
                } ), );
    };
do {
    use vars qw($_rule_greedy);
    $_rule_greedy = qr/(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; $GLOBAL::_M2 = $GLOBAL::_M; })(?:(?:\?)|(?:\+)|(?:))(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; $GLOBAL::_M2 = $GLOBAL::_M; })/x;
    ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, "HOW" ), "add_method", ::DISPATCH( $::Str, "new", "greedy" ), ::DISPATCH( $::Method, "new", sub {
                local $GLOBAL::_Class = shift;
                undef $GLOBAL::_M2;
                ( ref($_)
                    ? $_->{_dispatch}( $_, "Str" )->{_value}
                    : $_ ) =~ /$_rule_greedy/;
                if ( $GLOBAL::_M2->[1] eq 'to' ) {
                    Match::from_global_data($GLOBAL::_M2);
                    $MATCH = $GLOBAL::MATCH = pop @Match::Matches;
                }
                else { $MATCH = $GLOBAL::MATCH = Match->new(); }
                @Match::Matches = ();
                return $MATCH;
                } ), );
    };
do {
    use vars qw($_rule_quantifier);
    $_rule_quantifier
        = qr/(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; $GLOBAL::_M2 = $GLOBAL::_M; })(?:(?:(?:(??{ eval '$_rule_KindaPerl6::Grammar.opt_ws' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; }))(?:(??{ eval '$_rule_term' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "term" ]; }))(?:(??{ eval '$_rule_KindaPerl6::Grammar.opt_ws2' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; }))(?:(?:(?:(??{ eval '$_rule_quant' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "quant" ]; }))(?:(??{ eval '$_rule_greedy' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "greedy" ]; }))(?:(??{ eval '$_rule_KindaPerl6::Grammar.opt_ws3' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; }))(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(::DISPATCH( $::Rule::Quantifier, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'term' )
, value           => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'term' )
 )
 )
,  } ), ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'quant' )
, value           => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'quant' )
 )
 )
,  } ), ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'greedy' )
, value           => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'greedy' )
 )
 )
,  } ), ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'ws1' )
, value           => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'KindaPerl6::Grammar.opt_ws' )
 )
 )
,  } ), ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'ws2' )
, value           => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'KindaPerl6::Grammar.opt_ws2' )
 )
 )
,  } ), ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'ws3' )
, value           => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'KindaPerl6::Grammar.opt_ws3' )
 )
 )
,  } ),  )
)
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; }))|(?:(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'term' )
 )
 )
)
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; })))))(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; $GLOBAL::_M2 = $GLOBAL::_M; })/x;
    ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, "HOW" ), "add_method", ::DISPATCH( $::Str, "new", "quantifier" ), ::DISPATCH( $::Method, "new", sub {
                local $GLOBAL::_Class = shift;
                undef $GLOBAL::_M2;
                ( ref($_)
                    ? $_->{_dispatch}( $_, "Str" )->{_value}
                    : $_ ) =~ /$_rule_quantifier/;
                if ( $GLOBAL::_M2->[1] eq 'to' ) {
                    Match::from_global_data($GLOBAL::_M2);
                    $MATCH = $GLOBAL::MATCH = pop @Match::Matches;
                }
                else { $MATCH = $GLOBAL::MATCH = Match->new(); }
                @Match::Matches = ();
                return $MATCH;
                } ), );
    };
do {
    use vars qw($_rule_concat_list);
    $_rule_concat_list
        = qr/(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; $GLOBAL::_M2 = $GLOBAL::_M; })(?:(?:(?:(??{ eval '$_rule_quantifier' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "quantifier" ]; }))(?:(?:(?:(??{ eval '$_rule_concat_list' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "concat_list" ]; }))(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(::DISPATCH( $::Array, 'new', { _array => [::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'quantifier' )
 )
 )
, ::DISPATCH( $GLOBAL::Code_prefix_58__60__64__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'concat_list' )
 )
 )
 )
] }
 )
)
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; }))|(?:(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(::DISPATCH( $::Array, 'new', { _array => [::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'quantifier' )
 )
 )
] }
 )
)
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; }))))|(?:(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(::DISPATCH( $::Array, 'new', { _array => [] }
 )
)
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; })))(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; $GLOBAL::_M2 = $GLOBAL::_M; })/x;
    ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, "HOW" ), "add_method", ::DISPATCH( $::Str, "new", "concat_list" ), ::DISPATCH( $::Method, "new", sub {
                local $GLOBAL::_Class = shift;
                undef $GLOBAL::_M2;
                ( ref($_)
                    ? $_->{_dispatch}( $_, "Str" )->{_value}
                    : $_ ) =~ /$_rule_concat_list/;
                if ( $GLOBAL::_M2->[1] eq 'to' ) {
                    Match::from_global_data($GLOBAL::_M2);
                    $MATCH = $GLOBAL::MATCH = pop @Match::Matches;
                }
                else { $MATCH = $GLOBAL::MATCH = Match->new(); }
                @Match::Matches = ();
                return $MATCH;
                } ), );
    };
do {
    use vars qw($_rule_concat);
    $_rule_concat
        = qr/(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; $GLOBAL::_M2 = $GLOBAL::_M; })(?:(?:(?:(??{ eval '$_rule_concat_list' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "concat_list" ]; }))(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(::DISPATCH( $::Rule::Concat, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'concat' )
, value           => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'concat_list' )
 )
 )
,  } ),  )
)
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; })))(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; $GLOBAL::_M2 = $GLOBAL::_M; })/x;
    ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, "HOW" ), "add_method", ::DISPATCH( $::Str, "new", "concat" ), ::DISPATCH( $::Method, "new", sub {
                local $GLOBAL::_Class = shift;
                undef $GLOBAL::_M2;
                ( ref($_)
                    ? $_->{_dispatch}( $_, "Str" )->{_value}
                    : $_ ) =~ /$_rule_concat/;
                if ( $GLOBAL::_M2->[1] eq 'to' ) {
                    Match::from_global_data($GLOBAL::_M2);
                    $MATCH = $GLOBAL::MATCH = pop @Match::Matches;
                }
                else { $MATCH = $GLOBAL::MATCH = Match->new(); }
                @Match::Matches = ();
                return $MATCH;
                } ), );
    };
do {
    use vars qw($_rule_or_list);
    $_rule_or_list
        = qr/(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; $GLOBAL::_M2 = $GLOBAL::_M; })(?:(?:(?:(??{ eval '$_rule_concat' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "concat" ]; }))(?:(?:|(?:(??{ eval '$_rule_or_list' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "or_list" ]; }))(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(::DISPATCH( $::Array, 'new', { _array => [::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'concat' )
 )
 )
, ::DISPATCH( $GLOBAL::Code_prefix_58__60__64__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'or_list' )
 )
 )
 )
] }
 )
)
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; }))|(?:(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(::DISPATCH( $::Array, 'new', { _array => [::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'concat' )
 )
 )
] }
 )
)
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; }))))|(?:(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(::DISPATCH( $::Array, 'new', { _array => [] }
 )
)
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; })))(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; $GLOBAL::_M2 = $GLOBAL::_M; })/x;
    ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, "HOW" ), "add_method", ::DISPATCH( $::Str, "new", "or_list" ), ::DISPATCH( $::Method, "new", sub {
                local $GLOBAL::_Class = shift;
                undef $GLOBAL::_M2;
                ( ref($_)
                    ? $_->{_dispatch}( $_, "Str" )->{_value}
                    : $_ ) =~ /$_rule_or_list/;
                if ( $GLOBAL::_M2->[1] eq 'to' ) {
                    Match::from_global_data($GLOBAL::_M2);
                    $MATCH = $GLOBAL::MATCH = pop @Match::Matches;
                }
                else { $MATCH = $GLOBAL::MATCH = Match->new(); }
                @Match::Matches = ();
                return $MATCH;
                } ), );
    };
do {
    use vars qw($_rule_rule);
    $_rule_rule
        = qr/(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; $GLOBAL::_M2 = $GLOBAL::_M; })(?:(?:(?:(?:(?:(??{ eval '$_rule_ws' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; }))?|)|(?:))(?:(??{ eval '$_rule_or_list' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "or_list" ]; }))(?{ local $GLOBAL::_M = $GLOBAL::_M; Match::from_global_data( $GLOBAL::_M ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; @Match::Matches = (); my $ret = ( sub {do { return(::DISPATCH( $::Rule::Or, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'or' )
, value           => ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'or_list' )
 )
 )
,  } ),  )
)
 }; "974^213" } )->();if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; }; })))(?{ local $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; $GLOBAL::_M2 = $GLOBAL::_M; })/x;
    ::DISPATCH( ::DISPATCH( $::KindaPerl6::Grammar::Regex, "HOW" ), "add_method", ::DISPATCH( $::Str, "new", "rule" ), ::DISPATCH( $::Method, "new", sub {
                local $GLOBAL::_Class = shift;
                undef $GLOBAL::_M2;
                ( ref($_)
                    ? $_->{_dispatch}( $_, "Str" )->{_value}
                    : $_ ) =~ /$_rule_rule/;
                if ( $GLOBAL::_M2->[1] eq 'to' ) {
                    Match::from_global_data($GLOBAL::_M2);
                    $MATCH = $GLOBAL::MATCH = pop @Match::Matches;
                }
                else { $MATCH = $GLOBAL::MATCH = Match->new(); }
                @Match::Matches = ();
                return $MATCH;
                } ), );
    }
    };
1
    }
