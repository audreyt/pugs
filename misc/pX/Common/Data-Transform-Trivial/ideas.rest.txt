.. -*- mode: rst; coding: utf-8 -*-

======================
 Tree Transformations
======================

Match expressions
=================

.. warning:: This is highly conjectural

Conditions on nodes, access to other nodes. Two kind of accessors:
node accessors (return node lists), scalar accessors (return other
types)

``root().children()[name = 'stuff'].attributes()[value = 'boo'].name``

Rule finding
============

Each rule has a name, a matching expression, and a priority.

Given a node and a name, the rule to use is the one with that
name, whose matching expression matches the node, and with the highest
priority.

It is an error for two rules having the same name and priority to
match the same node.

Processing Model
================

Context: node, node list, position, variables?

Run the code. You can call *named* transformations on node lists.

You can generate new node lists by using the tree-walking methods of
the data structure you are transforming.

In-place editing
----------------

If you change the source data structure, you might need to tell the
engine to change the current node list.

If while transforming the child nodes of an element, you change the
list of child nodes of that element, but don't apply the same changes
to the current node list, weird things happen.

See the ``t/03-inplace.t`` test for a simple example.

Ideas from Ruoso
================

- ignore surface syntax, just ship it
- kill priority, esplicitly call sub-rules in order?
  ::

     rule Main matches {*} {
       SubRule1(_) || SubRule2(_)
     }
     rule SubRule1 matches {foo} { # do something }
     rule SubRule2 matches {bar} { # do something }

