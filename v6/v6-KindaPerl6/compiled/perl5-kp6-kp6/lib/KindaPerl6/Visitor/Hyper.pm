{

    package KindaPerl6::Visitor::Hyper;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict "vars";
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }

    BEGIN {
        $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } );
    }
    do {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::KindaPerl6::Visitor::Hyper ), "true" ), "p5landish" ) ) {
            }
            else {
                do {
                    do {
                        ::MODIFIED($::KindaPerl6::Visitor::Hyper);
                        $::KindaPerl6::Visitor::Hyper = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'KindaPerl6::Visitor::Hyper' ) ), 'PROTOTYPE', );
                        }
                    }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::KindaPerl6::Visitor::Hyper, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'visit' ),
            ::DISPATCH(
                $::Code, 'new',
                {   code => sub {
                        my $List__ = ::DISPATCH( $::Array, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        my $node;
                        $node = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$node' } )
                            unless defined $node;

                        BEGIN {
                            $node = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$node' } );
                        }
                        my $node_name;
                        $node_name = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$node_name' } )
                            unless defined $node_name;

                        BEGIN {
                            $node_name = ::DISPATCH(
                                $::Scalar,
                                'new',
                                {   modified => $_MODIFIED,
                                    name     => '$node_name'
                                }
                            );
                        }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } )
                            unless defined $CAPTURE;

                        BEGIN {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } );
                        }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        {
                            my $_param_index = 0;
                            if ( exists $Hash__->{_value}{_hash}{'node'} ) {
                                do {
                                    ::MODIFIED($node);
                                    $node = ::DISPATCH( $Hash__, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'node' ) );
                                    }
                            }
                            elsif ( exists $List__->{_value}{_array}[$_param_index] ) {
                                $node = $List__->{_value}{_array}[ $_param_index++ ];
                            }
                            if ( exists $Hash__->{_value}{_hash}{'node_name'} ) {
                                do {
                                    ::MODIFIED($node_name);
                                    $node_name = ::DISPATCH( $Hash__, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'node_name' ) );
                                    }
                            }
                            elsif ( exists $List__->{_value}{_array}[$_param_index] ) {
                                $node_name = $List__->{_value}{_array}[ $_param_index++ ];
                            }
                        }
                        do {
                            if (::DISPATCH(
                                    ::DISPATCH(
                                        ::DISPATCH(
                                            $GLOBAL::Code_infix_58__60__38__38__62_,
                                            'APPLY',
                                            ::DISPATCH(
                                                $::Code, 'new',
                                                {   code => sub {
                                                        my $CAPTURE;
                                                        $CAPTURE = ::DISPATCH(
                                                            $::Scalar,
                                                            'new',
                                                            {   modified => $_MODIFIED,
                                                                name     => '$CAPTURE'
                                                            }
                                                        ) unless defined $CAPTURE;

                                                        BEGIN {
                                                            $CAPTURE = ::DISPATCH(
                                                                $::Scalar,
                                                                'new',
                                                                {   modified => $_MODIFIED,
                                                                    name     => '$CAPTURE'
                                                                }
                                                            );
                                                        }
                                                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                                                        do {
                                                            ::MODIFIED($List__);
                                                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                                                        };
                                                        do {
                                                            ::MODIFIED($Hash__);
                                                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                                                        };
                                                        {
                                                            my $_param_index = 0;
                                                        }
                                                        ::DISPATCH( $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY', $GLOBAL::node_name, ::DISPATCH( $::Str, 'new', 'Call' ) );
                                                    },
                                                    signature => ::DISPATCH(
                                                        $::Signature,
                                                        "new",
                                                        {   invocant => $::Undef,
                                                            array    => ::DISPATCH( $::Array, "new", { _array => [] } ),
                                                            return   => $::Undef,
                                                        }
                                                    ),
                                                }
                                            ),
                                            ::DISPATCH(
                                                $::Code,
                                                'new',
                                                {   code => sub {
                                                        my $CAPTURE;
                                                        $CAPTURE = ::DISPATCH(
                                                            $::Scalar,
                                                            'new',
                                                            {   modified => $_MODIFIED,
                                                                name     => '$CAPTURE'
                                                            }
                                                        ) unless defined $CAPTURE;

                                                        BEGIN {
                                                            $CAPTURE = ::DISPATCH(
                                                                $::Scalar,
                                                                'new',
                                                                {   modified => $_MODIFIED,
                                                                    name     => '$CAPTURE'
                                                                }
                                                            );
                                                        }
                                                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                                                        do {
                                                            ::MODIFIED($List__);
                                                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                                                        };
                                                        do {
                                                            ::MODIFIED($Hash__);
                                                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                                                        };
                                                        {
                                                            my $_param_index = 0;
                                                        }
                                                        ::DISPATCH( $GLOBAL::node, 'hyper', );
                                                    },
                                                    signature => ::DISPATCH(
                                                        $::Signature,
                                                        "new",
                                                        {   invocant => $::Undef,
                                                            array    => ::DISPATCH( $::Array, "new", { _array => [] } ),
                                                            return   => $::Undef,
                                                        }
                                                    ),
                                                }
                                            )
                                        ),
                                        "true"
                                    ),
                                    "p5landish"
                                )
                                )
                            {
                                do {
                                    return (
                                        ::DISPATCH(
                                            $::Apply, 'new',
                                            ::DISPATCH(
                                                $::NamedArgument,
                                                "new",
                                                {   _argument_name_ => ::DISPATCH( $::Str, 'new', 'code' ),
                                                    value           => ::DISPATCH( $::Str, 'new', 'map' ),
                                                }
                                            ),
                                            ::DISPATCH(
                                                $::NamedArgument,
                                                "new",
                                                {   _argument_name_ => ::DISPATCH( $::Str, 'new', 'arguments' ),
                                                    value           => ::DISPATCH(
                                                        $::Array, 'new',
                                                        {   _array => [
                                                                ::DISPATCH(
                                                                    $::Sub, 'new',
                                                                    ::DISPATCH(
                                                                        $::NamedArgument,
                                                                        "new",
                                                                        {   _argument_name_ => ::DISPATCH( $::Str, 'new', 'sig' ),
                                                                            value           => ::DISPATCH(
                                                                                $::Sig, 'new',
                                                                                ::DISPATCH(
                                                                                    $::NamedArgument,
                                                                                    "new",
                                                                                    {   _argument_name_ => ::DISPATCH( $::Str, 'new', 'invocant' ),
                                                                                        value           => $::Undef,
                                                                                    }
                                                                                ),
                                                                                ::DISPATCH(
                                                                                    $::NamedArgument,
                                                                                    "new",
                                                                                    {   _argument_name_ => ::DISPATCH( $::Str, 'new', 'positional' ),
                                                                                        value => ::DISPATCH( $::Array, 'new', { _array => [] } ),
                                                                                    }
                                                                                ),
                                                                            ),
                                                                        }
                                                                    ),
                                                                    ::DISPATCH(
                                                                        $::NamedArgument,
                                                                        "new",
                                                                        {   _argument_name_ => ::DISPATCH( $::Str, 'new', 'block' ),
                                                                            value           => ::DISPATCH(
                                                                                $::Array, 'new',
                                                                                {   _array => [
                                                                                        ::DISPATCH(
                                                                                            $::Call, 'new',
                                                                                            ::DISPATCH(
                                                                                                $::NamedArgument,
                                                                                                "new",
                                                                                                {   _argument_name_ => ::DISPATCH( $::Str, 'new', 'invocant' ),
                                                                                                    value           => ::DISPATCH(
                                                                                                        $::Var, 'new',
                                                                                                        ::DISPATCH(
                                                                                                            $::NamedArgument,
                                                                                                            "new",
                                                                                                            {   _argument_name_ => ::DISPATCH( $::Str, 'new', 'sigil' ),
                                                                                                                value           => ::DISPATCH( $::Str, 'new', '$' ),
                                                                                                            }
                                                                                                        ),
                                                                                                        ::DISPATCH(
                                                                                                            $::NamedArgument,
                                                                                                            "new",
                                                                                                            {   _argument_name_ => ::DISPATCH( $::Str, 'new', 'twigil' ),
                                                                                                                value           => ::DISPATCH( $::Str, 'new', '' ),
                                                                                                            }
                                                                                                        ),
                                                                                                        ::DISPATCH(
                                                                                                            $::NamedArgument,
                                                                                                            "new",
                                                                                                            {   _argument_name_ => ::DISPATCH( $::Str, 'new', 'name' ),
                                                                                                                value           => ::DISPATCH( $::Str, 'new', '_' ),
                                                                                                            }
                                                                                                        ),
                                                                                                    ),
                                                                                                }
                                                                                            ),
                                                                                            ::DISPATCH(
                                                                                                $::NamedArgument,
                                                                                                "new",
                                                                                                {   _argument_name_ => ::DISPATCH( $::Str, 'new', 'method' ),
                                                                                                    value           => ::DISPATCH( $node,  'method', ),
                                                                                                }
                                                                                            ),
                                                                                            ::DISPATCH(
                                                                                                $::NamedArgument,
                                                                                                "new",
                                                                                                {   _argument_name_ => ::DISPATCH( $::Str, 'new', 'arguments' ),
                                                                                                    value           => ::DISPATCH( $node,  'arguments', ),
                                                                                                }
                                                                                            ),
                                                                                        )
                                                                                    ]
                                                                                }
                                                                            ),
                                                                        }
                                                                    ),
                                                                ),
                                                                ::DISPATCH( $node, 'invocant', )
                                                            ]
                                                        }
                                                    ),
                                                }
                                            ),
                                        )
                                    );
                                    }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        return ($::Undef);
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {   invocant => $::Undef,
                            array    => ::DISPATCH(
                                $::Array, "new",
                                {   _array => [
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {   sigil               => '$',
                                                twigil              => '',
                                                name                => 'node',
                                                value               => $::Undef,
                                                has_default         => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_named_only       => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_optional         => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_slurpy           => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_multidimensional => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_rw               => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_copy             => ::DISPATCH( $::Bit, 'new', 0 ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {   sigil               => '$',
                                                twigil              => '',
                                                name                => 'node_name',
                                                value               => $::Undef,
                                                has_default         => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_named_only       => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_optional         => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_slurpy           => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_multidimensional => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_rw               => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_copy             => ::DISPATCH( $::Bit, 'new', 0 ),
                                            }
                                        ),
                                    ]
                                }
                            ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
    };
    1
}
