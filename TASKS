
* Implement the Math::Basic rounding suite.  Go through
 An introduction to different rounding algorithms
 http://www.pldesignline.com/howto/showArticle.jhtml?articleID=175801189
implementing each rounding algorithm in p6.  Names as given, but with
underscores (round_whatever).  Signatures of
  our Int multi Num::round_whatever ( Num $x ) {
    ...
  }
You can use floor, ceiling, abs, sign, etc, etc.
Place them in a new file, misc/S29_round.pl , or just announce the work on irc.
Skills: basic p6.

* BROADCAST TASK - Check ./STATUS and see if systems with which you
  are familiar are correctly described.  Skills: be famaliar with some
  system. ;)

* Add a note to lib/pugs/hack.pod mentioning that under
http://rt.openfoundry.org/Foundry/Project/Source/index.html/pugs/browse/
the "(history of this directory)" lists the revisions which affected
the directory you are currently looking at (all the subdirs to of course).
Skills: understand this paragraph. can say it more clearly.

* Rearrange t/ so that it is suited for reuse with multiple Perl 6
implementations.  The generic Perl 6 tests, suitable to all Perl 6
implementations, go in t/, and if any tests seem to be implementation
specific, then perhaps this indicates the standard needs updating.

* Remove all unconditional SKIP/TODO flags from t/, either replacing them
with conditionals that only SKIP if the current Perl 6 implementation's
CONFIG vars explicitly don't support the features that the test is for, or
just letting them fail.

* Re-group the majority general/implementation-generic Perl 6 tests first
along lines of what is likely to be implemented together and/or by tier, a
trivial example already in place being the sanity tests.  With the sanity
tests plus Test.pm being tier zero, each additional tier can incorporate
progressively more "difficult" features, and not assume that anything in
tiers above it will work, only that those in tiers below it do.  This
progression can be similar to how various other technical standards (such
as XML or SQL) can come in tiers, with minimum mandatory plus optional
additional features.

* Gather ideas for our t/ testing and validation suite.
t/ is getting to be a maintenance headache.  It's not going to scale
another 2x, 3x, 4x, whatever.  Look at new modern languages (eg,
scala, slate, pypy), at big languages (ghc, mono), and elsewhere (where?).
Bring us ideas.  Skills: as described.

* Scan docs directory for files which say "I am out of date" and list
  them below.  Skills: none.

* Reoccuring task: Syncronize docs/ with current language spec.
Skills: understand p6 well enough to read p6l and Synopses.
You can check your understanding of changes on #perl6.
Things specifically known to need updating:
 * docs/quickref/namespace

* Reoccuring task: Check the [date] timestamps in STATUS.  They show
the last time that section was verified as still correct.  If one is
old, check with someone to see if it has changed.  What someone?  Ask
on #perl6.  Skills: polite nagging.

* When building with external parrot, Makefile.PL says parrot must be
in PATH, but doesn't check.  It would be nice if it checked.  You can
check if parrot is there with can_run('parrot').  Skills: basic perl5.

* docs/notes contains context_coercion.pod (audreyt's) and
context_coersion.pod [sic] (luqui's).  Name (one of?) them something
more reasonable.  Skills: taste.

* ./pugs -V doesn't mention / is sloppy about a lot of stuff:
  Note also  say %?CONFIG.perl;
  Skills: p5, build system.
** Notably, whether parrot and or p6 have been embedded. It should.
   May be hard? - the build system is a bit messy.
** It should perhaps also answer the "usual questions for someone with
   a problem" - what os, cpu (64 bit?), ghc version, gcc version.
** Some of the data lifted from `perl -V` at build time is bogus; for
   example, `archname` on my system is i486-linux-gnu-thread-multi
   because that's where debian's perl came from.
