CompUnit
"\x23".'line 2 emitted_p5
package Main;
use Data::Dumper;
'.join(";\n",@{$n<statements>})

Val_Int
$n<text>

Apply
if($n<code> =~ /^infix:(.+)$/) {
  my $op = $1;
  my($l,$r)=@{$n<arguments>};
  if($op eq '~'){ "($l . $r)" }
  elsif($op eq ','){ "$l, $r" }
  else { "($l $op $r)" }
}
elsif($n<code> =~ /^circumfix:(.+)/) {
  my $op = $1;
  my($arg)=join(",",@{$n<arguments>||[]});
  if(undef) {
  } else {
    $op =~ s/ /$arg/;
    $op  
  }
}
else {
  my $f = $n<code>;
  if($f =~ /^\$\w+$/) {
     $f.'->('.join(",",@{$n<arguments>}).')';
  }elsif($f eq 'self') {
    '$self'
  }else{
     '::'.$f.'('.join(",",@{$n<arguments>}).')';
  }
}

Decl
if($n<decl> eq 'has') {
  my $default = $n<default>;
  if(defined $default) {
    $default = ", default => $default"
  } else {
    $default = ""
  }
  "has '".$n<var><name>."' => (is => 'rw'$default);"
} else {
  $n<decl>.' '.$n<var>.($n<default> ? ' = '.$n<default> : '')
}

Use
""

Val_Buf
local $Data::Dumper::Terse = 1;
my $s = Data::Dumper::Dumper($n<buf>); chomp($s);
$s;

Var
my $s = $n<sigil>;
my $t = $n<twigil>||'';
my $env = '';
$env = 'e' if $t eq '^';
my $pre = '';
$pre = 'a_' if $s eq '@';
$pre = 'h_' if $s eq '%';
my $name = $env.$pre.$n<name>;
if($t eq '.') {
  '$self->'.$name
}else{
  '$'.$name
}

If
('if('.$n<test>.")\n".$n<body>."\n"
.join("",map{'elsif('.$_->[0].")\n".$_->[1]."\n"} @{$n<elsif>})
.($n<else> ?  "else\n".$n<else>->[0] : ""))

Block
''.join(";\n",@{$n<statements>}).''

Sub
'sub '.$n<name>.'{'.$n<sig>.$n<block>.'}'

Method
'sub '.$n<name>.'{my $self=shift;'.$n<sig>.$n<block>.'}'


Sig
my @a = @{$n<positional>};
if(!@a) { "" }
else {
  'my('.join(",",@{$n<positional>}).')=@_;'."\n";
}

Lit_SigArgument
$n<key>

PackageDeclarator
("\n{ package ".$n<name>.";\n".
 "use Moose;\n".
 "use Moose::Autobox; use autobox::Core;\n". #XXX can this be use()d in one place instead?
 join("\n",@{$n<traits>||[]}).
 $n<block>.
 "\n}\n");

Trait
if($n<verb> eq 'is') {
  "extends '".$n<expr>."';"
} else {
  print STDERR "ERROR: Emitting p5 for Trait verb ".$n<verb>." has not been implemented.\n";
  "***Trait***"
}

Call
my $method = $n<method>;
if($method =~ 'postcircumfix:(.*)') {
  my $op = $1;
  my $arg = join(",",@{$n<arguments>||[]});
  $op =~ s/ /$arg/;
  $n<invocant>.'->'.$op;
} else {
  $n<invocant>.'->'.$n<method>.'('.join(",",@{$n<arguments>||[]}).')'
}

Lit_Hash
'{'.join(",",@{$n<hash>||[]}).'}'