#!/usr/bin/pugs

use Test;
use v6;

plan 19;

# L<S06/"The C<caller> function">

# caller.subname
sub a_sub { b_sub() }
sub b_sub { eval 'caller.subname' }
is ~a_sub(), "foo", "caller.sub works", :todo;

# caller.file
ok index(~eval('caller.file'), "caller") >= 0, "caller.file works", :todo;

# caller.line (XXX: make sure to edit the expected line number!)
is +eval('caller.line'), 19, "caller.line works", :todo;

# caller exposes a bug in the oo mechanism where directy using autogenerated
# accessors on an object returned by a factory, rather than storing the object
# in an intermediate variable, doesn't work. To avoid blocking on that problem
# here are some less elegant tests.

sub try_it {
    my ($code, $expected, $desc) = @_;
    is($code(), $expected, $desc);
}
sub try_it_caller { try_it(*@_) }                                # (line 30.)
class A { method try_it_caller_A { try_it_caller(*@_) } }
sub try_it_caller_caller { A.try_it_caller_A(*@_) }
class B { method try_it_caller_B { try_it_caller_caller(*@_) } }
sub chain { B.try_it_caller_B(*@_) }

# must use itermediate object.

# basic tests of caller object
chain({ my $c = caller; ref $c }, "Control::Caller", "caller object type");
chain({ my $c = caller; $c.package }, "main", "caller package");
chain({ my $c = caller; $c.file }, "t/builtins/caller.t", "caller filename");
chain({ my $c = caller; $c.line }, "30", "caller line");
chain({ my $c = caller; $c.subname }, "&main::try_it_caller", "caller subname");
chain({ my $c = caller; $c.subtype }, "SubRoutine", "caller subtype"); # specme
chain({ my $c = caller; $c.sub }, \&try_it_caller, "caller sub (code)");

# select by code type
chain({ my $c = caller(Any);     $c.subname }, "&main::try_it_caller", "code type - Any");
chain({ my $c = caller("Any");   $c.subname }, "&main::try_it_caller", "code type - Any (string)");
chain({ my $c = caller(Method);  $c.subname }, "&A::try_it_caller_A", "code type - Method");
chain({ my $c = caller("Moose"); $c },         undef, "code type - not found");

# :skip
chain({ my $c = caller(:skip<1>);   $c.subname }, "&A::try_it_caller_A", ":skip<1>");
chain({ my $c = caller(:skip<128>); $c },         undef, ":skip<128> - not found");

# type + :skip
chain({ my $c = caller(Sub, :skip<1>);    $c.subname }, "&main::try_it_caller_caller", "Sub, :skip<1>");
chain({ my $c = caller(Sub, :skip<2>);    $c.subname }, "&main::chain", "Sub, :skip<2>");
chain({ my $c = caller(Method, :skip<1>); $c.subname }, "&B::try_it_caller_B", "Method, :skip<1>");

# WRITEME: label tests

