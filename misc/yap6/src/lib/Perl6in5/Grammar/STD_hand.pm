package Perl6in5::Grammar::STD_hand;

use warnings;
#use strict; #haha

use base 'Exporter';
our @EXPORT = qw ( make_parser );

use Perl6in5::Compiler::Trace; # set env var TRACE for trace output

# isa Perl6in5::Grammar someday (to inherit some of the common features below)

use Perl6in5::Grammar ':all'; # heehee; a source filter.
#use P65GL;
use Perl6in5::Compiler::Stream ':all';
use Perl6in5::Compiler::Parser ':all';
use Perl6in5::Compiler::Lexer ':all';

use Data::Dumper;
$Data::Dumper::Indent = 0;
$Data::Dumper::Terse = 1;
$Data::Dumper::Useqq = 1;
$Data::Dumper::Quotekeys = 0;
$Data::Dumper::Deparse = 1;

no warnings qw{ reserved closure recursion };

sub make_parser {
    my $input = shift;
    
    my $wS = sub { "" };
    
    my $lexer = iterator_to_stream(make_lexer($input,
    [ 'USEV6'           ,qr/use\s+v6;/        ,                            ],
    [ 'NL'              ,qr/\n+/              ,                            ],
    [ 'ID'              ,qr|[A-Za-z_]\w*|     ,                            ],
    [ 'INT'             ,qr|\d+|              ,                            ],
    # someday soon I'll need to remove whitespace from here and handle it
    # in the parser (not the lexer), since there are so many special rules
    # around ws and unspace.  Actually someday soon, all that should remain
    # here is the "C" pattern (unfortunately), since there is so much that
    # will need to be redefinable at parse time, the lexing needs to go
    # character by character.  This means that the lexing step will merely
    # generate a sub generator that generates a stream of nested arrayrefs
    # (with the lexer as the tail) that each contain the next character.
    [ 'WS'              ,qr/\s+/              ,$wS                         ],
    [ "C"               ,qr#.#                ,                            ],

    )); 

    my %VAR;

    # <sigh> these "predeclaration" need to be autogenerated someday, somehow
    my ($base, $expr, $factor, $program, $term, $sVar, $stringLit,
        $usev6, $comma, $stmtList, $blockList, $newline, $blkBare, $blkPrmbl,
        $blkType, $blkRetT, $blkModf, $stmtTrm, $scpDecl, $block, $arg,
        $blkPrm, $compUnit, $flowCtrl, $blkLabl
    );

    sub eoi () { $End_of_Input };
    my $Base               = parser { $base            ->(@_) };
    sub base () { $Base };
    my $Expr               = parser { $expr            ->(@_) };
    sub expr () { $Expr };
    my $Factor             = parser { $factor          ->(@_) };
    sub factor () { $Factor };
    my $Program            = parser { $program         ->(@_) };
    sub program () { $Program };
    my $Term               = parser { $term            ->(@_) };
    sub term () { $Term };
    my $SVar               = parser { $sVar            ->(@_) };
    sub sVar () { $SVar };
    my $StringLit          = parser { $stringLit       ->(@_) };
    sub stringLit () { $StringLit };
    my $Usev6              = parser { $usev6           ->(@_) };
    sub usev6 () { $Usev6 };
    my $Comma              = parser { $comma           ->(@_) };
    sub comma () { $Comma };
    my $StmtList           = parser { $stmtList        ->(@_) };
    sub stmtList () { $StmtList };
    my $BlockList          = parser { $blockList       ->(@_) };
    sub blockList () { $BlockList };
    my $Newline            = parser { $newline         ->(@_) };
    sub newline () { $Newline };
    my $BlkBare            = parser { $blkBare         ->(@_) };
    sub blkBare () { $BlkBare };
    my $BlkPrmbl           = parser { $blkPrmbl        ->(@_) };
    sub blkPrmbl () { $BlkPrmbl };
    my $BlkType            = parser { $blkType         ->(@_) };
    sub blkType () { $BlkType };
    my $BlkRetT            = parser { $blkRetT         ->(@_) };
    sub blkRetT () { $BlkRetT };
    my $BlkModf            = parser { $blkModf         ->(@_) };
    sub blkModf () { $BlkModf };
    my $StmtTrm            = parser { $stmtTrm         ->(@_) };
    sub stmtTrm () { $StmtTrm };
    my $ScpDecl            = parser { $scpDecl         ->(@_) };
    sub scpDecl () { $ScpDecl };
    my $Block              = parser { $block           ->(@_) };
    sub block () { $Block };
    my $Arg                = parser { $arg             ->(@_) };
    sub arg () { $Arg };
    my $BlkPrms            = parser { $blkPrms         ->(@_) };
    sub blkPrms () { $BlkPrms };
    my $FlowCtrl           = parser { $flowCtrl        ->(@_) };
    sub flowCtrl () { $FlowCtrl };
    my $BlkLabl            = parser { $blkLabl         ->(@_) };
    sub blkLabl () { $BlkLabl };
    my $CompUnit           = parser { $compUnit        ->(@_) };
    sub compUnit () { $CompUnit };

    # these hash keys are coderef (addresses)
    our %N = (
        $End_of_Input     => 'EOI',
        $nothing          => 'nothing',
        $Expr             => 'Expr',
        $Term             => 'Term',
        $Factor           => 'Factor',
        $Base             => 'Base',
        $Program          => 'Program',
        $ScpDecl          => 'ScpDecl',
        $SVar             => 'SVar',
        $StringLit        => 'StringLit',
        $Usev6            => 'Usev6',
        $Comma            => 'Comma',
        $StmtList         => 'StmtList',
        $BlockList        => 'BlockList',
        $Newline          => 'Newline',
        $BlkBare          => 'BlkBare',
        $BlkPrmbl         => 'BlkPrmbl',
        $BlkType          => 'BlkType',
        $BlkRetT          => 'BlkRetT',
        $BlkModf          => 'BlkModf',
        $StmtTrm          => 'StmtTrm',
        $Block            => 'Block',
        $Arg              => 'Arg',
        $BlkPrms          => 'BlkPrms',
        $FlowCtrl         => 'FlowCtrl',
        $BlkLabl          => 'BlkLabl',
        $CompUnit         => 'CompUnit'
    );

    sub execnow (&) { $_[0]->() }

    sub say (@) { print $_."\n" for @_ }

    sub adn (@) { 
        print "Adding AST node: "; # trace
        say join('',map(Dumper($_)." ",@_));
        Dumper([map("$_",@_)]);
    }

    sub ch { # parse for a single character.
        my $p;
        $p = l("C",$_[0]);
        $N{$p} = "$_[0]"; # trace
        $p;
    }

    sub w { # look for a wrapped entity.  first parm is split into the wrappers.
        my ($d,$e) = split(//,$_[0]);
        my $p;
        $p = concatenate(ch($d),$_[1],ch($e));
        $N{$p} = "$d ".$N{$_[1]}." $e"; # trace
        $p;
    }

    sub keyword {
        my $ins = shift;
        my $p;
        $p = l('ID',$ins);
        $N{$p} = "$ins"; # trace
        $p;
    }

    sub keywords {
        my @args = @_;
        my $p;
        $p = alternate(map(keyword($_),@args));
        $N{$p} = join("|",@args); # trace
        $p;
    }

    #sub k { goto &keyword }

    sub clist {
        my $ins = shift;
        my $p;
        $p = commalist($ins,$comma->(),', ');
        $N{$p} = "clist($N{$ins}"; # trace
        $p;
    }

    sub gt0 { # hit on 1 or more of the contained. (gt0 == greater than zero)
        my $p;
        $p = concatenate($_[0],star($_[0]));
        $N{$p} = ">=1($N{$_[0]})"; # trace
        $p;
    }

    sub word {
        my $p;
        $p = concatenate(map(ch($_),split(//, $_[0])));
        $N{$p} = $_[0];
        $p;
    }

    $sVar = concatenate('$',l('ID')) >> sub {
            "$_[0]$_[1]";
        };

    # The identifier of each of your rules must begin with a lowercase letter.   sorry.

    # rule perl5zone {
        # sl(); # grabs anything/everything...
    # }

    rule program {
        # treat everything as Perl 5 by default. haha!
        #o($Perl5zone)        -        # can't slurp "up until" until we're backtracking
        # I need a function "until($p,$q)" that returns a parser that 
        # iterates through the stream of tokens, trying $q against the
        # remaining input at each token, essentially using $q as a stop
        # phrase, then returns $p's and $q's matches, concatenated.
     #parser { sub {} }
        o(usev6 - error(o(stmtList))) - o(newline) - eoi
        # an optional Perl 5 section # use v6; # error trapper #optional Stmt list
    };

    rule usev6 {
        l('USEV6')
    };

    rule comma {
        ','
    };

    rule stmtList {
            o(newline) - (expr - o(stmtTrm - o(stmtList | blockList)) - o(newline)
                        | blockList)
    };

    rule blockList {
            block - o((newline | stmtTrm) - o(stmtList)) - o(newline)
    };

    rule newline {
        l('NL')
    };

    rule blkBare {
        w("{}",stmtList)
    };

    rule block {
        o(blkPrmbl) - blkBare
    };

    rule blkPrmbl {
            o(blkModf) - o(scpDecl - blkRetT) - blkType
            - o(l('ID')) - o(w('()',blkPrms)) #- o($BlkTrts)
          | compUnit
          | flowCtrl
          | blkLabl
    };

    rule flowCtrl { # Until I die, I would cry unless unless/until were included.
        keywords(qw{ if unless elsif else loop do while until })
    };

    rule compUnit {
        keywords(qw{ eval PRE POST ENTER LEAVE KEEP UNDO FIRST 
                     LAST BEGIN END INIT CHECK UNITCHECK })
    };

    rule blkType {
        keywords(qw{ sub method submethod regex token rule macro })
    };

    rule blkRetT {
        l('ID')  # just take any class/type name for now :)
      #  $Clype    # Class/Type
    };

    rule blkLabl {
        l('ID') - ':';
    };

    rule blkModf {
        keywords(qw{ multi proto only })
    };

    rule arg {
        'h'  #obviously this is just a stub.
    };

    rule blkPrms {
        star(arg)
    };

    rule stmtTrm {
        gt0(';')
    };

    rule scpDecl {
        keywords(qw{ my our })
    };

    rule expr {
            w('()',expr) | ((keyword('say') - expr)
          | ((o(scpDecl)) - sVar - '=' - expr ))
          | term - (star('+' - term | '-' - term))
          | block
    };

    rule term {
            factor - star('*' - factor | '/' - factor)
    };

    rule factor {
            base - o(word('**') - factor)
    };

    rule base {
            l('INT') | sVar | w('()',expr)
    };

    sub {
        eval { program->($lexer) };
        if ($@) {
            print "  Syntax Error near: ".Dumper(tail(head(tail($@))));
            return 255;
        } else {
            print "Parse successful\n";
            return 0;
        }
    }
}

1;