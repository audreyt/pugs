{

    package Test;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict 'vars';
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    BEGIN { $_MODIFIED = {} }

    BEGIN {
        $_ =
          ::DISPATCH( $::Scalar, "new",
            { modified => $_MODIFIED, name => "$_" } );
    }
    {
        our $Code_ok =
          ::DISPATCH( $::Routine, 'new',
            { modified => $_MODIFIED, name => '$Code_ok' } );
        our $Code_plan =
          ::DISPATCH( $::Routine, 'new',
            { modified => $_MODIFIED, name => '$Code_plan' } );
        do {
            if (
                ::DISPATCH(
                    ::DISPATCH(
                        ::DISPATCH(
                            $GLOBAL::Code_VAR_defined, 'APPLY', $::Test
                        ),
                        "true"
                    ),
                    "p5landish"
                )
              )
            {
            }
            else {
                {
                    our $Code_ok =
                      ::DISPATCH( $::Routine, 'new',
                        { modified => $_MODIFIED, name => '$Code_ok' } );
                    our $Code_plan =
                      ::DISPATCH( $::Routine, 'new',
                        { modified => $_MODIFIED, name => '$Code_plan' } );
                    do {
                        ::MODIFIED($::Test);
                        $::Test = ::DISPATCH(
                            ::DISPATCH(
                                $::Class, 'new',
                                ::DISPATCH( $::Str, 'new', 'Test' )
                            ),
                            'PROTOTYPE',
                        );
                      }
                }
            }
        };
        do {
            ::MODIFIED($Code_ok);
            $Code_ok = ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {
                        my $List__ =
                          ::DISPATCH( $::Array, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $cond;
                        $cond =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$cond' } )
                          unless defined $cond;

                        BEGIN {
                            $cond =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$cond' } );
                        }
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;

                        BEGIN {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        do {
                            ::MODIFIED($cond);
                            $cond =
                              ::DISPATCH( $List__, 'INDEX',
                                ::DISPATCH( $::Int, 'new', 0 ) );
                        };
                        do {
                            if (
                                ::DISPATCH(
                                    ::DISPATCH( $cond, "true" ), "p5landish"
                                )
                              )
                            {
                                {
                                    ::DISPATCH( $GLOBAL::Code_say, 'APPLY',
                                        ::DISPATCH( $::Str, 'new', 'ok' ) )
                                }
                            }
                            else {
                                {
                                    ::DISPATCH( $GLOBAL::Code_say, 'APPLY',
                                        ::DISPATCH( $::Str, 'new', 'not ok' ) )
                                }
                            }
                          }
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => $::Undef,
                            array    => ::DISPATCH(
                                $::Array, "new",
                                {
                                    _array => [
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            "new",
                                            {
                                                sigil     => '$',
                                                twigil    => '',
                                                name      => 'cond',
                                                namespace => [],
                                            }
                                        ),
                                    ]
                                }
                            ),
                            hash =>
                              ::DISPATCH( $::Hash, "new", { _hash => {} } ),
                            return => $::Undef,
                        }
                    ),
                }
            );
        };
        do {
            ::MODIFIED($Code_plan);
            $Code_plan = ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {
                        my $List__ =
                          ::DISPATCH( $::Array, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $number_of_test;
                        $number_of_test = ::DISPATCH(
                            $::Scalar,
                            'new',
                            {
                                modified => $_MODIFIED,
                                name     => '$number_of_test'
                            }
                        ) unless defined $number_of_test;

                        BEGIN {
                            $number_of_test = ::DISPATCH(
                                $::Scalar,
                                'new',
                                {
                                    modified => $_MODIFIED,
                                    name     => '$number_of_test'
                                }
                            );
                        }
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;

                        BEGIN {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        do {
                            ::MODIFIED($number_of_test);
                            $number_of_test =
                              ::DISPATCH( $List__, 'INDEX',
                                ::DISPATCH( $::Int, 'new', 0 ) );
                        };
                        ::DISPATCH(
                            $GLOBAL::Code_say,
                            'APPLY',
                            ::DISPATCH(
                                $GLOBAL::Code_infix_58__60__126__62_,
                                'APPLY',
                                ::DISPATCH( $::Str, 'new', '1..' ),
                                $number_of_test
                            )
                        );
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => $::Undef,
                            array    => ::DISPATCH(
                                $::Array, "new",
                                {
                                    _array => [
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            "new",
                                            {
                                                sigil     => '$',
                                                twigil    => '',
                                                name      => 'number_of_test',
                                                namespace => [],
                                            }
                                        ),
                                    ]
                                }
                            ),
                            hash =>
                              ::DISPATCH( $::Hash, "new", { _hash => {} } ),
                            return => $::Undef,
                        }
                    ),
                }
            );
          }
    };
    1
}
