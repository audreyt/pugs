my $void;
my $scope = ¢SMOP__S1P__LexicalScope."new"();

my $OUT_root_scalar = ¢SMOP__S1P__RootNamespace."postcircumfix:{ }"("$*OUT");
my $OUT_root = $OUT_root_scalar."FETCH"();
my $OUT_scalar = $scope."postcircumfix:{ }"("$*OUT");
$void = $OUT_scalar."STORE"($OUT_root);


my $Code_scalar = $scope."postcircumfix:{ }"("Code");
my $Code_root_scalar = ¢SMOP__S1P__RootNamespace."postcircumfix:{ }"("::Code");
my $Code_root = $Code_root_scalar."FETCH"();
$void = $Code_scalar."STORE"($Code_root);


##############################################################

my $interpreter;
my $scope;
my $void;
my $Code_scalar = $scope."lookup"("Code");
my $Code = $Code_scalar."FETCH"();
my $id2 = $Code."new"(:"outer"($scope),:"mold"(mold {
my $interpreter;
my $scope;
my $void;
my $Code_scalar = $scope."lookup"("Code");
my $Code = $Code_scalar."FETCH"();
my $id3 = $Code."new"(:"outer"($scope),:"mold"(mold {
my $interpreter;
my $scope;
my $void;
my $Code_scalar = $scope."lookup"("Code");
my $Code = $Code_scalar."FETCH"();
my $id6 = $scope."lookup"("$*OUT");
my $id5 = $id6."FETCH"();
my $id7 = "1..1\nok 1\n";
my $id4 = $id5."print"($id7);
my $continuation = $interpreter."continuation"();
my $back = $continuation."back"();
my $void = $back."setr"($id4);
$void = $interpreter."goto"($back);
}));
my $continuation = $interpreter."continuation"();
my $back = $continuation."back"();
my $void = $back."setr"($id3);
$void = $interpreter."goto"($back);
}));
my $id1 = $id2."postcircumfix:( )"();
my $id9 = $scope."lookup"("$_");
my $id8 = $id9."FETCH"();
my $void = $id1."postcircumfix:( )"($id8);
