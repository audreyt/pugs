=head1 NAME

Deprecated Syntax

=head1 SYNOPSIS

This document tries summarized common mistakes in the test suite. If you
help refactoring the suite, or write new tests, read this document first.

=head1 DEPRECATED SYNTAX

=head2 Old POD

Old POD looks like this:

    =head1 heading
    ...
    =cut

The new POD looks like this:

    =begin stuff
    ...
    =end stuff

All new files, and all below C<t/spec/> should follow the new conventions.

=head2 Array indexes with negative numbers

The Perl 5 style negative array indexes C<@array[-1]> are spelled
C<@array[*-1]> in Perl 6.

=head2 pos()

C<pos> is dead. C<$/.to> is the replacement.

=head2 length()

C<length> is gone. Hashes should use C<keys>, C<values>, or the hash in numeric
context. For arrays, you want C<elems> or the array in numeric context. For
strings, you want one of C<chars>, C<graphs>, C<codes>, or C<bytes>.

=head2 Special Pugs variables

Some tests rely on C<$?PUGS_BACKEND> and similar variables. Since they are not
specced, they cause failures on other implementations. Either remove these
variables alltogether, or at enclose them in C<eval '...'>.

=head2 "my" in pointy block signatures

C<<for @list -> my $x >> is wrong, no need for a C<my> here. The current test
suite seems clear of that error.

=head2 dies_ok for tests that can fail at compile time

C<dies_ok> should only be used for tests that have to fail at run time. For
example non-existant subs are no such case. Always bare in mind that a clever
compiler might do some type inference and prove that there always will be an
error, and throw it at compile time.

If in doubt, use C<eval_dies_ok> instead. If you have a case where C<dies_ok>
is fine, remeber to pass a code ref to it.

=cut
