# This is the perl5 compiled code from t/kp6/grammar/15-capture-from-rule-block.t
# The problem is that
# my $inner1 = ::DISPATCH( $::MyGrammar, 'tok2', );
# goes into an infinite loop
# Runtime::Perl5::MOP
# has code to help you debug it.
# http://dev.pugscode.org/changeset/18778

# to debug this code
# tcsh: setenv PERL5LIB compiled/perl5-kp6-mp6/lib
# cd pugs/v6/v6-KindaPerl6
# perl -d kp6-grammar-test-15.pl
# b main::daniels_test;
# c
# continue debugging from here.

BEGIN {
    sub daniels_test {
        print "This is a test";
    }

    sub dump_object($) {
        if ( ref( $_[0] ) ne 'HASH' && ref( $_[0] ) ne 'DISPATCH' ) {
            print "I only work on hashes\n";
            return;
        }

        for my $key ( keys %{ $_[0] } ) {
            if ( ref( $_[0]->{ $key } ) eq 'HASH' || ref( $_[0]->{ $key } ) eq 'DISPATCH'  ) {
                # we only follow up on, hash references that have content.
                if ( keys %{ $_[0]->{ $key } } ) {
                    print $key, ' = ', $_[0]->{ $key }, "\n";
                }
            } else {
                print $key, ' = ', $_[0]->{ $key }, "\n";
            }
        }
    }
}

{

    package MyGrammar;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict "vars";
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    INIT { $_MODIFIED = {} }
    INIT { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    do {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::MyGrammar ), "true" ), "p5landish" ) ) { }
            else {
                do {
                    do {
                        ::MODIFIED($::MyGrammar);
                        $::MyGrammar = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'MyGrammar' ) ), 'PROTOTYPE', );
                        }
                    }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::MyGrammar, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'tok1' ),
            ::DISPATCH(
                $::Code, 'new',
                {   code => sub {
                        my $MATCH;
                        $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } ) unless defined $MATCH;
                        INIT { $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } ) }
                        my $List__ = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        my $str;
                        $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } ) unless defined $str;
                        INIT { $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } ) }
                        my $pos;
                        $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } ) unless defined $pos;
                        INIT { $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } ) }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                        INIT { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        {
                            my $_param_index = 0;
                            if ( exists $Hash__->{_value}{_hash}{'str'} ) {
                                do {
                                    ::MODIFIED($str);
                                    $str = ::DISPATCH( $Hash__, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'str' ) );
                                    }
                            }
                            elsif ( exists $List__->{_value}{_array}[$_param_index] ) { $str = $List__->{_value}{_array}[ $_param_index++ ]; }
                            if ( exists $Hash__->{_value}{_hash}{'pos'} ) {
                                do {
                                    ::MODIFIED($pos);
                                    $pos = ::DISPATCH( $Hash__, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'pos' ) );
                                    }
                            }
                            elsif ( exists $List__->{_value}{_array}[$_param_index] ) { $pos = $List__->{_value}{_array}[ $_param_index++ ]; }
                        }
                        do {
                            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Hash_ENV, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'KP6_TOKEN_DEBUGGER' ) ), "true" ), "p5landish" ) ) {
                                do {
                                    ::DISPATCH(
                                        $GLOBAL::Code_say,
                                        'APPLY',
                                        ::DISPATCH(
                                            $GLOBAL::Code_infix_58__60__126__62_,
                                            'APPLY',
                                            ::DISPATCH( $::Str, 'new', '>>> token tok1 at ' ),
                                            ::DISPATCH(
                                                $GLOBAL::Code_infix_58__60__126__62_,
                                                'APPLY', $pos,
                                                ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( $::Str, 'new', ' of (' ), ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', $str, ::DISPATCH( $::Str, 'new', ')' ) ) )
                                            )
                                        )
                                    );
                                    }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        do {
                            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_prefix_58__60__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_defined, 'APPLY', $str ) ), "true" ), "p5landish" ) ) {
                                do {
                                    ::DISPATCH_VAR( $str, 'STORE', $_ );
                                    }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        $MATCH;
                        ::DISPATCH_VAR( $MATCH, 'STORE', ::DISPATCH( $::Match, 'new', ) );
                        ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'match_str', ), 'STORE', $str );
                        ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'from', ),      'STORE', $pos );
                        ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to', ),        'STORE', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', $pos, ::DISPATCH( $::Int, 'new', 0 ) ) );
                        ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool', ), 'STORE', ::DISPATCH( $::Int, 'new', 1 ) );
                        ::DISPATCH_VAR(
                            ::DISPATCH( $MATCH, 'bool', ),
                            'STORE',
                            do {
                                do {
                                    my $pos1;
                                    $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) unless defined $pos1;
                                    INIT { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
                                    ::DISPATCH_VAR( $pos1, 'STORE', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $MATCH, 'to', ), ::DISPATCH( $::Int, 'new', 0 ) ) );
                                    do {
                                        do {
                                            ::DISPATCH(
                                                $GLOBAL::Code_infix_58__60__38__38__62_,
                                                'APPLY',
                                                ::DISPATCH(
                                                    $::Code, 'new',
                                                    {   code => sub {
                                                            my $CAPTURE;
                                                            $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                                                            INIT { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                                                            ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                                                            do {
                                                                ::MODIFIED($List__);
                                                                $List__ = ::DISPATCH( $CAPTURE, 'array', );
                                                            };
                                                            do {
                                                                ::MODIFIED($Hash__);
                                                                $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                                                            };
                                                            { my $_param_index = 0; }
                                                            do {
                                                                do {
                                                                    do {
                                                                        if (::DISPATCH(
                                                                                ::DISPATCH( ::DISPATCH( $GLOBAL::Code_infix_58__60__60__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_chars, 'APPLY', $str ), ::DISPATCH( $::Int, 'new', 1 ) ), "true" ),
                                                                                "p5landish"
                                                                            )
                                                                            )
                                                                        {
                                                                            do {
                                                                                ::DISPATCH( $::Int, 'new', 0 );
                                                                                }
                                                                        }
                                                                        else {
                                                                            do {
                                                                                do {
                                                                                    if (::DISPATCH(
                                                                                            ::DISPATCH(
                                                                                                ::DISPATCH(
                                                                                                    $GLOBAL::Code_infix_58__60_eq_62_, 'APPLY',
                                                                                                    ::DISPATCH( $::Str, 'new', 'a' ), ::DISPATCH( $GLOBAL::Code_substr, 'APPLY', $str, ::DISPATCH( $MATCH, 'to', ), ::DISPATCH( $::Int, 'new', 1 ) )
                                                                                                ),
                                                                                                "true"
                                                                                            ),
                                                                                            "p5landish"
                                                                                        )
                                                                                        )
                                                                                    {
                                                                                        do {
                                                                                            ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to', ),
                                                                                                'STORE', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $::Int, 'new', 1 ), ::DISPATCH( $MATCH, 'to', ) ) );
                                                                                            ::DISPATCH( $::Int, 'new', 1 );
                                                                                            }
                                                                                    }
                                                                                    else {
                                                                                        do {
                                                                                            ::DISPATCH( $::Int, 'new', 0 );
                                                                                            }
                                                                                    }
                                                                                    }
                                                                                }
                                                                        }
                                                                        }
                                                                    }
                                                                }
                                                        },
                                                        signature => ::DISPATCH( $::Signature, "new", { invocant => $::Undef, array => ::DISPATCH( $::Array, "new", { _array => [] } ), return => $::Undef, } ),
                                                    }
                                                ),
                                                ::DISPATCH(
                                                    $::Code,
                                                    'new',
                                                    {   code => sub {
                                                            my $CAPTURE;
                                                            $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                                                            INIT { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                                                            ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                                                            do {
                                                                ::MODIFIED($List__);
                                                                $List__ = ::DISPATCH( $CAPTURE, 'array', );
                                                            };
                                                            do {
                                                                ::MODIFIED($Hash__);
                                                                $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                                                            };
                                                            { my $_param_index = 0; }
                                                            do {
                                                                do {
                                                                    my $ret;
                                                                    $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) unless defined $ret;
                                                                    INIT { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
                                                                    ::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block1_d08337b0dc6960178f44bd2965225297', $MATCH ) );
                                                                    do {
                                                                        if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_infix_58__60_ne_62_, 'APPLY', $ret, ::DISPATCH( $::Str, 'new', 'sTrNgE V4l' ) ), "true" ), "p5landish" ) ) {
                                                                            do {
                                                                                do {
                                                                                    if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Hash_ENV, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'KP6_TOKEN_DEBUGGER' ) ), "true" ), "p5landish" ) ) {
                                                                                        do {
                                                                                            ::DISPATCH( $GLOBAL::Code_say, 'APPLY', ::DISPATCH( $::Str, 'new', '<<< some closure returning... ' ) );
                                                                                            }
                                                                                    }
                                                                                    else { ::DISPATCH( $::Bit, "new", 0 ) }
                                                                                };
                                                                                ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result', ), 'STORE', $ret );
                                                                                ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool', ), 'STORE', ::DISPATCH( $::Int, 'new', 1 ) );
                                                                                return ($MATCH);
                                                                                }
                                                                        }
                                                                        else { ::DISPATCH( $::Bit, "new", 0 ) }
                                                                    };
                                                                    ::DISPATCH( $::Int, 'new', 1 );
                                                                    }
                                                                }
                                                        },
                                                        signature => ::DISPATCH( $::Signature, "new", { invocant => $::Undef, array => ::DISPATCH( $::Array, "new", { _array => [] } ), return => $::Undef, } ),
                                                    }
                                                )
                                            );
                                            }
                                        }
                                    }
                                }
                        );
                        do {
                            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Hash_ENV, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'KP6_TOKEN_DEBUGGER' ) ), "true" ), "p5landish" ) ) {
                                do {
                                    do {
                                        if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $MATCH, 'bool', ), "true" ), "p5landish" ) ) {
                                            do {
                                                ::DISPATCH(
                                                    $GLOBAL::Code_say,
                                                    'APPLY',
                                                    ::DISPATCH(
                                                        $GLOBAL::Code_infix_58__60__126__62_, 'APPLY',
                                                        ::DISPATCH( $::Str, 'new', '<<< token tok1 returned true to (' ), ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( $MATCH, 'to', ), ::DISPATCH( $::Str, 'new', ')' ) )
                                                    )
                                                );
                                                }
                                        }
                                        else {
                                            do {
                                                ::DISPATCH( $GLOBAL::Code_say, 'APPLY', ::DISPATCH( $::Str, 'new', '<<< token tok1 returned false ' ) );
                                                }
                                        }
                                        }
                                    }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        return ($MATCH);
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {   invocant => $::Undef,
                            array    => ::DISPATCH(
                                $::Array, "new",
                                {   _array => [
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {   sigil               => '$',
                                                twigil              => '',
                                                name                => 'str',
                                                value               => $::Undef,
                                                has_default         => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_named_only       => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_optional         => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_slurpy           => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_multidimensional => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_rw               => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_copy             => ::DISPATCH( $::Bit, 'new', 0 ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {   sigil               => '$',
                                                twigil              => '',
                                                name                => 'pos',
                                                value               => $::Undef,
                                                has_default         => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_named_only       => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_optional         => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_slurpy           => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_multidimensional => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_rw               => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_copy             => ::DISPATCH( $::Bit, 'new', 0 ),
                                            }
                                        ),
                                    ]
                                }
                            ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
        ::DISPATCH(
            ::DISPATCH( $::MyGrammar, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'tok2' ),
            ::DISPATCH(
                $::Code, 'new',
                {   code => sub {
                        my $MATCH;
                        $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } ) unless defined $MATCH;
                        INIT { $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } ) }
                        my $List__ = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        my $str;
                        $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } ) unless defined $str;
                        INIT { $str = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$str' } ) }
                        my $pos;
                        $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } ) unless defined $pos;
                        INIT { $pos = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos' } ) }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                        INIT { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        {
                            my $_param_index = 0;
                            if ( exists $Hash__->{_value}{_hash}{'str'} ) {
                                do {
                                    ::MODIFIED($str);
                                    $str = ::DISPATCH( $Hash__, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'str' ) );
                                    }
                            }
                            elsif ( exists $List__->{_value}{_array}[$_param_index] ) { $str = $List__->{_value}{_array}[ $_param_index++ ]; }
                            if ( exists $Hash__->{_value}{_hash}{'pos'} ) {
                                do {
                                    ::MODIFIED($pos);
                                    $pos = ::DISPATCH( $Hash__, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'pos' ) );
                                    }
                            }
                            elsif ( exists $List__->{_value}{_array}[$_param_index] ) { $pos = $List__->{_value}{_array}[ $_param_index++ ]; }
                        }
                        do {
                            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Hash_ENV, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'KP6_TOKEN_DEBUGGER' ) ), "true" ), "p5landish" ) ) {
                                do {
                                    ::DISPATCH(
                                        $GLOBAL::Code_say,
                                        'APPLY',
                                        ::DISPATCH(
                                            $GLOBAL::Code_infix_58__60__126__62_,
                                            'APPLY',
                                            ::DISPATCH( $::Str, 'new', '>>> token tok2 at ' ),
                                            ::DISPATCH(
                                                $GLOBAL::Code_infix_58__60__126__62_,
                                                'APPLY', $pos,
                                                ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( $::Str, 'new', ' of (' ), ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', $str, ::DISPATCH( $::Str, 'new', ')' ) ) )
                                            )
                                        )
                                    );
                                    }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        do {
                            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_prefix_58__60__33__62_, 'APPLY', ::DISPATCH( $GLOBAL::Code_defined, 'APPLY', $str ) ), "true" ), "p5landish" ) ) {
                                do {
                                    ::DISPATCH_VAR( $str, 'STORE', $_ );
                                    }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        $MATCH;
                        ::DISPATCH_VAR( $MATCH, 'STORE', ::DISPATCH( $::Match, 'new', ) );
                        ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'match_str', ), 'STORE', $str );
                        ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'from', ),      'STORE', $pos );
                        ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to', ),        'STORE', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', $pos, ::DISPATCH( $::Int, 'new', 0 ) ) );
                        ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool', ), 'STORE', ::DISPATCH( $::Int, 'new', 1 ) );
                        ::DISPATCH_VAR(
                            ::DISPATCH( $MATCH, 'bool', ),
                            'STORE',
                            do {
                                do {
                                    my $pos1;
                                    $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) unless defined $pos1;
                                    INIT { $pos1 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$pos1' } ) }
                                    ::DISPATCH_VAR( $pos1, 'STORE', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $MATCH, 'to', ), ::DISPATCH( $::Int, 'new', 0 ) ) );
                                    do {
                                        do {
                                            ::DISPATCH(
                                                $GLOBAL::Code_infix_58__60__38__38__62_,
                                                'APPLY',
                                                ::DISPATCH(
                                                    $::Code, 'new',
                                                    {   code => sub {
                                                            my $CAPTURE;
                                                            $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                                                            INIT { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                                                            ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                                                            do {
                                                                ::MODIFIED($List__);
                                                                $List__ = ::DISPATCH( $CAPTURE, 'array', );
                                                            };
                                                            do {
                                                                ::MODIFIED($Hash__);
                                                                $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                                                            };
                                                            { my $_param_index = 0; }
                                                            do {
                                                                do {
                                                                    my $m2;
                                                                    $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) unless defined $m2;
                                                                    INIT { $m2 = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$m2' } ) }
                                                                    ::DISPATCH_VAR( $m2, 'STORE', ::DISPATCH( $self, 'tok1', $str, ::DISPATCH( $MATCH, 'to', ) ) );
                                                                    do {
                                                                        if ( ::DISPATCH( ::DISPATCH( $m2, "true" ), "p5landish" ) ) {
                                                                            do {
                                                                                ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'to', ),
                                                                                    'STORE', ::DISPATCH( $GLOBAL::Code_infix_58__60__43__62_, 'APPLY', ::DISPATCH( $m2, 'to', ), ::DISPATCH( $::Int, 'new', 0 ) ) );
                                                                                ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'tok1' ) ), 'STORE', $m2 );
                                                                                ::DISPATCH( $::Int, 'new', 1 );
                                                                                }
                                                                        }
                                                                        else {
                                                                            do {
                                                                                ::DISPATCH( $::Int, 'new', 0 );
                                                                                }
                                                                        }
                                                                        }
                                                                    }
                                                                }
                                                        },
                                                        signature => ::DISPATCH( $::Signature, "new", { invocant => $::Undef, array => ::DISPATCH( $::Array, "new", { _array => [] } ), return => $::Undef, } ),
                                                    }
                                                ),
                                                ::DISPATCH(
                                                    $::Code,
                                                    'new',
                                                    {   code => sub {
                                                            my $CAPTURE;
                                                            $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                                                            INIT { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                                                            ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                                                            do {
                                                                ::MODIFIED($List__);
                                                                $List__ = ::DISPATCH( $CAPTURE, 'array', );
                                                            };
                                                            do {
                                                                ::MODIFIED($Hash__);
                                                                $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                                                            };
                                                            { my $_param_index = 0; }
                                                            do {
                                                                do {
                                                                    my $ret;
                                                                    $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) unless defined $ret;
                                                                    INIT { $ret = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$ret' } ) }
                                                                    ::DISPATCH_VAR( $ret, 'STORE', ::DISPATCH( $self, '__rule_block2_d08337b0dc6960178f44bd2965225297', $MATCH ) );
                                                                    do {
                                                                        if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_infix_58__60_ne_62_, 'APPLY', $ret, ::DISPATCH( $::Str, 'new', 'sTrNgE V4l' ) ), "true" ), "p5landish" ) ) {
                                                                            do {
                                                                                do {
                                                                                    if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Hash_ENV, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'KP6_TOKEN_DEBUGGER' ) ), "true" ), "p5landish" ) ) {
                                                                                        do {
                                                                                            ::DISPATCH( $GLOBAL::Code_say, 'APPLY', ::DISPATCH( $::Str, 'new', '<<< some closure returning... ' ) );
                                                                                            }
                                                                                    }
                                                                                    else { ::DISPATCH( $::Bit, "new", 0 ) }
                                                                                };
                                                                                ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'result', ), 'STORE', $ret );
                                                                                ::DISPATCH_VAR( ::DISPATCH( $MATCH, 'bool', ), 'STORE', ::DISPATCH( $::Int, 'new', 1 ) );
                                                                                return ($MATCH);
                                                                                }
                                                                        }
                                                                        else { ::DISPATCH( $::Bit, "new", 0 ) }
                                                                    };
                                                                    ::DISPATCH( $::Int, 'new', 1 );
                                                                    }
                                                                }
                                                        },
                                                        signature => ::DISPATCH( $::Signature, "new", { invocant => $::Undef, array => ::DISPATCH( $::Array, "new", { _array => [] } ), return => $::Undef, } ),
                                                    }
                                                )
                                            );
                                            }
                                        }
                                    }
                                }
                        );
                        do {
                            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Hash_ENV, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'KP6_TOKEN_DEBUGGER' ) ), "true" ), "p5landish" ) ) {
                                do {
                                    do {
                                        if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $MATCH, 'bool', ), "true" ), "p5landish" ) ) {
                                            do {
                                                ::DISPATCH(
                                                    $GLOBAL::Code_say,
                                                    'APPLY',
                                                    ::DISPATCH(
                                                        $GLOBAL::Code_infix_58__60__126__62_, 'APPLY',
                                                        ::DISPATCH( $::Str, 'new', '<<< token tok2 returned true to (' ), ::DISPATCH( $GLOBAL::Code_infix_58__60__126__62_, 'APPLY', ::DISPATCH( $MATCH, 'to', ), ::DISPATCH( $::Str, 'new', ')' ) )
                                                    )
                                                );
                                                }
                                        }
                                        else {
                                            do {
                                                ::DISPATCH( $GLOBAL::Code_say, 'APPLY', ::DISPATCH( $::Str, 'new', '<<< token tok2 returned false ' ) );
                                                }
                                        }
                                        }
                                    }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        return ($MATCH);
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {   invocant => $::Undef,
                            array    => ::DISPATCH(
                                $::Array, "new",
                                {   _array => [
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {   sigil               => '$',
                                                twigil              => '',
                                                name                => 'str',
                                                value               => $::Undef,
                                                has_default         => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_named_only       => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_optional         => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_slurpy           => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_multidimensional => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_rw               => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_copy             => ::DISPATCH( $::Bit, 'new', 0 ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {   sigil               => '$',
                                                twigil              => '',
                                                name                => 'pos',
                                                value               => $::Undef,
                                                has_default         => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_named_only       => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_optional         => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_slurpy           => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_multidimensional => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_rw               => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_copy             => ::DISPATCH( $::Bit, 'new', 0 ),
                                            }
                                        ),
                                    ]
                                }
                            ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
        ::DISPATCH(
            ::DISPATCH( $::MyGrammar, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', '__rule_block1_d08337b0dc6960178f44bd2965225297' ),
            ::DISPATCH(
                $::Code, 'new',
                {   code => sub {
                        my $List__ = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        my $MATCH;
                        $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } ) unless defined $MATCH;
                        INIT { $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } ) }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                        INIT { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        {
                            my $_param_index = 0;
                            if ( exists $Hash__->{_value}{_hash}{'MATCH'} ) {
                                do {
                                    ::MODIFIED($MATCH);
                                    $MATCH = ::DISPATCH( $Hash__, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'MATCH' ) );
                                    }
                            }
                            elsif ( exists $List__->{_value}{_array}[$_param_index] ) { $MATCH = $List__->{_value}{_array}[ $_param_index++ ]; }
                        }
                        return ( ::DISPATCH( $::Array, 'new', ) );
                        return ( ::DISPATCH( $::Str, 'new', 'sTrNgE V4l' ) );
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {   invocant => $::Undef,
                            array    => ::DISPATCH(
                                $::Array, "new",
                                {   _array => [
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {   sigil               => '$',
                                                twigil              => '',
                                                name                => 'MATCH',
                                                value               => undef,
                                                has_default         => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_named_only       => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_optional         => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_slurpy           => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_multidimensional => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_rw               => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_copy             => ::DISPATCH( $::Bit, 'new', 0 ),
                                            }
                                        ),
                                    ]
                                }
                            ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
        ::DISPATCH(
            ::DISPATCH( $::MyGrammar, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', '__rule_block2_d08337b0dc6960178f44bd2965225297' ),
            ::DISPATCH(
                $::Code, 'new',
                {   code => sub {
                        my $List__ = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        my $MATCH;
                        $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } ) unless defined $MATCH;
                        INIT { $MATCH = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$MATCH' } ) }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                        INIT { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        {
                            my $_param_index = 0;
                            if ( exists $Hash__->{_value}{_hash}{'MATCH'} ) {
                                do {
                                    ::MODIFIED($MATCH);
                                    $MATCH = ::DISPATCH( $Hash__, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'MATCH' ) );
                                    }
                            }
                            elsif ( exists $List__->{_value}{_array}[$_param_index] ) { $MATCH = $List__->{_value}{_array}[ $_param_index++ ]; }
                        }
                        return ( ::DISPATCH( $GLOBAL::Code_prefix_58__60__36__62_, 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'tok1' ) ) ) );
                        return ( ::DISPATCH( $::Str, 'new', 'sTrNgE V4l' ) );
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {   invocant => $::Undef,
                            array    => ::DISPATCH(
                                $::Array, "new",
                                {   _array => [
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {   sigil               => '$',
                                                twigil              => '',
                                                name                => 'MATCH',
                                                value               => undef,
                                                has_default         => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_named_only       => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_optional         => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_slurpy           => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_multidimensional => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_rw               => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_copy             => ::DISPATCH( $::Bit, 'new', 0 ),
                                            }
                                        ),
                                    ]
                                }
                            ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
    };
    1
}

{

    package Main;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict "vars";
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    INIT { $_MODIFIED = {} }
    INIT { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    do {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $GLOBAL::Code_VAR_defined, 'APPLY', $::Main ), "true" ), "p5landish" ) ) { }
            else {
                do {
                    do {
                        ::MODIFIED($::Main);
                        $::Main = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'Main' ) ), 'PROTOTYPE', );
                        }
                    }
            }
        };
        ::DISPATCH( $GLOBAL::Code_say, 'APPLY', ::DISPATCH( $::Str, 'new', '1..1' ) );
        ::DISPATCH_VAR( $_, 'STORE', ::DISPATCH( $::Str, 'new', 'a' ) );
        do {
            # if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( $::MyGrammar, 'tok2', ), "true" ), "p5landish" ) ) {
            &main::daniels_test;
            print "Bug is here; START\n";
            my $inner1 = ::DISPATCH( $::MyGrammar, 'tok2', );
            print "Bug is here; END\n";
            my $inner2 = ::DISPATCH( $inner1, "true" );
            my $inner3 = ::DISPATCH( $inner2, "p5landish" );
            if ( $inner3 ) {
                ::DISPATCH( $GLOBAL::Code_say, 'APPLY', ::DISPATCH( $::Str, 'new', 'ok 1' ) );
            }
            else {
                ::DISPATCH( $GLOBAL::Code_say, 'APPLY', ::DISPATCH( $::Str, 'new', 'not ok 1' ) );
            }
        }
    };

    1
}
