#include <stdlib.h>
#include <smop.h>
#include <math.h>
#include <smop_lowlevel.h>
#include <smop_mold.h>
#include <smop_s1p.h>
#include <stdio.h>

SMOP__Object* SMOP__S1P__grep;

typedef struct smop_s1p_grep_iterator_struct {
  SMOP__Object__BASE
  SMOP__Object* input_iterator;
  SMOP__Object* code;
} smop_s1p_grep_iterator_struct;

static SMOP__Object* grep_iterator_consume_mold;
static SMOP__Object* grep_iterator_voidcontext_mold;

static SMOP__Object* smop_s1p_grep_message(SMOP__Object* interpreter,
                                          SMOP__ResponderInterface* self,
                                          SMOP__Object* identifier,
                                          SMOP__Object* capture) {
  ___NATIVE_CAPTURE_ONLY___;
  ___CONST_IDENTIFIER_ONLY___;
  ___INVOCANT_RI_SHOULD_MATCH___;
  SMOP__Object* ret = SMOP__NATIVE__bool_false;

  if (identifier == SMOP__ID__postcircumfix_parens) {
    ret = smop_lowlevel_alloc(sizeof(smop_s1p_grep_iterator_struct));
    ret->RI = (SMOP__ResponderInterface*)SMOP__S1P__grep;
    SMOP__Object* actualcapture = SMOP__NATIVE__capture_positional(interpreter,capture,0);
    ((smop_s1p_grep_iterator_struct*)ret)->code = SMOP__NATIVE__capture_positional(interpreter,actualcapture,0);
    ((smop_s1p_grep_iterator_struct*)ret)->input_iterator = SMOP__NATIVE__capture_positional(interpreter,actualcapture,1);
    SMOP_RELEASE(interpreter,actualcapture);

  } else if (identifier == SMOP__ID__FETCH) {
    // grep is always itemized, there's no slice view on a grep.
    ret = SMOP_REFERENCE(interpreter,invocant);

  } else if (identifier == SMOP__ID__Void) {
    // grep in void context should evaluate eagerly.

    SMOP__Object* frame = (SMOP__Object*)SMOP__Mold__Frame_create(interpreter,SMOP_REFERENCE(interpreter,grep_iterator_voidcontext_mold));
    SMOP__Object* back = SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
      SMOP__ID__continuation,
      SMOP__NATIVE__capture_create(interpreter,SMOP_REFERENCE(interpreter,interpreter),
        NULL,NULL));

    mold_reg_set(interpreter,frame,0,SMOP_REFERENCE(interpreter,interpreter));
    mold_reg_set(interpreter,frame,1,SMOP_REFERENCE(interpreter,capture));
    mold_reg_set(interpreter,frame,2,back);
    mold_reg_set(interpreter,frame,3,SMOP_REFERENCE(interpreter,invocant));

    SMOP_DISPATCH(interpreter,SMOP_RI(interpreter),SMOP__ID__goto,frame);
    
  } else if (identifier == SMOP__ID__prefix_equal) {
    // this is the bare iterator without a context applied, which
    // means that it returns the bare return of the code.

    smop_lowlevel_rdlock(invocant);
    SMOP__Object* code = ((smop_s1p_grep_iterator_struct*)invocant)->code;
    SMOP__Object* in = ((smop_s1p_grep_iterator_struct*)invocant)->input_iterator;
    smop_lowlevel_unlock(invocant);

    SMOP__Object* frame = (SMOP__Object*)SMOP__Mold__Frame_create(interpreter,SMOP_REFERENCE(interpreter,grep_iterator_consume_mold));
    SMOP__Object* back = SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
      SMOP__ID__continuation,
      SMOP__NATIVE__capture_create(interpreter,SMOP_REFERENCE(interpreter,interpreter),
        NULL,NULL));

    mold_reg_set(interpreter,frame,0,SMOP_REFERENCE(interpreter,interpreter));
    mold_reg_set(interpreter,frame,1,SMOP_REFERENCE(interpreter,capture));
    mold_reg_set(interpreter,frame,2,back);
    mold_reg_set(interpreter,frame,3,SMOP_REFERENCE(interpreter,code));
    mold_reg_set(interpreter,frame,4,SMOP_REFERENCE(interpreter,in));

    SMOP_DISPATCH(interpreter,SMOP_RI(interpreter),SMOP__ID__goto,frame);

  } else if (identifier == SMOP__ID__DESTROYALL) {
    smop_lowlevel_wrlock(invocant);
    SMOP__Object* code = ((smop_s1p_grep_iterator_struct*)invocant)->code;
    ((smop_s1p_grep_iterator_struct*)invocant)->code = NULL;
    SMOP__Object* in = ((smop_s1p_grep_iterator_struct*)invocant)->input_iterator;
    ((smop_s1p_grep_iterator_struct*)invocant)->input_iterator = NULL;
    smop_lowlevel_unlock(invocant);
    
    if (code) SMOP_RELEASE(interpreter, code);
    if (in) SMOP_RELEASE(interpreter, in);

  } else {
    ___UNKNOWN_METHOD___;

  }
  

  SMOP_RELEASE(interpreter,invocant);
  SMOP_RELEASE(interpreter,capture);
  return ret;
}


void smop_s1p_grep_init() {
  SMOP__S1P__grep = calloc(1, sizeof(SMOP__ResponderInterface));
  assert(SMOP__S1P__grep);
  ((SMOP__ResponderInterface*)SMOP__S1P__grep)->MESSAGE = smop_s1p_grep_message;
  ((SMOP__ResponderInterface*)SMOP__S1P__grep)->REFERENCE = smop_lowlevel_generic_reference;
  ((SMOP__ResponderInterface*)SMOP__S1P__grep)->RELEASE = smop_lowlevel_generic_release;
  ((SMOP__ResponderInterface*)SMOP__S1P__grep)->id = "S1P Grep Iterator";
}

void smop_s1p_grep_mold_init() {

  SMOP__Object* interpreter = SMOP__GlobalInterpreter;
  grep_iterator_consume_mold = q:m0ld {
    my $interpreter;
    my $capture;
    my $back;
    my $code;
    my $input_iterator;
    
    fetch_item:
    my $next_item = $input_iterator."prefix:="();
    my $bool = $next_item."defined"();
    if $bool { goto iteration } else { goto end };
    
    iteration:
    my $item = $next_item."FETCH"();
    my $capture = ¢SMOP__S1P__Capturize."capturize"($item);
    my $result = $code."postcircumfix:( )"($capture);
    my $bool = $result."true"();
    if $bool { goto in } else { goto fetch_item };
    
    in:
    my $void = $back."setr"($item);
    $void = $interpreter."goto"($back);
    
    end:
    $void = $back."setr"(¢SMOP__S1P__EndOfIterator);
    $void = $interpreter."goto"($back);
    
  };

  grep_iterator_voidcontext_mold = q:m0ld {
    my $interpreter;
    my $capture;
    my $back;
    my $invocant;

    while:
    my $result = $invocant."prefix:="();
    my $defined = $result."defined"();
    
    if $defined { goto iteration } else { goto end };
    
    iteration:
    goto while;
    
    end:
    my $void = $interpreter."goto"($back);
    
  };

}

void smop_s1p_grep_mold_destr() {
  SMOP_RELEASE(SMOP__GlobalInterpreter, grep_iterator_consume_mold);
  grep_iterator_consume_mold = NULL;
  SMOP_RELEASE(SMOP__GlobalInterpreter, grep_iterator_voidcontext_mold);
  grep_iterator_voidcontext_mold = NULL;
}

void smop_s1p_grep_destr() {
  free(SMOP__S1P__grep);
}
