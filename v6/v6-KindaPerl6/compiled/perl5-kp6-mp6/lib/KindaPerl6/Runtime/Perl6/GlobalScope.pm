{

    package GlobalScope;

    # Do not edit this file - Perl 5 generated by HASH(0x1b1a6a8)
    # AUTHORS, COPYRIGHT: Please look at the source file.
    use v5;
    use strict;
    no strict "vars";
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    INIT { $_MODIFIED = {} }
    INIT { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    do {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( ( $GLOBAL::Code_VAR_defined = $GLOBAL::Code_VAR_defined || ::DISPATCH( $::Routine, "new", ) ), 'APPLY', $::GlobalScope ), "true" ), "p5landish" ) ) {
                do { }
            }
            else {
                do {
                    do {
                        ::MODIFIED($::GlobalScope);
                        $::GlobalScope = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'GlobalScope' ) ), 'PROTOTYPE', );
                        }
                    }
            }
        };
        ::DISPATCH( ::DISPATCH( $::GlobalScope, 'HOW', ), 'add_parent', ::DISPATCH( $::Scope, 'HOW', ) );
        ::DISPATCH( ::DISPATCH( $::GlobalScope, 'HOW', ), 'add_attribute', ::DISPATCH( $::Str, 'new', 'vars' ) );
        ::DISPATCH(
            ::DISPATCH( $::GlobalScope, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'outer' ),
            ::DISPATCH(
                $::Code, 'new',
                {   code => sub {

                        # emit_declarations
                        my $List__ = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) unless defined $self;
                        INIT { $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) }

                        # get $self
                        $self = shift;

                        # emit_arguments
                        my $CAPTURE;
                        $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                        INIT { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                        my $List__ = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        ::DISPATCH_VAR( $List__, 'STORE', ::DISPATCH( $CAPTURE, 'array', ) );
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        { my $_param_index = 0; }

                        # emit_body
                        return ($::Undef);
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {   invocant => bless(
                                {   'namespace' => [],
                                    'name'      => 'self',
                                    'twigil'    => '',
                                    'sigil'     => '$'
                                },
                                'Var'
                            ),
                            array  => ::DISPATCH( $::List, "new", { _array => [] } ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
        ::DISPATCH(
            ::DISPATCH( $::GlobalScope, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'inner' ),
            ::DISPATCH(
                $::Code, 'new',
                {   code => sub {

                        # emit_declarations
                        my $inner;
                        $inner = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$inner' } ) unless defined $inner;
                        INIT { $inner = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$inner' } ) }
                        my $List__ = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) unless defined $self;
                        INIT { $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) }

                        # get $self
                        $self = shift;

                        # emit_arguments
                        my $CAPTURE;
                        $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                        INIT { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                        my $List__ = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        ::DISPATCH_VAR( $List__, 'STORE', ::DISPATCH( $CAPTURE, 'array', ) );
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        { my $_param_index = 0; }

                        # emit_body
                        ::DISPATCH_VAR(
                            $inner, 'STORE',
                            ::DISPATCH(
                                $::Scope, 'new',
                                ::DISPATCH(
                                    $::NamedArgument,
                                    'new',
                                    {   _argument_name_ => ::DISPATCH( $::Str, 'new', 'outer' ),
                                        value           => $self
                                    }
                                ),
                                ::DISPATCH(
                                    $::NamedArgument,
                                    'new',
                                    {   _argument_name_ => ::DISPATCH( $::Str,  'new', 'vars' ),
                                        value           => ::DISPATCH( $::Hash, 'new', )
                                    }
                                )
                            )
                        );
                        return ($inner);
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {   invocant => bless(
                                {   'namespace' => [],
                                    'name'      => 'self',
                                    'twigil'    => '',
                                    'sigil'     => '$'
                                },
                                'Var'
                            ),
                            array  => ::DISPATCH( $::List, "new", { _array => [] } ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
        ::DISPATCH(
            ::DISPATCH( $::GlobalScope, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'hash' ),
            ::DISPATCH(
                $::Code, 'new',
                {   code => sub {

                        # emit_declarations
                        my $List__ = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) unless defined $self;
                        INIT { $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) }

                        # get $self
                        $self = shift;

                        # emit_arguments
                        my $CAPTURE;
                        $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                        INIT { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                        my $List__ = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        ::DISPATCH_VAR( $List__, 'STORE', ::DISPATCH( $CAPTURE, 'array', ) );
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        { my $_param_index = 0; }

                        # emit_body
                        $self;
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {   invocant => bless(
                                {   'namespace' => [],
                                    'name'      => 'self',
                                    'twigil'    => '',
                                    'sigil'     => '$'
                                },
                                'Var'
                            ),
                            array  => ::DISPATCH( $::List, "new", { _array => [] } ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
        ::DISPATCH(
            ::DISPATCH( $::GlobalScope, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'LOOKUP' ),
            ::DISPATCH(
                $::Code, 'new',
                {   code => sub {

                        # emit_declarations
                        my $List__ = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        my $key;
                        $key = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$key' } ) unless defined $key;
                        INIT { $key = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$key' } ) }

                        # get $self
                        $self = shift;

                        # emit_arguments
                        my $CAPTURE;
                        $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                        INIT { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                        my $List__ = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        ::DISPATCH_VAR( $List__, 'STORE', ::DISPATCH( $CAPTURE, 'array', ) );
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        {
                            my $_param_index = 0;
                            if ( ::DISPATCH( $GLOBAL::Code_exists, 'APPLY', ::DISPATCH( $Hash__, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'key' ) ) )->{_value} ) {
                                do {
                                    ::MODIFIED($key);
                                    $key = ::DISPATCH( $Hash__, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'key' ) );
                                    }
                            }
                            elsif ( ::DISPATCH( $GLOBAL::Code_exists, 'APPLY', ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', $_param_index ) ) )->{_value} ) {
                                $key = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', $_param_index++ ) );
                            }
                        }

                        # emit_body
                        do {
                            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( ( $GLOBAL::Code_exists = $GLOBAL::Code_exists || ::DISPATCH( $::Routine, "new", ) ), 'APPLY', ::DISPATCH( ::DISPATCH( $self, 'vars', ), 'LOOKUP', $key ) ), "true" ), "p5landish" ) )
                            {
                                do {
                                    return ( ::DISPATCH( ::DISPATCH( $self, 'vars', ), 'LOOKUP', $key ) );
                                    }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        do {
                            if (::DISPATCH(
                                    ::DISPATCH(
                                        ::DISPATCH(
                                            ( $GLOBAL::Code_exists = $GLOBAL::Code_exists || ::DISPATCH( $::Routine, "new", ) ),
                                            'APPLY',
                                            ::DISPATCH(
                                                ::DISPATCH( $self, 'vars', ),
                                                'LOOKUP', ::DISPATCH( ( $GLOBAL::Code_infix_58__60__126__62_ = $GLOBAL::Code_infix_58__60__126__62_ || ::DISPATCH( $::Routine, "new", ) ), 'APPLY', ::DISPATCH( $::Str, 'new', 'GLOBAL::' ), $key )
                                            )
                                        ),
                                        "true"
                                    ),
                                    "p5landish"
                                )
                                )
                            {
                                do {
                                    return (
                                        ::DISPATCH(
                                            ::DISPATCH( $self, 'vars', ),
                                            'LOOKUP', ::DISPATCH( ( $GLOBAL::Code_infix_58__60__126__62_ = $GLOBAL::Code_infix_58__60__126__62_ || ::DISPATCH( $::Routine, "new", ) ), 'APPLY', ::DISPATCH( $::Str, 'new', 'GLOBAL::' ), $key )
                                        )
                                    );
                                    }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        return ($::Undef);
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {   invocant => $::Undef,
                            array    => ::DISPATCH(
                                $::List, "new",
                                {   _array => [
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {   sigil               => '$',
                                                twigil              => '',
                                                name                => 'key',
                                                value               => $::Undef,
                                                has_default         => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_named_only       => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_optional         => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_slurpy           => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_multidimensional => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_rw               => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_copy             => ::DISPATCH( $::Bit, 'new', 0 ),
                                            }
                                        ),
                                    ]
                                }
                            ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
        ::DISPATCH(
            ::DISPATCH( $::GlobalScope, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'exists' ),
            ::DISPATCH(
                $::Code, 'new',
                {   code => sub {

                        # emit_declarations
                        my $List__ = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        my $key;
                        $key = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$key' } ) unless defined $key;
                        INIT { $key = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$key' } ) }

                        # get $self
                        $self = shift;

                        # emit_arguments
                        my $CAPTURE;
                        $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                        INIT { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                        my $List__ = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        ::DISPATCH_VAR( $List__, 'STORE', ::DISPATCH( $CAPTURE, 'array', ) );
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        {
                            my $_param_index = 0;
                            if ( ::DISPATCH( $GLOBAL::Code_exists, 'APPLY', ::DISPATCH( $Hash__, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'key' ) ) )->{_value} ) {
                                do {
                                    ::MODIFIED($key);
                                    $key = ::DISPATCH( $Hash__, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'key' ) );
                                    }
                            }
                            elsif ( ::DISPATCH( $GLOBAL::Code_exists, 'APPLY', ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', $_param_index ) ) )->{_value} ) {
                                $key = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', $_param_index++ ) );
                            }
                        }

                        # emit_body
                        do {
                            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( ( $GLOBAL::Code_exists = $GLOBAL::Code_exists || ::DISPATCH( $::Routine, "new", ) ), 'APPLY', ::DISPATCH( ::DISPATCH( $self, 'vars', ), 'LOOKUP', $key ) ), "true" ), "p5landish" ) )
                            {
                                do {
                                    return ( ::DISPATCH( $::Bit, 'new', 1 ) );
                                    }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        do {
                            if (::DISPATCH(
                                    ::DISPATCH(
                                        ::DISPATCH(
                                            ( $GLOBAL::Code_exists = $GLOBAL::Code_exists || ::DISPATCH( $::Routine, "new", ) ),
                                            'APPLY',
                                            ::DISPATCH(
                                                ::DISPATCH( $self, 'vars', ),
                                                'LOOKUP', ::DISPATCH( ( $GLOBAL::Code_infix_58__60__126__62_ = $GLOBAL::Code_infix_58__60__126__62_ || ::DISPATCH( $::Routine, "new", ) ), 'APPLY', ::DISPATCH( $::Str, 'new', 'GLOBAL::' ), $key )
                                            )
                                        ),
                                        "true"
                                    ),
                                    "p5landish"
                                )
                                )
                            {
                                do {
                                    return ( ::DISPATCH( $::Bit, 'new', 1 ) );
                                    }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        return ( ::DISPATCH( $::Bit, 'new', 0 ) );
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {   invocant => $::Undef,
                            array    => ::DISPATCH(
                                $::List, "new",
                                {   _array => [
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {   sigil               => '$',
                                                twigil              => '',
                                                name                => 'key',
                                                value               => $::Undef,
                                                has_default         => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_named_only       => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_optional         => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_slurpy           => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_multidimensional => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_rw               => ::DISPATCH( $::Bit, 'new', 0 ),
                                                is_copy             => ::DISPATCH( $::Bit, 'new', 0 ),
                                            }
                                        ),
                                    ]
                                }
                            ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
    };
    1
}
