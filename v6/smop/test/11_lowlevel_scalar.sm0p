#include <stdio.h>
#include <smop.h>
#include <smop_s1p.h>
#include <smop_slime.h>

int main() {
  smop_init();
  
  printf("1..10\n");

  SMOP__Object* int1 = SMOP__NATIVE__int_create(1);
  SMOP__Object* scalar1 = SMOP__S1P__Scalar_create(int1);
  if (!scalar1) printf("not ");
  printf("ok 1 - scalar1 created (%p => %p).\n",scalar1,int1);

  SMOP__Object* int2 = SMOP__NATIVE__int_create(2);
  SMOP__Object* scalar2 = SMOP__S1P__Scalar_create(int2);
  if (!scalar2) printf("not ");
  printf("ok 2 - scalar2 created (%p => %p).\n",scalar2,int2);

  SMOP__Object* interpreter = SMOP_DISPATCH(SMOP__INTPTR__InterpreterInstance, SMOP_RI(SMOP__INTPTR__InterpreterInstance),
                                            SMOP__ID__new, 
                                            SMOP__NATIVE__capture_create(SMOP__INTPTR__InterpreterInstance,
                                                                         SMOP__INTPTR__InterpreterInstance,NULL,NULL));
  SMOP__Object* frame;

  $frame = q:sm0p {
    $scalar2;
    $scalar1;
    $scalar1.SMOP__ID__FETCH();
    $scalar2.SMOP__ID__FETCH();
    SMOP__SLIME__CurrentFrame.move_capturize(SMOP__SLIME__Capturize.new(4,(2),(),2));
    SMOP__SLIME__CurrentFrame.move_capturize(SMOP__SLIME__Capturize.new(4,(2),(),2));
    $scalar2.SMOP__ID__STORE();
    $scalar1.SMOP__ID__STORE();
  };



  if (!frame) printf("not ");
  printf("ok 3 - frame created.\n");

  SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
                SMOP__ID__goto,
                frame);

  printf("ok 4 - goto frame.\n");

  SMOP_RELEASE(interpreter,scalar1);
  SMOP_RELEASE(interpreter,scalar2);


  SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
                SMOP__ID__loop, SMOP__NATIVE__capture_create(interpreter,
                                                             SMOP_REFERENCE(interpreter,interpreter),
                                                             NULL, NULL));
  printf("ok 5 - interpreter loop.\n");
  
  SMOP__Object* r1 = SMOP__S1P__Scalar_FETCH(scalar1);
  if (SMOP_RI(r1) != (SMOP__ResponderInterface*)SMOP__NATIVE__int) printf("not ");
  printf("ok 6 - scalar 1 cell is an int\n");

  SMOP__Object* r2 = SMOP__S1P__Scalar_FETCH(scalar2);
  if (SMOP_RI(r2) != (SMOP__ResponderInterface*)SMOP__NATIVE__int) printf("not ");
  printf("ok 7 - scalar 2 cell is an int\n");

  if ((SMOP_RI(r1) != (SMOP__ResponderInterface*)SMOP__NATIVE__int) || SMOP__NATIVE__int_fetch(r1) != 2) printf("not ");
  printf("ok 8 - scalar 1 cell have the correct value\n");

  if ((SMOP_RI(r2) != (SMOP__ResponderInterface*)SMOP__NATIVE__int) || SMOP__NATIVE__int_fetch(r2) != 1) printf("not ");
  printf("ok 9 - scalar 2 cell have the correct value\n");

  SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
                SMOP__ID__loop, SMOP__NATIVE__capture_create(interpreter,
                                                             SMOP_REFERENCE(interpreter,interpreter),
                                                             NULL, NULL));

  SMOP_RELEASE(SMOP__INTPTR__InterpreterInstance,interpreter);

  printf("ok 10 - finished.\n");
  
  smop_destr();

  return 0;
}



