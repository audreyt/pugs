# Copyright (C) 2003-2007, The Perl Foundation.

=pod

=head0 Project Overview

Z<CHP-1>

Perl 6 is the next major version of Perl. It's a complete rewrite of
the interpreter, and a significant update of the language itself. The
goal of Perl 6 is to add support for much-needed new features, and
still be cleaner, faster, and easier to use.

The X<Perl 6;overview> Perl 6 project is vast and complex, but it
isn't complicated. The project runs on a simple structure with very
little management overhead. That's really the only way it could run.
The project doesn't have huge cash or time resources. Its only
resource is the people who believe in the project enough to spend
their off-hours--their "relaxation" time--working to see it completed.
This chapter is as much about people as it is about Perl.

=head1 The Birth of Perl 6

Z<CHP-1-SECT-1>

X<Perl 6;history>
Back on July 18, 2000, the second day of the fourth Perl Conference
(TPC 4), a small band of Perl geeks gathered to prepare for a meeting
of the Perl 5 Porters later that day. The topic at hand was the
current state of the Perl community. Four months had passed since the
5.6.0 release of Perl, and although it introduced some important
features, none were revolutionary.

There had been very little forward movement in the previous year. It
was generally acknowledged that the Perl 5 codebase had grown
difficult to maintain. At the same time, infighting on the
I<perl5-porters> list had grown so intense that some of the best
developers decided to leave. It was time for a change, but no one was
quite sure what to do. They started conservatively with plans to
change the organization of Perl development.

An hour into the discussion, around the time most people nod off in
any meeting, Jon Orwant (the reserved, universally respected editor of
the Perl Journal) stepped quietly into the room and snapped everyone
to attention with an entirely uncharacteristic and well-planned
gesture. I<Smash!> A coffee mug hit the wall. "We are *@$!-ed
(I<Crash!>) unless we can come up with something that will excite the
community (I<Pow!>), because everyone's getting bored and going off
and doing other things! (I<Bam!>)" (At least, that's basically how
Larry tells it. As is usually the case with events like this, no one
remembers exactly what Jon said.)

Awakened by this display, the group started to search for a real
solution. The language needed room to grow. It needed the freedom to
evaluate new features without the obscuring weight of legacy code.
The community needed something to believe in, something to get excited
about.

Within a few hours the group settled on Perl 6, a complete rewrite of
Perl. The plan wasn't just a language change, just an implementation
change, or just a social change. It was a paradigm shift. Perl 6 would
be the community's rewrite of Perl, and the community's rewrite of
itself.

Would Perl 6, particularly Perl 6 as a complete rewrite, have happened
without this meeting? Almost certainly. The signs appeared on the
lists, in conferences, and in journals months in advance. If it hadn't
started that day, it would have happened a week later, or perhaps a
few months later, but it would have happened. It was a step the
community needed to take.

=head1 In the Beginning . . .

Z<CHP-1-SECT-2>

Let's pause and consider Perl development up to that fateful meeting.
Perl 6 is just another link in the chain. The motivations behind it
and the directions it will take are partially guided by history.

Perl was first developed in 1987 by Larry Wall while he was working as
a programmer for Unisys. After creating a configuration and monitoring
system for a network that spanned the two American coasts, he was
faced with the task of assembling usable reports from log files
scattered across the network. The available tools simply weren't up to
the job. A linguist at heart, Larry set out to create his own
programming language, which he called I<perl>. He released the first
version of Perl on December 18, 1987. He made it freely available on
Usenet (this was before the Internet took over the world, remember),
and quickly a community of Perl programmers grew.

The early adopters of Perl were system administrators who had hit the
wall with shell scripting, I<awk>, and I<sed>. However, in the
mid-1990s Perl's audience exploded with the advent of the Web, as Perl
was tailor-made for CGI scripting and other web-related programming.

Meantime, the Perl language itself kept growing, as Larry and others
kept adding new features. Probably the most revolutionary change in
Perl (until Perl 6, of course) was the addition of modules and
object-oriented programming with Perl 5. While this made the
transition period from Perl 4 to Perl 5 unusually long, it breathed
new life into the language by providing a modern, modular interface.
Before Perl 5, Perl was considered simply a scripting language; after
Perl 5, it was considered a full-fledged programming language.

Larry, meanwhile, started taking a back seat to Perl development and
allowed others to take responsibility for adding new features and
fixing bugs in Perl. The Perl 5 Porters (p5p) mailing list became the
central clearinghouse for bug reports and proposed changes to the Perl
language, with the "pumpkin holder" (also known as the "pumpking")
being the programmer responsible for integrating the patches and
distributing them to the rest of the list for review. Larry continued
to follow Perl development, but like a parent determined not to
smother his children, he stayed out of the day-to-day development,
limiting his involvement to situations in which he was truly needed.

Although you might think that the birth of the Perl 6 project would be
the first nail in the coffin for Perl 5, that's far from the case. If
anything, Perl 5 has had a huge resurgence of development, with Perl
5.7.0 released only two weeks after the initial decision to go ahead
with Perl 6. Perl 5.8.0, a July 2002 release by pumpking Jarkko
Hietaniemi, includes usable Unicode support, a working threads
interface, safe signals, and a significant improvement of the internals
with code cleanup, bug fixes, better documentation, and more than
quadrupled test coverage. 5.8 has quarterly maintenance releases thanks
to pumpking Nicholas ClarkX<Clark, Nicholas>. The 5.9-5.10 releases have
Hugo van der Sanden X<van der Sanden, Hugo> as architect and
RafaE<euml>l Garcia-Suarez X<Garcia-Suarez, RafaE<euml>l> as pumpking.
Plans for those releases include enhancements to the regular expression
engine, further internals cleanup and a "use perl6ish" pragma that will
integrate many of the features of Perl 6. Perl 5 is active and thriving,
and will continue to be so even after the release of Perl 6.0.

=head1 The Continuing Mission

Z<CHP-1-SECT-3>

Much has changed since the early days of the project. New people join
and others leave in a regular "changing of the guard" pattern. Plans
change as the work progresses, and the demands of the work and the
needs of the community become clearer. Today the Perl 6 project has
two major parts: language design and internals. Each branch is
relatively autonomous, though there is a healthy amount of
coordination between them.

=head2 Language Design

Z<CHP-1-SECT-3.1>

As with all things Perl, the central command of the language design
process is X<Wall, Larry> Larry Wall, the creator of the Perl
language. Larry is supported by the rest of the design team: X<Conway,
Damian> Damian Conway, X<Randal, Allison> Allison Randal, X<Sugalski,
Dan> Dan Sugalski, X<van der Sanden, Hugo> Hugo van der Sanden, and
X<chromatic> chromatic. We speak in weekly teleconferences and also
meet face-to-face a few times a year to hash out ideas for the design
documents, or to work through roadblocks standing in the way of design
or implementation. The design team is a diverse group, including
programmers-for-hire, Perl trainers, and linguists with a broad
spectrum of interests and experiences. This diversity has proved quite
valuable in the design process, as each member is able to see problems
in the design or potential solutions that the other members missed.

=head3 Requests for comments (RFCs)

Z<CHP-1-SECT-3.1.1>

The first step in designing the new language was the RFC (Request For
Comments) process. This spurred an initial burst of community
involvement. Anyone was free to submit an X<RFCs> RFC on any subject,
whether it was as small as adding an operator, or as big as reworking
OO syntax. Most of the proposals were really quite conservative. The
RFCs followed a standard format so they would be easier to read and
easier to compare.

Each RFC was subject to peer review, carried out in an intense few
weeks around October 2000. One thing the RFC process demonstrated was
that the Perl community still wasn't quite ready to move beyond the
infighting that had characterized Perl 5 Porters earlier that
year.N<Mark-Jason Dominus wrote an excellent critique of the RFC
process (U<http://www.perl.com/pub/a/2000/11/perl6rfc.html>). It may
seem harsh to people accustomed to the more open and tolerant
community of today, but it's an accurate representation of the time
when it was written.> Even though few RFCs have been accepted without
modification, the process identified a large number of irritants in
the language. These have served as signposts for later design efforts.

=head3 Apocalypses, Synopses, Exegeses

Z<CHP-1-SECT-3.1.2>

X<Apocalypses> 
The ApocalypsesN<An "apocalypse" in the sense of "revelation," not
"end of the world.">, Synopses, and ExegesesN<An "exegesis" is an
explanation or interpretation of a text.> are an important part of the
design process. Larry started the Apocalypse series as a systematic
way of answering the RFCs. Each Apocalypse corresponds to a chapter in
his book I<Programming Perl>, and addresses the features in the
chapter that are likely to change.

However, the Apocalypses have become much more than a simple response
to RFCs. Larry has a startling knack for looking at 12 solutions to a
problem, pulling out the good bits from each one, and combining them
into a solution that is 10 times better than any of the proposals
alone. The Apocalypses are an excellent example of this "Larry
Effect." He addresses each relevant RFC, and gives reasons why he
accepted or rejected various pieces of it. But each Apocalypse also
goes beyond a simple "yes" and "no" response to attack the roots of
the problems identified in the RFCs.

X<Synopses>
The Synopses are summaries of each Apocalypse. These act as a quick
reference for the current state of design, and are more approachable
than the often lengthy Apocalypses. The Synopsis series didn't start
until Apocalypse 5, but Luke PalmerX<Palmer, Luke> is now working on
the retroactive Synopses 2-4.

X<Exegeses> 
Damian Conway's Exegeses are extensions of each Apocalypse. The
Exegeses are built around practical code examples that apply and
explain the new ideas.

=head3 The p6l mailing list

Z<CHP-1-SECT-3.1.3>

X<mailing lists, Perl 6>
X<Perl 6;mailing lists>
X<p6l (Perl 6 language mailing list)>
X<Perl 6 language mailing list (p6l)> 
X<Palmer, Luke>
X<Cawley, Piers>
The next body of design work is the Perl 6 Language mailing list
(U<perl6-language@perl.org>), often fondly referred to as "p6l." Piers
Cawley writes a weekly summary of all the Perl 6 mailing lists. Luke
Palmer has been deputized as unofficial referee of the list. He
answers questions that don't require the direct involvement of the
design team or that have been answered before. The list has
approximately 40 regular contributors in any given month, as well as a
large number of occasional posters and lurkers. Some people have
participated since the very beginning; others appear for a few months
and move on.

Even though the individuals change, the general tone of p6l is the
same. It's an open forum for any ideas on the user-visible parts of
Perl 6. In the typical pattern, one person posts an idea and 5 to 10
people respond with criticisms or suggestions. The list periodically
travels down a speculative thread like a runaway train, but these
eventually run out of steam. Then Larry picks out the golden bits and
gently tells the rest that no, he never intended Perl 6 to have
neo-vulcan mechanoid scooby-dooby-doos. Even when Larry doesn't
post, he follows the list and the traffic serves as a valuable
catalyst for his thoughts.

=cut
