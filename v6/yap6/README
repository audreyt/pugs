This is yap6, a prospective runtime for kp6...

There follows the ROADMAP mixed with the changelog

CHANGELOG

0.0.1 - The initial revision, definining the basic data structures to
be used.

0.0.1.2 - Basic memory management, values are alloc'ed and basic
refcount garbage collection is implemented.

0.0.1.3 - Basic APPLY dispatch.

0.0.1.4 - Lists and Hashes contains Scalars

0.0.1.5 - Basic int type.

0.0.1.6 - Single initialization method

0.0.1.7 - Some work in supporting lists

0.0.1.8 - Starting the list dispatcher

0.0.1.9 - Basic list features working.

0.0.1.10 - make test works

0.0.1.11 - List destruction, List_ProxyScalar destruction, consts destruction, no leaks at the moment.

0.0.1.12 - Scalar Dispatcher.

0.0.1.12.1 - COMPR no longer exists, low-level objects always must implement STRNG, INTGR, BOOLN and WHICH.

0.0.1.13 - Pair Dispatcher.

0.0.1.14 - bytes dispatcher - a value that holds an array of bytes

0.0.1.14.1 - int WHICH.

0.0.1.14.2 - bytes WHICH.

ROADMAP

0.0.1.14.3 - scalar WHICH.

0.0.1.14.4 - list WHICH.

0.0.1.15 - WHICH implementation in every native type, the WHICH will return a "bytes" value.

0.0.1.16 - Hash Dispatcher - Using WHICH to make the hash.

0.0.1.17 - Capture Dispatcher.

0.0.1.18 - Last native types (double, float, string, ...)

0.0.1.19 - All the native types implement the mandatory methods.

0.0.1.20 - The native types implement the APPLY method.

0.0.2 - YAP6 is a shared library with a minimal but stable API.

0.0.2.5 - Implement namespace as globally accessible

0.0.3 - Implement the MOP in a Perl 6 strict subset that can be
compiled to C using this runtime, implement the compilation itself and
generate the code to be used inside yap6. - This is supposed to be
done inside KP6, only the result of that will be kept here.

0.1.0 - Working MOP - Note that this depends on the KP6 Runtime
counting less and less in the p5 runtime.

0.2.0 - KP6 Rules compiled to YAP6 Runtime

0.3.0 - YAP6 can compile "say 'Hello'"

0.4.0 - YAP6 can compile KP6 (this doesn't means it work :)

0.5.0 - YAP6 bootstrap - This means YAP6 doesn't need KP6 anymore.

0.6.0 - YAP6 interpreter - The code is executed inside YAP6 as an
interpreter. A DUMP of the runtime environment is available after the
compile phase. This dump can be loaded by YAP6 as a "bytecode". The
YAP6 C code is generated by a Perl 6 code that is ran by the
interpreter.

0.7.0 - YAP6 uses a subset of the STD grammar. This subset needs to be
big enough so it can be used then to generate a new stage of YAP6
itself.

1.0.0 - YAP6 uses complete STD grammar.
