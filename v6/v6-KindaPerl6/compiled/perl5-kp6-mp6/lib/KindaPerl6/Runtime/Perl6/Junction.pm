{

    package Junction;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    # AUTHORS, COPYRIGHT: Please look at the source file.
    use v5;
    use strict;
    no strict "vars";
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    INIT { $_MODIFIED = {} }
    INIT { $_ = ::DISPATCH( $::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
    do {
        do {
            if ( ::DISPATCH( ::DISPATCH( ::DISPATCH( ( $GLOBAL::Code_VAR_defined = $GLOBAL::Code_VAR_defined || ::DISPATCH( $::Routine, "new", ) ), 'APPLY', $::Junction ), "true" ), "p5landish" ) ) {
                do { }
            }
            else {
                do {
                    do {
                        ::MODIFIED($::Junction);
                        $::Junction = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'Junction' ) ), 'PROTOTYPE', );
                        }
                    }
            }
        };
        ::DISPATCH( ::DISPATCH( $::Junction, 'HOW', ), 'add_attribute', ::DISPATCH( $::Str, 'new', 'type' ) );
        ::DISPATCH( ::DISPATCH( $::Junction, 'HOW', ), 'add_attribute', ::DISPATCH( $::Str, 'new', 'things' ) );
        ::DISPATCH(
            ::DISPATCH( $::Junction, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'Str' ),
            ::DISPATCH(
                $::Code, 'new',
                {   code => sub {

                        # emit_declarations
                        my $Hash_sep = ::DISPATCH( $::HashContainer,  'new', { modified => $_MODIFIED, name => '$Hash_sep' } );
                        my $List__   = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) unless defined $self;
                        INIT { $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) }

                        # get $self
                        $self = shift;

                        # emit_arguments
                        my $CAPTURE;
                        $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                        INIT { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                        my $List__ = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        ::DISPATCH_VAR( $List__, 'STORE', ::DISPATCH( $CAPTURE, 'array', ) );
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        { my $_param_index = 0; }

                        # emit_body
                        ::DISPATCH_VAR(
                            $Hash_sep,
                            'STORE',
                            ::DISPATCH(
                                $::Hash,
                                'new',
                                [ ::DISPATCH( $::Str, 'new', 'any' ),  ::DISPATCH( $::Str, 'new', ' | ' ) ],
                                [ ::DISPATCH( $::Str, 'new', 'none' ), ::DISPATCH( $::Str, 'new', ' , ' ) ],
                                [ ::DISPATCH( $::Str, 'new', 'all' ),  ::DISPATCH( $::Str, 'new', ' & ' ) ],
                                [ ::DISPATCH( $::Str, 'new', 'one' ),  ::DISPATCH( $::Str, 'new', ' ^ ' ) ],
                            )
                        );
                        ::DISPATCH(
                            ( $GLOBAL::Code_infix_58__60__126__62_ = $GLOBAL::Code_infix_58__60__126__62_ || ::DISPATCH( $::Routine, "new", ) ),
                            'APPLY',
                            ::DISPATCH(
                                ( $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_ = $GLOBAL::Code_ternary_58__60__63__63__32__33__33__62_ || ::DISPATCH( $::Routine, "new", ) ),
                                'APPLY',
                                ::DISPATCH( ( $GLOBAL::Code_infix_58__60_eq_62_ = $GLOBAL::Code_infix_58__60_eq_62_ || ::DISPATCH( $::Routine, "new", ) ), 'APPLY', ::DISPATCH( $self, "type" ), ::DISPATCH( $::Str, 'new', '!' ) ),
                                ::DISPATCH( $::Str, 'new', 'none' ),
                                ::DISPATCH( $::Str, 'new', '' )
                            ),
                            ::DISPATCH(
                                ( $GLOBAL::Code_infix_58__60__126__62_ = $GLOBAL::Code_infix_58__60__126__62_ || ::DISPATCH( $::Routine, "new", ) ),
                                'APPLY',
                                ::DISPATCH( $::Str, 'new', '( ' ),
                                ::DISPATCH(
                                    ( $GLOBAL::Code_infix_58__60__126__62_ = $GLOBAL::Code_infix_58__60__126__62_ || ::DISPATCH( $::Routine, "new", ) ),
                                    'APPLY',
                                    ::DISPATCH(
                                        ::DISPATCH( ( $GLOBAL::Code_prefix_58__60__64__62_ = $GLOBAL::Code_prefix_58__60__64__62_ || ::DISPATCH( $::Routine, "new", ) ), 'APPLY', ::DISPATCH( $self, "things" ) ),
                                        'join', ::DISPATCH( $Hash_sep, 'LOOKUP', ::DISPATCH( $self, "type" ) )
                                    ),
                                    ::DISPATCH( $::Str, 'new', ' )' )
                                )
                            )
                        );
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {   invocant => bless(
                                {   'namespace' => [],
                                    'name'      => 'self',
                                    'twigil'    => '',
                                    'sigil'     => '$'
                                },
                                'Var'
                            ),
                            array  => ::DISPATCH( $::List, "new", { _array => [] } ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
        ::DISPATCH(
            ::DISPATCH( $::Junction, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'perl' ),
            ::DISPATCH(
                $::Code, 'new',
                {   code => sub {

                        # emit_declarations
                        my $List__ = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) unless defined $self;
                        INIT { $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) }

                        # get $self
                        $self = shift;

                        # emit_arguments
                        my $CAPTURE;
                        $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                        INIT { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                        my $List__ = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        ::DISPATCH_VAR( $List__, 'STORE', ::DISPATCH( $CAPTURE, 'array', ) );
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        { my $_param_index = 0; }

                        # emit_body
                        ::DISPATCH( $self, 'Str', );
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {   invocant => bless(
                                {   'namespace' => [],
                                    'name'      => 'self',
                                    'twigil'    => '',
                                    'sigil'     => '$'
                                },
                                'Var'
                            ),
                            array  => ::DISPATCH( $::List, "new", { _array => [] } ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
        ::DISPATCH(
            ::DISPATCH( $::Junction, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'true' ),
            ::DISPATCH(
                $::Code, 'new',
                {   code => sub {

                        # emit_declarations
                        my $thing;
                        $thing = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$thing' } ) unless defined $thing;
                        INIT { $thing = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$thing' } ) }
                        my $List__ = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) unless defined $self;
                        INIT { $self = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$self' } ) }

                        # get $self
                        $self = shift;

                        # emit_arguments
                        my $CAPTURE;
                        $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                        INIT { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                        my $List__ = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List__' } );
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        ::DISPATCH_VAR( $List__, 'STORE', ::DISPATCH( $CAPTURE, 'array', ) );
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        { my $_param_index = 0; }

                        # emit_body
                        $thing;
                        do {
                            if (::DISPATCH(
                                    ::DISPATCH(
                                        ::DISPATCH( ( $GLOBAL::Code_infix_58__60_eq_62_ = $GLOBAL::Code_infix_58__60_eq_62_ || ::DISPATCH( $::Routine, "new", ) ), 'APPLY', ::DISPATCH( $self, "type" ), ::DISPATCH( $::Str, 'new', 'any' ) ), "true"
                                    ),
                                    "p5landish"
                                )
                                )
                            {
                                do {
                                    ::DISPATCH(
                                        ::DISPATCH( ( $GLOBAL::Code_prefix_58__60__64__62_ = $GLOBAL::Code_prefix_58__60__64__62_ || ::DISPATCH( $::Routine, "new", ) ), 'APPLY', ::DISPATCH( $self, "things" ) ),
                                        'map',
                                        ::DISPATCH(
                                            $::Code, 'new',
                                            {   code => sub {
                                                    my $List__ = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List__' } );
                                                    my $thing;
                                                    $thing = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$thing' } ) unless defined $thing;
                                                    INIT { $thing = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$thing' } ) }
                                                    my $CAPTURE;
                                                    $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                                                    INIT { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                                                    my $List__ = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List__' } );
                                                    ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                                                    ::DISPATCH_VAR( $List__, 'STORE', ::DISPATCH( $CAPTURE, 'array', ) );
                                                    do {
                                                        ::MODIFIED($Hash__);
                                                        $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                                                    };
                                                    {
                                                        my $_param_index = 0;
                                                        if ( ::DISPATCH( $GLOBAL::Code_exists, 'APPLY', ::DISPATCH( $Hash__, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'thing' ) ) )->{_value} ) {
                                                            do {
                                                                ::MODIFIED($thing);
                                                                $thing = ::DISPATCH( $Hash__, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'thing' ) );
                                                                }
                                                        }
                                                        elsif ( ::DISPATCH( $GLOBAL::Code_exists, 'APPLY', ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', $_param_index ) ) )->{_value} ) {
                                                            $thing = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', $_param_index++ ) );
                                                        }
                                                    }
                                                    do {
                                                        if ( ::DISPATCH( ::DISPATCH( $thing, "true" ), "p5landish" ) ) {
                                                            do {
                                                                return ( ::DISPATCH( $::Bit, 'new', 1 ) );
                                                                }
                                                        }
                                                        else { ::DISPATCH( $::Bit, "new", 0 ) }
                                                        }
                                                },
                                                signature => ::DISPATCH(
                                                    $::Signature,
                                                    "new",
                                                    {   invocant => $::Undef,
                                                        array    => ::DISPATCH(
                                                            $::List, "new",
                                                            {   _array => [
                                                                    ::DISPATCH(
                                                                        $::Signature::Item,
                                                                        'new',
                                                                        {   sigil               => '$',
                                                                            twigil              => '',
                                                                            name                => 'thing',
                                                                            value               => $::Undef,
                                                                            has_default         => ::DISPATCH( $::Bit, 'new', 0 ),
                                                                            is_named_only       => ::DISPATCH( $::Bit, 'new', 0 ),
                                                                            is_optional         => ::DISPATCH( $::Bit, 'new', 0 ),
                                                                            is_slurpy           => ::DISPATCH( $::Bit, 'new', 0 ),
                                                                            is_multidimensional => ::DISPATCH( $::Bit, 'new', 0 ),
                                                                            is_rw               => ::DISPATCH( $::Bit, 'new', 0 ),
                                                                            is_copy             => ::DISPATCH( $::Bit, 'new', 0 ),
                                                                        }
                                                                    ),
                                                                ]
                                                            }
                                                        ),
                                                        return => $::Undef,
                                                    }
                                                ),
                                            }
                                        )
                                    );
                                    return ( ::DISPATCH( $::Bit, 'new', 0 ) );
                                    }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        do {
                            if (::DISPATCH(
                                    ::DISPATCH(
                                        ::DISPATCH( ( $GLOBAL::Code_infix_58__60_eq_62_ = $GLOBAL::Code_infix_58__60_eq_62_ || ::DISPATCH( $::Routine, "new", ) ), 'APPLY', ::DISPATCH( $self, "type" ), ::DISPATCH( $::Str, 'new', 'all' ) ), "true"
                                    ),
                                    "p5landish"
                                )
                                )
                            {
                                do {
                                    ::DISPATCH(
                                        ::DISPATCH( ( $GLOBAL::Code_prefix_58__60__64__62_ = $GLOBAL::Code_prefix_58__60__64__62_ || ::DISPATCH( $::Routine, "new", ) ), 'APPLY', ::DISPATCH( $self, "things" ) ),
                                        'map',
                                        ::DISPATCH(
                                            $::Code, 'new',
                                            {   code => sub {
                                                    my $List__ = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List__' } );
                                                    my $thing;
                                                    $thing = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$thing' } ) unless defined $thing;
                                                    INIT { $thing = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$thing' } ) }
                                                    my $CAPTURE;
                                                    $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                                                    INIT { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                                                    my $List__ = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List__' } );
                                                    ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                                                    ::DISPATCH_VAR( $List__, 'STORE', ::DISPATCH( $CAPTURE, 'array', ) );
                                                    do {
                                                        ::MODIFIED($Hash__);
                                                        $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                                                    };
                                                    {
                                                        my $_param_index = 0;
                                                        if ( ::DISPATCH( $GLOBAL::Code_exists, 'APPLY', ::DISPATCH( $Hash__, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'thing' ) ) )->{_value} ) {
                                                            do {
                                                                ::MODIFIED($thing);
                                                                $thing = ::DISPATCH( $Hash__, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'thing' ) );
                                                                }
                                                        }
                                                        elsif ( ::DISPATCH( $GLOBAL::Code_exists, 'APPLY', ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', $_param_index ) ) )->{_value} ) {
                                                            $thing = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', $_param_index++ ) );
                                                        }
                                                    }
                                                    do {
                                                        if (::DISPATCH(
                                                                ::DISPATCH( ::DISPATCH( ( $GLOBAL::Code_prefix_58__60__33__62_ = $GLOBAL::Code_prefix_58__60__33__62_ || ::DISPATCH( $::Routine, "new", ) ), 'APPLY', $thing ), "true" ), "p5landish"
                                                            )
                                                            )
                                                        {
                                                            do {
                                                                return ( ::DISPATCH( $::Bit, 'new', 0 ) );
                                                                }
                                                        }
                                                        else { ::DISPATCH( $::Bit, "new", 0 ) }
                                                        }
                                                },
                                                signature => ::DISPATCH(
                                                    $::Signature,
                                                    "new",
                                                    {   invocant => $::Undef,
                                                        array    => ::DISPATCH(
                                                            $::List, "new",
                                                            {   _array => [
                                                                    ::DISPATCH(
                                                                        $::Signature::Item,
                                                                        'new',
                                                                        {   sigil               => '$',
                                                                            twigil              => '',
                                                                            name                => 'thing',
                                                                            value               => $::Undef,
                                                                            has_default         => ::DISPATCH( $::Bit, 'new', 0 ),
                                                                            is_named_only       => ::DISPATCH( $::Bit, 'new', 0 ),
                                                                            is_optional         => ::DISPATCH( $::Bit, 'new', 0 ),
                                                                            is_slurpy           => ::DISPATCH( $::Bit, 'new', 0 ),
                                                                            is_multidimensional => ::DISPATCH( $::Bit, 'new', 0 ),
                                                                            is_rw               => ::DISPATCH( $::Bit, 'new', 0 ),
                                                                            is_copy             => ::DISPATCH( $::Bit, 'new', 0 ),
                                                                        }
                                                                    ),
                                                                ]
                                                            }
                                                        ),
                                                        return => $::Undef,
                                                    }
                                                ),
                                            }
                                        )
                                    );
                                    return ( ::DISPATCH( $::Bit, 'new', 1 ) );
                                    }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        do {
                            if (::DISPATCH(
                                    ::DISPATCH(
                                        ::DISPATCH( ( $GLOBAL::Code_infix_58__60_eq_62_ = $GLOBAL::Code_infix_58__60_eq_62_ || ::DISPATCH( $::Routine, "new", ) ), 'APPLY', ::DISPATCH( $self, "type" ), ::DISPATCH( $::Str, 'new', 'none' ) ), "true"
                                    ),
                                    "p5landish"
                                )
                                )
                            {
                                do {
                                    ::DISPATCH(
                                        ::DISPATCH( ( $GLOBAL::Code_prefix_58__60__64__62_ = $GLOBAL::Code_prefix_58__60__64__62_ || ::DISPATCH( $::Routine, "new", ) ), 'APPLY', ::DISPATCH( $self, "things" ) ),
                                        'map',
                                        ::DISPATCH(
                                            $::Code, 'new',
                                            {   code => sub {
                                                    my $List__ = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List__' } );
                                                    my $thing;
                                                    $thing = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$thing' } ) unless defined $thing;
                                                    INIT { $thing = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$thing' } ) }
                                                    my $CAPTURE;
                                                    $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                                                    INIT { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                                                    my $List__ = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List__' } );
                                                    ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                                                    ::DISPATCH_VAR( $List__, 'STORE', ::DISPATCH( $CAPTURE, 'array', ) );
                                                    do {
                                                        ::MODIFIED($Hash__);
                                                        $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                                                    };
                                                    {
                                                        my $_param_index = 0;
                                                        if ( ::DISPATCH( $GLOBAL::Code_exists, 'APPLY', ::DISPATCH( $Hash__, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'thing' ) ) )->{_value} ) {
                                                            do {
                                                                ::MODIFIED($thing);
                                                                $thing = ::DISPATCH( $Hash__, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'thing' ) );
                                                                }
                                                        }
                                                        elsif ( ::DISPATCH( $GLOBAL::Code_exists, 'APPLY', ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', $_param_index ) ) )->{_value} ) {
                                                            $thing = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', $_param_index++ ) );
                                                        }
                                                    }
                                                    do {
                                                        if ( ::DISPATCH( ::DISPATCH( $thing, "true" ), "p5landish" ) ) {
                                                            do {
                                                                return ( ::DISPATCH( $::Bit, 'new', 0 ) );
                                                                }
                                                        }
                                                        else { ::DISPATCH( $::Bit, "new", 0 ) }
                                                        }
                                                },
                                                signature => ::DISPATCH(
                                                    $::Signature,
                                                    "new",
                                                    {   invocant => $::Undef,
                                                        array    => ::DISPATCH(
                                                            $::List, "new",
                                                            {   _array => [
                                                                    ::DISPATCH(
                                                                        $::Signature::Item,
                                                                        'new',
                                                                        {   sigil               => '$',
                                                                            twigil              => '',
                                                                            name                => 'thing',
                                                                            value               => $::Undef,
                                                                            has_default         => ::DISPATCH( $::Bit, 'new', 0 ),
                                                                            is_named_only       => ::DISPATCH( $::Bit, 'new', 0 ),
                                                                            is_optional         => ::DISPATCH( $::Bit, 'new', 0 ),
                                                                            is_slurpy           => ::DISPATCH( $::Bit, 'new', 0 ),
                                                                            is_multidimensional => ::DISPATCH( $::Bit, 'new', 0 ),
                                                                            is_rw               => ::DISPATCH( $::Bit, 'new', 0 ),
                                                                            is_copy             => ::DISPATCH( $::Bit, 'new', 0 ),
                                                                        }
                                                                    ),
                                                                ]
                                                            }
                                                        ),
                                                        return => $::Undef,
                                                    }
                                                ),
                                            }
                                        )
                                    );
                                    return ( ::DISPATCH( $::Bit, 'new', 1 ) );
                                    }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                        };
                        do {
                            if (::DISPATCH(
                                    ::DISPATCH(
                                        ::DISPATCH( ( $GLOBAL::Code_infix_58__60_eq_62_ = $GLOBAL::Code_infix_58__60_eq_62_ || ::DISPATCH( $::Routine, "new", ) ), 'APPLY', ::DISPATCH( $self, "type" ), ::DISPATCH( $::Str, 'new', 'one' ) ), "true"
                                    ),
                                    "p5landish"
                                )
                                )
                            {
                                do {
                                    my $counter;
                                    $counter = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$counter' } ) unless defined $counter;
                                    INIT { $counter = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$counter' } ) }
                                    ::DISPATCH_VAR( $counter, 'STORE', ::DISPATCH( $::Int, 'new', 0 ) );
                                    ::DISPATCH(
                                        ::DISPATCH( ( $GLOBAL::Code_prefix_58__60__64__62_ = $GLOBAL::Code_prefix_58__60__64__62_ || ::DISPATCH( $::Routine, "new", ) ), 'APPLY', ::DISPATCH( $self, "things" ) ),
                                        'map',
                                        ::DISPATCH(
                                            $::Code, 'new',
                                            {   code => sub {
                                                    my $List__ = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List__' } );
                                                    my $thing;
                                                    $thing = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$thing' } ) unless defined $thing;
                                                    INIT { $thing = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$thing' } ) }
                                                    my $CAPTURE;
                                                    $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) unless defined $CAPTURE;
                                                    INIT { $CAPTURE = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$CAPTURE' } ) }
                                                    my $List__ = ::DISPATCH( $::ArrayContainer, 'new', { modified => $_MODIFIED, name => '$List__' } );
                                                    ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                                                    ::DISPATCH_VAR( $List__, 'STORE', ::DISPATCH( $CAPTURE, 'array', ) );
                                                    do {
                                                        ::MODIFIED($Hash__);
                                                        $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                                                    };
                                                    {
                                                        my $_param_index = 0;
                                                        if ( ::DISPATCH( $GLOBAL::Code_exists, 'APPLY', ::DISPATCH( $Hash__, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'thing' ) ) )->{_value} ) {
                                                            do {
                                                                ::MODIFIED($thing);
                                                                $thing = ::DISPATCH( $Hash__, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'thing' ) );
                                                                }
                                                        }
                                                        elsif ( ::DISPATCH( $GLOBAL::Code_exists, 'APPLY', ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', $_param_index ) ) )->{_value} ) {
                                                            $thing = ::DISPATCH( $List__, 'INDEX', ::DISPATCH( $::Int, 'new', $_param_index++ ) );
                                                        }
                                                    }
                                                    do {
                                                        if ( ::DISPATCH( ::DISPATCH( $thing, "true" ), "p5landish" ) ) {
                                                            do {
                                                                ::DISPATCH( ( $GLOBAL::Code_prefix_58__60__43__43__62_ = $GLOBAL::Code_prefix_58__60__43__43__62_ || ::DISPATCH( $::Routine, "new", ) ), 'APPLY', $counter );
                                                                do {
                                                                    if (::DISPATCH(
                                                                            ::DISPATCH(
                                                                                ::DISPATCH(
                                                                                    ( $GLOBAL::Code_infix_58__60__62__62_ = $GLOBAL::Code_infix_58__60__62__62_ || ::DISPATCH( $::Routine, "new", ) ),
                                                                                    'APPLY', $counter, ::DISPATCH( $::Int, 'new', 1 )
                                                                                ),
                                                                                "true"
                                                                            ),
                                                                            "p5landish"
                                                                        )
                                                                        )
                                                                    {
                                                                        do {
                                                                            return ( ::DISPATCH( $::Bit, 'new', 0 ) );
                                                                            }
                                                                    }
                                                                    else { ::DISPATCH( $::Bit, "new", 0 ) }
                                                                    }
                                                                }
                                                        }
                                                        else { ::DISPATCH( $::Bit, "new", 0 ) }
                                                        }
                                                },
                                                signature => ::DISPATCH(
                                                    $::Signature,
                                                    "new",
                                                    {   invocant => $::Undef,
                                                        array    => ::DISPATCH(
                                                            $::List, "new",
                                                            {   _array => [
                                                                    ::DISPATCH(
                                                                        $::Signature::Item,
                                                                        'new',
                                                                        {   sigil               => '$',
                                                                            twigil              => '',
                                                                            name                => 'thing',
                                                                            value               => $::Undef,
                                                                            has_default         => ::DISPATCH( $::Bit, 'new', 0 ),
                                                                            is_named_only       => ::DISPATCH( $::Bit, 'new', 0 ),
                                                                            is_optional         => ::DISPATCH( $::Bit, 'new', 0 ),
                                                                            is_slurpy           => ::DISPATCH( $::Bit, 'new', 0 ),
                                                                            is_multidimensional => ::DISPATCH( $::Bit, 'new', 0 ),
                                                                            is_rw               => ::DISPATCH( $::Bit, 'new', 0 ),
                                                                            is_copy             => ::DISPATCH( $::Bit, 'new', 0 ),
                                                                        }
                                                                    ),
                                                                ]
                                                            }
                                                        ),
                                                        return => $::Undef,
                                                    }
                                                ),
                                            }
                                        )
                                    );
                                    return ( ::DISPATCH( ( $GLOBAL::Code_infix_58__60__61__61__62_ = $GLOBAL::Code_infix_58__60__61__61__62_ || ::DISPATCH( $::Routine, "new", ) ), 'APPLY', $counter, ::DISPATCH( $::Int, 'new', 1 ) ) );
                                    }
                            }
                            else { ::DISPATCH( $::Bit, "new", 0 ) }
                            }
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {   invocant => bless(
                                {   'namespace' => [],
                                    'name'      => 'self',
                                    'twigil'    => '',
                                    'sigil'     => '$'
                                },
                                'Var'
                            ),
                            array  => ::DISPATCH( $::List, "new", { _array => [] } ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
    };
    1
}
