=pod

=encoding utf8

=head1 NAME

Muldis::DB::Language::Catalog -
The system catalog or meta-model of Muldis D

=head1 PREFACE

This document is part of the Muldis D language specification, whose root
document is L<Muldis::DB::Language>; you should read that root document
before you read this one, which provides subservient details.

=head1 DESCRIPTION

Muldis D has a mandatory core set of system-defined (eternally available)
entities, which is referred to as the I<Muldis D core> or the I<core>; they
are the minimal entities that all Muldis D implementations need to provide;
they are mutually self-describing and are used to bootstrap the language;
any entities outside the core, called I<Muldis D extensions>, are
non-mandatory and are defined in terms of the core or each other, but the
reverse isn't true.

A significant subset of the Muldis D core entities are specific to being or
implementing the Muldis D system catalog / meta-model, and aren't used
elsewhere by the system; these are documented in the current C<Catalog>
document; all the other core entities are described in the
L<Muldis::DB::Language::Core> document.

This current C<Catalog> document features ...

This current document does not describe the polymorphic operators that all
types, or some types including core types, have defined over them; said
operators are defined once for all types in L<Muldis::DB::Language::Core>.

I<This documentation is pending.>

=head1 TYPE SUMMARY

Following are all the data types described in this document, arranged in a
type graph according to their proper sub|supertype relationships (but that
6 just reappear from the non-catalog core set to provide a similar context,
and aren't re-described here):

    sys.type.Universal

        sys.type.Empty

        sys.type.Scalar
            sys.type.Ordinal

                # The following are all regular ordinal scalar types.

                sys.type.Cat.EntityName
                    sys.type.Cat(...)

            # The following are all regular non-ordinal scalar types.

            # TODO

        sys.type.Tuple

            # The following are all regular tuple types.

            # TODO

        sys.type.Relation

            # The following are all regular relation types.

            # TODO

I<This documentation is pending.>

=head1 SYSTEM-DEFINED DATA TYPES AND ROUTINES

=head2 Catalog Data Types

These scalar data types are special-purpose in nature, as they are intended
for use in defining or working with catalog types, and all catalog
variables are system-defined.

=over

=item C<sys.type.Cat.EntityName>

A C<Cat.EntityName> is a canonical name of a DBMS entity or attribute
thereof.  This name is conceptually multi-part, with the parts forming a
sequence of 1..N C<Text>, ordered from greatest to least significance;
names of attributes typically have just 1 part and so are conceptually just
a C<Text>, though often database attribute names, which are its component
relation names, are multi-part (extra parts being for "schema" name-spaces
and such); names of data types and operators are typically 3-4 parts, where
C<sys> is an example of part 1.  C<Cat.EntityName> has multiple possreps;
one is a C<Seq(1..N) of Text>; one is a specially encoded C<Text> where
parts are ordered from greatest to least significance, and adjacent parts
are separated with a single "period" character, and any literal period or
backslash characters in parts are backslash-escaped as C<\p> and C<\b>
respectively (no other characters are escaped).  Its default value consists
of a single part that is the empty string.

=item C<sys.type.Cat.EntityDeclName>

A C<Cat.EntityDeclName> is a proper subtype of C<Cat.EntityName>.  It is a
declared name of a DBMS entity, or the declared name of an attribute
thereof, that either is defined with.

=item C<sys.type.Cat.TypeDeclName>

A C<Cat.TypeDeclName> is a proper subtype of C<Cat.EntityDeclName> whose
C<Text> possrep is of the format C<(sys|nat|lex)\.type\..*>; it is for type
names specifically.  Its default value is C<lex.type.>.

=item C<sys.type.Cat.RtnDeclName>

A C<Cat.RtnDeclName> is a proper subtype of C<Cat.EntityDeclName> whose
C<Text> possrep is of the format C<(sys|nat|lex)\.rtn\..*>; it is for
routine names specifically.  Its default value is C<lex.rtn.>.

=item C<sys.type.Cat.VarDeclName>

A C<Cat.VarDeclName> is a proper subtype of C<Cat.EntityDeclName> whose
C<Text> possrep is of the format C<(sys|nat|lex)\.(cat|data)\..*>; it is
for variable and constant names specifically.  Its default value is
C<lex.data.>.

=item C<sys.type.Cat.EntityInvoName>

A C<Cat.EntityInvoName> is a proper subtype of C<Cat.EntityName>.  It is a
name by which some routine invokes or references a DBMS entity.  Unlike a
C<Cat.DeclTypeName>, a C<Cat.EntityInvoName> is more likely to be
partially qualified, perhaps.

=item C<sys.type.Cat.(Type|Rtn|Var)InvoName>

These are subtypes of C<Cat.EntityInvoName> whose formats are analogous to
the similarly named subtypes of C<Cat.EntityDeclName>.

=back

I<This documentation is pending.>

=head1 CATALOGS

The Muldis::DB catalog relcons and relvars collectively reflect and/or
control all entities in a DBMS.  Given that the catalog provides complete
descriptions of both the interface and implementation of each DBMS entity,
for user-defined entities, and just the interface for system-defined
entities, understanding these is akin to understanding the native grammar
of Muldis D.  This grammar is extremely simple by intention, but at a cost
of being a little more verbose.

=head2 Catalog Relcons For System-Defined Entities

This section describes the structure of all C<< cont.sys.<unq_name> >>
catalog relcons, which themselves describe all system-defined DBMS entities
in a computer-readable manner.

I<This documentation is pending.>

=head2 Catalog Relvars For Depot Appearance Control

This section describes the structure of all C<< cont.mnt.<unq_name> >>
special catalog relvars, which reflect and control which depots are
currently mounted in the DBMS.  Users update these to open or close
client-server DBMS engine connections, or to attach or detach file-based
database files, create or delete the depots themselves, or associate,
disassociate, create, or delete shared memory based depots, mount or
unmount filesystem-based depots, etc.  Updating these relvars has
side-effects in making the entities belonging to a depot, named C<*.db.*>,
appear in or disappear from view.  Details stored here include analogies to
DSNs, database file names, DBMS server names and addresses, authentication
details like login names and passwords.  What details are stored per depot
can vary significantly depending on which Muldis::DB Engine implements the
DBMS, but this variance is limited to just C<cont.mnt.depot_detail>.  Note
that it is forbidden to update any C<mnt> relvars while a multi-statement
transaction is active, because a transaction subjugates all entities
concurrently visible or mounted in a DBMS, such that they must all commit
or rollback as a unit.

I<This documentation is pending.>

=head2 Catalog Relvars for User-Defined Entities

This section describes the structure of all C<< cont.cat.app.<unq_name> >>
and C<< cont.cat.db.<depot>.<unq_name> >> general catalog relvars, the set
of C<< <unq_name> >> for each of which is identical, that reflect and
control user-defined entities, including data types, routines, non-lexical
variables (which are all relvars, real or virtual), state constraints, etc.
Users update these to create or drop their relvars, data types, routines,
constraints, etc.  Updating these catalog relvars has side-effects in
making global data relvars, named C<*.data.*>, appear, disappear, or change
in structure.

I<This documentation is pending.>

=head1 SEE ALSO

Go to L<Muldis::DB> for the majority of distribution-internal references,
and L<Muldis::DB::SeeAlso> for the majority of distribution-external
references.

=head1 AUTHOR

Darren Duncan (C<perl@DarrenDuncan.net>)

=head1 LICENSE AND COPYRIGHT

This file is part of the Muldis::DB framework.

Muldis::DB is Copyright Â© 2002-2007, Darren Duncan.

See the LICENSE AND COPYRIGHT of L<Muldis::DB> for details.

=head1 ACKNOWLEDGEMENTS

The ACKNOWLEDGEMENTS in L<Muldis::DB> apply to this file too.

=cut
