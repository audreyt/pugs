# Do not edit this file - Generated by MiniPerl6
use v5;
use strict;
use MiniPerl6::Perl5::Runtime;
use MiniPerl6::Perl5::Match;

package KindaPerl6::Grammar;
sub new { shift; bless {@_}, "KindaPerl6::Grammar" }

sub control {
    my $grammar = shift;
    my $List__  = \@_;
    my $str;
    my $pos;
    do { $str = $List__->[0]; $pos = $List__->[1]; [ $str, $pos ] };
    my $MATCH;
    $MATCH = MiniPerl6::Perl5::Match->new( 'str' => $str, 'from' => $pos, 'to' => $pos, 'bool' => 1, );
    $MATCH->bool(
        do {
            my $pos1 = $MATCH->to();
            (   do {
                    (   do {
                            my $m2 = $grammar->ctrl_return( $str, $MATCH->to() );
                            do {
                                if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'ctrl_return'} = $m2; 1 }
                                else     {0}
                                }
                            }
                            && do {
                            my $ret = sub {
                                my $List__ = \@_;
                                do { [] };
                                do { return ( ${ $MATCH->{'ctrl_return'} } ) };
                                '974^213';
                                }
                                ->();
                            do {
                                if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                else                         { }
                            };
                            1;
                            }
                    );
                    }
                    || (
                    do {
                        $MATCH->to($pos1);
                        (   do {
                                my $m2 = $grammar->ctrl_leave( $str, $MATCH->to() );
                                do {
                                    if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'ctrl_leave'} = $m2; 1 }
                                    else     {0}
                                    }
                                }
                                && do {
                                my $ret = sub {
                                    my $List__ = \@_;
                                    do { [] };
                                    do { return ( ${ $MATCH->{'ctrl_leave'} } ) };
                                    '974^213';
                                    }
                                    ->();
                                do {
                                    if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                    else                         { }
                                };
                                1;
                                }
                        );
                    }
                    || (do {
                            $MATCH->to($pos1);
                            (   do {
                                    my $m2 = $grammar->if( $str, $MATCH->to() );
                                    do {
                                        if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'if'} = $m2; 1 }
                                        else     {0}
                                        }
                                    }
                                    && do {
                                    my $ret = sub {
                                        my $List__ = \@_;
                                        do { [] };
                                        do { return ( ${ $MATCH->{'if'} } ) };
                                        '974^213';
                                        }
                                        ->();
                                    do {
                                        if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                        else                         { }
                                    };
                                    1;
                                    }
                            );
                        }
                        || (do {
                                $MATCH->to($pos1);
                                (   do {
                                        my $m2 = $grammar->unless( $str, $MATCH->to() );
                                        do {
                                            if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'unless'} = $m2; 1 }
                                            else     {0}
                                            }
                                        }
                                        && do {
                                        my $ret = sub {
                                            my $List__ = \@_;
                                            do { [] };
                                            do { return ( ${ $MATCH->{'unless'} } ) };
                                            '974^213';
                                            }
                                            ->();
                                        do {
                                            if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                            else                         { }
                                        };
                                        1;
                                        }
                                );
                            }
                            || (do {
                                    $MATCH->to($pos1);
                                    (   do {
                                            my $m2 = $grammar->when( $str, $MATCH->to() );
                                            do {
                                                if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'when'} = $m2; 1 }
                                                else     {0}
                                                }
                                            }
                                            && do {
                                            my $ret = sub {
                                                my $List__ = \@_;
                                                do { [] };
                                                do { return ( ${ $MATCH->{'when'} } ) };
                                                '974^213';
                                                }
                                                ->();
                                            do {
                                                if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                                else                         { }
                                            };
                                            1;
                                            }
                                    );
                                }
                                || (do {
                                        $MATCH->to($pos1);
                                        (   do {
                                                my $m2 = $grammar->for( $str, $MATCH->to() );
                                                do {
                                                    if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'for'} = $m2; 1 }
                                                    else     {0}
                                                    }
                                                }
                                                && do {
                                                my $ret = sub {
                                                    my $List__ = \@_;
                                                    do { [] };
                                                    do { return ( ${ $MATCH->{'for'} } ) };
                                                    '974^213';
                                                    }
                                                    ->();
                                                do {
                                                    if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                                    else                         { }
                                                };
                                                1;
                                                }
                                        );
                                    }
                                    || (do {
                                            $MATCH->to($pos1);
                                            (   do {
                                                    my $m2 = $grammar->while( $str, $MATCH->to() );
                                                    do {
                                                        if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'while'} = $m2; 1 }
                                                        else     {0}
                                                        }
                                                    }
                                                    && do {
                                                    my $ret = sub {
                                                        my $List__ = \@_;
                                                        do { [] };
                                                        do { return ( ${ $MATCH->{'while'} } ) };
                                                        '974^213';
                                                        }
                                                        ->();
                                                    do {
                                                        if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                                        else                         { }
                                                    };
                                                    1;
                                                    }
                                            );
                                        }
                                        || do {
                                            $MATCH->to($pos1);
                                            (   do {
                                                    my $m2 = $grammar->apply( $str, $MATCH->to() );
                                                    do {
                                                        if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'apply'} = $m2; 1 }
                                                        else     {0}
                                                        }
                                                    }
                                                    && do {
                                                    my $ret = sub {
                                                        my $List__ = \@_;
                                                        do { [] };
                                                        do { return ( ${ $MATCH->{'apply'} } ) };
                                                        '974^213';
                                                        }
                                                        ->();
                                                    do {
                                                        if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                                        else                         { }
                                                    };
                                                    1;
                                                    }
                                            );
                                        }
                                    )
                                )
                            )
                        )
                    )
                    )
            );
            }
    );
    return ($MATCH);
}

sub block1 {
    my $grammar = shift;
    my $List__  = \@_;
    my $str;
    my $pos;
    do { $str = $List__->[0]; $pos = $List__->[1]; [ $str, $pos ] };
    my $MATCH;
    $MATCH = MiniPerl6::Perl5::Match->new( 'str' => $str, 'from' => $pos, 'to' => $pos, 'bool' => 1, );
    $MATCH->bool(
        do {
            my $pos1 = $MATCH->to();
            do {
                (   ( ( '{' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                        do {
                            my $m2 = $grammar->opt_ws( $str, $MATCH->to() );
                            do {
                                if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                else     {0}
                                }
                        }
                        && (do {
                                my $ret = sub {
                                    my $List__ = \@_;
                                    do { [] };
                                    do { COMPILER::add_pad() };
                                    '974^213';
                                    }
                                    ->();
                                do {
                                    if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                    else                         { }
                                };
                                1;
                            }
                            && (do {
                                    my $m2 = $grammar->exp_stmts( $str, $MATCH->to() );
                                    do {
                                        if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'exp_stmts'} = $m2; 1 }
                                        else     {0}
                                        }
                                }
                                && (do {
                                        my $m2 = $grammar->opt_ws( $str, $MATCH->to() );
                                        do {
                                            if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                            else     {0}
                                            }
                                    }
                                    && (( ( '}' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && do {
                                            my $ret = sub {
                                                my $List__ = \@_;
                                                do { [] };
                                                do {
                                                    my $env = COMPILER::current_pad();
                                                    COMPILER::drop_pad();
                                                    return ( Lit::Code->new( 'pad' => $env, 'state' => {}, 'sig' => Sig->new( 'invocant' => (undef), 'positional' => [], ), 'body' => ${ $MATCH->{'exp_stmts'} }, ) );
                                                };
                                                '974^213';
                                                }
                                                ->();
                                            do {
                                                if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                                else                         { }
                                            };
                                            1;
                                        }
                                    )
                                )
                            )
                        )
                    )
                );
                }
            }
    );
    return ($MATCH);
}

sub block2 {
    my $grammar = shift;
    my $List__  = \@_;
    my $str;
    my $pos;
    do { $str = $List__->[0]; $pos = $List__->[1]; [ $str, $pos ] };
    my $MATCH;
    $MATCH = MiniPerl6::Perl5::Match->new( 'str' => $str, 'from' => $pos, 'to' => $pos, 'bool' => 1, );
    $MATCH->bool(
        do {
            my $pos1 = $MATCH->to();
            do {
                (   do {
                        my $m2 = $grammar->block1( $str, $MATCH->to() );
                        do {
                            if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'block1'} = $m2; 1 }
                            else     {0}
                            }
                        }
                        && do {
                        my $ret = sub {
                            my $List__ = \@_;
                            do { [] };
                            do { return ( ${ $MATCH->{'block1'} } ) };
                            '974^213';
                            }
                            ->();
                        do {
                            if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                            else                         { }
                        };
                        1;
                        }
                );
                }
            }
    );
    return ($MATCH);
}

sub if {
    my $grammar = shift;
    my $List__  = \@_;
    my $str;
    my $pos;
    do { $str = $List__->[0]; $pos = $List__->[1]; [ $str, $pos ] };
    my $MATCH;
    $MATCH = MiniPerl6::Perl5::Match->new( 'str' => $str, 'from' => $pos, 'to' => $pos, 'bool' => 1, );
    $MATCH->bool(
        do {
            my $pos1 = $MATCH->to();
            do {
                (   ( ( 'i' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                        ( ( 'f' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                            do {
                                my $m2 = $grammar->ws( $str, $MATCH->to() );
                                do {
                                    if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                    else     {0}
                                    }
                            }
                            && (do {
                                    my $m2 = $grammar->exp( $str, $MATCH->to() );
                                    do {
                                        if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'exp'} = $m2; 1 }
                                        else     {0}
                                        }
                                }
                                && (do {
                                        my $m2 = $grammar->opt_ws( $str, $MATCH->to() );
                                        do {
                                            if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                            else     {0}
                                            }
                                    }
                                    && (do {
                                            my $m2 = $grammar->block1( $str, $MATCH->to() );
                                            do {
                                                if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'block1'} = $m2; 1 }
                                                else     {0}
                                                }
                                        }
                                        && do {
                                            my $pos1 = $MATCH->to();
                                            (   do {
                                                    (   do {
                                                            my $m2 = $grammar->opt_ws( $str, $MATCH->to() );
                                                            do {
                                                                if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                                else     {0}
                                                                }
                                                            }
                                                            && (
                                                            ( ( 'e' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                                                                ( ( 'l' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                                                                    ( ( 's' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                                                                        ( ( 'e' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                                                                            do {
                                                                                my $m2 = $grammar->opt_ws( $str, $MATCH->to() );
                                                                                do {
                                                                                    if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                                                    else     {0}
                                                                                    }
                                                                            }
                                                                            && (do {
                                                                                    my $m2 = $grammar->block2( $str, $MATCH->to() );
                                                                                    do {
                                                                                        if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'block2'} = $m2; 1 }
                                                                                        else     {0}
                                                                                        }
                                                                                }
                                                                                && do {
                                                                                    my $ret = sub {
                                                                                        my $List__ = \@_;
                                                                                        do { [] };
                                                                                        do { return ( If->new( 'cond' => ${ $MATCH->{'exp'} }, 'body' => ${ $MATCH->{'block1'} }, 'otherwise' => ${ $MATCH->{'block2'} }, ) ) };
                                                                                        '974^213';
                                                                                        }
                                                                                        ->();
                                                                                    do {
                                                                                        if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                                                                        else                         { }
                                                                                    };
                                                                                    1;
                                                                                }
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                            )
                                                    );
                                                    }
                                                    || do {
                                                    $MATCH->to($pos1);
                                                    do {
                                                        my $ret = sub {
                                                            my $List__ = \@_;
                                                            do { [] };
                                                            do { return ( If->new( 'cond' => ${ $MATCH->{'exp'} }, 'body' => ${ $MATCH->{'block1'} }, 'otherwise' => (undef), ) ) };
                                                            '974^213';
                                                            }
                                                            ->();
                                                        do {
                                                            if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                                            else                         { }
                                                        };
                                                        1;
                                                        }
                                                    }
                                            );
                                        }
                                    )
                                )
                            )
                        )
                    )
                );
                }
            }
    );
    return ($MATCH);
}

sub unless {
    my $grammar = shift;
    my $List__  = \@_;
    my $str;
    my $pos;
    do { $str = $List__->[0]; $pos = $List__->[1]; [ $str, $pos ] };
    my $MATCH;
    $MATCH = MiniPerl6::Perl5::Match->new( 'str' => $str, 'from' => $pos, 'to' => $pos, 'bool' => 1, );
    $MATCH->bool(
        do {
            my $pos1 = $MATCH->to();
            do {
                (   ( ( 'u' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                        ( ( 'n' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                            ( ( 'l' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                                ( ( 'e' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                                    ( ( 's' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                                        ( ( 's' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                                            do {
                                                my $m2 = $grammar->ws( $str, $MATCH->to() );
                                                do {
                                                    if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                    else     {0}
                                                    }
                                            }
                                            && (do {
                                                    my $m2 = $grammar->exp( $str, $MATCH->to() );
                                                    do {
                                                        if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'exp'} = $m2; 1 }
                                                        else     {0}
                                                        }
                                                }
                                                && (do {
                                                        my $m2 = $grammar->opt_ws( $str, $MATCH->to() );
                                                        do {
                                                            if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                            else     {0}
                                                            }
                                                    }
                                                    && (do {
                                                            my $m2 = $grammar->block1( $str, $MATCH->to() );
                                                            do {
                                                                if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'block1'} = $m2; 1 }
                                                                else     {0}
                                                                }
                                                        }
                                                        && do {
                                                            my $pos1 = $MATCH->to();
                                                            (   do {
                                                                    (   do {
                                                                            my $m2 = $grammar->opt_ws( $str, $MATCH->to() );
                                                                            do {
                                                                                if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                                                else     {0}
                                                                                }
                                                                            }
                                                                            && (
                                                                            ( ( 'e' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                                                                                ( ( 'l' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                                                                                    ( ( 's' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                                                                                        ( ( 'e' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                                                                                            do {
                                                                                                my $m2 = $grammar->opt_ws( $str, $MATCH->to() );
                                                                                                do {
                                                                                                    if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                                                                    else     {0}
                                                                                                    }
                                                                                            }
                                                                                            && (do {
                                                                                                    my $m2 = $grammar->block2( $str, $MATCH->to() );
                                                                                                    do {
                                                                                                        if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'block2'} = $m2; 1 }
                                                                                                        else     {0}
                                                                                                        }
                                                                                                }
                                                                                                && do {
                                                                                                    my $ret = sub {
                                                                                                        my $List__ = \@_;
                                                                                                        do { [] };
                                                                                                        do { return ( If->new( 'cond' => ${ $MATCH->{'exp'} }, 'body' => ${ $MATCH->{'block2'} }, 'otherwise' => ${ $MATCH->{'block1'} }, ) ) };
                                                                                                        '974^213';
                                                                                                        }
                                                                                                        ->();
                                                                                                    do {
                                                                                                        if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                                                                                        else                         { }
                                                                                                    };
                                                                                                    1;
                                                                                                }
                                                                                            )
                                                                                        )
                                                                                    )
                                                                                )
                                                                            )
                                                                            )
                                                                    );
                                                                    }
                                                                    || do {
                                                                    $MATCH->to($pos1);
                                                                    do {
                                                                        my $ret = sub {
                                                                            my $List__ = \@_;
                                                                            do { [] };
                                                                            do { return ( If->new( 'cond' => ${ $MATCH->{'exp'} }, 'body' => (undef), 'otherwise' => ${ $MATCH->{'block1'} }, ) ) };
                                                                            '974^213';
                                                                            }
                                                                            ->();
                                                                        do {
                                                                            if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                                                            else                         { }
                                                                        };
                                                                        1;
                                                                        }
                                                                    }
                                                            );
                                                        }
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                );
                }
            }
    );
    return ($MATCH);
}

sub when {
    my $grammar = shift;
    my $List__  = \@_;
    my $str;
    my $pos;
    do { $str = $List__->[0]; $pos = $List__->[1]; [ $str, $pos ] };
    my $MATCH;
    $MATCH = MiniPerl6::Perl5::Match->new( 'str' => $str, 'from' => $pos, 'to' => $pos, 'bool' => 1, );
    $MATCH->bool(
        do {
            my $pos1 = $MATCH->to();
            do {
                (   ( ( 'w' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                        ( ( 'h' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                            ( ( 'e' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                                ( ( 'n' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                                    do {
                                        my $m2 = $grammar->ws( $str, $MATCH->to() );
                                        do {
                                            if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                            else     {0}
                                            }
                                    }
                                    && (do {
                                            my $m2 = $grammar->exp_seq( $str, $MATCH->to() );
                                            do {
                                                if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'exp_seq'} = $m2; 1 }
                                                else     {0}
                                                }
                                        }
                                        && (do {
                                                my $m2 = $grammar->opt_ws( $str, $MATCH->to() );
                                                do {
                                                    if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                    else     {0}
                                                    }
                                            }
                                            && (do {
                                                    my $m2 = $grammar->block1( $str, $MATCH->to() );
                                                    do {
                                                        if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'block1'} = $m2; 1 }
                                                        else     {0}
                                                        }
                                                }
                                                && do {
                                                    my $ret = sub {
                                                        my $List__ = \@_;
                                                        do { [] };
                                                        do { return ( When->new( 'parameters' => ${ $MATCH->{'exp_seq'} }, 'body' => ${ $MATCH->{'block1'} }, ) ) };
                                                        '974^213';
                                                        }
                                                        ->();
                                                    do {
                                                        if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                                        else                         { }
                                                    };
                                                    1;
                                                }
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                );
                }
            }
    );
    return ($MATCH);
}

sub for {
    my $grammar = shift;
    my $List__  = \@_;
    my $str;
    my $pos;
    do { $str = $List__->[0]; $pos = $List__->[1]; [ $str, $pos ] };
    my $MATCH;
    $MATCH = MiniPerl6::Perl5::Match->new( 'str' => $str, 'from' => $pos, 'to' => $pos, 'bool' => 1, );
    $MATCH->bool(
        do {
            my $pos1 = $MATCH->to();
            do {
                (   ( ( 'f' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                        ( ( 'o' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                            ( ( 'r' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                                do {
                                    my $m2 = $grammar->ws( $str, $MATCH->to() );
                                    do {
                                        if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                        else     {0}
                                        }
                                }
                                && (do {
                                        my $m2 = $grammar->exp( $str, $MATCH->to() );
                                        do {
                                            if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'exp'} = $m2; 1 }
                                            else     {0}
                                            }
                                    }
                                    && (do {
                                            my $m2 = $grammar->opt_ws( $str, $MATCH->to() );
                                            do {
                                                if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                else     {0}
                                                }
                                        }
                                        && (( ( '->' eq substr( $str, $MATCH->to(), 2 ) ) ? ( 1 + $MATCH->to( ( 2 + $MATCH->to() ) ) ) : 0 ) && (
                                                do {
                                                    my $m2 = $grammar->opt_ws( $str, $MATCH->to() );
                                                    do {
                                                        if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                        else     {0}
                                                        }
                                                }
                                                && (do {
                                                        my $m2 = $grammar->var( $str, $MATCH->to() );
                                                        do {
                                                            if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'var'} = $m2; 1 }
                                                            else     {0}
                                                            }
                                                    }
                                                    && (do {
                                                            my $ret = sub {
                                                                my $List__ = \@_;
                                                                do { [] };
                                                                do { COMPILER::add_pad(); my $env = COMPILER::current_pad(); push( @{ $env->lexicals() }, Decl->new( 'type' => '', 'decl' => 'my', 'var' => ${ $MATCH->{'var'} }, ) ) };
                                                                '974^213';
                                                                }
                                                                ->();
                                                            do {
                                                                if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                                                else                         { }
                                                            };
                                                            1;
                                                        }
                                                        && (do {
                                                                my $m2 = $grammar->ws( $str, $MATCH->to() );
                                                                do {
                                                                    if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                                    else     {0}
                                                                    }
                                                            }
                                                            && (do {
                                                                    my $m2 = $grammar->block1( $str, $MATCH->to() );
                                                                    do {
                                                                        if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'block1'} = $m2; 1 }
                                                                        else     {0}
                                                                        }
                                                                }
                                                                && do {
                                                                    my $ret = sub {
                                                                        my $List__ = \@_;
                                                                        do { [] };
                                                                        do {
                                                                            my $env = COMPILER::current_pad();
                                                                            COMPILER::drop_pad();
                                                                            my $block = ${ $MATCH->{'block1'} };
                                                                            return (
                                                                                Lit::Code->new(
                                                                                    'pad'   => $env,
                                                                                    'state' => {},
                                                                                    'sig'   => Sig->new( 'invocant' => (undef), 'positional' => [], ),
                                                                                    'body'  => [ For->new( 'cond' => ${ $MATCH->{'exp'} }, 'topic' => ${ $MATCH->{'var'} }, 'body' => $block, ) ],
                                                                                )
                                                                            );
                                                                        };
                                                                        '974^213';
                                                                        }
                                                                        ->();
                                                                    do {
                                                                        if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                                                        else                         { }
                                                                    };
                                                                    1;
                                                                }
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                );
                }
            }
    );
    return ($MATCH);
}

sub while {
    my $grammar = shift;
    my $List__  = \@_;
    my $str;
    my $pos;
    do { $str = $List__->[0]; $pos = $List__->[1]; [ $str, $pos ] };
    my $MATCH;
    $MATCH = MiniPerl6::Perl5::Match->new( 'str' => $str, 'from' => $pos, 'to' => $pos, 'bool' => 1, );
    $MATCH->bool(
        do {
            my $pos1 = $MATCH->to();
            do {
                (   ( ( 'w' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                        ( ( 'h' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                            ( ( 'i' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                                ( ( 'l' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                                    ( ( 'e' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                                        do {
                                            my $m2 = $grammar->ws( $str, $MATCH->to() );
                                            do {
                                                if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                else     {0}
                                                }
                                        }
                                        && (do {
                                                my $m2 = $grammar->exp( $str, $MATCH->to() );
                                                do {
                                                    if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'exp'} = $m2; 1 }
                                                    else     {0}
                                                    }
                                            }
                                            && (do {
                                                    my $m2 = $grammar->ws( $str, $MATCH->to() );
                                                    do {
                                                        if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                        else     {0}
                                                        }
                                                }
                                                && (do {
                                                        my $m2 = $grammar->block1( $str, $MATCH->to() );
                                                        do {
                                                            if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'block1'} = $m2; 1 }
                                                            else     {0}
                                                            }
                                                    }
                                                    && do {
                                                        my $ret = sub {
                                                            my $List__ = \@_;
                                                            do { [] };
                                                            do { return ( While->new( 'cond' => ${ $MATCH->{'exp'} }, 'body' => ${ $MATCH->{'block1'} }, ) ) };
                                                            '974^213';
                                                            }
                                                            ->();
                                                        do {
                                                            if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                                            else                         { }
                                                        };
                                                        1;
                                                    }
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                );
                }
            }
    );
    return ($MATCH);
}

sub ctrl_leave {
    my $grammar = shift;
    my $List__  = \@_;
    my $str;
    my $pos;
    do { $str = $List__->[0]; $pos = $List__->[1]; [ $str, $pos ] };
    my $MATCH;
    $MATCH = MiniPerl6::Perl5::Match->new( 'str' => $str, 'from' => $pos, 'to' => $pos, 'bool' => 1, );
    $MATCH->bool(
        do {
            my $pos1 = $MATCH->to();
            do {
                (   ( ( 'l' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                        ( ( 'e' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                            ( ( 'a' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                                ( ( 'v' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                                    ( ( 'e' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && do {
                                        my $ret = sub {
                                            my $List__ = \@_;
                                            do { [] };
                                            do { return ( Leave->new() ) };
                                            '974^213';
                                            }
                                            ->();
                                        do {
                                            if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                            else                         { }
                                        };
                                        1;
                                    }
                                )
                            )
                        )
                    )
                );
                }
            }
    );
    return ($MATCH);
}

sub ctrl_return {
    my $grammar = shift;
    my $List__  = \@_;
    my $str;
    my $pos;
    do { $str = $List__->[0]; $pos = $List__->[1]; [ $str, $pos ] };
    my $MATCH;
    $MATCH = MiniPerl6::Perl5::Match->new( 'str' => $str, 'from' => $pos, 'to' => $pos, 'bool' => 1, );
    $MATCH->bool(
        do {
            my $pos1 = $MATCH->to();
            (   do {
                    (   ( ( 'r' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                            ( ( 'e' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                                ( ( 't' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                                    ( ( 'u' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                                        ( ( 'r' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                                            ( ( 'n' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                                                do {
                                                    my $m2 = $grammar->ws( $str, $MATCH->to() );
                                                    do {
                                                        if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                        else     {0}
                                                        }
                                                }
                                                && (do {
                                                        my $m2 = $grammar->exp( $str, $MATCH->to() );
                                                        do {
                                                            if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'exp'} = $m2; 1 }
                                                            else     {0}
                                                            }
                                                    }
                                                    && do {
                                                        my $ret = sub {
                                                            my $List__ = \@_;
                                                            do { [] };
                                                            do { return ( Return->new( 'result' => ${ $MATCH->{'exp'} }, ) ) };
                                                            '974^213';
                                                            }
                                                            ->();
                                                        do {
                                                            if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                                            else                         { }
                                                        };
                                                        1;
                                                    }
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    );
                    }
                    || do {
                    $MATCH->to($pos1);
                    (   ( ( 'r' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                            ( ( 'e' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                                ( ( 't' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                                    ( ( 'u' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                                        ( ( 'r' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                                            ( ( 'n' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && do {
                                                my $ret = sub {
                                                    my $List__ = \@_;
                                                    do { [] };
                                                    do { return ( Return->new( 'result' => Val::Undef->new(), ) ) };
                                                    '974^213';
                                                    }
                                                    ->();
                                                do {
                                                    if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                                    else                         { }
                                                };
                                                1;
                                            }
                                        )
                                    )
                                )
                            )
                        )
                    );
                    }
            );
            }
    );
    return ($MATCH);
}

1;
