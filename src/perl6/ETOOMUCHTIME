#!/usr/local/bin/perl

use strict;
use warnings;
use English;
use feature qw(say);
use Benchmark;
use File::Path;
use File::Basename;
use File::Copy;
use POSIX qw(nice); 

#let us play nice with others
nice(19);

print <<"WARNING";

My job is to run STD_syntax_highlight over all the tests in t/spec.
And since STD.pm is slow at the moment, this is going to take 
too much time.

You have been warned ;-)
You can press CTRL-C when you feel bored.

WARNING

#add a sanity check to make sure STD.pm is correctly built
unless(-r 'lex') {
    die "Could not find 'lex' directory. Maybe you forgot to 'make'\n";
}
unless(-r 'STD.pmc') {
    die "Could not find 'STD.pmc'. Maybe your forgot to 'make'\n";
}

my $dir_to_test = shift @ARGV || '../../t/spec/';
my $fail = 0;
my $success = 0;
say "Finding *.t in $dir_to_test... Please wait";
my @files = sort `find $dir_to_test -name '*.t'`;
chomp(@files);
$OUTPUT_AUTOFLUSH = 1;

my $total = 0+@files;
say "Going to run $total tests... Maybe watch a movie meanwhile?";

my $HILITE = "STD_syntax_highlight";
my $JQUERY_JS = "jquery-1.2.6.pack.js";
my $start_time = new Benchmark;
my @failed;
for my $file (@files) {
    my $myfile = $file;
    $myfile =~ s/^\.\.\/\.\.\/t\/spec/html/;   
    my ($simple_html,$full_html) = ("$myfile.simple.html", "$myfile.html");
    my ($html_filename,$html_path,$html_suffix) = fileparse($full_html);
    mkpath $html_path;
   
    #run the process and time it
    print <<"OUT";

$file
    -> $full_html
    -> $simple_html
OUT
    my $t0 = new Benchmark;
    my $cmd = "./$HILITE --clean-html " .
            "--simple-html=$simple_html " .
            "--full-html=$full_html $file";
    my $log = `$cmd 2>&1`;
    say "It took " . 
        timestr(timediff(new Benchmark,$t0),"nop");

    if ($CHILD_ERROR) {
        push(@failed,$file);
        $fail++;
    
        # catch those pesky CTRL-Cs
        if($CHILD_ERROR &= 127) {
            say "CTRL-C detected... bye bye";
            last;
        }
        
        # let us write something useful into those htmls
        # when an error occurs
        my $error_html = <<"ERROR";
<html><title>Error</title><body><pre>

An error has occured while processing this file:

filename: 
    $file
Reason:
    $log
</pre></body></html>
ERROR
        open SIMPLE_HTML, ">$simple_html"
            or die "Could not open $simple_html for writing: $OS_ERROR\n";
        print SIMPLE_HTML $error_html;       
        close SIMPLE_HTML;
        open FULL_HTML, ">$full_html"
            or die "Could not open $full_html for writing: $OS_ERROR\n";
        print FULL_HTML $error_html;
        close FULL_HTML;
        say "error";
    } else {
	    $success++;
	    say "ok";
    }
}

printf "\nPassed $success/$total, %6.2f%%\n", $success/$total * 100;
say "It took " .
    timestr(timediff(new Benchmark,$start_time),"noc");

if (@failed) {
    say "Failed tests:";
    for my $file (@failed) {
    	say $file;
    }
}

#Copy javascript/css files and inform the user
say "\nCopying javascript and css files to html directory..";
copy("$HILITE.js","html/$HILITE.js") or die "Could not copy: $OS_ERROR\n";
copy("$JQUERY_JS", "html/$JQUERY_JS") or die "Could not copy: $OS_ERROR\n";
copy("$HILITE.css", "html/$HILITE.css") or die "Could not copy: $OS_ERROR\n";
say "\nThe output is now in the html directory. Thanks for your time ;-)";

