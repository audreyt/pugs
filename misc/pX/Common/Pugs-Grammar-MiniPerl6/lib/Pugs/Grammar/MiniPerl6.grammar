grammar Pugs::Grammar::MiniPerl6;

rule String {
    \" .* \"
}

rule VariableName {
    \S+
}

rule Variable {
    \$\< <VariableName> \> { use v5; return $<VariableName>() }
}

rule Constants {
    <String>
    | \d+
}

rule FunctionName { <VariableName> }

rule Parameters {
    <Expr> <ws>? [ \, <ws>? <Parameters> <ws>? ]*
}

rule FunctionAppExpr {
    <Variable> { use v5; return $<Variable> }
    | <Constants>
    | <FunctionName> <ws>? [ ( <ws>? <Parameters> ) ]?
}

rule AdditiveExpr {
    <FunctionAppExpr> <ws>?
    [ $<op> := (\+ | \- | ~) <ws>?
      $<rhs> := (<AdditiveExpr>) <ws>? ]?
    { use v5;
      if($<op>[0]){
	  return $<FunctionAppExpr>() . " " . $<op>[0] . " " . $<rhs>[0];
      }else{
	  return $<FunctionAppExpr>();
      }
    }
}

rule Expr {
    <AdditiveExpr> { use v5; return $<AdditiveExpr>() }
}

rule Return {
    <'return'> <ws> <Expr> \;?
    { use v5; return "    return \$ " . $<Expr>() }
}

rule ProductionRule {
    <Return>
    { use v5; return $<Return>() }
}
