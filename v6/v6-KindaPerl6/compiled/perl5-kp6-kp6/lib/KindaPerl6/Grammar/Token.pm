{ package KindaPerl6::Grammar; 
# Do not edit this file - Perl 5 generated by HASH(0x1b09380)
# AUTHORS, COPYRIGHT: Please look at the source file.
use v5;
use strict;
no strict "vars";
use constant KP6_DISABLE_INSECURE_CODE => 0;
use KindaPerl6::Runtime::Perl5::Runtime;
my $_MODIFIED; INIT { $_MODIFIED = {} }
INIT { $_ = ::DISPATCH($::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
do {do { if (::DISPATCH(::DISPATCH(::DISPATCH(  ( $GLOBAL::Code_VAR_defined = $GLOBAL::Code_VAR_defined || ::DISPATCH( $::Routine, "new", )  ) 
, 'APPLY', $::KindaPerl6::Grammar )
,"true"),"p5landish") ) { do {} }  else { do {do {::MODIFIED($::KindaPerl6::Grammar);
$::KindaPerl6::Grammar = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'KindaPerl6::Grammar' )
 )
, 'PROTOTYPE',  )
}} } }
;     sub _rule_token_p5_modifier {
    local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; 
    $GLOBAL::_M2 = $GLOBAL::_M; do{ my $_pos = pos(); ( ( /\G\:P5/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\:Perl5/g ) ) } && do { $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; 
    $GLOBAL::_M2 = $GLOBAL::_M }; } 
::DISPATCH(::DISPATCH($::KindaPerl6::Grammar,"HOW"),"add_method", ::DISPATCH( $::Str, "new", "token_p5_modifier" ), ::DISPATCH( $::Method, "new", { code => sub { local $GLOBAL::_Class = shift; undef $GLOBAL::_M2; my ($str,$pos) = @_;$str = defined($str) ? $str : $_;local $_ = ( ref($str) ? DISPATCH.new( $str, "Str" )->{_value} : $str ); pos($_) = (ref $pos) ? ( $pos->{_value} ) : ( 0 + pos($_) );if ( _rule_token_p5_modifier() ) { Match::from_global_data( $GLOBAL::_M2 ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; } else { $MATCH = $GLOBAL::MATCH = Match->new(); } @Match::Matches = (); return $MATCH; } } ), );     sub _rule_token_p5_body {
    local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; 
    $GLOBAL::_M2 = $GLOBAL::_M; do{ my $_pos = pos(); ( ( /\G\\/g && /\G(?:\n\r?|\r\n?|\X)/g && ( _rule_token_p5_body() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "token_p5_body" ] ))  ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( do { local $GLOBAL::_M; my $_pos = pos(); my $_res = do{ my $_pos = pos(); ( ( /\G\}/g ) ) }; ( pos() = $_pos ); !$_res }  && /\G(?:\n\r?|\r\n?|\X)/g && ( _rule_token_p5_body() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "token_p5_body" ] ))  ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G/g ) ) } && do { $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; 
    $GLOBAL::_M2 = $GLOBAL::_M }; } 
::DISPATCH(::DISPATCH($::KindaPerl6::Grammar,"HOW"),"add_method", ::DISPATCH( $::Str, "new", "token_p5_body" ), ::DISPATCH( $::Method, "new", { code => sub { local $GLOBAL::_Class = shift; undef $GLOBAL::_M2; my ($str,$pos) = @_;$str = defined($str) ? $str : $_;local $_ = ( ref($str) ? DISPATCH.new( $str, "Str" )->{_value} : $str ); pos($_) = (ref $pos) ? ( $pos->{_value} ) : ( 0 + pos($_) );if ( _rule_token_p5_body() ) { Match::from_global_data( $GLOBAL::_M2 ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; } else { $MATCH = $GLOBAL::MATCH = Match->new(); } @Match::Matches = (); return $MATCH; } } ), );     sub _rule_token_P5 {
    local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; 
    $GLOBAL::_M2 = $GLOBAL::_M; do{ my $_pos = pos(); ( ( /\Gt/g && /\Go/g && /\Gk/g && /\Ge/g && /\Gn/g && do { local $GLOBAL::_M; _rule_ws() } && ( _rule_opt_name() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "opt_name" ] ))  && do { local $GLOBAL::_M; _rule_opt_ws() } && ( _rule_token_p5_modifier() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "token_p5_modifier" ] ))  && do { local $GLOBAL::_M; _rule_opt_ws() } && /\G\{/g && ( _rule_token_p5_body() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "token_p5_body" ] ))  && /\G\}/g && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH( $::Token, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'name' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'opt_name' )
     )
     )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'regex' )
    , value => ::DISPATCH( $::P5Token, 'new', ::DISPATCH( $::NamedArgument, 'new', { _argument_name_ => ::DISPATCH( $::Str, 'new', 'regex' )
    , value => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'token_p5_body' )
     )
     )
     } )
     )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'sym' )
    , value => $::Undef } )
     )
     )
    };} if ( DISPATCH.new( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", DISPATCH.new( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) } && do { $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; 
    $GLOBAL::_M2 = $GLOBAL::_M }; } 
::DISPATCH(::DISPATCH($::KindaPerl6::Grammar,"HOW"),"add_method", ::DISPATCH( $::Str, "new", "token_P5" ), ::DISPATCH( $::Method, "new", { code => sub { local $GLOBAL::_Class = shift; undef $GLOBAL::_M2; my ($str,$pos) = @_;$str = defined($str) ? $str : $_;local $_ = ( ref($str) ? DISPATCH.new( $str, "Str" )->{_value} : $str ); pos($_) = (ref $pos) ? ( $pos->{_value} ) : ( 0 + pos($_) );if ( _rule_token_P5() ) { Match::from_global_data( $GLOBAL::_M2 ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; } else { $MATCH = $GLOBAL::MATCH = Match->new(); } @Match::Matches = (); return $MATCH; } } ), )}
; 1 }
