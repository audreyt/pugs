
YOU CAN HELP BY...

*** Flesh out the prelude.
Go through S29 etc, adding p6 implementations to one of the preludes.
If it doesn't compile as spec'ed, comment it out so it serves as a todo.
Simply copying names an signatures would be useful.

BIG PICTURE

() Get elf self-compiling on the common-lisp backend.
() Finish and merge the rx_on_re.
() Bootstrap on STD_blue.
() Compiler STD.pm.
() Merge parser.
Milestone - full bootstrap.
() Improve analysis.  Review compiler organization.
() Pass more tests.
() Switch to real p6 oo on backends where that's feasible.
() Move towards full spec conformance.

PROJECTS

() Parser - get STD_blue working.

() Regex - get regex parsing and IR working.
() Regex - translate yet_another_regex_engine analysis and emitting to p6.

() Multimethods - absorb Class::Multimethods inline, and begin mutating it.
() Multimethods - attempt sufficent performance to refactor emit onto them.

() Emitter - refactor to use multimethods, making everything simpler.
   Caveat: requires an acceptably fast multimethod runtime.  At least on p5.

() Emitter - refactor so the emitted code is generated by separate methods,
   like emit_block_start() and emit_block() and emit_call(), rather than
   directly by the IR node handlers.  This is to simplify swapping in other
   backends.

() Prelude - flesh it out.
  - (DONE?) Allow fix:<x> to be defined in Prelude.  Make it work with unicode.
  - Create a 'is p5_macro' to replace the emitter doing it.

() Prelude - flesh out unboxed prelude classes.

() Backends - sketch p6 oo designs for p5, and other backend languages.
() Backends - switch p5 to a true p6 oo model.
() Backends - start several backends, to stay honest and motivate emitter refactoring.

() Analysis - flesh out the IR analysis.

() Parser/FromAST - systematicall increase coverage.
  The parser and compiler were originally written with the intent of getting
  specific things working, rather than having full language coverage.  As the
  focus is now broader, it's time to go through the parser and FromAST and
  make sure all useful parses produce Match trees, and all those trees yield IR.

TEMPORARY IDIOMS - non p6-isms used in elf

This is a reminder list, rather than an immediate todo list.  Many
items cannot or should not be addressed at this stage of the bootstrap.

* .re_gsub
    replace with .subst(rx:g/pattern/)?
* eval_perl5
* file_exists
* faking named parameters with positional
    .new('foo',1) should be turned into .new(foo=>1)
* newp

REQUESTED FEATURES

* The ability to say
    multi sub prefix:<~>($x) { $x.Str }
  in the Prelude, and have it work.


ASSORTED TODO

() Emitter:
  - add a whole-program IR node?

* replace cruft like  $.var.sigil eq '$' in Emit with methods in/added-to Analysis.  eg, is_scalar. (http://irclog.perlgeek.de/perl6/2008-05-24#i_309702)

* my($x,$y)...

* Lists!


QUESTIONS

* kp6/60-inherited-accessors.t  are accessors spec'ed to do $.foo(new-value) ?
