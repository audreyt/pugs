::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Token(
                regex => ::Rule::Or(
                    or => [
                        ::Rule::Concat(
                            concat => [
                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'ctrl_return', ident => '', ),
                                ::Rule::Block(
                                    closure => ::Lit::Code(
                                        body => [
                                            ::Apply(
                                                arguments => [
                                                    ::Apply(
                                                        arguments =>
                                                            [ ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'ctrl_return', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ), ],
                                                        code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                    ),
                                                ],
                                                code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                            ),
                                        ],
                                        sig => ::Sig( invocant => '', positional => [], ),
                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                        CATCH => '',
                                        state => {},
                                    ),
                                ),
                            ],
                        ),
                        ::Rule::Concat(
                            concat => [
                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'ctrl_leave', ident => '', ),
                                ::Rule::Block(
                                    closure => ::Lit::Code(
                                        body => [
                                            ::Apply(
                                                arguments => [
                                                    ::Apply(
                                                        arguments =>
                                                            [ ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'ctrl_leave', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ), ],
                                                        code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                    ),
                                                ],
                                                code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                            ),
                                        ],
                                        sig => ::Sig( invocant => '', positional => [], ),
                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                        CATCH => '',
                                        state => {},
                                    ),
                                ),
                            ],
                        ),
                        ::Rule::Concat(
                            concat => [
                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'if', ident => '', ),
                                ::Rule::Block(
                                    closure => ::Lit::Code(
                                        body => [
                                            ::Apply(
                                                arguments => [
                                                    ::Apply(
                                                        arguments => [ ::Call( hyper  => '', arguments => [ ::Val::Buf( buf => 'if', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ), ],
                                                        code      => ::Var( namespace => [], name      => 'prefix:<$>',     twigil         => '', sigil        => '&', ),
                                                    ),
                                                ],
                                                code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                            ),
                                        ],
                                        sig => ::Sig( invocant => '', positional => [], ),
                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                        CATCH => '',
                                        state => {},
                                    ),
                                ),
                            ],
                        ),
                        ::Rule::Concat(
                            concat => [
                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'unless', ident => '', ),
                                ::Rule::Block(
                                    closure => ::Lit::Code(
                                        body => [
                                            ::Apply(
                                                arguments => [
                                                    ::Apply(
                                                        arguments => [ ::Call( hyper  => '', arguments => [ ::Val::Buf( buf => 'unless', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ), ],
                                                        code      => ::Var( namespace => [], name      => 'prefix:<$>',     twigil             => '', sigil        => '&', ),
                                                    ),
                                                ],
                                                code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                            ),
                                        ],
                                        sig => ::Sig( invocant => '', positional => [], ),
                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                        CATCH => '',
                                        state => {},
                                    ),
                                ),
                            ],
                        ),
                        ::Rule::Concat(
                            concat => [
                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'when', ident => '', ),
                                ::Rule::Block(
                                    closure => ::Lit::Code(
                                        body => [
                                            ::Apply(
                                                arguments => [
                                                    ::Apply(
                                                        arguments => [ ::Call( hyper  => '', arguments => [ ::Val::Buf( buf => 'when', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ), ],
                                                        code      => ::Var( namespace => [], name      => 'prefix:<$>',     twigil           => '', sigil        => '&', ),
                                                    ),
                                                ],
                                                code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                            ),
                                        ],
                                        sig => ::Sig( invocant => '', positional => [], ),
                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                        CATCH => '',
                                        state => {},
                                    ),
                                ),
                            ],
                        ),
                        ::Rule::Concat(
                            concat => [
                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'for', ident => '', ),
                                ::Rule::Block(
                                    closure => ::Lit::Code(
                                        body => [
                                            ::Apply(
                                                arguments => [
                                                    ::Apply(
                                                        arguments => [ ::Call( hyper  => '', arguments => [ ::Val::Buf( buf => 'for', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ), ],
                                                        code      => ::Var( namespace => [], name      => 'prefix:<$>',     twigil          => '', sigil        => '&', ),
                                                    ),
                                                ],
                                                code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                            ),
                                        ],
                                        sig => ::Sig( invocant => '', positional => [], ),
                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                        CATCH => '',
                                        state => {},
                                    ),
                                ),
                            ],
                        ),
                        ::Rule::Concat(
                            concat => [
                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'while', ident => '', ),
                                ::Rule::Block(
                                    closure => ::Lit::Code(
                                        body => [
                                            ::Apply(
                                                arguments => [
                                                    ::Apply(
                                                        arguments => [ ::Call( hyper  => '', arguments => [ ::Val::Buf( buf => 'while', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ), ],
                                                        code      => ::Var( namespace => [], name      => 'prefix:<$>',     twigil            => '', sigil        => '&', ),
                                                    ),
                                                ],
                                                code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                            ),
                                        ],
                                        sig => ::Sig( invocant => '', positional => [], ),
                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                        CATCH => '',
                                        state => {},
                                    ),
                                ),
                            ],
                        ),
                        ::Rule::Concat(
                            concat => [
                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'apply', ident => '', ),
                                ::Rule::Block(
                                    closure => ::Lit::Code(
                                        body => [
                                            ::Apply(
                                                arguments => [
                                                    ::Apply(
                                                        arguments => [ ::Call( hyper  => '', arguments => [ ::Val::Buf( buf => 'apply', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ), ],
                                                        code      => ::Var( namespace => [], name      => 'prefix:<$>',     twigil            => '', sigil        => '&', ),
                                                    ),
                                                ],
                                                code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                            ),
                                        ],
                                        sig => ::Sig( invocant => '', positional => [], ),
                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                        CATCH => '',
                                        state => {},
                                    ),
                                ),
                            ],
                        ),
                    ],
                ),
                sym  => '',
                name => 'control',
            ),
            ::Token(
                regex => ::Rule::Or(
                    or => [
                        ::Rule::Concat(
                            concat => [
                                ::Rule::SpecialChar( char => '{', ),
                                ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                ::Rule::Block(
                                    closure => ::Lit::Code(
                                        body => [ ::Apply( arguments => [], code       => ::Var( namespace => [ 'COMPILER', ], name => 'add_pad', twigil => '', sigil => '&', ), ), ],
                                        sig  => ::Sig( invocant      => '', positional => [], ),
                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                        CATCH => '',
                                        state => {},
                                    ),
                                ),
                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'exp_stmts', ident => '', ),
                                ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                ::Rule::SpecialChar( char => '}', ),
                                ::Rule::Block(
                                    closure => ::Lit::Code(
                                        body => [
                                            ::Bind(
                                                parameters => ::Var( namespace => [], name => 'env', twigil => '', sigil => '$', ),
                                                arguments => ::Apply( arguments => [], code => ::Var( namespace => [ 'COMPILER', ], name => 'current_pad', twigil => '', sigil => '&', ), ),
                                            ),
                                            ::Apply( arguments => [], code => ::Var( namespace => [ 'COMPILER', ], name => 'drop_pad', twigil => '', sigil => '&', ), ),
                                            ::Apply(
                                                arguments => [
                                                    ::Call(
                                                        hyper     => '',
                                                        arguments => [
                                                            ::Lit::NamedArgument( value => ::Var( namespace => [], name => 'env', twigil => '', sigil => '$', ), key => ::Val::Buf( buf => 'pad', ), ),
                                                            ::Lit::NamedArgument(
                                                                value => ::Call( hyper   => '', arguments => [ ::Lit::Hash( hash => [], ), ], method => 'new', invocant => ::Proto( name => 'Hash', ), ),
                                                                key   => ::Val::Buf( buf => 'state', ),
                                                            ),
                                                            ::Lit::NamedArgument(
                                                                value => ::Call(
                                                                    hyper     => '',
                                                                    arguments => [
                                                                        ::Lit::Pair( value => ::Val::Undef(), key => ::Val::Buf( buf => 'invocant', ), ),
                                                                        ::Lit::Pair(
                                                                            value => ::Call( hyper   => '', arguments => [ ::Lit::Array( array => [], ), ], method => 'new', invocant => ::Proto( name => 'Array', ), ),
                                                                            key   => ::Val::Buf( buf => 'positional', ),
                                                                        ),
                                                                    ],
                                                                    method   => 'new',
                                                                    invocant => ::Proto( name => 'Sig', ),
                                                                ),
                                                                key => ::Val::Buf( buf => 'sig', ),
                                                            ),
                                                            ::Lit::NamedArgument(
                                                                value => ::Apply(
                                                                    arguments => [
                                                                        ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'exp_stmts', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ),
                                                                    ],
                                                                    code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                ),
                                                                key => ::Val::Buf( buf => 'body', ),
                                                            ),
                                                        ],
                                                        method   => 'new',
                                                        invocant => ::Proto( name => 'Lit::Code', ),
                                                    ),
                                                ],
                                                code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                            ),
                                        ],
                                        sig => ::Sig( invocant => '', positional => [], ),
                                        pad => ::Pad(
                                            lexicals  => [ ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'env', twigil => '', sigil => '$', ), type => '', ) ],
                                            namespace => "KindaPerl6::Grammar",
                                            parent    => ::Pad(...),
                                            evaluator => ::Sub(...),
                                        ),
                                        CATCH => '',
                                        state => {},
                                    ),
                                ),
                            ],
                        ),
                    ],
                ),
                sym  => '',
                name => 'block1',
            ),
            ::Token(
                regex => ::Rule::Or(
                    or => [
                        ::Rule::Concat(
                            concat => [
                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'block1', ident => '', ),
                                ::Rule::Block(
                                    closure => ::Lit::Code(
                                        body => [
                                            ::Apply(
                                                arguments => [
                                                    ::Apply(
                                                        arguments => [ ::Call( hyper  => '', arguments => [ ::Val::Buf( buf => 'block1', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ), ],
                                                        code      => ::Var( namespace => [], name      => 'prefix:<$>',     twigil             => '', sigil        => '&', ),
                                                    ),
                                                ],
                                                code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                            ),
                                        ],
                                        sig => ::Sig( invocant => '', positional => [], ),
                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                        CATCH => '',
                                        state => {},
                                    ),
                                ),
                            ],
                        ),
                    ],
                ),
                sym  => '',
                name => 'block2',
            ),
            ::Token(
                regex => ::Rule::Or(
                    or => [
                        ::Rule::Concat(
                            concat => [
                                ::Rule::Constant( constant => 'i', ),
                                ::Rule::Constant( constant => 'f', ),
                                ::Rule::SubruleNoCapture( metasyntax => 'ws', ),
                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'exp', ident => '', ),
                                ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'block1', ident => '', ),
                                ::Rule::Or(
                                    or => [
                                        ::Rule::Concat(
                                            concat => [
                                                ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                                ::Rule::Constant( constant => 'e', ),
                                                ::Rule::Constant( constant => 'l', ),
                                                ::Rule::Constant( constant => 's', ),
                                                ::Rule::Constant( constant => 'e', ),
                                                ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'block2', ident => '', ),
                                                ::Rule::Block(
                                                    closure => ::Lit::Code(
                                                        body => [
                                                            ::Apply(
                                                                arguments => [
                                                                    ::Call(
                                                                        hyper     => '',
                                                                        arguments => [
                                                                            ::Lit::Pair(
                                                                                value => ::Apply(
                                                                                    arguments => [
                                                                                        ::Call(
                                                                                            hyper     => '',
                                                                                            arguments => [ ::Val::Buf( buf => 'exp', ), ],
                                                                                            method    => 'LOOKUP',
                                                                                            invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                        ),
                                                                                    ],
                                                                                    code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                                ),
                                                                                key => ::Val::Buf( buf => 'cond', ),
                                                                            ),
                                                                            ::Lit::Pair(
                                                                                value => ::Apply(
                                                                                    arguments => [
                                                                                        ::Call(
                                                                                            hyper     => '',
                                                                                            arguments => [ ::Val::Buf( buf => 'block1', ), ],
                                                                                            method    => 'LOOKUP',
                                                                                            invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                        ),
                                                                                    ],
                                                                                    code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                                ),
                                                                                key => ::Val::Buf( buf => 'body', ),
                                                                            ),
                                                                            ::Lit::Pair(
                                                                                value => ::Apply(
                                                                                    arguments => [
                                                                                        ::Call(
                                                                                            hyper     => '',
                                                                                            arguments => [ ::Val::Buf( buf => 'block2', ), ],
                                                                                            method    => 'LOOKUP',
                                                                                            invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                        ),
                                                                                    ],
                                                                                    code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                                ),
                                                                                key => ::Val::Buf( buf => 'otherwise', ),
                                                                            ),
                                                                        ],
                                                                        method   => 'new',
                                                                        invocant => ::Proto( name => 'If', ),
                                                                    ),
                                                                ],
                                                                code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                                            ),
                                                        ],
                                                        sig => ::Sig( invocant => '', positional => [], ),
                                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                        CATCH => '',
                                                        state => {},
                                                    ),
                                                ),
                                            ],
                                        ),
                                        ::Rule::Concat(
                                            concat => [
                                                ::Rule::Block(
                                                    closure => ::Lit::Code(
                                                        body => [
                                                            ::Apply(
                                                                arguments => [
                                                                    ::Call(
                                                                        hyper     => '',
                                                                        arguments => [
                                                                            ::Lit::Pair(
                                                                                value => ::Apply(
                                                                                    arguments => [
                                                                                        ::Call(
                                                                                            hyper     => '',
                                                                                            arguments => [ ::Val::Buf( buf => 'exp', ), ],
                                                                                            method    => 'LOOKUP',
                                                                                            invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                        ),
                                                                                    ],
                                                                                    code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                                ),
                                                                                key => ::Val::Buf( buf => 'cond', ),
                                                                            ),
                                                                            ::Lit::Pair(
                                                                                value => ::Apply(
                                                                                    arguments => [
                                                                                        ::Call(
                                                                                            hyper     => '',
                                                                                            arguments => [ ::Val::Buf( buf => 'block1', ), ],
                                                                                            method    => 'LOOKUP',
                                                                                            invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                        ),
                                                                                    ],
                                                                                    code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                                ),
                                                                                key => ::Val::Buf( buf => 'body', ),
                                                                            ),
                                                                            ::Lit::Pair( value => ::Val::Undef(), key => ::Val::Buf( buf => 'otherwise', ), ),
                                                                        ],
                                                                        method   => 'new',
                                                                        invocant => ::Proto( name => 'If', ),
                                                                    ),
                                                                ],
                                                                code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                                            ),
                                                        ],
                                                        sig => ::Sig( invocant => '', positional => [], ),
                                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                        CATCH => '',
                                                        state => {},
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ],
                                ),
                            ],
                        ),
                    ],
                ),
                sym  => '',
                name => 'if',
            ),
            ::Token(
                regex => ::Rule::Or(
                    or => [
                        ::Rule::Concat(
                            concat => [
                                ::Rule::Constant( constant => 'u', ),
                                ::Rule::Constant( constant => 'n', ),
                                ::Rule::Constant( constant => 'l', ),
                                ::Rule::Constant( constant => 'e', ),
                                ::Rule::Constant( constant => 's', ),
                                ::Rule::Constant( constant => 's', ),
                                ::Rule::SubruleNoCapture( metasyntax => 'ws', ),
                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'exp', ident => '', ),
                                ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'block1', ident => '', ),
                                ::Rule::Or(
                                    or => [
                                        ::Rule::Concat(
                                            concat => [
                                                ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                                ::Rule::Constant( constant => 'e', ),
                                                ::Rule::Constant( constant => 'l', ),
                                                ::Rule::Constant( constant => 's', ),
                                                ::Rule::Constant( constant => 'e', ),
                                                ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'block2', ident => '', ),
                                                ::Rule::Block(
                                                    closure => ::Lit::Code(
                                                        body => [
                                                            ::Apply(
                                                                arguments => [
                                                                    ::Call(
                                                                        hyper     => '',
                                                                        arguments => [
                                                                            ::Lit::Pair(
                                                                                value => ::Apply(
                                                                                    arguments => [
                                                                                        ::Call(
                                                                                            hyper     => '',
                                                                                            arguments => [ ::Val::Buf( buf => 'exp', ), ],
                                                                                            method    => 'LOOKUP',
                                                                                            invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                        ),
                                                                                    ],
                                                                                    code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                                ),
                                                                                key => ::Val::Buf( buf => 'cond', ),
                                                                            ),
                                                                            ::Lit::Pair(
                                                                                value => ::Apply(
                                                                                    arguments => [
                                                                                        ::Call(
                                                                                            hyper     => '',
                                                                                            arguments => [ ::Val::Buf( buf => 'block2', ), ],
                                                                                            method    => 'LOOKUP',
                                                                                            invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                        ),
                                                                                    ],
                                                                                    code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                                ),
                                                                                key => ::Val::Buf( buf => 'body', ),
                                                                            ),
                                                                            ::Lit::Pair(
                                                                                value => ::Apply(
                                                                                    arguments => [
                                                                                        ::Call(
                                                                                            hyper     => '',
                                                                                            arguments => [ ::Val::Buf( buf => 'block1', ), ],
                                                                                            method    => 'LOOKUP',
                                                                                            invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                        ),
                                                                                    ],
                                                                                    code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                                ),
                                                                                key => ::Val::Buf( buf => 'otherwise', ),
                                                                            ),
                                                                        ],
                                                                        method   => 'new',
                                                                        invocant => ::Proto( name => 'If', ),
                                                                    ),
                                                                ],
                                                                code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                                            ),
                                                        ],
                                                        sig => ::Sig( invocant => '', positional => [], ),
                                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                        CATCH => '',
                                                        state => {},
                                                    ),
                                                ),
                                            ],
                                        ),
                                        ::Rule::Concat(
                                            concat => [
                                                ::Rule::Block(
                                                    closure => ::Lit::Code(
                                                        body => [
                                                            ::Apply(
                                                                arguments => [
                                                                    ::Call(
                                                                        hyper     => '',
                                                                        arguments => [
                                                                            ::Lit::Pair(
                                                                                value => ::Apply(
                                                                                    arguments => [
                                                                                        ::Call(
                                                                                            hyper     => '',
                                                                                            arguments => [ ::Val::Buf( buf => 'exp', ), ],
                                                                                            method    => 'LOOKUP',
                                                                                            invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                        ),
                                                                                    ],
                                                                                    code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                                ),
                                                                                key => ::Val::Buf( buf => 'cond', ),
                                                                            ),
                                                                            ::Lit::Pair( value => ::Val::Undef(), key => ::Val::Buf( buf => 'body', ), ),
                                                                            ::Lit::Pair(
                                                                                value => ::Apply(
                                                                                    arguments => [
                                                                                        ::Call(
                                                                                            hyper     => '',
                                                                                            arguments => [ ::Val::Buf( buf => 'block1', ), ],
                                                                                            method    => 'LOOKUP',
                                                                                            invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                        ),
                                                                                    ],
                                                                                    code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                                ),
                                                                                key => ::Val::Buf( buf => 'otherwise', ),
                                                                            ),
                                                                        ],
                                                                        method   => 'new',
                                                                        invocant => ::Proto( name => 'If', ),
                                                                    ),
                                                                ],
                                                                code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                                            ),
                                                        ],
                                                        sig => ::Sig( invocant => '', positional => [], ),
                                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                        CATCH => '',
                                                        state => {},
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ],
                                ),
                            ],
                        ),
                    ],
                ),
                sym  => '',
                name => 'unless',
            ),
            ::Token(
                regex => ::Rule::Or(
                    or => [
                        ::Rule::Concat(
                            concat => [
                                ::Rule::Constant( constant => 'w', ),
                                ::Rule::Constant( constant => 'h', ),
                                ::Rule::Constant( constant => 'e', ),
                                ::Rule::Constant( constant => 'n', ),
                                ::Rule::SubruleNoCapture( metasyntax => 'ws', ),
                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'exp_seq', ident => '', ),
                                ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'block1', ident => '', ),
                                ::Rule::Block(
                                    closure => ::Lit::Code(
                                        body => [
                                            ::Apply(
                                                arguments => [
                                                    ::Call(
                                                        hyper     => '',
                                                        arguments => [
                                                            ::Lit::Pair(
                                                                value => ::Apply(
                                                                    arguments => [
                                                                        ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'exp_seq', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ),
                                                                    ],
                                                                    code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                ),
                                                                key => ::Val::Buf( buf => 'parameters', ),
                                                            ),
                                                            ::Lit::Pair(
                                                                value => ::Apply(
                                                                    arguments =>
                                                                        [ ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'block1', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ), ],
                                                                    code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                ),
                                                                key => ::Val::Buf( buf => 'body', ),
                                                            ),
                                                        ],
                                                        method   => 'new',
                                                        invocant => ::Proto( name => 'When', ),
                                                    ),
                                                ],
                                                code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                            ),
                                        ],
                                        sig => ::Sig( invocant => '', positional => [], ),
                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                        CATCH => '',
                                        state => {},
                                    ),
                                ),
                            ],
                        ),
                    ],
                ),
                sym  => '',
                name => 'when',
            ),
            ::Token(
                regex => ::Rule::Or(
                    or => [
                        ::Rule::Concat(
                            concat => [
                                ::Rule::Constant( constant => 'f', ),
                                ::Rule::Constant( constant => 'o', ),
                                ::Rule::Constant( constant => 'r', ),
                                ::Rule::SubruleNoCapture( metasyntax => 'ws', ),
                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'exp', ident => '', ),
                                ::Rule::SubruleNoCapture( metasyntax => 'opt_ws', ),
                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'arrow_sub', ident => '', ),
                                ::Rule::Block(
                                    closure => ::Lit::Code(
                                        body => [
                                            ::Apply(
                                                arguments => [
                                                    ::Call(
                                                        hyper     => '',
                                                        arguments => [
                                                            ::Lit::NamedArgument( value => ::Val::Buf( buf => '', ), key => ::Val::Buf( buf => 'hyper', ), ),
                                                            ::Lit::NamedArgument(
                                                                value => ::Call(
                                                                    hyper     => '',
                                                                    arguments => [
                                                                        ::Lit::Array(
                                                                            array => [
                                                                                ::Apply(
                                                                                    arguments => [
                                                                                        ::Call(
                                                                                            hyper     => '',
                                                                                            arguments => [ ::Val::Buf( buf => 'arrow_sub', ), ],
                                                                                            method    => 'LOOKUP',
                                                                                            invocant  => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ),
                                                                                        ),
                                                                                    ],
                                                                                    code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                                ),
                                                                            ],
                                                                        ),
                                                                    ],
                                                                    method   => 'new',
                                                                    invocant => ::Proto( name => 'Array', ),
                                                                ),
                                                                key => ::Val::Buf( buf => 'arguments', ),
                                                            ),
                                                            ::Lit::NamedArgument( value => ::Val::Buf( buf => 'map', ), key => ::Val::Buf( buf => 'method', ), ),
                                                            ::Lit::NamedArgument(
                                                                value => ::Apply(
                                                                    arguments =>
                                                                        [ ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'exp', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ), ],
                                                                    code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                ),
                                                                key => ::Val::Buf( buf => 'invocant', ),
                                                            ),
                                                        ],
                                                        method   => 'new',
                                                        invocant => ::Proto( name => 'Call', ),
                                                    ),
                                                ],
                                                code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                            ),
                                        ],
                                        sig => ::Sig( invocant => '', positional => [], ),
                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                        CATCH => '',
                                        state => {},
                                    ),
                                ),
                            ],
                        ),
                    ],
                ),
                sym  => '',
                name => 'for',
            ),
            ::Token(
                regex => ::Rule::Or(
                    or => [
                        ::Rule::Concat(
                            concat => [
                                ::Rule::Constant( constant => 'w', ),
                                ::Rule::Constant( constant => 'h', ),
                                ::Rule::Constant( constant => 'i', ),
                                ::Rule::Constant( constant => 'l', ),
                                ::Rule::Constant( constant => 'e', ),
                                ::Rule::SubruleNoCapture( metasyntax => 'ws', ),
                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'exp', ident => '', ),
                                ::Rule::SubruleNoCapture( metasyntax => 'ws', ),
                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'block1', ident => '', ),
                                ::Rule::Block(
                                    closure => ::Lit::Code(
                                        body => [
                                            ::Apply(
                                                arguments => [
                                                    ::Call(
                                                        hyper     => '',
                                                        arguments => [
                                                            ::Lit::Pair(
                                                                value => ::Apply(
                                                                    arguments =>
                                                                        [ ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'exp', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ), ],
                                                                    code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                ),
                                                                key => ::Val::Buf( buf => 'cond', ),
                                                            ),
                                                            ::Lit::Pair(
                                                                value => ::Apply(
                                                                    arguments =>
                                                                        [ ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'block1', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ), ],
                                                                    code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                ),
                                                                key => ::Val::Buf( buf => 'body', ),
                                                            ),
                                                        ],
                                                        method   => 'new',
                                                        invocant => ::Proto( name => 'While', ),
                                                    ),
                                                ],
                                                code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                            ),
                                        ],
                                        sig => ::Sig( invocant => '', positional => [], ),
                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                        CATCH => '',
                                        state => {},
                                    ),
                                ),
                            ],
                        ),
                    ],
                ),
                sym  => '',
                name => 'while',
            ),
            ::Token(
                regex => ::Rule::Or(
                    or => [
                        ::Rule::Concat(
                            concat => [
                                ::Rule::Constant( constant => 'l', ),
                                ::Rule::Constant( constant => 'e', ),
                                ::Rule::Constant( constant => 'a', ),
                                ::Rule::Constant( constant => 'v', ),
                                ::Rule::Constant( constant => 'e', ),
                                ::Rule::Block(
                                    closure => ::Lit::Code(
                                        body => [
                                            ::Apply(
                                                arguments => [ ::Call( hyper  => '', arguments => [],     method => 'new', invocant => ::Proto( name => 'Leave', ), ), ],
                                                code      => ::Var( namespace => [], name      => 'make', twigil => '',    sigil    => '&', ),
                                            ),
                                        ],
                                        sig => ::Sig( invocant => '', positional => [], ),
                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                        CATCH => '',
                                        state => {},
                                    ),
                                ),
                            ],
                        ),
                    ],
                ),
                sym  => '',
                name => 'ctrl_leave',
            ),
            ::Token(
                regex => ::Rule::Or(
                    or => [
                        ::Rule::Concat(
                            concat => [
                                ::Rule::Constant( constant => 'r', ),
                                ::Rule::Constant( constant => 'e', ),
                                ::Rule::Constant( constant => 't', ),
                                ::Rule::Constant( constant => 'u', ),
                                ::Rule::Constant( constant => 'r', ),
                                ::Rule::Constant( constant => 'n', ),
                                ::Rule::SubruleNoCapture( metasyntax => 'ws', ),
                                ::Rule::Subrule( capture_to_array => '', metasyntax => 'exp', ident => '', ),
                                ::Rule::Block(
                                    closure => ::Lit::Code(
                                        body => [
                                            ::Apply(
                                                arguments => [
                                                    ::Call(
                                                        hyper     => '',
                                                        arguments => [
                                                            ::Lit::Pair(
                                                                value => ::Apply(
                                                                    arguments =>
                                                                        [ ::Call( hyper => '', arguments => [ ::Val::Buf( buf => 'exp', ), ], method => 'LOOKUP', invocant => ::Var( namespace => [], name => '/', twigil => '', sigil => '$', ), ), ],
                                                                    code => ::Var( namespace => [], name => 'prefix:<$>', twigil => '', sigil => '&', ),
                                                                ),
                                                                key => ::Val::Buf( buf => 'result', ),
                                                            ),
                                                        ],
                                                        method   => 'new',
                                                        invocant => ::Proto( name => 'Return', ),
                                                    ),
                                                ],
                                                code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                            ),
                                        ],
                                        sig => ::Sig( invocant => '', positional => [], ),
                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                        CATCH => '',
                                        state => {},
                                    ),
                                ),
                            ],
                        ),
                        ::Rule::Concat(
                            concat => [
                                ::Rule::Constant( constant => 'r', ),
                                ::Rule::Constant( constant => 'e', ),
                                ::Rule::Constant( constant => 't', ),
                                ::Rule::Constant( constant => 'u', ),
                                ::Rule::Constant( constant => 'r', ),
                                ::Rule::Constant( constant => 'n', ),
                                ::Rule::Block(
                                    closure => ::Lit::Code(
                                        body => [
                                            ::Apply(
                                                arguments => [
                                                    ::Call(
                                                        hyper     => '',
                                                        arguments => [ ::Lit::Pair( value => ::Call( hyper => '', arguments => [], method => 'new', invocant => ::Proto( name => 'Val::Undef', ), ), key => ::Val::Buf( buf => 'result', ), ), ],
                                                        method    => 'new',
                                                        invocant => ::Proto( name => 'Return', ),
                                                    ),
                                                ],
                                                code => ::Var( namespace => [], name => 'make', twigil => '', sigil => '&', ),
                                            ),
                                        ],
                                        sig => ::Sig( invocant => '', positional => [], ),
                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                        CATCH => '',
                                        state => {},
                                    ),
                                ),
                            ],
                        ),
                    ],
                ),
                sym  => '',
                name => 'ctrl_return',
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Grammar", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'KindaPerl6::Grammar',
    attributes => {},
    traits     => [],
    unit_type  => 'grammar',
    )
