{ package KindaPerl6::Grammar; 
# Do not edit this file - Perl 5 generated by HASH(0x1b0f500)
# AUTHORS, COPYRIGHT: Please look at the source file.
use v5;
use strict;
no strict "vars";
use constant KP6_DISABLE_INSECURE_CODE => 0;
use KindaPerl6::Runtime::Perl5::Runtime;
my $_MODIFIED; INIT { $_MODIFIED = {} }
INIT { $_ = ::DISPATCH($::Scalar, "new", { modified => $_MODIFIED, name => "$_" } ); }
do {do { if (::DISPATCH(::DISPATCH(::DISPATCH(  ( $GLOBAL::Code_VAR_defined = $GLOBAL::Code_VAR_defined || ::DISPATCH( $::Routine, "new", )  ) 
, 'APPLY', $::KindaPerl6::Grammar )
,"true"),"p5landish") ) { do {} }  else { do {do {::MODIFIED($::KindaPerl6::Grammar);
$::KindaPerl6::Grammar = ::DISPATCH( ::DISPATCH( $::Class, 'new', ::DISPATCH( $::Str, 'new', 'KindaPerl6::Grammar' )
 )
, 'PROTOTYPE',  )
}} } }
;     sub _rule_infix_op {
    local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; 
    $GLOBAL::_M2 = $GLOBAL::_M; do{ my $_pos = pos(); ( ( /\G\+/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\-/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\*/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\/\//g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\//g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\Ge/g && /\Gq/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\Gn/g && /\Ge/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\=\=/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\!\=/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\&\&/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\|\|/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\~\~/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\~/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\<\=\>/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\<\=/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\>\=/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\</g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\>/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\&/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\^/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\|/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\.\./g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\Gbut/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\Gx/g ) ) } && do { $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; 
    $GLOBAL::_M2 = $GLOBAL::_M }; } 
::DISPATCH(::DISPATCH($::KindaPerl6::Grammar,"HOW"),"add_method", ::DISPATCH( $::Str, "new", "infix_op" ), ::DISPATCH( $::Method, "new", { code => sub { local $GLOBAL::_Class = shift; undef $GLOBAL::_M2; my ($str,$pos) = @_;$str = defined($str) ? $str : $_;local $_ = ( ref($str) ? ::DISPATCH( $str, "Str" )->{_value} : $str ); pos($_) = (ref $pos) ? ( $pos->{_value} ) : ( 0 + pos($_) );if ( _rule_infix_op() ) { Match::from_global_data( $GLOBAL::_M2 ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; } else { $MATCH = $GLOBAL::MATCH = Match->new(); } @Match::Matches = (); return $MATCH; } } ), );     sub _rule_hyper_op {
    local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; 
    $GLOBAL::_M2 = $GLOBAL::_M; do{ my $_pos = pos(); ( ( /\G\>\>/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G/g ) ) } && do { $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; 
    $GLOBAL::_M2 = $GLOBAL::_M }; } 
::DISPATCH(::DISPATCH($::KindaPerl6::Grammar,"HOW"),"add_method", ::DISPATCH( $::Str, "new", "hyper_op" ), ::DISPATCH( $::Method, "new", { code => sub { local $GLOBAL::_Class = shift; undef $GLOBAL::_M2; my ($str,$pos) = @_;$str = defined($str) ? $str : $_;local $_ = ( ref($str) ? ::DISPATCH( $str, "Str" )->{_value} : $str ); pos($_) = (ref $pos) ? ( $pos->{_value} ) : ( 0 + pos($_) );if ( _rule_hyper_op() ) { Match::from_global_data( $GLOBAL::_M2 ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; } else { $MATCH = $GLOBAL::MATCH = Match->new(); } @Match::Matches = (); return $MATCH; } } ), );     sub _rule_prefix_op {
    local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; 
    $GLOBAL::_M2 = $GLOBAL::_M; do{ my $_pos = pos(); ( ( do{ my $_pos = pos(); ( ( /\G\$/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\@/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\%/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\?/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\!/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\+\+/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\-\-/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\+/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\-/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\~/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\|/g ) ) } && do { my $_bak = $GLOBAL::_M; my $_pos = pos();  $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ];  if (do{ my $_pos = pos(); ( ( /\G\$/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\@/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\%/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\(/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\{/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\[/g ) ) }) { $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ];  $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "before" ]; ( pos() = $_pos ); 1 } else { $GLOBAL::_M = $_bak; ( pos() = $_pos );   0  } } ) ) } && do { $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; 
    $GLOBAL::_M2 = $GLOBAL::_M }; } 
::DISPATCH(::DISPATCH($::KindaPerl6::Grammar,"HOW"),"add_method", ::DISPATCH( $::Str, "new", "prefix_op" ), ::DISPATCH( $::Method, "new", { code => sub { local $GLOBAL::_Class = shift; undef $GLOBAL::_M2; my ($str,$pos) = @_;$str = defined($str) ? $str : $_;local $_ = ( ref($str) ? ::DISPATCH( $str, "Str" )->{_value} : $str ); pos($_) = (ref $pos) ? ( $pos->{_value} ) : ( 0 + pos($_) );if ( _rule_prefix_op() ) { Match::from_global_data( $GLOBAL::_M2 ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; } else { $MATCH = $GLOBAL::MATCH = Match->new(); } @Match::Matches = (); return $MATCH; } } ), );     sub _rule_exp2 {
    local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; 
    $GLOBAL::_M2 = $GLOBAL::_M; do{ my $_pos = pos(); ( ( ( _rule_exp() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "exp" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp' )
     )
     )
     )
    };} if ( ::DISPATCH( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", ::DISPATCH( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) } && do { $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; 
    $GLOBAL::_M2 = $GLOBAL::_M }; } 
::DISPATCH(::DISPATCH($::KindaPerl6::Grammar,"HOW"),"add_method", ::DISPATCH( $::Str, "new", "exp2" ), ::DISPATCH( $::Method, "new", { code => sub { local $GLOBAL::_Class = shift; undef $GLOBAL::_M2; my ($str,$pos) = @_;$str = defined($str) ? $str : $_;local $_ = ( ref($str) ? ::DISPATCH( $str, "Str" )->{_value} : $str ); pos($_) = (ref $pos) ? ( $pos->{_value} ) : ( 0 + pos($_) );if ( _rule_exp2() ) { Match::from_global_data( $GLOBAL::_M2 ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; } else { $MATCH = $GLOBAL::MATCH = Match->new(); } @Match::Matches = (); return $MATCH; } } ), );     sub _rule_exp {
    local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; 
    $GLOBAL::_M2 = $GLOBAL::_M; do{ my $_pos = pos(); ( ( ( _rule_term_meth() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "term_meth" ] ))  && do{ my $_pos = pos(); ( ( do { local $GLOBAL::_M; _rule_opt_ws() } && /\G\?\?/g && do{ my $_pos = pos(); ( ( do { local $GLOBAL::_M; _rule_opt_ws() } && ( _rule_exp() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "exp" ] ))  && do { local $GLOBAL::_M; _rule_opt_ws() } && do{ my $_pos = pos(); ( ( /\G\:\:/g && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH(  ( $GLOBAL::Code_die = $GLOBAL::Code_die || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $::Str, 'new', 'maybe you mean ternary:<?? !!>' )
     )
    };} if ( ::DISPATCH( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", ::DISPATCH( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\G\!\!/g ) ) } && do { local $GLOBAL::_M; _rule_opt_ws() } && ( _rule_exp2() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "exp2" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {my $macro_ast; $macro_ast = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$macro_ast' } )  unless defined $macro_ast; INIT { $macro_ast = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$macro_ast' } ) }
    ;
    my $macro; $macro = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$macro' } )  unless defined $macro; INIT { $macro = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$macro' } ) }
    ;
    do {::MODIFIED($macro_ast);
    $macro_ast = ::DISPATCH( $::Var, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'sigil' )
    , value           => ::DISPATCH( $::Str, 'new', '&' )
    ,  } ), ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'twigil' )
    , value           => ::DISPATCH( $::Str, 'new', '' )
    ,  } ), ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'name' )
    , value           => ::DISPATCH( $::Str, 'new', 'ternary:<?? !!>' )
    ,  } ), ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'namespace' )
    , value           => ::DISPATCH( $::Array, 'new', { _array => [] }
     )
    ,  } ),  )
    }; do {::MODIFIED($macro);
    $macro = ::DISPATCH(  ( $COMPILER::Code_get_var = $COMPILER::Code_get_var || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', $macro_ast )
    }; do { if (::DISPATCH(::DISPATCH(::DISPATCH(  ( $GLOBAL::Code_defined = $GLOBAL::Code_defined || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', $macro )
    ,"true"),"p5landish") ) { do {my $sub; $sub = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$sub' } )  unless defined $sub; INIT { $sub = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$sub' } ) }
    ;
    do {::MODIFIED($sub);
    $sub = ::DISPATCH( ::DISPATCH(  ( $COMPILER::Code_current_pad = $COMPILER::Code_current_pad || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY',  )
    , 'eval_ast', $macro_ast )
    }; ::DISPATCH(  ( $Main::Code_expand_macro = $Main::Code_expand_macro || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', $sub, ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'term_meth' )
     )
     )
    , ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp' )
     )
     )
    , ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp2' )
     )
     )
     )
    } }  else { ::DISPATCH($::Bit, "new", 0) } }
    ; ::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH( $::Apply, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'code' )
    , value           => ::DISPATCH( $::Var, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'sigil' )
    , value           => ::DISPATCH( $::Str, 'new', '&' )
    ,  } ), ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'twigil' )
    , value           => ::DISPATCH( $::Str, 'new', '' )
    ,  } ), ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'name' )
    , value           => ::DISPATCH( $::Str, 'new', 'ternary:<?? !!>' )
    ,  } ), ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'namespace' )
    , value           => ::DISPATCH( $::Array, 'new', { _array => [] }
     )
    ,  } ),  )
    ,  } ), ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'arguments' )
    , value           => ::DISPATCH( $::Array, 'new', { _array => [::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'term_meth' )
     )
     )
    , ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp' )
     )
     )
    , ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp2' )
     )
     )
    ] }
     )
    ,  } ),  )
     )
    };} if ( ::DISPATCH( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", ::DISPATCH( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH(  ( $GLOBAL::Code_say = $GLOBAL::Code_say || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $::Str, 'new', '*** Syntax error in ternary operation' )
     )
    };} if ( ::DISPATCH( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", ::DISPATCH( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( do { local $GLOBAL::_M; _rule_opt_ws() } && ( _rule_infix_op() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "infix_op" ] ))  && do { local $GLOBAL::_M; _rule_opt_ws() } && ( _rule_exp() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "exp" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH( $::Apply, 'new', ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'code' )
    , value => ::DISPATCH( $::Var, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'sigil' )
    , value           => ::DISPATCH( $::Str, 'new', '&' )
    ,  } ), ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'twigil' )
    , value           => ::DISPATCH( $::Str, 'new', '' )
    ,  } ), ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'name' )
    , value           => ::DISPATCH(  ( $GLOBAL::Code_infix_58__60__126__62_ = $GLOBAL::Code_infix_58__60__126__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $::Str, 'new', 'infix:<' )
    , ::DISPATCH(  ( $GLOBAL::Code_infix_58__60__126__62_ = $GLOBAL::Code_infix_58__60__126__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'infix_op' )
     )
    , ::DISPATCH( $::Str, 'new', '>' )
     )
     )
    ,  } ), ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'namespace' )
    , value           => ::DISPATCH( $::Array, 'new', { _array => [] }
     )
    ,  } ),  )
     } )
    , ::DISPATCH( $::Pair, 'new', { key => ::DISPATCH( $::Str, 'new', 'arguments' )
    , value => ::DISPATCH( $::Array, 'new', { _array => [::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'term_meth' )
     )
     )
    , ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp' )
     )
     )
    ] }
     )
     } )
     )
     )
    };} if ( ::DISPATCH( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", ::DISPATCH( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( do { local $GLOBAL::_M; _rule_opt_ws() } && /\G\:\:\=/g && do { local $GLOBAL::_M; _rule_opt_ws() } && ( _rule_exp() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "exp" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {my $bind; $bind = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$bind' } )  unless defined $bind; INIT { $bind = ::DISPATCH( $::Scalar, 'new', { modified => $_MODIFIED, name => '$bind' } ) }
    ;
    do {::MODIFIED($bind);
    $bind = ::DISPATCH( $::Bind, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'parameters' )
    , value           => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'term_meth' )
     )
     )
    ,  } ), ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'arguments' )
    , value           => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp' )
     )
     )
    ,  } ),  )
    }; ::DISPATCH(  ( $COMPILER::Code_begin_block = $COMPILER::Code_begin_block || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', $bind )
    ; ::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", $bind )
    };} if ( ::DISPATCH( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", ::DISPATCH( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( do { local $GLOBAL::_M; _rule_opt_ws() } && /\G\:\=/g && do { local $GLOBAL::_M; _rule_opt_ws() } && ( _rule_exp() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "exp" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH( $::Bind, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'parameters' )
    , value           => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'term_meth' )
     )
     )
    ,  } ), ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'arguments' )
    , value           => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp' )
     )
     )
    ,  } ),  )
     )
    };} if ( ::DISPATCH( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", ::DISPATCH( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( do { local $GLOBAL::_M; _rule_opt_ws() } && /\G\=/g && do { local $GLOBAL::_M; _rule_opt_ws() } && ( _rule_exp() && ( $GLOBAL::_M = [ $GLOBAL::_M2, "named_capture", "exp" ] ))  && do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH( $::Assign, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'parameters' )
    , value           => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'term_meth' )
     )
     )
    ,  } ), ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'arguments' )
    , value           => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp' )
     )
     )
    ,  } ),  )
     )
    };} if ( ::DISPATCH( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", ::DISPATCH( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( do { {local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
    Match::from_global_data( $GLOBAL::_M ); 
    $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
    @Match::Matches = (); 
    do {::DISPATCH_VAR( $GLOBAL::_REGEX_RETURN_, "STORE", ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
    , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'term_meth' )
     )
     )
     )
    };} if ( ::DISPATCH( $GLOBAL::Code_defined, "APPLY", $GLOBAL::_REGEX_RETURN_ )->{_value} ) { $GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", ::DISPATCH( $GLOBAL::_REGEX_RETURN_, "FETCH" ) ]; } 1 } ) ) } ) ) } && do { $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; 
    $GLOBAL::_M2 = $GLOBAL::_M }; } 
::DISPATCH(::DISPATCH($::KindaPerl6::Grammar,"HOW"),"add_method", ::DISPATCH( $::Str, "new", "exp" ), ::DISPATCH( $::Method, "new", { code => sub { local $GLOBAL::_Class = shift; undef $GLOBAL::_M2; my ($str,$pos) = @_;$str = defined($str) ? $str : $_;local $_ = ( ref($str) ? ::DISPATCH( $str, "Str" )->{_value} : $str ); pos($_) = (ref $pos) ? ( $pos->{_value} ) : ( 0 + pos($_) );if ( _rule_exp() ) { Match::from_global_data( $GLOBAL::_M2 ); $MATCH = $GLOBAL::MATCH = pop @Match::Matches; } else { $MATCH = $GLOBAL::MATCH = Match->new(); } @Match::Matches = (); return $MATCH; } } ), )}
; 1 }
