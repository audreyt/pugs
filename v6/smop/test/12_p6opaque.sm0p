#include <stdio.h>
#include <smop.h>
#include <smop_s1p.h>
#include <smop_slime.h>
#include <smop_oo.h>

int main() {
  smop_init();

  printf("1..4\n");


  SMOP__Object* interpreter = SMOP_DISPATCH(SMOP__INTPTR__InterpreterInstance, SMOP_RI(SMOP__INTPTR__InterpreterInstance),
                                            SMOP__ID__new, 
                                            SMOP__NATIVE__capture_create(SMOP__INTPTR__InterpreterInstance,
                                                                         SMOP__INTPTR__InterpreterInstance,NULL,NULL));
  SMOP__Object* frame;
  SMOP__Object* how = SMOP__NATIVE__bool_true;
  SMOP__Object* p6opaque = 
    SMOP_DISPATCH(SMOP__INTPTR__InterpreterInstance, SMOP__p6opaque__RI,
                  SMOP__ID__REPR_CREATE, SMOP__NATIVE__capture_create(SMOP__INTPTR__InterpreterInstance,
                                                                      SMOP__INTPTR__InterpreterInstance,NULL,NULL));

  $frame = q:sm0p {
    ;
    $p6opaque.SMOP__ID__new();
  };
  //  SMOP__SLIME__CurrentFrame.move_responder(7,2);
  //  SMOP__SLIME__CurrentFrame.move_capturize(SMOP__SLIME__Capturize.new(9,(),(),1));
  //  SMOP__p6opaque__RI.SMOP__ID__new();
  //};

  if (!frame) printf("not ");
  printf("ok 1 - frame created.\n");

  SMOP_RELEASE(interpreter,p6opaque);
  SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
                SMOP__ID__goto,
                frame);

  printf("ok 2 - goto frame.\n");

  SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
                SMOP__ID__loop, SMOP__NATIVE__capture_create(interpreter,
                                                             SMOP_REFERENCE(interpreter,interpreter),
                                                             NULL, NULL));
  printf("ok 3 - interpreter loop.\n");


  SMOP_RELEASE(SMOP__INTPTR__InterpreterInstance,interpreter);

  printf("ok 4 - Scalar destroyed should free the p6opaque object also.\n");

  smop_destr();
  return 0;
}
