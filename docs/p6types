Classes
==================
Object
    .defined
    .true
    .handled
    .perl
    .fmt
    .print
    .say
    .take
    .new
    .bless
    .clone
    .BUILD
    .BUILDALL
    .CREATE
    .WHAT
    .WHICH
    .WHO
    .WHERE
    .HOW (...)
    .WHEN
    .WHY
    .WHENCE
    fail
    die
    warn
    term:<...>
    term:<!!!>
    term:<???>
    prefix:<?>
    prefix:<!>
    prefix:<?^>
    prefix:<true>
    prefix:<not>
#    prefix:<[X!beforeX=]«> etc.
    infix:<?&>
    infix:<?|>
    infix:<?^>
    infix:<&&>
    infix:<||>
    infix:<^^>
    infix:<and>
    infix:<andthen>
    infix:<or>
    infix:<xor>
    infix:<orelse>
    infix:<?? !!>
    infix:<ff>
    infix:<^ff>
    infix:<ff^>
    infix:<^ff^>
    infix:<fff>
    infix:<^fff>
    infix:<fff^>
    infix:<^fff^>
    infix:<//>
    infix:<&>
    infix:<|>
    infix:<^>
    infix:<but>
    infix:<does>
    infix:<===>
    infix:<eqv>
Junction is Object does Set
    .values
Any is Object does Pattern
    prefix:<+>
    prefix:<~>
    prefix:<|>
    prefix:<\>
    infix:<x>
    infix:<xx>
    infix:«=>»
    infix:«p5=>»
    infix:<,>
    infix:<~~>
Whatever is Any
Failure is Any
Complex is Any
Num is Complex does Order
    infix:<+>
    infix:<->
    infix:<*>
    infix:</>
    infix:<%>
    infix:<div>
    infix:<mod>
    infix:<**>
    infix:«+&»
    infix:«+<»
    infix:«+>»
    infix:<+|>
    infix:<+^>
    infix:<==>
    infix:«<=»
    infix:«>=»
    infix:«<»
    infix:«>»
    infix:«<=>»
    prefix:<->
    prefix:<int>
    prefix:<+^>
    prefix:<^>
Rat is Num
Int is Rat
Bit is Int
Str is Any does Filetest does Order
    .bytes
    .codes
    .graphs
    .chars
    .substr
    .unpack
    .match
    .subst
    .trans
    .eval
    .samebase
    .lc
    .lcfirst
    .uc
    .ucfirst
    .capitalize
    .samecase
    .ord
    .chr
    .normalize
    .nfd
    .nfkd
    .nfc
    .nfkc
    infix:<~>
    infix:<eq>
    infix:<ne>
    infix:<ge>
    infix:<gt>
    infix:<le>
    infix:<lt>
    infix:<leg>
AnyChar is Any does Str
Byte is AnyChar
Codepoint is AnyChar
Grapheme is AnyChar
StrPos is Any does Order
    .bytes
    .codes
    .graphs
    .chars
    infix:<+>
    infix:<->
StrLen is Any does Order
    .bytes
    .codes
    .graphs
    .chars
    prefix:<->
    infix:<+>
    infix:<->
Bool is Any does Order
Exception is Any
Version is Any
List is Any does Positional
Seq is Any does List
Range is Any does List does Num
    .from
    .to
Set is Any does Associative
Bag is Any does Associative
Cat is Any does Str
Pair is Any does Associative
    .key
    .value
Mapping is Set of Pair
Signature is Any does Positional
    .item
    .list
    .void
    .rw
    .arity
    .count
Capture is Any does Positional does Associative
Match is Capture
    .from
    .to
    .pretext
    .chars
    .orig
    .text
Blob is Any
Scalar is Any does Container does Order
Array is Any does Container does Positional does KitchenSink
Hash is Mapping does Container
KeyHash is Hash
KeySet is KeyHash
KeyBag is KeyHash does Bag
Buf is Any does Positional
    .unpack
    prefix:<~^>
    infix:<~&>
    infix:«~<»
    infix:«~>»
    infix:<~|>
    infix:<~^>
IO is Any does Filetest does Each does KitchenSink
    .file
    .close
    .fcntl
    .ioctl
    .name
    .stat
    .getc
    .print
    .say
    .printf
    .fileno
    .flock
    .eof
    .lines
    .seek
    .tell
    .slurp
Socket is IO
    .listen
    .accept
    .send
    .recv
    .shutdown
#    .(get|set)*
Pipe is IO
Statbuf is Any does Filetest
    .file
    .io
Code is Any does Callable
Block is Code
    .labels
    BEGIN
    CHECK
    INIT
    END
    START
    ENTER
    LEAVE
    KEEP
    UNDO
    FIRST
    NEXT
    LAST
    PRE
    POST
    CATCH
    CONTROL
Routine is Block does Container
    .name
    .return
    .wrap
Sub is Routine
Method is Routine
Submethod is Routine
Macro is Routine
Regex is Method
    .match
Subst is Regex
    .subst
Token is Regex
Rule is Regex
Package is Any does Abstraction does Associative
    .CANDO
Module is Package
    .EXPORT
    .EXPORTALL
Class is Module
    prefix:<^>
Role is Module
    prefix:<^>
Enum is Any
Grammar is Class
    .match
Cursor is Any (does Match ?)
    .pos
    ._
    .orig
    .from
    .to
Context is Any does Callable (or is Code ?)
    .context
    .caller
    .leave
    .want
    .inline
    .package
    .file
    .line
    .my
    .hints

Roles
==================
Positional does Each
    (are most of these really in Any?)
    postcircumfix:<[ ]>
    .elems
    .end
    .grep
    .map
    .bytes
    .codes
    .graphs
    .chars
    .any
    .all
    .one
    .none
    .min
    .max
    .minmax
    .reverse
    .push
    .pop
    .shift
    .unshift
    .pack
    .sort
    .keys
    .values
    .pairs
    .kv
    .shape
    infix:<Z>
    infix:<X>
    infix:<minmax>
Associative does Each
    postcircumfix:<{ }>
    .keys
    .values
    .pairs
    .kv
    .contains
    .iterator
Callable
    postcircumfix:<( )>
    .repr
    .assuming
    .arity
    .callwith
    .callsame
    .nextwith
    .nextsame
    .leave
    .fail
    .break
    .next
    .last
    .redo
    .goto
Abstraction
Iterator
    prefix:<=>
    .reset
Filetest
#    .:etc
Order
    .succ
    .pred
    infix:<before>
    infix:<after>
    infix:<cmp>
    prefix:<++>
    prefix:<-->
    postfix:<++>
    postfix:<-->
    infix:<min>
    infix:<max>
    infix:<..>
    infix:<^..>
    infix:<..^>
    infix:<^..^>
Container
    .STORE
    .FETCH
    .TEMP
    infix:<=>
    infix:<:=>
    infix:<::=>
    infix:<=:=>
Pattern
    .ACCEPTS
    .REJECTS
Each does Iterator
    .each
Resumable
KitchenSink
    .clear
    .push
