{

    package Hash;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    use v5;
    use strict;
    no strict "vars";
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    INIT { $_MODIFIED = {} }
    INIT {
        $_ =
          ::DISPATCH( $::Scalar, "new",
            { modified => $_MODIFIED, name => "$_" } );
    }
    do {
        do {
            if (
                ::DISPATCH(
                    ::DISPATCH(
                        ::DISPATCH(
                            $GLOBAL::Code_VAR_defined, 'APPLY', $::Hash
                        ),
                        "true"
                    ),
                    "p5landish"
                )
              )
            {
            }
            else {
                do {
                    do {
                        ::MODIFIED($::Hash);
                        $::Hash = ::DISPATCH(
                            ::DISPATCH(
                                $::Class, 'new',
                                ::DISPATCH( $::Str, 'new', 'Hash' )
                            ),
                            'PROTOTYPE',
                        );
                      }
                  }
            }
        };
        ::DISPATCH(
            ::DISPATCH( $::Hash, 'HOW', ),
            'add_parent',
            ::DISPATCH( $::Container, 'HOW', )
        );
        ::DISPATCH(
            ::DISPATCH( $::Hash, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'perl' ),
            ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {
                        my $s;
                        $s =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$s' } )
                          unless defined $s;
                        INIT {
                            $s =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$s' } );
                        }
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$self' } )
                          unless defined $self;
                        INIT {
                            $self =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$self' } );
                        }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;
                        INIT {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        { my $_param_index = 0; }
                        ::DISPATCH_VAR( $s, 'STORE',
                            ::DISPATCH( $::Str, 'new', '{ ' ) );
                        ::DISPATCH(
                            ::DISPATCH( $self, 'pairs', ),
                            'map',
                            ::DISPATCH(
                                $::Code, 'new',
                                {
                                    code => sub {
                                        my $List__ = ::DISPATCH(
                                            $::ArrayContainer,
                                            'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$List__'
                                            }
                                        );
                                        my $pair;
                                        $pair = ::DISPATCH(
                                            $::Scalar,
                                            'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$pair'
                                            }
                                        ) unless defined $pair;
                                        INIT {
                                            $pair = ::DISPATCH(
                                                $::Scalar,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$pair'
                                                }
                                            );
                                        }
                                        my $CAPTURE;
                                        $CAPTURE = ::DISPATCH(
                                            $::Scalar,
                                            'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$CAPTURE'
                                            }
                                        ) unless defined $CAPTURE;
                                        INIT {
                                            $CAPTURE = ::DISPATCH(
                                                $::Scalar,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$CAPTURE'
                                                }
                                            );
                                        }
                                        ::DISPATCH_VAR( $CAPTURE, "STORE",
                                            ::CAPTURIZE( \@_ ) );
                                        do {
                                            ::MODIFIED($List__);
                                            $List__ =
                                              ::DISPATCH( $CAPTURE, 'array', );
                                        };
                                        do {
                                            ::MODIFIED($Hash__);
                                            $Hash__ =
                                              ::DISPATCH( $CAPTURE, 'hash', );
                                        };
                                        {
                                            my $_param_index = 0;
                                            if (
                                                exists $Hash__->{_value}{_hash}
                                                {'pair'} )
                                            {
                                                do {
                                                    ::MODIFIED($pair);
                                                    $pair = ::DISPATCH(
                                                        $Hash__, 'LOOKUP',
                                                        ::DISPATCH(
                                                            $::Str, 'new',
                                                            'pair'
                                                        )
                                                    );
                                                  }
                                            }
                                            elsif (
                                                exists $List__->{_value}{_array}
                                                [$_param_index] )
                                            {
                                                $pair =
                                                  $List__->{_value}{_array}
                                                  [ $_param_index++ ];
                                            }
                                        }
                                        ::DISPATCH_VAR(
                                            $s, 'STORE',
                                            ::DISPATCH(
                                                $GLOBAL::Code_infix_58__60__126__62_,
                                                'APPLY', $s,
                                                ::DISPATCH(
                                                    $GLOBAL::Code_infix_58__60__126__62_,
                                                    'APPLY',
                                                    ::DISPATCH(
                                                        ::DISPATCH(
                                                            $pair, 'key',
                                                        ),
                                                        'perl',
                                                    ),
                                                    ::DISPATCH(
                                                        $GLOBAL::Code_infix_58__60__126__62_,
                                                        'APPLY',
                                                        ::DISPATCH(
                                                            $::Str, 'new',
                                                            ' => '
                                                        ),
                                                        ::DISPATCH(
                                                            $GLOBAL::Code_infix_58__60__126__62_,
                                                            'APPLY',
                                                            ::DISPATCH(
                                                                ::DISPATCH(
                                                                    $pair,
                                                                    'value',
                                                                ),
                                                                'perl',
                                                            ),
                                                            ::DISPATCH(
                                                                $::Str, 'new',
                                                                ', '
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        );
                                    },
                                    signature => ::DISPATCH(
                                        $::Signature,
                                        "new",
                                        {
                                            invocant => $::Undef,
                                            array    => ::DISPATCH(
                                                $::Array, "new",
                                                {
                                                    _array => [
                                                        ::DISPATCH(
                                                            $::Signature::Item,
                                                            'new',
                                                            {
                                                                sigil  => '$',
                                                                twigil => '',
                                                                name => 'pair',
                                                                value =>
                                                                  $::Undef,
                                                                has_default =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_named_only =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_optional =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_slurpy =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_multidimensional =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_rw =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_copy =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                            }
                                                        ),
                                                    ]
                                                }
                                            ),
                                            return => $::Undef,
                                        }
                                    ),
                                }
                            )
                        );
                        return (
                            ::DISPATCH(
                                $GLOBAL::Code_infix_58__60__126__62_,
                                'APPLY', $s, ::DISPATCH( $::Str, 'new', ' }' )
                            )
                        );
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => bless(
                                {
                                    'namespace' => [],
                                    'name'      => 'self',
                                    'twigil'    => '',
                                    'sigil'     => '$'
                                },
                                'Var'
                            ),
                            array =>
                              ::DISPATCH( $::Array, "new", { _array => [] } ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
        ::DISPATCH(
            ::DISPATCH( $::Hash, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'Str' ),
            ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$self' } )
                          unless defined $self;
                        INIT {
                            $self =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$self' } );
                        }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;
                        INIT {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        { my $_param_index = 0; }
                        ::DISPATCH(
                            ::DISPATCH(
                                ::DISPATCH( $self, 'pairs', ),
                                'map',
                                ::DISPATCH(
                                    $::Code, 'new',
                                    {
                                        code => sub {
                                            my $List__ = ::DISPATCH(
                                                $::ArrayContainer,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$List__'
                                                }
                                            );
                                            my $pair;
                                            $pair = ::DISPATCH(
                                                $::Scalar,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$pair'
                                                }
                                            ) unless defined $pair;
                                            INIT {
                                                $pair = ::DISPATCH(
                                                    $::Scalar,
                                                    'new',
                                                    {
                                                        modified => $_MODIFIED,
                                                        name     => '$pair'
                                                    }
                                                );
                                            }
                                            my $CAPTURE;
                                            $CAPTURE = ::DISPATCH(
                                                $::Scalar,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$CAPTURE'
                                                }
                                            ) unless defined $CAPTURE;
                                            INIT {
                                                $CAPTURE = ::DISPATCH(
                                                    $::Scalar,
                                                    'new',
                                                    {
                                                        modified => $_MODIFIED,
                                                        name     => '$CAPTURE'
                                                    }
                                                );
                                            }
                                            ::DISPATCH_VAR( $CAPTURE, "STORE",
                                                ::CAPTURIZE( \@_ ) );
                                            do {
                                                ::MODIFIED($List__);
                                                $List__ =
                                                  ::DISPATCH( $CAPTURE, 'array',
                                                  );
                                            };
                                            do {
                                                ::MODIFIED($Hash__);
                                                $Hash__ =
                                                  ::DISPATCH( $CAPTURE, 'hash',
                                                  );
                                            };
                                            {
                                                my $_param_index = 0;
                                                if (
                                                    exists $Hash__->{_value}
                                                    {_hash}{'pair'} )
                                                {
                                                    do {
                                                        ::MODIFIED($pair);
                                                        $pair = ::DISPATCH(
                                                            $Hash__,
                                                            'LOOKUP',
                                                            ::DISPATCH(
                                                                $::Str, 'new',
                                                                'pair'
                                                            )
                                                        );
                                                      }
                                                }
                                                elsif (
                                                    exists $List__->{_value}
                                                    {_array}[$_param_index] )
                                                {
                                                    $pair =
                                                      $List__->{_value}{_array}
                                                      [ $_param_index++ ];
                                                }
                                            }
                                            ::DISPATCH(
                                                $GLOBAL::Code_infix_58__60__126__62_,
                                                'APPLY',
                                                ::DISPATCH( $pair, 'key', ),
                                                ::DISPATCH(
                                                    $GLOBAL::Code_infix_58__60__126__62_,
                                                    'APPLY',
                                                    ::DISPATCH(
                                                        $::Str, 'new',
                                                        chr(9)
                                                    ),
                                                    ::DISPATCH( $pair, 'value',
                                                    )
                                                )
                                            );
                                        },
                                        signature => ::DISPATCH(
                                            $::Signature,
                                            "new",
                                            {
                                                invocant => $::Undef,
                                                array    => ::DISPATCH(
                                                    $::Array, "new",
                                                    {
                                                        _array => [
                                                            ::DISPATCH(
                                                                $::Signature::Item,
                                                                'new',
                                                                {
                                                                    sigil =>
                                                                      '$',
                                                                    twigil =>
                                                                      '',
                                                                    name =>
                                                                      'pair',
                                                                    value =>
                                                                      $::Undef,
                                                                    has_default =>
                                                                      ::DISPATCH(
                                                                        $::Bit,
                                                                        'new',
                                                                        0
                                                                      ),
                                                                    is_named_only =>
                                                                      ::DISPATCH(
                                                                        $::Bit,
                                                                        'new',
                                                                        0
                                                                      ),
                                                                    is_optional =>
                                                                      ::DISPATCH(
                                                                        $::Bit,
                                                                        'new',
                                                                        0
                                                                      ),
                                                                    is_slurpy =>
                                                                      ::DISPATCH(
                                                                        $::Bit,
                                                                        'new',
                                                                        0
                                                                      ),
                                                                    is_multidimensional =>
                                                                      ::DISPATCH(
                                                                        $::Bit,
                                                                        'new',
                                                                        0
                                                                      ),
                                                                    is_rw =>
                                                                      ::DISPATCH(
                                                                        $::Bit,
                                                                        'new',
                                                                        0
                                                                      ),
                                                                    is_copy =>
                                                                      ::DISPATCH(
                                                                        $::Bit,
                                                                        'new',
                                                                        0
                                                                      ),
                                                                }
                                                            ),
                                                        ]
                                                    }
                                                ),
                                                return => $::Undef,
                                            }
                                        ),
                                    }
                                )
                            ),
                            'join',
                            ::DISPATCH( $::Str, 'new', chr(10) )
                        );
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => bless(
                                {
                                    'namespace' => [],
                                    'name'      => 'self',
                                    'twigil'    => '',
                                    'sigil'     => '$'
                                },
                                'Var'
                            ),
                            array =>
                              ::DISPATCH( $::Array, "new", { _array => [] } ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
        ::DISPATCH(
            ::DISPATCH( $::Hash, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'keys' ),
            ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {
                        my $pairs;
                        $pairs =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$pairs' } )
                          unless defined $pairs;
                        INIT {
                            $pairs =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$pairs' } );
                        }
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$self' } )
                          unless defined $self;
                        INIT {
                            $self =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$self' } );
                        }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;
                        INIT {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        { my $_param_index = 0; }
                        ::DISPATCH_VAR( $pairs, 'STORE',
                            ::DISPATCH( $self, 'pairs', ) );
                        ::DISPATCH(
                            $pairs, 'map',
                            ::DISPATCH(
                                $::Code, 'new',
                                {
                                    code => sub {
                                        my $List__ = ::DISPATCH(
                                            $::ArrayContainer,
                                            'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$List__'
                                            }
                                        );
                                        my $pair;
                                        $pair = ::DISPATCH(
                                            $::Scalar,
                                            'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$pair'
                                            }
                                        ) unless defined $pair;
                                        INIT {
                                            $pair = ::DISPATCH(
                                                $::Scalar,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$pair'
                                                }
                                            );
                                        }
                                        my $CAPTURE;
                                        $CAPTURE = ::DISPATCH(
                                            $::Scalar,
                                            'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$CAPTURE'
                                            }
                                        ) unless defined $CAPTURE;
                                        INIT {
                                            $CAPTURE = ::DISPATCH(
                                                $::Scalar,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$CAPTURE'
                                                }
                                            );
                                        }
                                        ::DISPATCH_VAR( $CAPTURE, "STORE",
                                            ::CAPTURIZE( \@_ ) );
                                        do {
                                            ::MODIFIED($List__);
                                            $List__ =
                                              ::DISPATCH( $CAPTURE, 'array', );
                                        };
                                        do {
                                            ::MODIFIED($Hash__);
                                            $Hash__ =
                                              ::DISPATCH( $CAPTURE, 'hash', );
                                        };
                                        {
                                            my $_param_index = 0;
                                            if (
                                                exists $Hash__->{_value}{_hash}
                                                {'pair'} )
                                            {
                                                do {
                                                    ::MODIFIED($pair);
                                                    $pair = ::DISPATCH(
                                                        $Hash__, 'LOOKUP',
                                                        ::DISPATCH(
                                                            $::Str, 'new',
                                                            'pair'
                                                        )
                                                    );
                                                  }
                                            }
                                            elsif (
                                                exists $List__->{_value}{_array}
                                                [$_param_index] )
                                            {
                                                $pair =
                                                  $List__->{_value}{_array}
                                                  [ $_param_index++ ];
                                            }
                                        }
                                        ::DISPATCH( $pair, 'key', );
                                    },
                                    signature => ::DISPATCH(
                                        $::Signature,
                                        "new",
                                        {
                                            invocant => $::Undef,
                                            array    => ::DISPATCH(
                                                $::Array, "new",
                                                {
                                                    _array => [
                                                        ::DISPATCH(
                                                            $::Signature::Item,
                                                            'new',
                                                            {
                                                                sigil  => '$',
                                                                twigil => '',
                                                                name => 'pair',
                                                                value =>
                                                                  $::Undef,
                                                                has_default =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_named_only =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_optional =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_slurpy =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_multidimensional =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_rw =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_copy =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                            }
                                                        ),
                                                    ]
                                                }
                                            ),
                                            return => $::Undef,
                                        }
                                    ),
                                }
                            )
                        );
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => bless(
                                {
                                    'namespace' => [],
                                    'name'      => 'self',
                                    'twigil'    => '',
                                    'sigil'     => '$'
                                },
                                'Var'
                            ),
                            array =>
                              ::DISPATCH( $::Array, "new", { _array => [] } ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
        ::DISPATCH(
            ::DISPATCH( $::Hash, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'values' ),
            ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {
                        my $pairs;
                        $pairs =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$pairs' } )
                          unless defined $pairs;
                        INIT {
                            $pairs =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$pairs' } );
                        }
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$self' } )
                          unless defined $self;
                        INIT {
                            $self =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$self' } );
                        }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;
                        INIT {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        { my $_param_index = 0; }
                        ::DISPATCH_VAR( $pairs, 'STORE',
                            ::DISPATCH( $self, 'pairs', ) );
                        ::DISPATCH(
                            $pairs, 'map',
                            ::DISPATCH(
                                $::Code, 'new',
                                {
                                    code => sub {
                                        my $List__ = ::DISPATCH(
                                            $::ArrayContainer,
                                            'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$List__'
                                            }
                                        );
                                        my $pair;
                                        $pair = ::DISPATCH(
                                            $::Scalar,
                                            'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$pair'
                                            }
                                        ) unless defined $pair;
                                        INIT {
                                            $pair = ::DISPATCH(
                                                $::Scalar,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$pair'
                                                }
                                            );
                                        }
                                        my $CAPTURE;
                                        $CAPTURE = ::DISPATCH(
                                            $::Scalar,
                                            'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$CAPTURE'
                                            }
                                        ) unless defined $CAPTURE;
                                        INIT {
                                            $CAPTURE = ::DISPATCH(
                                                $::Scalar,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$CAPTURE'
                                                }
                                            );
                                        }
                                        ::DISPATCH_VAR( $CAPTURE, "STORE",
                                            ::CAPTURIZE( \@_ ) );
                                        do {
                                            ::MODIFIED($List__);
                                            $List__ =
                                              ::DISPATCH( $CAPTURE, 'array', );
                                        };
                                        do {
                                            ::MODIFIED($Hash__);
                                            $Hash__ =
                                              ::DISPATCH( $CAPTURE, 'hash', );
                                        };
                                        {
                                            my $_param_index = 0;
                                            if (
                                                exists $Hash__->{_value}{_hash}
                                                {'pair'} )
                                            {
                                                do {
                                                    ::MODIFIED($pair);
                                                    $pair = ::DISPATCH(
                                                        $Hash__, 'LOOKUP',
                                                        ::DISPATCH(
                                                            $::Str, 'new',
                                                            'pair'
                                                        )
                                                    );
                                                  }
                                            }
                                            elsif (
                                                exists $List__->{_value}{_array}
                                                [$_param_index] )
                                            {
                                                $pair =
                                                  $List__->{_value}{_array}
                                                  [ $_param_index++ ];
                                            }
                                        }
                                        ::DISPATCH( $pair, 'value', );
                                    },
                                    signature => ::DISPATCH(
                                        $::Signature,
                                        "new",
                                        {
                                            invocant => $::Undef,
                                            array    => ::DISPATCH(
                                                $::Array, "new",
                                                {
                                                    _array => [
                                                        ::DISPATCH(
                                                            $::Signature::Item,
                                                            'new',
                                                            {
                                                                sigil  => '$',
                                                                twigil => '',
                                                                name => 'pair',
                                                                value =>
                                                                  $::Undef,
                                                                has_default =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_named_only =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_optional =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_slurpy =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_multidimensional =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_rw =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_copy =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                            }
                                                        ),
                                                    ]
                                                }
                                            ),
                                            return => $::Undef,
                                        }
                                    ),
                                }
                            )
                        );
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => bless(
                                {
                                    'namespace' => [],
                                    'name'      => 'self',
                                    'twigil'    => '',
                                    'sigil'     => '$'
                                },
                                'Var'
                            ),
                            array =>
                              ::DISPATCH( $::Array, "new", { _array => [] } ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
        ::DISPATCH(
            ::DISPATCH( $::Hash, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'true' ),
            ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$self' } )
                          unless defined $self;
                        INIT {
                            $self =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$self' } );
                        }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;
                        INIT {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        { my $_param_index = 0; }
                        ::DISPATCH(
                            $GLOBAL::Code_infix_58__60__33__61__62_,
                            'APPLY',
                            ::DISPATCH( $self, 'elems', ),
                            ::DISPATCH( $::Int, 'new', 0 )
                        );
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => bless(
                                {
                                    'namespace' => [],
                                    'name'      => 'self',
                                    'twigil'    => '',
                                    'sigil'     => '$'
                                },
                                'Var'
                            ),
                            array =>
                              ::DISPATCH( $::Array, "new", { _array => [] } ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
        ::DISPATCH(
            ::DISPATCH( $::Hash, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'Int' ),
            ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$self' } )
                          unless defined $self;
                        INIT {
                            $self =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$self' } );
                        }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;
                        INIT {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        { my $_param_index = 0; }
                        ::DISPATCH( $self, 'elems', );
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => bless(
                                {
                                    'namespace' => [],
                                    'name'      => 'self',
                                    'twigil'    => '',
                                    'sigil'     => '$'
                                },
                                'Var'
                            ),
                            array =>
                              ::DISPATCH( $::Array, "new", { _array => [] } ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
        ::DISPATCH(
            ::DISPATCH( $::Hash, 'HOW', ),
            'add_method',
            ::DISPATCH( $::Str, 'new', 'hash' ),
            ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $self;
                        $self =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$self' } )
                          unless defined $self;
                        INIT {
                            $self =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$self' } );
                        }
                        $self = shift;
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;
                        INIT {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        do {
                            ::MODIFIED($List__);
                            $List__ = ::DISPATCH( $CAPTURE, 'array', );
                        };
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        { my $_param_index = 0; }
                        $self;
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => bless(
                                {
                                    'namespace' => [],
                                    'name'      => 'self',
                                    'twigil'    => '',
                                    'sigil'     => '$'
                                },
                                'Var'
                            ),
                            array =>
                              ::DISPATCH( $::Array, "new", { _array => [] } ),
                            return => $::Undef,
                        }
                    ),
                }
            )
        );
    };
    1
}
