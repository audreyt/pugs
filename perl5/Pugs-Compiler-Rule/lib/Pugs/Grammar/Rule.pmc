# !!! DO NOT EDIT !!!
# This file was generated by util/gen-rule-pmc.pl at 1183568407

package Pugs::Grammar::Rule;
use utf8;
no strict 'refs';
use Pugs::Runtime::Match;
use Pugs::Runtime::Regex;

our %rule_terms;
our %variables;
*pod_begin = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
           ( $pad{I2182} = $pos or 1 ) 
           && (
           (
              (   ( $pad{I2183} = $pos or 1 ) && 
               ( ( substr( $s, $pos ) =~ m/^((?:\n\r?|\r\n?))/ )  
                   ? ( $pos += length( $1 ) or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I2183} ) && 0 ) )
           &&
             ( ( substr( $s, $pos, 1 ) eq '=' ) 
                 ? ( $pos += 1 or 1 )
                 : 0
             )
           &&
             ( ( substr( $s, $pos, 1 ) eq 'e' ) 
                 ? ( $pos += 1 or 1 )
                 : 0
             )
           &&
             ( ( substr( $s, $pos, 1 ) eq 'n' ) 
                 ? ( $pos += 1 or 1 )
                 : 0
             )
           &&
              (   ( $pad{I2184} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 1 ) eq 'd' ) 
                   ? ( $pos += 1 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I2184} ) && 0 ) )
           &&
             do { while (
              (   ( $pad{I2185} = $pos or 1 ) && 
                 ( ( substr( $s, $pos ) =~ m/^((?!\n\r?|\r\n?).)/ )  
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I2185} ) && 0 ) )) {}; $bool = 1 }
           )
           ) 
         || ( 
           ( ( $bool = 1 ) && ( $pos = $pad{I2182} ) or 1 ) 
           &&            (
              (   ( $pad{I2186} = $pos or 1 ) && 
               ( substr( $s, $pos++, 1 ) ne '' ) ||    ( ( $pos = $pad{I2186} ) && 0 ) )
           &&
             do { while (
              (   ( $pad{I2187} = $pos or 1 ) && 
                 ( ( substr( $s, $pos ) =~ m/^((?!\n\r?|\r\n?).)/ )  
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I2187} ) && 0 ) )) {}; $bool = 1 }
           &&
              (   ( $pad{I2188} = $pos or 1 ) && 
               do { 
                    my $prior = $::_V6_PRIOR_; 
                    my $match = 
                           $grammar->pod_begin( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior; 
                    my $bool = (!$match != 1);
                    $pos = $match->to if $bool;
                    $match;
               } ||    ( ( $pos = $pad{I2188} ) && 0 ) )
           )
         )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for pod_begin
 # Data::Bind->sub_signature
#  (\&pod_begin, );
;
*pod_other = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
           ( $pad{I2189} = $pos or 1 ) 
           && (
           (
              (   ( $pad{I2190} = $pos or 1 ) && 
               ( ( substr( $s, $pos ) =~ m/^((?:\n\r?|\r\n?))/ )  
                   ? ( $pos += length( $1 ) or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I2190} ) && 0 ) )
           &&
             ( ( substr( $s, $pos, 1 ) eq '=' ) 
                 ? ( $pos += 1 or 1 )
                 : 0
             )
           &&
             ( ( substr( $s, $pos, 1 ) eq 'c' ) 
                 ? ( $pos += 1 or 1 )
                 : 0
             )
           &&
             ( ( substr( $s, $pos, 1 ) eq 'u' ) 
                 ? ( $pos += 1 or 1 )
                 : 0
             )
           &&
              (   ( $pad{I2191} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 1 ) eq 't' ) 
                   ? ( $pos += 1 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I2191} ) && 0 ) )
           &&
             do { while (
              (   ( $pad{I2192} = $pos or 1 ) && 
                 ( ( substr( $s, $pos ) =~ m/^((?!\n\r?|\r\n?).)/ )  
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I2192} ) && 0 ) )) {}; $bool = 1 }
           )
           ) 
         || ( 
           ( ( $bool = 1 ) && ( $pos = $pad{I2189} ) or 1 ) 
           &&            (
              (   ( $pad{I2193} = $pos or 1 ) && 
               ( substr( $s, $pos++, 1 ) ne '' ) ||    ( ( $pos = $pad{I2193} ) && 0 ) )
           &&
             do { while (
              (   ( $pad{I2194} = $pos or 1 ) && 
                 ( ( substr( $s, $pos ) =~ m/^((?!\n\r?|\r\n?).)/ )  
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I2194} ) && 0 ) )) {}; $bool = 1 }
           &&
              (   ( $pad{I2195} = $pos or 1 ) && 
               do { 
                    my $prior = $::_V6_PRIOR_; 
                    my $match = 
                           $grammar->pod_other( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior; 
                    my $bool = (!$match != 1);
                    $pos = $match->to if $bool;
                    $match;
               } ||    ( ( $pos = $pad{I2195} ) && 0 ) )
           )
         )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for pod_other
 # Data::Bind->sub_signature
#  (\&pod_other, );
;
*ws = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
        (   ( $pad{I2196} = $pos or 1 ) && 
           (
               ( $pad{I2197} = $pos or 1 ) 
               && (
               (
                  (   ( $pad{I2198} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '#' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2198} ) && 0 ) )
               &&
                 do { while (
                  (   ( $pad{I2199} = $pos or 1 ) && 
                     ( ( substr( $s, $pos ) =~ m/^((?!\n\r?|\r\n?).)/ )  
                         ? ( $pos += length( $1 ) or 1 )
                         : 0
                     ) ||    ( ( $pos = $pad{I2199} ) && 0 ) )) {}; $bool = 1 }
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2197} ) or 1 ) 
               &&                (
                  (   ( $pad{I2200} = $pos or 1 ) && 
                   ( ( substr( $s, $pos ) =~ m/^((?:\n\r?|\r\n?))/ )  
                       ? ( $pos += length( $1 ) or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2200} ) && 0 ) )
               &&
                 (
                  (   ( $pad{I2201} = $pos or 1 ) && 
                     (
                        (   ( $pad{I2202} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq '=' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I2202} ) && 0 ) )
                     &&
                       (
                        (   ( $pad{I2203} = $pos or 1 ) && 
                           (
                               ( $pad{I2204} = $pos or 1 ) 
                               && (
                               (
                                  (   ( $pad{I2205} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'b' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I2205} ) && 0 ) )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'e' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'g' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'i' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                  (   ( $pad{I2206} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'n' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I2206} ) && 0 ) )
                               &&
                                  (   ( $pad{I2207} = $pos or 1 ) && 
                                   do { 
                                        my $prior = $::_V6_PRIOR_; 
                                        my $match = 
                                               $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior; 
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   } ||    ( ( $pos = $pad{I2207} ) && 0 ) )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'E' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'N' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                  (   ( $pad{I2208} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'D' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I2208} ) && 0 ) )
                               &&
                                 do { while (
                                  (   ( $pad{I2209} = $pos or 1 ) && 
                                     ( ( substr( $s, $pos ) =~ m/^((?!\n\r?|\r\n?).)/ )  
                                         ? ( $pos += length( $1 ) or 1 )
                                         : 0
                                     ) ||    ( ( $pos = $pad{I2209} ) && 0 ) )) {}; $bool = 1 }
                               &&
                                 do { while (
                                  (   ( $pad{I2210} = $pos or 1 ) && 
                                     ( substr( $s, $pos++, 1 ) ne '' ) ||    ( ( $pos = $pad{I2210} ) && 0 ) )) {}; $bool = 1 }
                               )
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I2204} ) or 1 ) 
                               &&                                (
                                  (   ( $pad{I2211} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'b' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I2211} ) && 0 ) )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'e' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'g' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'i' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                  (   ( $pad{I2212} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'n' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I2212} ) && 0 ) )
                               &&
                                  (   ( $pad{I2213} = $pos or 1 ) && 
                                   do { 
                                        my $prior = $::_V6_PRIOR_; 
                                        my $match = 
                                               $grammar->pod_begin( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior; 
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   } ||    ( ( $pos = $pad{I2213} ) && 0 ) )
                               )
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I2204} ) or 1 ) 
                               &&                                (
                                  (   ( $pad{I2214} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'k' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I2214} ) && 0 ) )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'w' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'i' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                  (   ( $pad{I2215} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'd' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I2215} ) && 0 ) )
                               &&
                                  (   ( $pad{I2216} = $pos or 1 ) && 
                                   do { 
                                        my $prior = $::_V6_PRIOR_; 
                                        my $match = 
                                               $grammar->pod_other( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior; 
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   } ||    ( ( $pos = $pad{I2216} ) && 0 ) )
                               )
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I2204} ) or 1 ) 
                               &&                                (
                                  (   ( $pad{I2217} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'p' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I2217} ) && 0 ) )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'o' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                  (   ( $pad{I2218} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'd' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I2218} ) && 0 ) )
                               &&
                                  (   ( $pad{I2219} = $pos or 1 ) && 
                                   do { 
                                        my $prior = $::_V6_PRIOR_; 
                                        my $match = 
                                               $grammar->pod_other( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior; 
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   } ||    ( ( $pos = $pad{I2219} ) && 0 ) )
                               )
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I2204} ) or 1 ) 
                               &&                                (
                                  (   ( $pad{I2220} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'f' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I2220} ) && 0 ) )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'o' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                  (   ( $pad{I2221} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'r' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I2221} ) && 0 ) )
                               &&
                                  (   ( $pad{I2222} = $pos or 1 ) && 
                                   do { 
                                        my $prior = $::_V6_PRIOR_; 
                                        my $match = 
                                               $grammar->pod_other( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior; 
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   } ||    ( ( $pos = $pad{I2222} ) && 0 ) )
                               )
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I2204} ) or 1 ) 
                               &&                                (
                                  (   ( $pad{I2223} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'h' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I2223} ) && 0 ) )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'e' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'a' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'd' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                  (   ( $pad{I2224} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq '1' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I2224} ) && 0 ) )
                               &&
                                  (   ( $pad{I2225} = $pos or 1 ) && 
                                   do { 
                                        my $prior = $::_V6_PRIOR_; 
                                        my $match = 
                                               $grammar->pod_other( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior; 
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   } ||    ( ( $pos = $pad{I2225} ) && 0 ) )
                               )
                             )
                           ) ||    ( ( $pos = $pad{I2203} ) && 0 ) )
                       || ( $bool = 1 )
                       ) 
                     ) ||    ( ( $pos = $pad{I2201} ) && 0 ) )
                 || ( $bool = 1 )
                 ) 
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2197} ) or 1 ) 
               &&                 (   ( $pad{I2226} = $pos or 1 ) && 
                 ( ( substr( $s, $pos ) =~ m/^(\s)/ )  
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I2226} ) && 0 ) )
             )
           ) ||    ( ( $pos = $pad{I2196} ) && 0 ) )
       && do { while (
        (   ( $pad{I2196} = $pos or 1 ) && 
           (
               ( $pad{I2197} = $pos or 1 ) 
               && (
               (
                  (   ( $pad{I2198} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '#' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2198} ) && 0 ) )
               &&
                 do { while (
                  (   ( $pad{I2199} = $pos or 1 ) && 
                     ( ( substr( $s, $pos ) =~ m/^((?!\n\r?|\r\n?).)/ )  
                         ? ( $pos += length( $1 ) or 1 )
                         : 0
                     ) ||    ( ( $pos = $pad{I2199} ) && 0 ) )) {}; $bool = 1 }
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2197} ) or 1 ) 
               &&                (
                  (   ( $pad{I2200} = $pos or 1 ) && 
                   ( ( substr( $s, $pos ) =~ m/^((?:\n\r?|\r\n?))/ )  
                       ? ( $pos += length( $1 ) or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2200} ) && 0 ) )
               &&
                 (
                  (   ( $pad{I2201} = $pos or 1 ) && 
                     (
                        (   ( $pad{I2202} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq '=' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I2202} ) && 0 ) )
                     &&
                       (
                        (   ( $pad{I2203} = $pos or 1 ) && 
                           (
                               ( $pad{I2204} = $pos or 1 ) 
                               && (
                               (
                                  (   ( $pad{I2205} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'b' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I2205} ) && 0 ) )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'e' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'g' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'i' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                  (   ( $pad{I2206} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'n' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I2206} ) && 0 ) )
                               &&
                                  (   ( $pad{I2207} = $pos or 1 ) && 
                                   do { 
                                        my $prior = $::_V6_PRIOR_; 
                                        my $match = 
                                               $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior; 
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   } ||    ( ( $pos = $pad{I2207} ) && 0 ) )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'E' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'N' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                  (   ( $pad{I2208} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'D' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I2208} ) && 0 ) )
                               &&
                                 do { while (
                                  (   ( $pad{I2209} = $pos or 1 ) && 
                                     ( ( substr( $s, $pos ) =~ m/^((?!\n\r?|\r\n?).)/ )  
                                         ? ( $pos += length( $1 ) or 1 )
                                         : 0
                                     ) ||    ( ( $pos = $pad{I2209} ) && 0 ) )) {}; $bool = 1 }
                               &&
                                 do { while (
                                  (   ( $pad{I2210} = $pos or 1 ) && 
                                     ( substr( $s, $pos++, 1 ) ne '' ) ||    ( ( $pos = $pad{I2210} ) && 0 ) )) {}; $bool = 1 }
                               )
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I2204} ) or 1 ) 
                               &&                                (
                                  (   ( $pad{I2211} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'b' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I2211} ) && 0 ) )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'e' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'g' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'i' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                  (   ( $pad{I2212} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'n' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I2212} ) && 0 ) )
                               &&
                                  (   ( $pad{I2213} = $pos or 1 ) && 
                                   do { 
                                        my $prior = $::_V6_PRIOR_; 
                                        my $match = 
                                               $grammar->pod_begin( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior; 
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   } ||    ( ( $pos = $pad{I2213} ) && 0 ) )
                               )
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I2204} ) or 1 ) 
                               &&                                (
                                  (   ( $pad{I2214} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'k' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I2214} ) && 0 ) )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'w' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'i' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                  (   ( $pad{I2215} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'd' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I2215} ) && 0 ) )
                               &&
                                  (   ( $pad{I2216} = $pos or 1 ) && 
                                   do { 
                                        my $prior = $::_V6_PRIOR_; 
                                        my $match = 
                                               $grammar->pod_other( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior; 
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   } ||    ( ( $pos = $pad{I2216} ) && 0 ) )
                               )
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I2204} ) or 1 ) 
                               &&                                (
                                  (   ( $pad{I2217} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'p' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I2217} ) && 0 ) )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'o' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                  (   ( $pad{I2218} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'd' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I2218} ) && 0 ) )
                               &&
                                  (   ( $pad{I2219} = $pos or 1 ) && 
                                   do { 
                                        my $prior = $::_V6_PRIOR_; 
                                        my $match = 
                                               $grammar->pod_other( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior; 
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   } ||    ( ( $pos = $pad{I2219} ) && 0 ) )
                               )
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I2204} ) or 1 ) 
                               &&                                (
                                  (   ( $pad{I2220} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'f' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I2220} ) && 0 ) )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'o' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                  (   ( $pad{I2221} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'r' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I2221} ) && 0 ) )
                               &&
                                  (   ( $pad{I2222} = $pos or 1 ) && 
                                   do { 
                                        my $prior = $::_V6_PRIOR_; 
                                        my $match = 
                                               $grammar->pod_other( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior; 
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   } ||    ( ( $pos = $pad{I2222} ) && 0 ) )
                               )
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I2204} ) or 1 ) 
                               &&                                (
                                  (   ( $pad{I2223} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq 'h' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I2223} ) && 0 ) )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'e' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'a' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                 ( ( substr( $s, $pos, 1 ) eq 'd' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                               &&
                                  (   ( $pad{I2224} = $pos or 1 ) && 
                                   ( ( substr( $s, $pos, 1 ) eq '1' ) 
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   ) ||    ( ( $pos = $pad{I2224} ) && 0 ) )
                               &&
                                  (   ( $pad{I2225} = $pos or 1 ) && 
                                   do { 
                                        my $prior = $::_V6_PRIOR_; 
                                        my $match = 
                                               $grammar->pod_other( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior; 
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   } ||    ( ( $pos = $pad{I2225} ) && 0 ) )
                               )
                             )
                           ) ||    ( ( $pos = $pad{I2203} ) && 0 ) )
                       || ( $bool = 1 )
                       ) 
                     ) ||    ( ( $pos = $pad{I2201} ) && 0 ) )
                 || ( $bool = 1 )
                 ) 
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2197} ) or 1 ) 
               &&                 (   ( $pad{I2226} = $pos or 1 ) && 
                 ( ( substr( $s, $pos ) =~ m/^(\s)/ )  
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I2226} ) && 0 ) )
             )
           ) ||    ( ( $pos = $pad{I2196} ) && 0 ) )) {}; $bool = 1 }
       ) ;
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for ws
 # Data::Bind->sub_signature
#  (\&ws, );
;
*ident = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
        (   ( $pad{I2227} = $pos or 1 ) && 
           (
               ( $pad{I2228} = $pos or 1 ) 
               && (
                (   ( $pad{I2229} = $pos or 1 ) && 
                 do { 
                      my $prior = $::_V6_PRIOR_; 
                      my $match = 
                             $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                      $::_V6_PRIOR_ = $prior; 
                      my $bool = (!$match != 1);
                      $pos = $match->to if $bool;
                      $match;
                 } ||    ( ( $pos = $pad{I2229} ) && 0 ) )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2228} ) or 1 ) 
               &&                 (   ( $pad{I2230} = $pos or 1 ) && 
                 ( ( substr( $s, $pos, 1 ) eq '_' ) 
                     ? ( $pos += 1 or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I2230} ) && 0 ) )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2228} ) or 1 ) 
               &&                 (   ( $pad{I2231} = $pos or 1 ) && 
                 ( ( substr( $s, $pos, 2 ) eq '::' ) 
                     ? ( $pos += 2 or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I2231} ) && 0 ) )
             )
           ) ||    ( ( $pos = $pad{I2227} ) && 0 ) )
       && do { while (
        (   ( $pad{I2227} = $pos or 1 ) && 
           (
               ( $pad{I2228} = $pos or 1 ) 
               && (
                (   ( $pad{I2229} = $pos or 1 ) && 
                 do { 
                      my $prior = $::_V6_PRIOR_; 
                      my $match = 
                             $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                      $::_V6_PRIOR_ = $prior; 
                      my $bool = (!$match != 1);
                      $pos = $match->to if $bool;
                      $match;
                 } ||    ( ( $pos = $pad{I2229} ) && 0 ) )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2228} ) or 1 ) 
               &&                 (   ( $pad{I2230} = $pos or 1 ) && 
                 ( ( substr( $s, $pos, 1 ) eq '_' ) 
                     ? ( $pos += 1 or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I2230} ) && 0 ) )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2228} ) or 1 ) 
               &&                 (   ( $pad{I2231} = $pos or 1 ) && 
                 ( ( substr( $s, $pos, 2 ) eq '::' ) 
                     ? ( $pos += 2 or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I2231} ) && 0 ) )
             )
           ) ||    ( ( $pos = $pad{I2227} ) && 0 ) )) {}; $bool = 1 }
       ) ;
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for ident
 # Data::Bind->sub_signature
#  (\&ident, );
;
*special_char = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
           ( $pad{I2232} = $pos or 1 ) 
           && (
           (
              (   ( $pad{I2233} = $pos or 1 ) && 
               do{ 
                   my $hash = do {
                     my $bool = 1;
                     my $from = $pos;
                     my @match;
                     my %named;
                     $bool = 0 unless
                       (
                           ( $pad{I2234} = $pos or 1 ) 
                           && (
                            (   ( $pad{I2235} = $pos or 1 ) && 
                             ( ( substr( $s, $pos, 1 ) eq 'c' ) 
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             ) ||    ( ( $pos = $pad{I2235} ) && 0 ) )
                           ) 
                         || ( 
                           ( ( $bool = 1 ) && ( $pos = $pad{I2234} ) or 1 ) 
                           &&                             (   ( $pad{I2236} = $pos or 1 ) && 
                             ( ( substr( $s, $pos, 1 ) eq 'C' ) 
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             ) ||    ( ( $pos = $pad{I2236} ) && 0 ) )
                         )
                       );
                     { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                   };
                   my $bool = ${$hash->{'bool'}};
                   $match[ 0 ] = Pugs::Runtime::Match->new( $hash );
                   $bool;
               } ||    ( ( $pos = $pad{I2233} ) && 0 ) )
           &&
              (   ( $pad{I2237} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 1 ) eq '[' ) 
                   ? ( $pos += 1 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I2237} ) && 0 ) )
           &&
              (   ( $pad{I2238} = $pos or 1 ) && 
               do{ 
                   my $hash = do {
                     my $bool = 1;
                     my $from = $pos;
                     my @match;
                     my %named;
                     $bool = 0 unless
                       (
                        (   ( $pad{I2239} = $pos or 1 ) && 
                           (
                               ( $pad{I2240} = $pos or 1 ) 
                               && (
                               do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                                           $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'alnum'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            }
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I2240} ) or 1 ) 
                               &&                                ( ( substr( $s, $pos ) =~ m/^(\s)/ )  
                                   ? ( $pos += length( $1 ) or 1 )
                                   : 0
                               )
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I2240} ) or 1 ) 
                               &&                                 (   ( $pad{I2241} = $pos or 1 ) && 
                                 ( ( substr( $s, $pos, 1 ) eq ';' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 ) ||    ( ( $pos = $pad{I2241} ) && 0 ) )
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I2240} ) or 1 ) 
                               &&                                 (   ( $pad{I2242} = $pos or 1 ) && 
                                 ( ( substr( $s, $pos, 1 ) eq '(' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 ) ||    ( ( $pos = $pad{I2242} ) && 0 ) )
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I2240} ) or 1 ) 
                               &&                                 (   ( $pad{I2243} = $pos or 1 ) && 
                                 ( ( substr( $s, $pos, 1 ) eq ')' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 ) ||    ( ( $pos = $pad{I2243} ) && 0 ) )
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I2240} ) or 1 ) 
                               &&                                 (   ( $pad{I2244} = $pos or 1 ) && 
                                 ( ( substr( $s, $pos, 1 ) eq '-' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 ) ||    ( ( $pos = $pad{I2244} ) && 0 ) )
                             )
                           ) ||    ( ( $pos = $pad{I2239} ) && 0 ) )
                       && do { while (
                        (   ( $pad{I2239} = $pos or 1 ) && 
                           (
                               ( $pad{I2240} = $pos or 1 ) 
                               && (
                               do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                                           $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'alnum'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            }
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I2240} ) or 1 ) 
                               &&                                ( ( substr( $s, $pos ) =~ m/^(\s)/ )  
                                   ? ( $pos += length( $1 ) or 1 )
                                   : 0
                               )
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I2240} ) or 1 ) 
                               &&                                 (   ( $pad{I2241} = $pos or 1 ) && 
                                 ( ( substr( $s, $pos, 1 ) eq ';' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 ) ||    ( ( $pos = $pad{I2241} ) && 0 ) )
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I2240} ) or 1 ) 
                               &&                                 (   ( $pad{I2242} = $pos or 1 ) && 
                                 ( ( substr( $s, $pos, 1 ) eq '(' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 ) ||    ( ( $pos = $pad{I2242} ) && 0 ) )
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I2240} ) or 1 ) 
                               &&                                 (   ( $pad{I2243} = $pos or 1 ) && 
                                 ( ( substr( $s, $pos, 1 ) eq ')' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 ) ||    ( ( $pos = $pad{I2243} ) && 0 ) )
                               ) 
                             || ( 
                               ( ( $bool = 1 ) && ( $pos = $pad{I2240} ) or 1 ) 
                               &&                                 (   ( $pad{I2244} = $pos or 1 ) && 
                                 ( ( substr( $s, $pos, 1 ) eq '-' ) 
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 ) ||    ( ( $pos = $pad{I2244} ) && 0 ) )
                             )
                           ) ||    ( ( $pos = $pad{I2239} ) && 0 ) )) {}; $bool = 1 }
                       ) ;
                     { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                   };
                   my $bool = ${$hash->{'bool'}};
                   $match[ 1 ] = Pugs::Runtime::Match->new( $hash );
                   $bool;
               } ||    ( ( $pos = $pad{I2238} ) && 0 ) )
           &&
              (   ( $pad{I2245} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 1 ) eq ']' ) 
                   ? ( $pos += 1 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I2245} ) && 0 ) )
           &&
              (   ( $pad{I2246} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub  { return({'special_char' => '\\' . $::_V6_MATCH_->[0] . $::_V6_MATCH_->[1]});
 } ->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I2246} ) && 0 ) )
           )
           ) 
         || ( 
           ( ( $bool = 1 ) && ( $pos = $pad{I2232} ) or 1 ) 
           &&            (
              (   ( $pad{I2247} = $pos or 1 ) && 
               (
                   ( $pad{I2248} = $pos or 1 ) 
                   && (
                    (   ( $pad{I2249} = $pos or 1 ) && 
                     ( ( substr( $s, $pos, 1 ) eq 'x' ) 
                         ? ( $pos += 1 or 1 )
                         : 0
                     ) ||    ( ( $pos = $pad{I2249} ) && 0 ) )
                   ) 
                 || ( 
                   ( ( $bool = 1 ) && ( $pos = $pad{I2248} ) or 1 ) 
                   &&                     (   ( $pad{I2250} = $pos or 1 ) && 
                     ( ( substr( $s, $pos, 1 ) eq 'X' ) 
                         ? ( $pos += 1 or 1 )
                         : 0
                     ) ||    ( ( $pos = $pad{I2250} ) && 0 ) )
                 )
               ) ||    ( ( $pos = $pad{I2247} ) && 0 ) )
           &&
             (
              (   ( $pad{I2251} = $pos or 1 ) && 
                 do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                             $grammar->xdigit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'xdigit'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2251} ) && 0 ) )
             && do { while (
              (   ( $pad{I2251} = $pos or 1 ) && 
                 do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                             $grammar->xdigit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'xdigit'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2251} ) && 0 ) )) {}; $bool = 1 }
             ) 
           &&
              (   ( $pad{I2252} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub  { return({'special_char' => '\\' . $::_V6_MATCH_});
 } ->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I2252} ) && 0 ) )
           )
           ) 
         || ( 
           ( ( $bool = 1 ) && ( $pos = $pad{I2232} ) or 1 ) 
           &&            (
              (   ( $pad{I2253} = $pos or 1 ) && 
               do{ 
                   my $hash = do {
                     my $bool = 1;
                     my $from = $pos;
                     my @match;
                     my %named;
                     $bool = 0 unless
                       (
                           ( $pad{I2254} = $pos or 1 ) 
                           && (
                            (   ( $pad{I2255} = $pos or 1 ) && 
                             ( ( substr( $s, $pos, 1 ) eq 'x' ) 
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             ) ||    ( ( $pos = $pad{I2255} ) && 0 ) )
                           ) 
                         || ( 
                           ( ( $bool = 1 ) && ( $pos = $pad{I2254} ) or 1 ) 
                           &&                             (   ( $pad{I2256} = $pos or 1 ) && 
                             ( ( substr( $s, $pos, 1 ) eq 'X' ) 
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             ) ||    ( ( $pos = $pad{I2256} ) && 0 ) )
                         )
                       );
                     { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                   };
                   my $bool = ${$hash->{'bool'}};
                   $match[ 0 ] = Pugs::Runtime::Match->new( $hash );
                   $bool;
               } ||    ( ( $pos = $pad{I2253} ) && 0 ) )
           &&
              (   ( $pad{I2257} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 1 ) eq '[' ) 
                   ? ( $pos += 1 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I2257} ) && 0 ) )
           &&
              (   ( $pad{I2258} = $pos or 1 ) && 
               do{ 
                   my $hash = do {
                     my $bool = 1;
                     my $from = $pos;
                     my @match;
                     my %named;
                     $bool = 0 unless
                       (
                        (   ( $pad{I2259} = $pos or 1 ) && 
                           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                                       $grammar->xdigit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'xdigit'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2259} ) && 0 ) )
                       && do { while (
                        (   ( $pad{I2259} = $pos or 1 ) && 
                           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                                       $grammar->xdigit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'xdigit'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2259} ) && 0 ) )) {}; $bool = 1 }
                       ) ;
                     { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                   };
                   my $bool = ${$hash->{'bool'}};
                   $match[ 1 ] = Pugs::Runtime::Match->new( $hash );
                   $bool;
               } ||    ( ( $pos = $pad{I2258} ) && 0 ) )
           &&
              (   ( $pad{I2260} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 1 ) eq ']' ) 
                   ? ( $pos += 1 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I2260} ) && 0 ) )
           &&
              (   ( $pad{I2261} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub  { return({'special_char' => '\\' . $::_V6_MATCH_->[0] . $::_V6_MATCH_->[1]});
 } ->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I2261} ) && 0 ) )
           )
           ) 
         || ( 
           ( ( $bool = 1 ) && ( $pos = $pad{I2232} ) or 1 ) 
           &&            (
              (   ( $pad{I2262} = $pos or 1 ) && 
               (
                   ( $pad{I2263} = $pos or 1 ) 
                   && (
                    (   ( $pad{I2264} = $pos or 1 ) && 
                     ( ( substr( $s, $pos, 1 ) eq 'o' ) 
                         ? ( $pos += 1 or 1 )
                         : 0
                     ) ||    ( ( $pos = $pad{I2264} ) && 0 ) )
                   ) 
                 || ( 
                   ( ( $bool = 1 ) && ( $pos = $pad{I2263} ) or 1 ) 
                   &&                     (   ( $pad{I2265} = $pos or 1 ) && 
                     ( ( substr( $s, $pos, 1 ) eq 'O' ) 
                         ? ( $pos += 1 or 1 )
                         : 0
                     ) ||    ( ( $pos = $pad{I2265} ) && 0 ) )
                 )
               ) ||    ( ( $pos = $pad{I2262} ) && 0 ) )
           &&
             (
              (   ( $pad{I2266} = $pos or 1 ) && 
                 ( ( substr( $s, $pos ) =~ m/^(\d)/ )  
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I2266} ) && 0 ) )
             && do { while (
              (   ( $pad{I2266} = $pos or 1 ) && 
                 ( ( substr( $s, $pos ) =~ m/^(\d)/ )  
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I2266} ) && 0 ) )) {}; $bool = 1 }
             ) 
           &&
              (   ( $pad{I2267} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub  { return({'special_char' => '\\' . $::_V6_MATCH_});
 } ->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I2267} ) && 0 ) )
           )
           ) 
         || ( 
           ( ( $bool = 1 ) && ( $pos = $pad{I2232} ) or 1 ) 
           &&            (
              (   ( $pad{I2268} = $pos or 1 ) && 
               do{ 
                   my $hash = do {
                     my $bool = 1;
                     my $from = $pos;
                     my @match;
                     my %named;
                     $bool = 0 unless
                       (
                           ( $pad{I2269} = $pos or 1 ) 
                           && (
                            (   ( $pad{I2270} = $pos or 1 ) && 
                             ( ( substr( $s, $pos, 1 ) eq 'o' ) 
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             ) ||    ( ( $pos = $pad{I2270} ) && 0 ) )
                           ) 
                         || ( 
                           ( ( $bool = 1 ) && ( $pos = $pad{I2269} ) or 1 ) 
                           &&                             (   ( $pad{I2271} = $pos or 1 ) && 
                             ( ( substr( $s, $pos, 1 ) eq 'O' ) 
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             ) ||    ( ( $pos = $pad{I2271} ) && 0 ) )
                         )
                       );
                     { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                   };
                   my $bool = ${$hash->{'bool'}};
                   $match[ 0 ] = Pugs::Runtime::Match->new( $hash );
                   $bool;
               } ||    ( ( $pos = $pad{I2268} ) && 0 ) )
           &&
              (   ( $pad{I2272} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 1 ) eq '[' ) 
                   ? ( $pos += 1 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I2272} ) && 0 ) )
           &&
              (   ( $pad{I2273} = $pos or 1 ) && 
               do{ 
                   my $hash = do {
                     my $bool = 1;
                     my $from = $pos;
                     my @match;
                     my %named;
                     $bool = 0 unless
                       (
                        (   ( $pad{I2274} = $pos or 1 ) && 
                           ( ( substr( $s, $pos ) =~ m/^(\d)/ )  
                               ? ( $pos += length( $1 ) or 1 )
                               : 0
                           ) ||    ( ( $pos = $pad{I2274} ) && 0 ) )
                       && do { while (
                        (   ( $pad{I2274} = $pos or 1 ) && 
                           ( ( substr( $s, $pos ) =~ m/^(\d)/ )  
                               ? ( $pos += length( $1 ) or 1 )
                               : 0
                           ) ||    ( ( $pos = $pad{I2274} ) && 0 ) )) {}; $bool = 1 }
                       ) ;
                     { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                   };
                   my $bool = ${$hash->{'bool'}};
                   $match[ 1 ] = Pugs::Runtime::Match->new( $hash );
                   $bool;
               } ||    ( ( $pos = $pad{I2273} ) && 0 ) )
           &&
              (   ( $pad{I2275} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 1 ) eq ']' ) 
                   ? ( $pos += 1 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I2275} ) && 0 ) )
           &&
              (   ( $pad{I2276} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub  { return({'special_char' => '\\' . $::_V6_MATCH_->[0] . $::_V6_MATCH_->[1]});
 } ->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I2276} ) && 0 ) )
           )
           ) 
         || ( 
           ( ( $bool = 1 ) && ( $pos = $pad{I2232} ) or 1 ) 
           &&            (
              (   ( $pad{I2277} = $pos or 1 ) && 
               ( substr( $s, $pos++, 1 ) ne '' ) ||    ( ( $pos = $pad{I2277} ) && 0 ) )
           &&
              (   ( $pad{I2278} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub  { return({'special_char' => '\\' . $::_V6_MATCH_});
 } ->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I2278} ) && 0 ) )
           )
         )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for special_char
 # Data::Bind->sub_signature
#  (\&special_char, );
;
*literal = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       do { while (
        (   ( $pad{I2279} = $pos or 1 ) && 
           (
               ( $pad{I2280} = $pos or 1 ) 
               && (
               (
                  (   ( $pad{I2281} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '\\' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2281} ) && 0 ) )
               &&
                  (   ( $pad{I2282} = $pos or 1 ) && 
                   do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                               $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'special_char'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2282} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2280} ) or 1 ) 
               &&                 (   ( $pad{I2283} = $pos or 1 ) && 
                 ( ( substr( $s, $pos ) =~ m/^((?:(?![\']))\X)/ )  
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I2283} ) && 0 ) )
             )
           ) ||    ( ( $pos = $pad{I2279} ) && 0 ) )) {}; $bool = 1 };
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for literal
 # Data::Bind->sub_signature
#  (\&literal, );
;
*double_quoted = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       do { while (
        (   ( $pad{I2284} = $pos or 1 ) && 
           (
               ( $pad{I2285} = $pos or 1 ) 
               && (
               (
                  (   ( $pad{I2286} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '\\' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2286} ) && 0 ) )
               &&
                  (   ( $pad{I2287} = $pos or 1 ) && 
                   do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                               $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'special_char'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2287} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2285} ) or 1 ) 
               &&                 (   ( $pad{I2288} = $pos or 1 ) && 
                 do{ 
                my $match = 
          do {
            our $I2289;
            our $I2289_sizes;
            unless ( $I2289 ) {
                my $hash = \%Pugs::Grammar::Rule::variables;
                my %sizes = map { length($_) => 1 } keys %$hash;
                $I2289_sizes = [ sort { $b <=> $a } keys %sizes ];
                $I2289 = $hash;
            }
            my $match = 0;
            my $key;
            for ( @$I2289_sizes ) {
                $key = ( $pos <= length( $s ) 
                            ? substr( $s, $pos, $_ )
                            : '' );
                if ( exists $I2289->{$key} ) {
                    #$named{KEY} = $key;
                    #$::_V6_MATCH_ = $m; 
                    #print "m: ", Dumper( $::_V6_MATCH_->data )
                    #    if ( $key eq 'until' );
                    $match = Pugs::Runtime::Regex::preprocess_hash( $I2289, $key )->( $s, $grammar, { p => ( $pos + $_ ), positionals => [ ], args => { KEY => $key } }, undef );
                    last if $match;
                }
            }
            if ( $match ) {
                $pos = $match->to;
                #print "match: $key at $pos = ", Dumper( $match->data );
                $bool = 1;
            }; # else { $bool = 0 }
            $match;
          };
                if ( $match ) { push @{$named{'Pugs::Grammar::Rule::variables'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2288} ) && 0 ) )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2285} ) or 1 ) 
               &&                 (   ( $pad{I2290} = $pos or 1 ) && 
                 ( ( substr( $s, $pos ) =~ m/^((?:(?![\"]))\X)/ )  
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I2290} ) && 0 ) )
             )
           ) ||    ( ( $pos = $pad{I2284} ) && 0 ) )) {}; $bool = 1 };
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for double_quoted
 # Data::Bind->sub_signature
#  (\&double_quoted, );
;
*metasyntax = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
        (   ( $pad{I2291} = $pos or 1 ) && 
           (
               ( $pad{I2292} = $pos or 1 ) 
               && (
               (
                  (   ( $pad{I2293} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '\\' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2293} ) && 0 ) )
               &&
                  (   ( $pad{I2294} = $pos or 1 ) && 
                   do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                               $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'special_char'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2294} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2292} ) or 1 ) 
               &&                (
                  (   ( $pad{I2295} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq chr(39) ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2295} ) && 0 ) )
               &&
                  (   ( $pad{I2296} = $pos or 1 ) && 
                   do { 
                        my $prior = $::_V6_PRIOR_; 
                        my $match = 
                               $grammar->literal( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior; 
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   } ||    ( ( $pos = $pad{I2296} ) && 0 ) )
               &&
                  (   ( $pad{I2297} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq chr(39) ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2297} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2292} ) or 1 ) 
               &&                (
                  (   ( $pad{I2298} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '"' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2298} ) && 0 ) )
               &&
                  (   ( $pad{I2299} = $pos or 1 ) && 
                   do { 
                        my $prior = $::_V6_PRIOR_; 
                        my $match = 
                               $grammar->double_quoted( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior; 
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   } ||    ( ( $pos = $pad{I2299} ) && 0 ) )
               &&
                  (   ( $pad{I2300} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '"' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2300} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2292} ) or 1 ) 
               &&                (
                  (   ( $pad{I2301} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '{' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2301} ) && 0 ) )
               &&
                  (   ( $pad{I2302} = $pos or 1 ) && 
                   do { 
                        my $prior = $::_V6_PRIOR_; 
                        my $match = 
                               $grammar->string_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior; 
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   } ||    ( ( $pos = $pad{I2302} ) && 0 ) )
               &&
                  (   ( $pad{I2303} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '}' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2303} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2292} ) or 1 ) 
               &&                (
                  (   ( $pad{I2304} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '<' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2304} ) && 0 ) )
               &&
                  (   ( $pad{I2305} = $pos or 1 ) && 
                   do { 
                        my $prior = $::_V6_PRIOR_; 
                        my $match = 
                               $grammar->metasyntax( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior; 
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   } ||    ( ( $pos = $pad{I2305} ) && 0 ) )
               &&
                  (   ( $pad{I2306} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '>' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2306} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2292} ) or 1 ) 
               &&                 (   ( $pad{I2307} = $pos or 1 ) && 
                 ( ( substr( $s, $pos ) =~ m/^((?:(?![\>]))\X)/ )  
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I2307} ) && 0 ) )
             )
           ) ||    ( ( $pos = $pad{I2291} ) && 0 ) )
       && do { while (
        (   ( $pad{I2291} = $pos or 1 ) && 
           (
               ( $pad{I2292} = $pos or 1 ) 
               && (
               (
                  (   ( $pad{I2293} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '\\' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2293} ) && 0 ) )
               &&
                  (   ( $pad{I2294} = $pos or 1 ) && 
                   do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                               $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'special_char'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2294} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2292} ) or 1 ) 
               &&                (
                  (   ( $pad{I2295} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq chr(39) ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2295} ) && 0 ) )
               &&
                  (   ( $pad{I2296} = $pos or 1 ) && 
                   do { 
                        my $prior = $::_V6_PRIOR_; 
                        my $match = 
                               $grammar->literal( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior; 
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   } ||    ( ( $pos = $pad{I2296} ) && 0 ) )
               &&
                  (   ( $pad{I2297} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq chr(39) ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2297} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2292} ) or 1 ) 
               &&                (
                  (   ( $pad{I2298} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '"' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2298} ) && 0 ) )
               &&
                  (   ( $pad{I2299} = $pos or 1 ) && 
                   do { 
                        my $prior = $::_V6_PRIOR_; 
                        my $match = 
                               $grammar->double_quoted( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior; 
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   } ||    ( ( $pos = $pad{I2299} ) && 0 ) )
               &&
                  (   ( $pad{I2300} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '"' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2300} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2292} ) or 1 ) 
               &&                (
                  (   ( $pad{I2301} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '{' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2301} ) && 0 ) )
               &&
                  (   ( $pad{I2302} = $pos or 1 ) && 
                   do { 
                        my $prior = $::_V6_PRIOR_; 
                        my $match = 
                               $grammar->string_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior; 
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   } ||    ( ( $pos = $pad{I2302} ) && 0 ) )
               &&
                  (   ( $pad{I2303} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '}' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2303} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2292} ) or 1 ) 
               &&                (
                  (   ( $pad{I2304} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '<' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2304} ) && 0 ) )
               &&
                  (   ( $pad{I2305} = $pos or 1 ) && 
                   do { 
                        my $prior = $::_V6_PRIOR_; 
                        my $match = 
                               $grammar->metasyntax( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior; 
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   } ||    ( ( $pos = $pad{I2305} ) && 0 ) )
               &&
                  (   ( $pad{I2306} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '>' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2306} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2292} ) or 1 ) 
               &&                 (   ( $pad{I2307} = $pos or 1 ) && 
                 ( ( substr( $s, $pos ) =~ m/^((?:(?![\>]))\X)/ )  
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I2307} ) && 0 ) )
             )
           ) ||    ( ( $pos = $pad{I2291} ) && 0 ) )) {}; $bool = 1 }
       ) ;
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for metasyntax
 # Data::Bind->sub_signature
#  (\&metasyntax, );
;
*char_range = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
        (   ( $pad{I2308} = $pos or 1 ) && 
           (
               ( $pad{I2309} = $pos or 1 ) 
               && (
               (
                  (   ( $pad{I2310} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '\\' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2310} ) && 0 ) )
               &&
                  (   ( $pad{I2311} = $pos or 1 ) && 
                   do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                               $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'special_char'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2311} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2309} ) or 1 ) 
               &&                 (   ( $pad{I2312} = $pos or 1 ) && 
                 ( ( substr( $s, $pos ) =~ m/^((?:(?![\]]))\X)/ )  
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I2312} ) && 0 ) )
             )
           ) ||    ( ( $pos = $pad{I2308} ) && 0 ) )
       && do { while (
        (   ( $pad{I2308} = $pos or 1 ) && 
           (
               ( $pad{I2309} = $pos or 1 ) 
               && (
               (
                  (   ( $pad{I2310} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '\\' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2310} ) && 0 ) )
               &&
                  (   ( $pad{I2311} = $pos or 1 ) && 
                   do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                               $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'special_char'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2311} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2309} ) or 1 ) 
               &&                 (   ( $pad{I2312} = $pos or 1 ) && 
                 ( ( substr( $s, $pos ) =~ m/^((?:(?![\]]))\X)/ )  
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I2312} ) && 0 ) )
             )
           ) ||    ( ( $pos = $pad{I2308} ) && 0 ) )) {}; $bool = 1 }
       ) ;
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for char_range
 # Data::Bind->sub_signature
#  (\&char_range, );
;
*char_class = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
           ( $pad{I2313} = $pos or 1 ) 
           && (
           (
            (   ( $pad{I2314} = $pos or 1 ) && 
               do { 
                    my $prior = $::_V6_PRIOR_; 
                    my $match = 
                           $grammar->alpha( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior; 
                    my $bool = (!$match != 1);
                    $pos = $match->to if $bool;
                    $match;
               } ||    ( ( $pos = $pad{I2314} ) && 0 ) )
           && do { while (
            (   ( $pad{I2314} = $pos or 1 ) && 
               do { 
                    my $prior = $::_V6_PRIOR_; 
                    my $match = 
                           $grammar->alpha( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior; 
                    my $bool = (!$match != 1);
                    $pos = $match->to if $bool;
                    $match;
               } ||    ( ( $pos = $pad{I2314} ) && 0 ) )) {}; $bool = 1 }
           ) 
           ) 
         || ( 
           ( ( $bool = 1 ) && ( $pos = $pad{I2313} ) or 1 ) 
           &&            (
              (   ( $pad{I2315} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 1 ) eq '[' ) 
                   ? ( $pos += 1 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I2315} ) && 0 ) )
           &&
              (   ( $pad{I2316} = $pos or 1 ) && 
               do { 
                    my $prior = $::_V6_PRIOR_; 
                    my $match = 
                           $grammar->char_range( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior; 
                    my $bool = (!$match != 1);
                    $pos = $match->to if $bool;
                    $match;
               } ||    ( ( $pos = $pad{I2316} ) && 0 ) )
           &&
              (   ( $pad{I2317} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 1 ) eq ']' ) 
                   ? ( $pos += 1 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I2317} ) && 0 ) )
           )
         )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for char_class
 # Data::Bind->sub_signature
#  (\&char_class, );
;
*string_code = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
        (   ( $pad{I2318} = $pos or 1 ) && 
           (
               ( $pad{I2319} = $pos or 1 ) 
               && (
               (
                  (   ( $pad{I2320} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '\\' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2320} ) && 0 ) )
               &&
                  (   ( $pad{I2321} = $pos or 1 ) && 
                   do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                               $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'special_char'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2321} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2319} ) or 1 ) 
               &&                (
                  (   ( $pad{I2322} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq chr(39) ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2322} ) && 0 ) )
               &&
                  (   ( $pad{I2323} = $pos or 1 ) && 
                   do { 
                        my $prior = $::_V6_PRIOR_; 
                        my $match = 
                               $grammar->literal( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior; 
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   } ||    ( ( $pos = $pad{I2323} ) && 0 ) )
               &&
                  (   ( $pad{I2324} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq chr(39) ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2324} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2319} ) or 1 ) 
               &&                (
                  (   ( $pad{I2325} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '"' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2325} ) && 0 ) )
               &&
                  (   ( $pad{I2326} = $pos or 1 ) && 
                   do { 
                        my $prior = $::_V6_PRIOR_; 
                        my $match = 
                               $grammar->double_quoted( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior; 
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   } ||    ( ( $pos = $pad{I2326} ) && 0 ) )
               &&
                  (   ( $pad{I2327} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '"' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2327} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2319} ) or 1 ) 
               &&                (
                  (   ( $pad{I2328} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '{' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2328} ) && 0 ) )
               &&
                  (   ( $pad{I2329} = $pos or 1 ) && 
                   (
                       ( $pad{I2330} = $pos or 1 ) 
                       && (
                        (   ( $pad{I2331} = $pos or 1 ) && 
                         do { 
                              my $prior = $::_V6_PRIOR_; 
                              my $match = 
                                     $grammar->string_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                              $::_V6_PRIOR_ = $prior; 
                              my $bool = (!$match != 1);
                              $pos = $match->to if $bool;
                              $match;
                         } ||    ( ( $pos = $pad{I2331} ) && 0 ) )
                       ) 
                     || ( 
                       ( ( $bool = 1 ) && ( $pos = $pad{I2330} ) or 1 ) 
                       &&                         (   ( $pad{I2332} = $pos or 1 ) && 
 1 # null constant
 ||    ( ( $pos = $pad{I2332} ) && 0 ) )
                     )
                   ) ||    ( ( $pos = $pad{I2329} ) && 0 ) )
               &&
                  (   ( $pad{I2333} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '}' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2333} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2319} ) or 1 ) 
               &&                (
                  (   ( $pad{I2334} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '(' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2334} ) && 0 ) )
               &&
                  (   ( $pad{I2335} = $pos or 1 ) && 
                   (
                       ( $pad{I2336} = $pos or 1 ) 
                       && (
                        (   ( $pad{I2337} = $pos or 1 ) && 
                         do { 
                              my $prior = $::_V6_PRIOR_; 
                              my $match = 
                                     $grammar->string_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                              $::_V6_PRIOR_ = $prior; 
                              my $bool = (!$match != 1);
                              $pos = $match->to if $bool;
                              $match;
                         } ||    ( ( $pos = $pad{I2337} ) && 0 ) )
                       ) 
                     || ( 
                       ( ( $bool = 1 ) && ( $pos = $pad{I2336} ) or 1 ) 
                       &&                         (   ( $pad{I2338} = $pos or 1 ) && 
 1 # null constant
 ||    ( ( $pos = $pad{I2338} ) && 0 ) )
                     )
                   ) ||    ( ( $pos = $pad{I2335} ) && 0 ) )
               &&
                  (   ( $pad{I2339} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq ')' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2339} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2319} ) or 1 ) 
               &&                (
                  (   ( $pad{I2340} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '<' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2340} ) && 0 ) )
               &&
                  (   ( $pad{I2341} = $pos or 1 ) && 
                   (
                       ( $pad{I2342} = $pos or 1 ) 
                       && (
                        (   ( $pad{I2343} = $pos or 1 ) && 
                         do { 
                              my $prior = $::_V6_PRIOR_; 
                              my $match = 
                                     $grammar->string_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                              $::_V6_PRIOR_ = $prior; 
                              my $bool = (!$match != 1);
                              $pos = $match->to if $bool;
                              $match;
                         } ||    ( ( $pos = $pad{I2343} ) && 0 ) )
                       ) 
                     || ( 
                       ( ( $bool = 1 ) && ( $pos = $pad{I2342} ) or 1 ) 
                       &&                         (   ( $pad{I2344} = $pos or 1 ) && 
 1 # null constant
 ||    ( ( $pos = $pad{I2344} ) && 0 ) )
                     )
                   ) ||    ( ( $pos = $pad{I2341} ) && 0 ) )
               &&
                  (   ( $pad{I2345} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '>' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2345} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2319} ) or 1 ) 
               &&                (
                  (   ( $pad{I2346} = $pos or 1 ) && 
                   (
                       ( $pad{I2347} = $pos or 1 ) 
                       && (
                        (   ( $pad{I2348} = $pos or 1 ) && 
                         do { 
                              my $prior = $::_V6_PRIOR_; 
                              my $match = 
                                     $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                              $::_V6_PRIOR_ = $prior; 
                              my $bool = (!$match != 1);
                              $pos = $match->to if $bool;
                              $match;
                         } ||    ( ( $pos = $pad{I2348} ) && 0 ) )
                       ) 
                     || ( 
                       ( ( $bool = 1 ) && ( $pos = $pad{I2347} ) or 1 ) 
                       &&                         (   ( $pad{I2349} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq '>' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I2349} ) && 0 ) )
                       ) 
                     || ( 
                       ( ( $bool = 1 ) && ( $pos = $pad{I2347} ) or 1 ) 
                       &&                         (   ( $pad{I2350} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq '=' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I2350} ) && 0 ) )
                       ) 
                     || ( 
                       ( ( $bool = 1 ) && ( $pos = $pad{I2347} ) or 1 ) 
                       &&                         (   ( $pad{I2351} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq '-' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I2351} ) && 0 ) )
                     )
                   ) ||    ( ( $pos = $pad{I2346} ) && 0 ) )
               &&
                  (   ( $pad{I2352} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '>' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2352} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2319} ) or 1 ) 
               &&                 (   ( $pad{I2353} = $pos or 1 ) && 
                 do { 
                      my $prior = $::_V6_PRIOR_; 
                      my $match = 
                             $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                      $::_V6_PRIOR_ = $prior; 
                      my $bool = (!$match != 1);
                      $pos = $match->to if $bool;
                      $match;
                 } ||    ( ( $pos = $pad{I2353} ) && 0 ) )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2319} ) or 1 ) 
               &&                 (   ( $pad{I2354} = $pos or 1 ) && 
                 ( ( substr( $s, $pos ) =~ m/^((?:(?![\}\)\>]))\X)/ )  
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I2354} ) && 0 ) )
             )
           ) ||    ( ( $pos = $pad{I2318} ) && 0 ) )
       && do { while (
        (   ( $pad{I2318} = $pos or 1 ) && 
           (
               ( $pad{I2319} = $pos or 1 ) 
               && (
               (
                  (   ( $pad{I2320} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '\\' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2320} ) && 0 ) )
               &&
                  (   ( $pad{I2321} = $pos or 1 ) && 
                   do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                               $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'special_char'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2321} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2319} ) or 1 ) 
               &&                (
                  (   ( $pad{I2322} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq chr(39) ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2322} ) && 0 ) )
               &&
                  (   ( $pad{I2323} = $pos or 1 ) && 
                   do { 
                        my $prior = $::_V6_PRIOR_; 
                        my $match = 
                               $grammar->literal( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior; 
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   } ||    ( ( $pos = $pad{I2323} ) && 0 ) )
               &&
                  (   ( $pad{I2324} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq chr(39) ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2324} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2319} ) or 1 ) 
               &&                (
                  (   ( $pad{I2325} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '"' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2325} ) && 0 ) )
               &&
                  (   ( $pad{I2326} = $pos or 1 ) && 
                   do { 
                        my $prior = $::_V6_PRIOR_; 
                        my $match = 
                               $grammar->double_quoted( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior; 
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   } ||    ( ( $pos = $pad{I2326} ) && 0 ) )
               &&
                  (   ( $pad{I2327} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '"' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2327} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2319} ) or 1 ) 
               &&                (
                  (   ( $pad{I2328} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '{' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2328} ) && 0 ) )
               &&
                  (   ( $pad{I2329} = $pos or 1 ) && 
                   (
                       ( $pad{I2330} = $pos or 1 ) 
                       && (
                        (   ( $pad{I2331} = $pos or 1 ) && 
                         do { 
                              my $prior = $::_V6_PRIOR_; 
                              my $match = 
                                     $grammar->string_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                              $::_V6_PRIOR_ = $prior; 
                              my $bool = (!$match != 1);
                              $pos = $match->to if $bool;
                              $match;
                         } ||    ( ( $pos = $pad{I2331} ) && 0 ) )
                       ) 
                     || ( 
                       ( ( $bool = 1 ) && ( $pos = $pad{I2330} ) or 1 ) 
                       &&                         (   ( $pad{I2332} = $pos or 1 ) && 
 1 # null constant
 ||    ( ( $pos = $pad{I2332} ) && 0 ) )
                     )
                   ) ||    ( ( $pos = $pad{I2329} ) && 0 ) )
               &&
                  (   ( $pad{I2333} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '}' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2333} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2319} ) or 1 ) 
               &&                (
                  (   ( $pad{I2334} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '(' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2334} ) && 0 ) )
               &&
                  (   ( $pad{I2335} = $pos or 1 ) && 
                   (
                       ( $pad{I2336} = $pos or 1 ) 
                       && (
                        (   ( $pad{I2337} = $pos or 1 ) && 
                         do { 
                              my $prior = $::_V6_PRIOR_; 
                              my $match = 
                                     $grammar->string_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                              $::_V6_PRIOR_ = $prior; 
                              my $bool = (!$match != 1);
                              $pos = $match->to if $bool;
                              $match;
                         } ||    ( ( $pos = $pad{I2337} ) && 0 ) )
                       ) 
                     || ( 
                       ( ( $bool = 1 ) && ( $pos = $pad{I2336} ) or 1 ) 
                       &&                         (   ( $pad{I2338} = $pos or 1 ) && 
 1 # null constant
 ||    ( ( $pos = $pad{I2338} ) && 0 ) )
                     )
                   ) ||    ( ( $pos = $pad{I2335} ) && 0 ) )
               &&
                  (   ( $pad{I2339} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq ')' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2339} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2319} ) or 1 ) 
               &&                (
                  (   ( $pad{I2340} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '<' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2340} ) && 0 ) )
               &&
                  (   ( $pad{I2341} = $pos or 1 ) && 
                   (
                       ( $pad{I2342} = $pos or 1 ) 
                       && (
                        (   ( $pad{I2343} = $pos or 1 ) && 
                         do { 
                              my $prior = $::_V6_PRIOR_; 
                              my $match = 
                                     $grammar->string_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                              $::_V6_PRIOR_ = $prior; 
                              my $bool = (!$match != 1);
                              $pos = $match->to if $bool;
                              $match;
                         } ||    ( ( $pos = $pad{I2343} ) && 0 ) )
                       ) 
                     || ( 
                       ( ( $bool = 1 ) && ( $pos = $pad{I2342} ) or 1 ) 
                       &&                         (   ( $pad{I2344} = $pos or 1 ) && 
 1 # null constant
 ||    ( ( $pos = $pad{I2344} ) && 0 ) )
                     )
                   ) ||    ( ( $pos = $pad{I2341} ) && 0 ) )
               &&
                  (   ( $pad{I2345} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '>' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2345} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2319} ) or 1 ) 
               &&                (
                  (   ( $pad{I2346} = $pos or 1 ) && 
                   (
                       ( $pad{I2347} = $pos or 1 ) 
                       && (
                        (   ( $pad{I2348} = $pos or 1 ) && 
                         do { 
                              my $prior = $::_V6_PRIOR_; 
                              my $match = 
                                     $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                              $::_V6_PRIOR_ = $prior; 
                              my $bool = (!$match != 1);
                              $pos = $match->to if $bool;
                              $match;
                         } ||    ( ( $pos = $pad{I2348} ) && 0 ) )
                       ) 
                     || ( 
                       ( ( $bool = 1 ) && ( $pos = $pad{I2347} ) or 1 ) 
                       &&                         (   ( $pad{I2349} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq '>' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I2349} ) && 0 ) )
                       ) 
                     || ( 
                       ( ( $bool = 1 ) && ( $pos = $pad{I2347} ) or 1 ) 
                       &&                         (   ( $pad{I2350} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq '=' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I2350} ) && 0 ) )
                       ) 
                     || ( 
                       ( ( $bool = 1 ) && ( $pos = $pad{I2347} ) or 1 ) 
                       &&                         (   ( $pad{I2351} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq '-' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I2351} ) && 0 ) )
                     )
                   ) ||    ( ( $pos = $pad{I2346} ) && 0 ) )
               &&
                  (   ( $pad{I2352} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '>' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2352} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2319} ) or 1 ) 
               &&                 (   ( $pad{I2353} = $pos or 1 ) && 
                 do { 
                      my $prior = $::_V6_PRIOR_; 
                      my $match = 
                             $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                      $::_V6_PRIOR_ = $prior; 
                      my $bool = (!$match != 1);
                      $pos = $match->to if $bool;
                      $match;
                 } ||    ( ( $pos = $pad{I2353} ) && 0 ) )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2319} ) or 1 ) 
               &&                 (   ( $pad{I2354} = $pos or 1 ) && 
                 ( ( substr( $s, $pos ) =~ m/^((?:(?![\}\)\>]))\X)/ )  
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I2354} ) && 0 ) )
             )
           ) ||    ( ( $pos = $pad{I2318} ) && 0 ) )) {}; $bool = 1 }
       ) ;
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for string_code
 # Data::Bind->sub_signature
#  (\&string_code, );
;
*parsed_code = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I2355} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->string_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                my $bool = (!$match != 1);
                $pos = $match->to if $bool;
                $match;
           } ||    ( ( $pos = $pad{I2355} ) && 0 ) )
       &&
          (   ( $pad{I2356} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return('{' . $::_V6_MATCH_ . '}');
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I2356} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for parsed_code
 # Data::Bind->sub_signature
#  (\&parsed_code, );
;
*named_capture_body = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
           ( $pad{I2357} = $pos or 1 ) 
           && (
           (
              (   ( $pad{I2358} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 1 ) eq '(' ) 
                   ? ( $pos += 1 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I2358} ) && 0 ) )
           &&
              (   ( $pad{I2359} = $pos or 1 ) && 
               do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                           $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2359} ) && 0 ) )
           &&
              (   ( $pad{I2360} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 1 ) eq ')' ) 
                   ? ( $pos += 1 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I2360} ) && 0 ) )
           &&
              (   ( $pad{I2361} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub  { return({'capturing_group' => ${ $::_V6_MATCH_->{'rule'}}});
 } ->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I2361} ) && 0 ) )
           )
           ) 
         || ( 
           ( ( $bool = 1 ) && ( $pos = $pad{I2357} ) or 1 ) 
           &&            (
              (   ( $pad{I2362} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 1 ) eq '[' ) 
                   ? ( $pos += 1 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I2362} ) && 0 ) )
           &&
              (   ( $pad{I2363} = $pos or 1 ) && 
               do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                           $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2363} ) && 0 ) )
           &&
              (   ( $pad{I2364} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 1 ) eq ']' ) 
                   ? ( $pos += 1 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I2364} ) && 0 ) )
           &&
              (   ( $pad{I2365} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub  { return(${ $::_V6_MATCH_->{'rule'}});
 } ->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I2365} ) && 0 ) )
           )
           ) 
         || ( 
           ( ( $bool = 1 ) && ( $pos = $pad{I2357} ) or 1 ) 
           &&            (
              (   ( $pad{I2366} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 1 ) eq '<' ) 
                   ? ( $pos += 1 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I2366} ) && 0 ) )
           &&
              (   ( $pad{I2367} = $pos or 1 ) && 
               do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                           $grammar->parse_metasyntax( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'parse_metasyntax'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2367} ) && 0 ) )
           &&
              (   ( $pad{I2368} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub  { return(${ $::_V6_MATCH_->{'parse_metasyntax'}});
 } ->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I2368} ) && 0 ) )
           )
           ) 
         || ( 
           ( ( $bool = 1 ) && ( $pos = $pad{I2357} ) or 1 ) 
           &&            (
              (   ( $pad{I2369} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 1 ) eq chr(39) ) 
                   ? ( $pos += 1 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I2369} ) && 0 ) )
           &&
              (   ( $pad{I2370} = $pos or 1 ) && 
               do { 
                    my $prior = $::_V6_PRIOR_; 
                    my $match = 
                           $grammar->literal( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior; 
                    my $bool = (!$match != 1);
                    $pos = $match->to if $bool;
                    $match;
               } ||    ( ( $pos = $pad{I2370} ) && 0 ) )
           &&
              (   ( $pad{I2371} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 1 ) eq chr(39) ) 
                   ? ( $pos += 1 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I2371} ) && 0 ) )
           &&
              (   ( $pad{I2372} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub  { return({'metasyntax' => {'metasyntax' =>  "" . ${$::_V6_MATCH_}}});
 } ->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I2372} ) && 0 ) )
           )
           ) 
         || ( 
           ( ( $bool = 1 ) && ( $pos = $pad{I2357} ) or 1 ) 
           &&             (   ( $pad{I2373} = $pos or 1 ) && 
             do { 
               local $::_V6_SUCCEED = 1;
               $::_V6_MATCH_ = $m;
               $m->data->{capture} = \( sub  { die("invalid alias syntax");
return( undef );
 } ->( $m ) ); 
               $bool = $::_V6_SUCCEED;
               $::_V6_MATCH_ = $m if $bool; 
               return $m if $bool; 
             } ||    ( ( $pos = $pad{I2373} ) && 0 ) )
         )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for named_capture_body
 # Data::Bind->sub_signature
#  (\&named_capture_body, );
;
*parse_metasyntax = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I2374} = $pos or 1 ) && 
           do{ 
                my $from = $pos;
                my $bool =                    (
                       ( $pad{I2375} = $pos or 1 ) 
                       && (
                        (   ( $pad{I2376} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq '!' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I2376} ) && 0 ) )
                       ) 
                     || ( 
                       ( ( $bool = 1 ) && ( $pos = $pad{I2375} ) or 1 ) 
                       &&                         (   ( $pad{I2377} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq '?' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I2377} ) && 0 ) )
                       ) 
                     || ( 
                       ( ( $bool = 1 ) && ( $pos = $pad{I2375} ) or 1 ) 
                       &&                         (   ( $pad{I2378} = $pos or 1 ) && 
 1 # null constant
 ||    ( ( $pos = $pad{I2378} ) && 0 ) )
                     )
                   );
                my $match = Pugs::Runtime::Match->new( 
                    { str => \$s, from => \$from, match => [], named => {}, bool => \1, to => \(0+$pos), capture => undef }
                ); $named{'modifier'} = $match;
                $bool
            } ||    ( ( $pos = $pad{I2374} ) && 0 ) )
       &&
          (   ( $pad{I2379} = $pos or 1 ) && 
           (
               ( $pad{I2380} = $pos or 1 ) 
               && (
               (
                  (   ( $pad{I2381} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '{' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2381} ) && 0 ) )
               &&
                  (   ( $pad{I2382} = $pos or 1 ) && 
                   do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                               $grammar->parsed_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'parsed_code'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2382} ) && 0 ) )
               &&
                  (   ( $pad{I2383} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 2 ) eq '}>' ) 
                       ? ( $pos += 2 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2383} ) && 0 ) )
               &&
                  (   ( $pad{I2384} = $pos or 1 ) && 
                   do { 
                     local $::_V6_SUCCEED = 1;
                     $::_V6_MATCH_ = $m;
                     $m->data->{capture} = \( sub  { return({'closure' => {'closure' => ${ $::_V6_MATCH_->{'parsed_code'}}, 'modifier' => ${ $::_V6_MATCH_->{'modifier'}}}});
 } ->( $m ) ); 
                     $bool = $::_V6_SUCCEED;
                     $::_V6_MATCH_ = $m if $bool; 
                     return $m if $bool; 
                   } ||    ( ( $pos = $pad{I2384} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2380} ) or 1 ) 
               &&                (
                  (   ( $pad{I2385} = $pos or 1 ) && 
                   do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                               $grammar->char_class( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'char_class'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2385} ) && 0 ) )
               &&
                 (
                  (   ( $pad{I2386} = $pos or 1 ) && 
                     do{ 
                         my $hash = do {
                           my $bool = 1;
                           my $from = $pos;
                           my @match;
                           my %named;
                           $bool = 0 unless
                             (
                                (   ( $pad{I2387} = $pos or 1 ) && 
                                 ( ( substr( $s, $pos ) =~ m/^((?:(?=[+-]))\X)/ )  
                                     ? ( $pos += length( $1 ) or 1 )
                                     : 0
                                 ) ||    ( ( $pos = $pad{I2387} ) && 0 ) )
                             &&
                                (   ( $pad{I2388} = $pos or 1 ) && 
                                 do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                                             $grammar->char_class( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'char_class'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2388} ) && 0 ) )
                             );
                           { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                         };
                         my $bool = ${$hash->{'bool'}};
                         if ( $bool ) {
                             push @{ $match[ 0 ] }, Pugs::Runtime::Match->new( $hash );
                         }
                         $bool;
                     } ||    ( ( $pos = $pad{I2386} ) && 0 ) )
                 && do { while (
                  (   ( $pad{I2386} = $pos or 1 ) && 
                     do{ 
                         my $hash = do {
                           my $bool = 1;
                           my $from = $pos;
                           my @match;
                           my %named;
                           $bool = 0 unless
                             (
                                (   ( $pad{I2387} = $pos or 1 ) && 
                                 ( ( substr( $s, $pos ) =~ m/^((?:(?=[+-]))\X)/ )  
                                     ? ( $pos += length( $1 ) or 1 )
                                     : 0
                                 ) ||    ( ( $pos = $pad{I2387} ) && 0 ) )
                             &&
                                (   ( $pad{I2388} = $pos or 1 ) && 
                                 do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                                             $grammar->char_class( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'char_class'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2388} ) && 0 ) )
                             );
                           { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                         };
                         my $bool = ${$hash->{'bool'}};
                         if ( $bool ) {
                             push @{ $match[ 0 ] }, Pugs::Runtime::Match->new( $hash );
                         }
                         $bool;
                     } ||    ( ( $pos = $pad{I2386} ) && 0 ) )) {}; $bool = 1 }
                 ) 
               &&
                  (   ( $pad{I2389} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '>' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2389} ) && 0 ) )
               &&
                  (   ( $pad{I2390} = $pos or 1 ) && 
                   do { 
                     local $::_V6_SUCCEED = 1;
                     $::_V6_MATCH_ = $m;
                     $m->data->{capture} = \( sub  { if(${ $::_V6_MATCH_->{'modifier'}} eq '!') { return({'negate' => {'char_class' => ['+' .  $::_V6_MATCH_->{'char_class'},
@{($::_V6_MATCH_->[0])}]}});
 } 
;
return({'char_class' => ['+' .  $::_V6_MATCH_->{'char_class'},
@{($::_V6_MATCH_->[0])}]});
 } ->( $m ) ); 
                     $bool = $::_V6_SUCCEED;
                     $::_V6_MATCH_ = $m if $bool; 
                     return $m if $bool; 
                   } ||    ( ( $pos = $pad{I2390} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2380} ) or 1 ) 
               &&                (
                  (   ( $pad{I2391} = $pos or 1 ) && 
                   do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                               $grammar->ident( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'ident'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2391} ) && 0 ) )
               &&
                  (   ( $pad{I2392} = $pos or 1 ) && 
                   (
                       ( $pad{I2393} = $pos or 1 ) 
                       && (
                       (
                          (   ( $pad{I2394} = $pos or 1 ) && 
                           do { 
                                my $prior = $::_V6_PRIOR_; 
                                my $match = 
                                       $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                $::_V6_PRIOR_ = $prior; 
                                my $bool = (!$match != 1);
                                $pos = $match->to if $bool;
                                $match;
                           } ||    ( ( $pos = $pad{I2394} ) && 0 ) )
                       &&
                          (   ( $pad{I2395} = $pos or 1 ) && 
                           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2395} ) && 0 ) )
                       &&
                          (   ( $pad{I2396} = $pos or 1 ) && 
                           ( ( substr( $s, $pos, 1 ) eq '>' ) 
                               ? ( $pos += 1 or 1 )
                               : 0
                           ) ||    ( ( $pos = $pad{I2396} ) && 0 ) )
                       &&
                          (   ( $pad{I2397} = $pos or 1 ) && 
                           do { 
                             local $::_V6_SUCCEED = 1;
                             $::_V6_MATCH_ = $m;
                             $m->data->{capture} = \( sub  { if((${ $::_V6_MATCH_->{'ident'}} eq 'before' || ${ $::_V6_MATCH_->{'ident'}} eq 'after')) { return({${ $::_V6_MATCH_->{'ident'}} => {'rule' => ${ $::_V6_MATCH_->{'rule'}}, 'modifier' => ${ $::_V6_MATCH_->{'modifier'}}}});
 } 
;
return({'metasyntax' => {'metasyntax' => ${ $::_V6_MATCH_->{'ident'}}, 'rule' => ${ $::_V6_MATCH_->{'rule'}}, 'modifier' => ${ $::_V6_MATCH_->{'modifier'}}}});
 } ->( $m ) ); 
                             $bool = $::_V6_SUCCEED;
                             $::_V6_MATCH_ = $m if $bool; 
                             return $m if $bool; 
                           } ||    ( ( $pos = $pad{I2397} ) && 0 ) )
                       )
                       ) 
                     || ( 
                       ( ( $bool = 1 ) && ( $pos = $pad{I2393} ) or 1 ) 
                       &&                        (
                          (   ( $pad{I2398} = $pos or 1 ) && 
                           ( ( substr( $s, $pos, 1 ) eq ':' ) 
                               ? ( $pos += 1 or 1 )
                               : 0
                           ) ||    ( ( $pos = $pad{I2398} ) && 0 ) )
                       &&
                         (
                          (   ( $pad{I2399} = $pos or 1 ) && 
                             do { 
                                  my $prior = $::_V6_PRIOR_; 
                                  my $match = 
                                         $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                  $::_V6_PRIOR_ = $prior; 
                                  my $bool = (!$match != 1);
                                  $pos = $match->to if $bool;
                                  $match;
                             } ||    ( ( $pos = $pad{I2399} ) && 0 ) )
                         || ( $bool = 1 )
                         ) 
                       &&
                          (   ( $pad{I2400} = $pos or 1 ) && 
                           do{ 
                my $from = $pos;
                my $bool =                                    do { while (
                                    (   ( $pad{I2401} = $pos or 1 ) && 
                                       (
                                           ( $pad{I2402} = $pos or 1 ) 
                                           && (
                                           (
                                              (   ( $pad{I2403} = $pos or 1 ) && 
                                               ( ( substr( $s, $pos, 1 ) eq '\\' ) 
                                                   ? ( $pos += 1 or 1 )
                                                   : 0
                                               ) ||    ( ( $pos = $pad{I2403} ) && 0 ) )
                                           &&
                                              (   ( $pad{I2404} = $pos or 1 ) && 
                                               do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                                                           $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'special_char'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2404} ) && 0 ) )
                                           )
                                           ) 
                                         || ( 
                                           ( ( $bool = 1 ) && ( $pos = $pad{I2402} ) or 1 ) 
                                           &&                                             (   ( $pad{I2405} = $pos or 1 ) && 
                                             do{ 
                my $match = 
          do {
            our $I2406;
            our $I2406_sizes;
            unless ( $I2406 ) {
                my $hash = \%Pugs::Grammar::Rule::variables;
                my %sizes = map { length($_) => 1 } keys %$hash;
                $I2406_sizes = [ sort { $b <=> $a } keys %sizes ];
                $I2406 = $hash;
            }
            my $match = 0;
            my $key;
            for ( @$I2406_sizes ) {
                $key = ( $pos <= length( $s ) 
                            ? substr( $s, $pos, $_ )
                            : '' );
                if ( exists $I2406->{$key} ) {
                    #$named{KEY} = $key;
                    #$::_V6_MATCH_ = $m; 
                    #print "m: ", Dumper( $::_V6_MATCH_->data )
                    #    if ( $key eq 'until' );
                    $match = Pugs::Runtime::Regex::preprocess_hash( $I2406, $key )->( $s, $grammar, { p => ( $pos + $_ ), positionals => [ ], args => { KEY => $key } }, undef );
                    last if $match;
                }
            }
            if ( $match ) {
                $pos = $match->to;
                #print "match: $key at $pos = ", Dumper( $match->data );
                $bool = 1;
            }; # else { $bool = 0 }
            $match;
          };
                if ( $match ) { push @{$named{'Pugs::Grammar::Rule::variables'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2405} ) && 0 ) )
                                           ) 
                                         || ( 
                                           ( ( $bool = 1 ) && ( $pos = $pad{I2402} ) or 1 ) 
                                           &&                                             (   ( $pad{I2407} = $pos or 1 ) && 
                                             ( ( substr( $s, $pos ) =~ m/^((?:(?![\>]))\X)/ )  
                                                 ? ( $pos += length( $1 ) or 1 )
                                                 : 0
                                             ) ||    ( ( $pos = $pad{I2407} ) && 0 ) )
                                         )
                                       ) ||    ( ( $pos = $pad{I2401} ) && 0 ) )) {}; $bool = 1 };
                my $match = Pugs::Runtime::Match->new( 
                    { str => \$s, from => \$from, match => [], named => {}, bool => \1, to => \(0+$pos), capture => undef }
                ); $named{'str'} = $match;
                $bool
            } ||    ( ( $pos = $pad{I2400} ) && 0 ) )
                       &&
                          (   ( $pad{I2408} = $pos or 1 ) && 
                           ( ( substr( $s, $pos, 1 ) eq '>' ) 
                               ? ( $pos += 1 or 1 )
                               : 0
                           ) ||    ( ( $pos = $pad{I2408} ) && 0 ) )
                       &&
                          (   ( $pad{I2409} = $pos or 1 ) && 
                           do { 
                             local $::_V6_SUCCEED = 1;
                             $::_V6_MATCH_ = $m;
                             $m->data->{capture} = \( sub  { if((${ $::_V6_MATCH_->{'ident'}} eq 'before' || ${ $::_V6_MATCH_->{'ident'}} eq 'after')) { return({${ $::_V6_MATCH_->{'ident'}} => {'rule' => {'metasyntax' => {'metasyntax' => '\'' . ${ $::_V6_MATCH_->{'str'}} . '\''}}, 'modifier' => ${ $::_V6_MATCH_->{'modifier'}}}});
 } 
;
return({'metasyntax' => {'metasyntax' => ${ $::_V6_MATCH_->{'ident'}}, 'string' => ${ $::_V6_MATCH_->{'str'}}, 'modifier' => ${ $::_V6_MATCH_->{'modifier'}}}});
 } ->( $m ) ); 
                             $bool = $::_V6_SUCCEED;
                             $::_V6_MATCH_ = $m if $bool; 
                             return $m if $bool; 
                           } ||    ( ( $pos = $pad{I2409} ) && 0 ) )
                       )
                       ) 
                     || ( 
                       ( ( $bool = 1 ) && ( $pos = $pad{I2393} ) or 1 ) 
                       &&                        (
                          (   ( $pad{I2410} = $pos or 1 ) && 
                           ( ( substr( $s, $pos, 1 ) eq '(' ) 
                               ? ( $pos += 1 or 1 )
                               : 0
                           ) ||    ( ( $pos = $pad{I2410} ) && 0 ) )
                       &&
                          (   ( $pad{I2411} = $pos or 1 ) && 
                           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                                       $grammar->parsed_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'parsed_code'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2411} ) && 0 ) )
                       &&
                          (   ( $pad{I2412} = $pos or 1 ) && 
                           ( ( substr( $s, $pos, 1 ) eq ')' ) 
                               ? ( $pos += 1 or 1 )
                               : 0
                           ) ||    ( ( $pos = $pad{I2412} ) && 0 ) )
                       &&
                          (   ( $pad{I2413} = $pos or 1 ) && 
                           ( ( substr( $s, $pos, 1 ) eq '>' ) 
                               ? ( $pos += 1 or 1 )
                               : 0
                           ) ||    ( ( $pos = $pad{I2413} ) && 0 ) )
                       &&
                          (   ( $pad{I2414} = $pos or 1 ) && 
                           do { 
                             local $::_V6_SUCCEED = 1;
                             $::_V6_MATCH_ = $m;
                             $m->data->{capture} = \( sub  { return({'call' => {'method' => ${ $::_V6_MATCH_->{'ident'}}, 'params' => ${ $::_V6_MATCH_->{'parsed_code'}}, 'modifier' => ${ $::_V6_MATCH_->{'modifier'}}}});
 } ->( $m ) ); 
                             $bool = $::_V6_SUCCEED;
                             $::_V6_MATCH_ = $m if $bool; 
                             return $m if $bool; 
                           } ||    ( ( $pos = $pad{I2414} ) && 0 ) )
                       )
                     )
                   ) ||    ( ( $pos = $pad{I2392} ) && 0 ) )
               )
               ) 
             || ( 
               ( ( $bool = 1 ) && ( $pos = $pad{I2380} ) or 1 ) 
               &&                (
                  (   ( $pad{I2415} = $pos or 1 ) && 
                   do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                               $grammar->metasyntax( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'metasyntax'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2415} ) && 0 ) )
               &&
                  (   ( $pad{I2416} = $pos or 1 ) && 
                   ( ( substr( $s, $pos, 1 ) eq '>' ) 
                       ? ( $pos += 1 or 1 )
                       : 0
                   ) ||    ( ( $pos = $pad{I2416} ) && 0 ) )
               &&
                  (   ( $pad{I2417} = $pos or 1 ) && 
                   do { 
                     local $::_V6_SUCCEED = 1;
                     $::_V6_MATCH_ = $m;
                     $m->data->{capture} = \( sub  { return({'metasyntax' => {'metasyntax' =>  "" . ${ $::_V6_MATCH_->{'metasyntax'}}, 'modifier' => ${ $::_V6_MATCH_->{'modifier'}}}});
 } ->( $m ) ); 
                     $bool = $::_V6_SUCCEED;
                     $::_V6_MATCH_ = $m if $bool; 
                     return $m if $bool; 
                   } ||    ( ( $pos = $pad{I2417} ) && 0 ) )
               )
             )
           ) ||    ( ( $pos = $pad{I2379} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for parse_metasyntax
 # Data::Bind->sub_signature
#  (\&parse_metasyntax, );
;
%variables = ('$<' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I2418} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->ident( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'ident'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2418} ) && 0 ) )
       &&
          (   ( $pad{I2419} = $pos or 1 ) && 
           ( ( substr( $s, $pos, 1 ) eq '>' ) 
               ? ( $pos += 1 or 1 )
               : 0
           ) ||    ( ( $pos = $pad{I2419} ) && 0 ) )
       &&
          (   ( $pad{I2420} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return({'match_variable' => '$' .  $::_V6_MATCH_->{'ident'}});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I2420} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'$' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
           ( $pad{I2421} = $pos or 1 ) 
           && (
           (
             (
              (   ( $pad{I2422} = $pos or 1 ) && 
                 do { 
                      my $prior = $::_V6_PRIOR_; 
                      my $match = 
                             $grammar->digit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                      $::_V6_PRIOR_ = $prior; 
                      my $bool = (!$match != 1);
                      $pos = $match->to if $bool;
                      $match;
                 } ||    ( ( $pos = $pad{I2422} ) && 0 ) )
             && do { while (
              (   ( $pad{I2422} = $pos or 1 ) && 
                 do { 
                      my $prior = $::_V6_PRIOR_; 
                      my $match = 
                             $grammar->digit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                      $::_V6_PRIOR_ = $prior; 
                      my $bool = (!$match != 1);
                      $pos = $match->to if $bool;
                      $match;
                 } ||    ( ( $pos = $pad{I2422} ) && 0 ) )) {}; $bool = 1 }
             ) 
           &&
              (   ( $pad{I2423} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub  { return({'match_variable' => '$' . $::_V6_MATCH_});
 } ->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I2423} ) && 0 ) )
           )
           ) 
         || ( 
           ( ( $bool = 1 ) && ( $pos = $pad{I2421} ) or 1 ) 
           &&            (
             (
              (   ( $pad{I2424} = $pos or 1 ) && 
                 ( ( substr( $s, $pos, 1 ) eq '^' ) 
                     ? ( $pos += 1 or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I2424} ) && 0 ) )
             || ( $bool = 1 )
             ) 
           &&
             (
              (   ( $pad{I2425} = $pos or 1 ) && 
                 (
                     ( $pad{I2426} = $pos or 1 ) 
                     && (
                      (   ( $pad{I2427} = $pos or 1 ) && 
                       do { 
                            my $prior = $::_V6_PRIOR_; 
                            my $match = 
                                   $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                            $::_V6_PRIOR_ = $prior; 
                            my $bool = (!$match != 1);
                            $pos = $match->to if $bool;
                            $match;
                       } ||    ( ( $pos = $pad{I2427} ) && 0 ) )
                     ) 
                   || ( 
                     ( ( $bool = 1 ) && ( $pos = $pad{I2426} ) or 1 ) 
                     &&                       (   ( $pad{I2428} = $pos or 1 ) && 
                       ( ( substr( $s, $pos, 1 ) eq '_' ) 
                           ? ( $pos += 1 or 1 )
                           : 0
                       ) ||    ( ( $pos = $pad{I2428} ) && 0 ) )
                     ) 
                   || ( 
                     ( ( $bool = 1 ) && ( $pos = $pad{I2426} ) or 1 ) 
                     &&                      (
                        (   ( $pad{I2429} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq ':' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I2429} ) && 0 ) )
                     &&
                        (   ( $pad{I2430} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq ':' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I2430} ) && 0 ) )
                     )
                   )
                 ) ||    ( ( $pos = $pad{I2425} ) && 0 ) )
             && do { while (
              (   ( $pad{I2425} = $pos or 1 ) && 
                 (
                     ( $pad{I2426} = $pos or 1 ) 
                     && (
                      (   ( $pad{I2427} = $pos or 1 ) && 
                       do { 
                            my $prior = $::_V6_PRIOR_; 
                            my $match = 
                                   $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                            $::_V6_PRIOR_ = $prior; 
                            my $bool = (!$match != 1);
                            $pos = $match->to if $bool;
                            $match;
                       } ||    ( ( $pos = $pad{I2427} ) && 0 ) )
                     ) 
                   || ( 
                     ( ( $bool = 1 ) && ( $pos = $pad{I2426} ) or 1 ) 
                     &&                       (   ( $pad{I2428} = $pos or 1 ) && 
                       ( ( substr( $s, $pos, 1 ) eq '_' ) 
                           ? ( $pos += 1 or 1 )
                           : 0
                       ) ||    ( ( $pos = $pad{I2428} ) && 0 ) )
                     ) 
                   || ( 
                     ( ( $bool = 1 ) && ( $pos = $pad{I2426} ) or 1 ) 
                     &&                      (
                        (   ( $pad{I2429} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq ':' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I2429} ) && 0 ) )
                     &&
                        (   ( $pad{I2430} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq ':' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I2430} ) && 0 ) )
                     )
                   )
                 ) ||    ( ( $pos = $pad{I2425} ) && 0 ) )) {}; $bool = 1 }
             ) 
           &&
              (   ( $pad{I2431} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub  { return({'variable' => '$' . $::_V6_MATCH_});
 } ->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I2431} ) && 0 ) )
           )
         )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'@' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
           ( $pad{I2432} = $pos or 1 ) 
           && (
           (
             (
              (   ( $pad{I2433} = $pos or 1 ) && 
                 do { 
                      my $prior = $::_V6_PRIOR_; 
                      my $match = 
                             $grammar->digit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                      $::_V6_PRIOR_ = $prior; 
                      my $bool = (!$match != 1);
                      $pos = $match->to if $bool;
                      $match;
                 } ||    ( ( $pos = $pad{I2433} ) && 0 ) )
             && do { while (
              (   ( $pad{I2433} = $pos or 1 ) && 
                 do { 
                      my $prior = $::_V6_PRIOR_; 
                      my $match = 
                             $grammar->digit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                      $::_V6_PRIOR_ = $prior; 
                      my $bool = (!$match != 1);
                      $pos = $match->to if $bool;
                      $match;
                 } ||    ( ( $pos = $pad{I2433} ) && 0 ) )) {}; $bool = 1 }
             ) 
           &&
              (   ( $pad{I2434} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub  { return({'match_variable' => '@' . $::_V6_MATCH_});
 } ->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I2434} ) && 0 ) )
           )
           ) 
         || ( 
           ( ( $bool = 1 ) && ( $pos = $pad{I2432} ) or 1 ) 
           &&            (
             (
              (   ( $pad{I2435} = $pos or 1 ) && 
                 ( ( substr( $s, $pos, 1 ) eq '^' ) 
                     ? ( $pos += 1 or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I2435} ) && 0 ) )
             || ( $bool = 1 )
             ) 
           &&
             (
              (   ( $pad{I2436} = $pos or 1 ) && 
                 (
                     ( $pad{I2437} = $pos or 1 ) 
                     && (
                      (   ( $pad{I2438} = $pos or 1 ) && 
                       do { 
                            my $prior = $::_V6_PRIOR_; 
                            my $match = 
                                   $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                            $::_V6_PRIOR_ = $prior; 
                            my $bool = (!$match != 1);
                            $pos = $match->to if $bool;
                            $match;
                       } ||    ( ( $pos = $pad{I2438} ) && 0 ) )
                     ) 
                   || ( 
                     ( ( $bool = 1 ) && ( $pos = $pad{I2437} ) or 1 ) 
                     &&                       (   ( $pad{I2439} = $pos or 1 ) && 
                       ( ( substr( $s, $pos, 1 ) eq '_' ) 
                           ? ( $pos += 1 or 1 )
                           : 0
                       ) ||    ( ( $pos = $pad{I2439} ) && 0 ) )
                     ) 
                   || ( 
                     ( ( $bool = 1 ) && ( $pos = $pad{I2437} ) or 1 ) 
                     &&                      (
                        (   ( $pad{I2440} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq ':' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I2440} ) && 0 ) )
                     &&
                        (   ( $pad{I2441} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq ':' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I2441} ) && 0 ) )
                     )
                   )
                 ) ||    ( ( $pos = $pad{I2436} ) && 0 ) )
             && do { while (
              (   ( $pad{I2436} = $pos or 1 ) && 
                 (
                     ( $pad{I2437} = $pos or 1 ) 
                     && (
                      (   ( $pad{I2438} = $pos or 1 ) && 
                       do { 
                            my $prior = $::_V6_PRIOR_; 
                            my $match = 
                                   $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                            $::_V6_PRIOR_ = $prior; 
                            my $bool = (!$match != 1);
                            $pos = $match->to if $bool;
                            $match;
                       } ||    ( ( $pos = $pad{I2438} ) && 0 ) )
                     ) 
                   || ( 
                     ( ( $bool = 1 ) && ( $pos = $pad{I2437} ) or 1 ) 
                     &&                       (   ( $pad{I2439} = $pos or 1 ) && 
                       ( ( substr( $s, $pos, 1 ) eq '_' ) 
                           ? ( $pos += 1 or 1 )
                           : 0
                       ) ||    ( ( $pos = $pad{I2439} ) && 0 ) )
                     ) 
                   || ( 
                     ( ( $bool = 1 ) && ( $pos = $pad{I2437} ) or 1 ) 
                     &&                      (
                        (   ( $pad{I2440} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq ':' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I2440} ) && 0 ) )
                     &&
                        (   ( $pad{I2441} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq ':' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I2441} ) && 0 ) )
                     )
                   )
                 ) ||    ( ( $pos = $pad{I2436} ) && 0 ) )) {}; $bool = 1 }
             ) 
           &&
              (   ( $pad{I2442} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub  { return({'variable' => '@' . $::_V6_MATCH_});
 } ->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I2442} ) && 0 ) )
           )
         )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'%' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
           ( $pad{I2443} = $pos or 1 ) 
           && (
           (
             (
              (   ( $pad{I2444} = $pos or 1 ) && 
                 do { 
                      my $prior = $::_V6_PRIOR_; 
                      my $match = 
                             $grammar->digit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                      $::_V6_PRIOR_ = $prior; 
                      my $bool = (!$match != 1);
                      $pos = $match->to if $bool;
                      $match;
                 } ||    ( ( $pos = $pad{I2444} ) && 0 ) )
             && do { while (
              (   ( $pad{I2444} = $pos or 1 ) && 
                 do { 
                      my $prior = $::_V6_PRIOR_; 
                      my $match = 
                             $grammar->digit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                      $::_V6_PRIOR_ = $prior; 
                      my $bool = (!$match != 1);
                      $pos = $match->to if $bool;
                      $match;
                 } ||    ( ( $pos = $pad{I2444} ) && 0 ) )) {}; $bool = 1 }
             ) 
           &&
              (   ( $pad{I2445} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub  { return({'match_variable' => '%' . $::_V6_MATCH_});
 } ->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I2445} ) && 0 ) )
           )
           ) 
         || ( 
           ( ( $bool = 1 ) && ( $pos = $pad{I2443} ) or 1 ) 
           &&            (
             (
              (   ( $pad{I2446} = $pos or 1 ) && 
                 ( ( substr( $s, $pos, 1 ) eq '^' ) 
                     ? ( $pos += 1 or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I2446} ) && 0 ) )
             || ( $bool = 1 )
             ) 
           &&
             (
              (   ( $pad{I2447} = $pos or 1 ) && 
                 (
                     ( $pad{I2448} = $pos or 1 ) 
                     && (
                      (   ( $pad{I2449} = $pos or 1 ) && 
                       do { 
                            my $prior = $::_V6_PRIOR_; 
                            my $match = 
                                   $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                            $::_V6_PRIOR_ = $prior; 
                            my $bool = (!$match != 1);
                            $pos = $match->to if $bool;
                            $match;
                       } ||    ( ( $pos = $pad{I2449} ) && 0 ) )
                     ) 
                   || ( 
                     ( ( $bool = 1 ) && ( $pos = $pad{I2448} ) or 1 ) 
                     &&                       (   ( $pad{I2450} = $pos or 1 ) && 
                       ( ( substr( $s, $pos, 1 ) eq '_' ) 
                           ? ( $pos += 1 or 1 )
                           : 0
                       ) ||    ( ( $pos = $pad{I2450} ) && 0 ) )
                     ) 
                   || ( 
                     ( ( $bool = 1 ) && ( $pos = $pad{I2448} ) or 1 ) 
                     &&                      (
                        (   ( $pad{I2451} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq ':' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I2451} ) && 0 ) )
                     &&
                        (   ( $pad{I2452} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq ':' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I2452} ) && 0 ) )
                     )
                   )
                 ) ||    ( ( $pos = $pad{I2447} ) && 0 ) )
             && do { while (
              (   ( $pad{I2447} = $pos or 1 ) && 
                 (
                     ( $pad{I2448} = $pos or 1 ) 
                     && (
                      (   ( $pad{I2449} = $pos or 1 ) && 
                       do { 
                            my $prior = $::_V6_PRIOR_; 
                            my $match = 
                                   $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                            $::_V6_PRIOR_ = $prior; 
                            my $bool = (!$match != 1);
                            $pos = $match->to if $bool;
                            $match;
                       } ||    ( ( $pos = $pad{I2449} ) && 0 ) )
                     ) 
                   || ( 
                     ( ( $bool = 1 ) && ( $pos = $pad{I2448} ) or 1 ) 
                     &&                       (   ( $pad{I2450} = $pos or 1 ) && 
                       ( ( substr( $s, $pos, 1 ) eq '_' ) 
                           ? ( $pos += 1 or 1 )
                           : 0
                       ) ||    ( ( $pos = $pad{I2450} ) && 0 ) )
                     ) 
                   || ( 
                     ( ( $bool = 1 ) && ( $pos = $pad{I2448} ) or 1 ) 
                     &&                      (
                        (   ( $pad{I2451} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq ':' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I2451} ) && 0 ) )
                     &&
                        (   ( $pad{I2452} = $pos or 1 ) && 
                         ( ( substr( $s, $pos, 1 ) eq ':' ) 
                             ? ( $pos += 1 or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I2452} ) && 0 ) )
                     )
                   )
                 ) ||    ( ( $pos = $pad{I2447} ) && 0 ) )) {}; $bool = 1 }
             ) 
           &&
              (   ( $pad{I2453} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub  { return({'variable' => '%' . $::_V6_MATCH_});
 } ->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I2453} ) && 0 ) )
           )
         )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
);
%rule_terms = ('{*}' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
        (   ( $pad{I2454} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub  { return({'metasyntax' => {'metasyntax' => 'null'}});
 } ->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I2454} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'\'' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I2455} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->literal( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                my $bool = (!$match != 1);
                $pos = $match->to if $bool;
                $match;
           } ||    ( ( $pos = $pad{I2455} ) && 0 ) )
       &&
          (   ( $pad{I2456} = $pos or 1 ) && 
           ( ( substr( $s, $pos, 1 ) eq chr(39) ) 
               ? ( $pos += 1 or 1 )
               : 0
           ) ||    ( ( $pos = $pad{I2456} ) && 0 ) )
       &&
          (   ( $pad{I2457} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return({'metasyntax' => {'metasyntax' => '\'' . ${$::_V6_MATCH_}}});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I2457} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'(' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I2458} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2458} ) && 0 ) )
       &&
          (   ( $pad{I2459} = $pos or 1 ) && 
           ( ( substr( $s, $pos, 1 ) eq ')' ) 
               ? ( $pos += 1 or 1 )
               : 0
           ) ||    ( ( $pos = $pad{I2459} ) && 0 ) )
       &&
          (   ( $pad{I2460} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return({'capturing_group' => ${ $::_V6_MATCH_->{'rule'}}});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I2460} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'<(' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I2461} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2461} ) && 0 ) )
       &&
          (   ( $pad{I2462} = $pos or 1 ) && 
           ( ( substr( $s, $pos, 2 ) eq ')>' ) 
               ? ( $pos += 2 or 1 )
               : 0
           ) ||    ( ( $pos = $pad{I2462} ) && 0 ) )
       &&
          (   ( $pad{I2463} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return({'capture_as_result' => ${ $::_V6_MATCH_->{'rule'}}});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I2463} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'<+' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I2464} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->char_class( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'char_class'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2464} ) && 0 ) )
       &&
         do { while (
          (   ( $pad{I2465} = $pos or 1 ) && 
             do{ 
                 my $hash = do {
                   my $bool = 1;
                   my $from = $pos;
                   my @match;
                   my %named;
                   $bool = 0 unless
                     (
                        (   ( $pad{I2466} = $pos or 1 ) && 
                         ( ( substr( $s, $pos ) =~ m/^((?:(?=[+-]))\X)/ )  
                             ? ( $pos += length( $1 ) or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I2466} ) && 0 ) )
                     &&
                        (   ( $pad{I2467} = $pos or 1 ) && 
                         do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                                     $grammar->char_class( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'char_class'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2467} ) && 0 ) )
                     );
                   { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                 };
                 my $bool = ${$hash->{'bool'}};
                 if ( $bool ) {
                     push @{ $match[ 0 ] }, Pugs::Runtime::Match->new( $hash );
                 }
                 $bool;
             } ||    ( ( $pos = $pad{I2465} ) && 0 ) )) {}; $bool = 1 }
       &&
          (   ( $pad{I2468} = $pos or 1 ) && 
           ( ( substr( $s, $pos, 1 ) eq '>' ) 
               ? ( $pos += 1 or 1 )
               : 0
           ) ||    ( ( $pos = $pad{I2468} ) && 0 ) )
       &&
          (   ( $pad{I2469} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return({'char_class' => ['+' .  $::_V6_MATCH_->{'char_class'},
@{($::_V6_MATCH_->[0])}]});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I2469} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'<-' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I2470} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->char_class( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'char_class'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2470} ) && 0 ) )
       &&
         do { while (
          (   ( $pad{I2471} = $pos or 1 ) && 
             do{ 
                 my $hash = do {
                   my $bool = 1;
                   my $from = $pos;
                   my @match;
                   my %named;
                   $bool = 0 unless
                     (
                        (   ( $pad{I2472} = $pos or 1 ) && 
                         ( ( substr( $s, $pos ) =~ m/^((?:(?=[+-]))\X)/ )  
                             ? ( $pos += length( $1 ) or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I2472} ) && 0 ) )
                     &&
                        (   ( $pad{I2473} = $pos or 1 ) && 
                         do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                                     $grammar->char_class( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'char_class'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2473} ) && 0 ) )
                     );
                   { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                 };
                 my $bool = ${$hash->{'bool'}};
                 if ( $bool ) {
                     push @{ $match[ 0 ] }, Pugs::Runtime::Match->new( $hash );
                 }
                 $bool;
             } ||    ( ( $pos = $pad{I2471} ) && 0 ) )) {}; $bool = 1 }
       &&
          (   ( $pad{I2474} = $pos or 1 ) && 
           ( ( substr( $s, $pos, 1 ) eq '>' ) 
               ? ( $pos += 1 or 1 )
               : 0
           ) ||    ( ( $pos = $pad{I2474} ) && 0 ) )
       &&
          (   ( $pad{I2475} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return({'char_class' => ['-' .  $::_V6_MATCH_->{'char_class'},
@{($::_V6_MATCH_->[0])}]});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I2475} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'<[' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I2476} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->char_range( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'char_range'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2476} ) && 0 ) )
       &&
          (   ( $pad{I2477} = $pos or 1 ) && 
           ( ( substr( $s, $pos, 1 ) eq ']' ) 
               ? ( $pos += 1 or 1 )
               : 0
           ) ||    ( ( $pos = $pad{I2477} ) && 0 ) )
       &&
         do { while (
          (   ( $pad{I2478} = $pos or 1 ) && 
             do{ 
                 my $hash = do {
                   my $bool = 1;
                   my $from = $pos;
                   my @match;
                   my %named;
                   $bool = 0 unless
                     (
                        (   ( $pad{I2479} = $pos or 1 ) && 
                         ( ( substr( $s, $pos ) =~ m/^((?:(?=[+-]))\X)/ )  
                             ? ( $pos += length( $1 ) or 1 )
                             : 0
                         ) ||    ( ( $pos = $pad{I2479} ) && 0 ) )
                     &&
                        (   ( $pad{I2480} = $pos or 1 ) && 
                         do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                                     $grammar->char_class( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'char_class'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2480} ) && 0 ) )
                     );
                   { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                 };
                 my $bool = ${$hash->{'bool'}};
                 if ( $bool ) {
                     push @{ $match[ 0 ] }, Pugs::Runtime::Match->new( $hash );
                 }
                 $bool;
             } ||    ( ( $pos = $pad{I2478} ) && 0 ) )) {}; $bool = 1 }
       &&
          (   ( $pad{I2481} = $pos or 1 ) && 
           ( ( substr( $s, $pos, 1 ) eq '>' ) 
               ? ( $pos += 1 or 1 )
               : 0
           ) ||    ( ( $pos = $pad{I2481} ) && 0 ) )
       &&
          (   ( $pad{I2482} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return({'char_class' => ['+[' .  $::_V6_MATCH_->{'char_range'} . ']',
@{($::_V6_MATCH_->[0])}]});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I2482} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'<' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I2483} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->parse_metasyntax( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'parse_metasyntax'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2483} ) && 0 ) )
       &&
          (   ( $pad{I2484} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return(${ $::_V6_MATCH_->{'parse_metasyntax'}});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I2484} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'{' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I2485} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->parsed_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'parsed_code'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2485} ) && 0 ) )
       &&
          (   ( $pad{I2486} = $pos or 1 ) && 
           ( ( substr( $s, $pos, 1 ) eq '}' ) 
               ? ( $pos += 1 or 1 )
               : 0
           ) ||    ( ( $pos = $pad{I2486} ) && 0 ) )
       &&
          (   ( $pad{I2487} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return({'closure' => {'closure' => ${ $::_V6_MATCH_->{'parsed_code'}}, 'modifier' => 'plain'}});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I2487} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'\\' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I2488} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'special_char'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2488} ) && 0 ) )
       &&
          (   ( $pad{I2489} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return(${ $::_V6_MATCH_->{'special_char'}});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I2489} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'.' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
        (   ( $pad{I2490} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub  { return({'dot' => 1});
 } ->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I2490} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'[' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I2491} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2491} ) && 0 ) )
       &&
          (   ( $pad{I2492} = $pos or 1 ) && 
           ( ( substr( $s, $pos, 1 ) eq ']' ) 
               ? ( $pos += 1 or 1 )
               : 0
           ) ||    ( ( $pos = $pad{I2492} ) && 0 ) )
       &&
          (   ( $pad{I2493} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return(${ $::_V6_MATCH_->{'rule'}});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I2493} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
':::' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
        (   ( $pad{I2494} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub  { return({'colon' => ':::'});
 } ->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I2494} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
':?' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
        (   ( $pad{I2495} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub  { return({'colon' => ':?'});
 } ->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I2495} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
':+' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
        (   ( $pad{I2496} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub  { return({'colon' => ':+'});
 } ->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I2496} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'::' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
        (   ( $pad{I2497} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub  { return({'colon' => '::'});
 } ->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I2497} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
':' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
        (   ( $pad{I2498} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub  { return({'colon' => ':'});
 } ->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I2498} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'$$' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
        (   ( $pad{I2499} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub  { return({'colon' => '$$'});
 } ->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I2499} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'$' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
        (   ( $pad{I2500} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub  { return({'colon' => '$'});
 } ->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I2500} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'^^' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
        (   ( $pad{I2501} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub  { return({'colon' => '^^'});
 } ->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I2501} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'^' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
        (   ( $pad{I2502} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub  { return({'colon' => '^'});
 } ->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I2502} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'>>' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
        (   ( $pad{I2503} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub  { return({'colon' => '>>'});
 } ->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I2503} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'»' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
        (   ( $pad{I2504} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub  { return({'colon' => '>>'});
 } ->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I2504} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'<<' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
        (   ( $pad{I2505} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub  { return({'colon' => '<<'});
 } ->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I2505} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
'«' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
        (   ( $pad{I2506} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub  { return({'colon' => '<<'});
 } ->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I2506} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
':i' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I2507} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                my $bool = (!$match != 1);
                $pos = $match->to if $bool;
                $match;
           } ||    ( ( $pos = $pad{I2507} ) && 0 ) )
       &&
          (   ( $pad{I2508} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2508} ) && 0 ) )
       &&
          (   ( $pad{I2509} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return({'modifier' => {'modifier' => 'ignorecase', 'rule'=>${ $::_V6_MATCH_->{ qw(rule) }}}});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I2509} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
':ignorecase' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I2510} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                my $bool = (!$match != 1);
                $pos = $match->to if $bool;
                $match;
           } ||    ( ( $pos = $pad{I2510} ) && 0 ) )
       &&
          (   ( $pad{I2511} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2511} ) && 0 ) )
       &&
          (   ( $pad{I2512} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return({'modifier' => {'modifier' => 'ignorecase', 'rule'=>${ $::_V6_MATCH_->{ qw(rule) }}}});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I2512} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
':s' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I2513} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                my $bool = (!$match != 1);
                $pos = $match->to if $bool;
                $match;
           } ||    ( ( $pos = $pad{I2513} ) && 0 ) )
       &&
          (   ( $pad{I2514} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2514} ) && 0 ) )
       &&
          (   ( $pad{I2515} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return({'modifier' => 'sigspace', 'rule'=>${ $::_V6_MATCH_->{ qw(rule) }}});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I2515} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
':sigspace' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I2516} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                my $bool = (!$match != 1);
                $pos = $match->to if $bool;
                $match;
           } ||    ( ( $pos = $pad{I2516} ) && 0 ) )
       &&
          (   ( $pad{I2517} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2517} ) && 0 ) )
       &&
          (   ( $pad{I2518} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return({'modifier' => 'sigspace', 'rule'=>${ $::_V6_MATCH_->{ qw(rule) }}});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I2518} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
':P5' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I2519} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                my $bool = (!$match != 1);
                $pos = $match->to if $bool;
                $match;
           } ||    ( ( $pos = $pad{I2519} ) && 0 ) )
       &&
          (   ( $pad{I2520} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2520} ) && 0 ) )
       &&
          (   ( $pad{I2521} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return({'modifier' => 'Perl5', 'rule'=>${ $::_V6_MATCH_->{ qw(rule) }}});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I2521} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
':Perl5' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I2522} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                my $bool = (!$match != 1);
                $pos = $match->to if $bool;
                $match;
           } ||    ( ( $pos = $pad{I2522} ) && 0 ) )
       &&
          (   ( $pad{I2523} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2523} ) && 0 ) )
       &&
          (   ( $pad{I2524} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return({'modifier' => 'Perl5', 'rule'=>${ $::_V6_MATCH_->{ qw(rule) }}});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I2524} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
':bytes' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I2525} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                my $bool = (!$match != 1);
                $pos = $match->to if $bool;
                $match;
           } ||    ( ( $pos = $pad{I2525} ) && 0 ) )
       &&
          (   ( $pad{I2526} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2526} ) && 0 ) )
       &&
          (   ( $pad{I2527} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return({'modifier' => 'bytes', 'rule'=>${ $::_V6_MATCH_->{ qw(rule) }}});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I2527} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
':codes' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I2528} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                my $bool = (!$match != 1);
                $pos = $match->to if $bool;
                $match;
           } ||    ( ( $pos = $pad{I2528} ) && 0 ) )
       &&
          (   ( $pad{I2529} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2529} ) && 0 ) )
       &&
          (   ( $pad{I2530} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return({'modifier' => 'codes', 'rule'=>${ $::_V6_MATCH_->{ qw(rule) }}});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I2530} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
':graphs' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I2531} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                my $bool = (!$match != 1);
                $pos = $match->to if $bool;
                $match;
           } ||    ( ( $pos = $pad{I2531} ) && 0 ) )
       &&
          (   ( $pad{I2532} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2532} ) && 0 ) )
       &&
          (   ( $pad{I2533} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return({'modifier' => 'graphs', 'rule'=>${ $::_V6_MATCH_->{ qw(rule) }}});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I2533} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
,
':langs' => do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2]; 
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I2534} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                my $bool = (!$match != 1);
                $pos = $match->to if $bool;
                $match;
           } ||    ( ( $pos = $pad{I2534} ) && 0 ) )
       &&
          (   ( $pad{I2535} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2535} ) && 0 ) )
       &&
          (   ( $pad{I2536} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { return({'modifier' => 'langs', 'rule'=>${ $::_V6_MATCH_->{ qw(rule) }}});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I2536} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
);
*term = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
           ( $pad{I2537} = $pos or 1 ) 
           && (
           (
              (   ( $pad{I2538} = $pos or 1 ) && 
               do{ 
                my $match = 
          do {
            our $I2539;
            our $I2539_sizes;
            unless ( $I2539 ) {
                my $hash = \%Pugs::Grammar::Rule::variables;
                my %sizes = map { length($_) => 1 } keys %$hash;
                $I2539_sizes = [ sort { $b <=> $a } keys %sizes ];
                $I2539 = $hash;
            }
            my $match = 0;
            my $key;
            for ( @$I2539_sizes ) {
                $key = ( $pos <= length( $s ) 
                            ? substr( $s, $pos, $_ )
                            : '' );
                if ( exists $I2539->{$key} ) {
                    #$named{KEY} = $key;
                    #$::_V6_MATCH_ = $m; 
                    #print "m: ", Dumper( $::_V6_MATCH_->data )
                    #    if ( $key eq 'until' );
                    $match = Pugs::Runtime::Regex::preprocess_hash( $I2539, $key )->( $s, $grammar, { p => ( $pos + $_ ), positionals => [ ], args => { KEY => $key } }, undef );
                    last if $match;
                }
            }
            if ( $match ) {
                $pos = $match->to;
                #print "match: $key at $pos = ", Dumper( $match->data );
                $bool = 1;
            }; # else { $bool = 0 }
            $match;
          };
                if ( $match ) { $named{'Pugs::Grammar::Rule::variables'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2538} ) && 0 ) )
           &&
              (   ( $pad{I2540} = $pos or 1 ) && 
               (
                   ( $pad{I2541} = $pos or 1 ) 
                   && (
                   (
                     (
                      (   ( $pad{I2542} = $pos or 1 ) && 
                         do { 
                              my $prior = $::_V6_PRIOR_; 
                              my $match = 
                                     $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                              $::_V6_PRIOR_ = $prior; 
                              my $bool = (!$match != 1);
                              $pos = $match->to if $bool;
                              $match;
                         } ||    ( ( $pos = $pad{I2542} ) && 0 ) )
                     || ( $bool = 1 )
                     ) 
                   &&
                      (   ( $pad{I2543} = $pos or 1 ) && 
                       ( ( substr( $s, $pos, 2 ) eq ':=' ) 
                           ? ( $pos += 2 or 1 )
                           : 0
                       ) ||    ( ( $pos = $pad{I2543} ) && 0 ) )
                   &&
                     (
                      (   ( $pad{I2544} = $pos or 1 ) && 
                         do { 
                              my $prior = $::_V6_PRIOR_; 
                              my $match = 
                                     $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                              $::_V6_PRIOR_ = $prior; 
                              my $bool = (!$match != 1);
                              $pos = $match->to if $bool;
                              $match;
                         } ||    ( ( $pos = $pad{I2544} ) && 0 ) )
                     || ( $bool = 1 )
                     ) 
                   &&
                      (   ( $pad{I2545} = $pos or 1 ) && 
                       do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                                   $grammar->named_capture_body( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'named_capture_body'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2545} ) && 0 ) )
                   &&
                      (   ( $pad{I2546} = $pos or 1 ) && 
                       do { 
                         local $::_V6_SUCCEED = 1;
                         $::_V6_MATCH_ = $m;
                         $m->data->{capture} = \( sub  { return({'named_capture' => {'rule' => ${ $::_V6_MATCH_->{'named_capture_body'}}, 'ident' => ${ $::_V6_MATCH_->{'Pugs::Grammar::Rule::variables'}}}});
 } ->( $m ) ); 
                         $bool = $::_V6_SUCCEED;
                         $::_V6_MATCH_ = $m if $bool; 
                         return $m if $bool; 
                       } ||    ( ( $pos = $pad{I2546} ) && 0 ) )
                   )
                   ) 
                 || ( 
                   ( ( $bool = 1 ) && ( $pos = $pad{I2541} ) or 1 ) 
                   &&                     (   ( $pad{I2547} = $pos or 1 ) && 
                     do { 
                       local $::_V6_SUCCEED = 1;
                       $::_V6_MATCH_ = $m;
                       $m->data->{capture} = \( sub  { return(${ $::_V6_MATCH_->{'Pugs::Grammar::Rule::variables'}});
 } ->( $m ) ); 
                       $bool = $::_V6_SUCCEED;
                       $::_V6_MATCH_ = $m if $bool; 
                       return $m if $bool; 
                     } ||    ( ( $pos = $pad{I2547} ) && 0 ) )
                 )
               ) ||    ( ( $pos = $pad{I2540} ) && 0 ) )
           )
           ) 
         || ( 
           ( ( $bool = 1 ) && ( $pos = $pad{I2537} ) or 1 ) 
           &&            (
              (   ( $pad{I2548} = $pos or 1 ) && 
               do{ 
                my $match = 
          do {
            our $I2549;
            our $I2549_sizes;
            unless ( $I2549 ) {
                my $hash = \%Pugs::Grammar::Rule::rule_terms;
                my %sizes = map { length($_) => 1 } keys %$hash;
                $I2549_sizes = [ sort { $b <=> $a } keys %sizes ];
                $I2549 = $hash;
            }
            my $match = 0;
            my $key;
            for ( @$I2549_sizes ) {
                $key = ( $pos <= length( $s ) 
                            ? substr( $s, $pos, $_ )
                            : '' );
                if ( exists $I2549->{$key} ) {
                    #$named{KEY} = $key;
                    #$::_V6_MATCH_ = $m; 
                    #print "m: ", Dumper( $::_V6_MATCH_->data )
                    #    if ( $key eq 'until' );
                    $match = Pugs::Runtime::Regex::preprocess_hash( $I2549, $key )->( $s, $grammar, { p => ( $pos + $_ ), positionals => [ ], args => { KEY => $key } }, undef );
                    last if $match;
                }
            }
            if ( $match ) {
                $pos = $match->to;
                #print "match: $key at $pos = ", Dumper( $match->data );
                $bool = 1;
            }; # else { $bool = 0 }
            $match;
          };
                if ( $match ) { $named{'Pugs::Grammar::Rule::rule_terms'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2548} ) && 0 ) )
           &&
              (   ( $pad{I2550} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub  { return(${ $::_V6_MATCH_->{'Pugs::Grammar::Rule::rule_terms'}});
 } ->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I2550} ) && 0 ) )
           )
           ) 
         || ( 
           ( ( $bool = 1 ) && ( $pos = $pad{I2537} ) or 1 ) 
           &&            (
              (   ( $pad{I2551} = $pos or 1 ) && 
               ( ( substr( $s, $pos ) =~ m/^((?:(?![\]\}\)\>\:\?\+\*\|\&]))\X)/ )  
                   ? ( $pos += length( $1 ) or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I2551} ) && 0 ) )
           &&
              (   ( $pad{I2552} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub  { return({'constant' => ${$::_V6_MATCH_}});
 } ->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I2552} ) && 0 ) )
           )
         )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for term
 # Data::Bind->sub_signature
#  (\&term, );
;
*quant = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
           ( $pad{I2553} = $pos or 1 ) 
           && (
           (
              (   ( $pad{I2554} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 2 ) eq '**' ) 
                   ? ( $pos += 2 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I2554} ) && 0 ) )
           &&
             (
              (   ( $pad{I2555} = $pos or 1 ) && 
                 do { 
                      my $prior = $::_V6_PRIOR_; 
                      my $match = 
                             $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                      $::_V6_PRIOR_ = $prior; 
                      my $bool = (!$match != 1);
                      $pos = $match->to if $bool;
                      $match;
                 } ||    ( ( $pos = $pad{I2555} ) && 0 ) )
             || ( $bool = 1 )
             ) 
           &&
              (   ( $pad{I2556} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 1 ) eq '{' ) 
                   ? ( $pos += 1 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I2556} ) && 0 ) )
           &&
              (   ( $pad{I2557} = $pos or 1 ) && 
               do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                           $grammar->parsed_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'parsed_code'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2557} ) && 0 ) )
           &&
              (   ( $pad{I2558} = $pos or 1 ) && 
               ( ( substr( $s, $pos, 1 ) eq '}' ) 
                   ? ( $pos += 1 or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I2558} ) && 0 ) )
           &&
              (   ( $pad{I2559} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub  { return({'closure' => ${ $::_V6_MATCH_->{'parsed_code'}}});
 } ->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I2559} ) && 0 ) )
           )
           ) 
         || ( 
           ( ( $bool = 1 ) && ( $pos = $pad{I2553} ) or 1 ) 
           &&            (
            (   ( $pad{I2560} = $pos or 1 ) && 
               ( ( substr( $s, $pos ) =~ m/^((?:(?=[\?\*\+]))\X)/ )  
                   ? ( $pos += length( $1 ) or 1 )
                   : 0
               ) ||    ( ( $pos = $pad{I2560} ) && 0 ) )
           || ( $bool = 1 )
           ) 
         )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for quant
 # Data::Bind->sub_signature
#  (\&quant, );
;
*quantifier = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
          (   ( $pad{I2561} = $pos or 1 ) && 
           do{ 
                my $match = Pugs::Runtime::Match->new( do {
                    my $bool = 1;
                    my $from = $pos;
                    my @match;
                    my %named;
                    $bool = 0 unless                    do{ 
                       my $hash = do {
                         my $bool = 1;
                         my $from = $pos;
                         my @match;
                         my %named;
                         $bool = 0 unless
                           (
                            (   ( $pad{I2562} = $pos or 1 ) && 
                               do { 
                                    my $prior = $::_V6_PRIOR_; 
                                    my $match = 
                                           $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                    $::_V6_PRIOR_ = $prior; 
                                    my $bool = (!$match != 1);
                                    $pos = $match->to if $bool;
                                    $match;
                               } ||    ( ( $pos = $pad{I2562} ) && 0 ) )
                           || ( $bool = 1 )
                           ) ;
                         { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                       };
                       my $bool = ${$hash->{'bool'}};
                       $match[ 0 ] = Pugs::Runtime::Match->new( $hash );
                       $bool;
                   };
                    { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                } );
                if ( $match ) { $named{'ws1'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2561} ) && 0 ) )
       &&
          (   ( $pad{I2563} = $pos or 1 ) && 
           do{ 
               my $pos1 = $pos;
               do {
                 my $pos = $pos1;
                 my $from = $pos;
                 my @match;
                 my %named;
                 $bool =                      do{ 
                         my $pos1 = $pos;
                         do {
                           my $pos = $pos1;
                           my $from = $pos;
                           my @match;
                           my %named;
                           $bool = 0 unless
                                (   ( $pad{I2564} = $pos or 1 ) && 
                                 ( ( substr( $s, $pos ) =~ m/^((?:(?=[\}\]\)]))\X)/ )  
                                     ? ( $pos += length( $1 ) or 1 )
                                     : 0
                                 ) ||    ( ( $pos = $pad{I2564} ) && 0 ) );
                           $bool;
                         };
                     } ? 0 : 1;
                 $bool;
               };
           } ||    ( ( $pos = $pad{I2563} ) && 0 ) )
       &&
          (   ( $pad{I2565} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->term( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'term'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2565} ) && 0 ) )
       &&
          (   ( $pad{I2566} = $pos or 1 ) && 
           do{ 
                my $match = Pugs::Runtime::Match->new( do {
                    my $bool = 1;
                    my $from = $pos;
                    my @match;
                    my %named;
                    $bool = 0 unless                    do{ 
                       my $hash = do {
                         my $bool = 1;
                         my $from = $pos;
                         my @match;
                         my %named;
                         $bool = 0 unless
                           (
                            (   ( $pad{I2567} = $pos or 1 ) && 
                               do { 
                                    my $prior = $::_V6_PRIOR_; 
                                    my $match = 
                                           $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                    $::_V6_PRIOR_ = $prior; 
                                    my $bool = (!$match != 1);
                                    $pos = $match->to if $bool;
                                    $match;
                               } ||    ( ( $pos = $pad{I2567} ) && 0 ) )
                           || ( $bool = 1 )
                           ) ;
                         { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                       };
                       my $bool = ${$hash->{'bool'}};
                       $match[ 0 ] = Pugs::Runtime::Match->new( $hash );
                       $bool;
                   };
                    { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                } );
                if ( $match ) { $named{'ws2'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2566} ) && 0 ) )
       &&
          (   ( $pad{I2568} = $pos or 1 ) && 
           do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                       $grammar->quant( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { $named{'quant'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2568} ) && 0 ) )
       &&
          (   ( $pad{I2569} = $pos or 1 ) && 
           do{ 
                my $match = Pugs::Runtime::Match->new( do {
                    my $bool = 1;
                    my $from = $pos;
                    my @match;
                    my %named;
                    $bool = 0 unless                    do{ 
                       my $hash = do {
                         my $bool = 1;
                         my $from = $pos;
                         my @match;
                         my %named;
                         $bool = 0 unless
                           (
                            (   ( $pad{I2570} = $pos or 1 ) && 
                               ( ( substr( $s, $pos ) =~ m/^((?:(?=[\?\+]))\X)/ )  
                                   ? ( $pos += length( $1 ) or 1 )
                                   : 0
                               ) ||    ( ( $pos = $pad{I2570} ) && 0 ) )
                           || ( $bool = 1 )
                           ) ;
                         { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                       };
                       my $bool = ${$hash->{'bool'}};
                       $match[ 0 ] = Pugs::Runtime::Match->new( $hash );
                       $bool;
                   };
                    { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                } );
                if ( $match ) { $named{'greedy'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2569} ) && 0 ) )
       &&
          (   ( $pad{I2571} = $pos or 1 ) && 
           do{ 
                my $match = Pugs::Runtime::Match->new( do {
                    my $bool = 1;
                    my $from = $pos;
                    my @match;
                    my %named;
                    $bool = 0 unless                    do{ 
                       my $hash = do {
                         my $bool = 1;
                         my $from = $pos;
                         my @match;
                         my %named;
                         $bool = 0 unless
                           (
                            (   ( $pad{I2572} = $pos or 1 ) && 
                               do { 
                                    my $prior = $::_V6_PRIOR_; 
                                    my $match = 
                                           $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                    $::_V6_PRIOR_ = $prior; 
                                    my $bool = (!$match != 1);
                                    $pos = $match->to if $bool;
                                    $match;
                               } ||    ( ( $pos = $pad{I2572} ) && 0 ) )
                           || ( $bool = 1 )
                           ) ;
                         { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                       };
                       my $bool = ${$hash->{'bool'}};
                       $match[ 0 ] = Pugs::Runtime::Match->new( $hash );
                       $bool;
                   };
                    { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                } );
                if ( $match ) { $named{'ws3'} = $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2571} ) && 0 ) )
       &&
          (   ( $pad{I2573} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { if((${ $::_V6_MATCH_->{'quant'}} eq '' && (${ $::_V6_MATCH_->{'greedy'}} eq '' && (${ $::_V6_MATCH_->{'ws1'}} eq '' && (${ $::_V6_MATCH_->{'ws2'}} eq '' && ${ $::_V6_MATCH_->{'ws3'}} eq ''))))) { return(${ $::_V6_MATCH_->{'term'}});
 } 
;
return({'quant' => {'term' => ${ $::_V6_MATCH_->{'term'}}, 'quant' => ${ $::_V6_MATCH_->{'quant'}}, 'greedy' => ${ $::_V6_MATCH_->{'greedy'}}, 'ws1' => ${ $::_V6_MATCH_->{'ws1'}}, 'ws2' => ${ $::_V6_MATCH_->{'ws2'}}, 'ws3' => ${ $::_V6_MATCH_->{'ws3'}}}});
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I2573} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for quantifier
 # Data::Bind->sub_signature
#  (\&quantifier, );
;
*concat = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
         (
          (   ( $pad{I2574} = $pos or 1 ) && 
             do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                         $grammar->quantifier( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'quantifier'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2574} ) && 0 ) )
         && do { while (
          (   ( $pad{I2574} = $pos or 1 ) && 
             do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                         $grammar->quantifier( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'quantifier'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2574} ) && 0 ) )) {}; $bool = 1 }
         ) 
       &&
          (   ( $pad{I2575} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { 
        my @a = map {  $_->()  }  @{ $::_V6_MATCH_->{'quantifier'} };
        return { concat => \@a ,}  if scalar @a > 1;
        return $a[0];;
 # use v6
;
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I2575} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for concat
 # Data::Bind->sub_signature
#  (\&concat, );
;
*conjunctive1 = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
         (
          (   ( $pad{I2576} = $pos or 1 ) && 
             (
               (
                (   ( $pad{I2577} = $pos or 1 ) && 
                   do { 
                        my $prior = $::_V6_PRIOR_; 
                        my $match = 
                               $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior; 
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   } ||    ( ( $pos = $pad{I2577} ) && 0 ) )
               || ( $bool = 1 )
               ) 
             &&
                (   ( $pad{I2578} = $pos or 1 ) && 
                 ( ( substr( $s, $pos, 1 ) eq '&' ) 
                     ? ( $pos += 1 or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I2578} ) && 0 ) )
             &&
                (   ( $pad{I2579} = $pos or 1 ) && 
                 do{ 
                     my $pos1 = $pos;
                     do {
                       my $pos = $pos1;
                       my $from = $pos;
                       my @match;
                       my %named;
                       $bool =                            do{ 
                               my $pos1 = $pos;
                               do {
                                 my $pos = $pos1;
                                 my $from = $pos;
                                 my @match;
                                 my %named;
                                 $bool = 0 unless
                                      (   ( $pad{I2580} = $pos or 1 ) && 
                                       ( ( substr( $s, $pos, 1 ) eq '&' ) 
                                           ? ( $pos += 1 or 1 )
                                           : 0
                                       ) ||    ( ( $pos = $pad{I2580} ) && 0 ) );
                                 $bool;
                               };
                           } ? 0 : 1;
                       $bool;
                     };
                 } ||    ( ( $pos = $pad{I2579} ) && 0 ) )
             ) ||    ( ( $pos = $pad{I2576} ) && 0 ) )
         || ( $bool = 1 )
         ) 
       &&
         (
           (   ( $pad{I2581} = $pos or 1 ) && 
             do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                         $grammar->concat( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'concat'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2581} ) && 0 ) )
         ) 
       &&
         do { while (
          (   ( $pad{I2582} = $pos or 1 ) && 
             (
                (   ( $pad{I2583} = $pos or 1 ) && 
                 ( ( substr( $s, $pos, 1 ) eq '&' ) 
                     ? ( $pos += 1 or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I2583} ) && 0 ) )
             &&
                (   ( $pad{I2584} = $pos or 1 ) && 
                 do{ 
                     my $pos1 = $pos;
                     do {
                       my $pos = $pos1;
                       my $from = $pos;
                       my @match;
                       my %named;
                       $bool =                            do{ 
                               my $pos1 = $pos;
                               do {
                                 my $pos = $pos1;
                                 my $from = $pos;
                                 my @match;
                                 my %named;
                                 $bool = 0 unless
                                      (   ( $pad{I2585} = $pos or 1 ) && 
                                       ( ( substr( $s, $pos, 1 ) eq '&' ) 
                                           ? ( $pos += 1 or 1 )
                                           : 0
                                       ) ||    ( ( $pos = $pad{I2585} ) && 0 ) );
                                 $bool;
                               };
                           } ? 0 : 1;
                       $bool;
                     };
                 } ||    ( ( $pos = $pad{I2584} ) && 0 ) )
             &&
                (   ( $pad{I2586} = $pos or 1 ) && 
                 do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                             $grammar->concat( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'concat'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2586} ) && 0 ) )
             ) ||    ( ( $pos = $pad{I2582} ) && 0 ) )) {}; $bool = 1 }
       &&
          (   ( $pad{I2587} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { 
        my @a = map {  $$_  }  @{ $::_V6_MATCH_->{'concat'} };
        return { conjunctive1 => \@a ,}  if scalar @a > 1;
        return $a[0];;
 # use v6
;
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I2587} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for conjunctive1
 # Data::Bind->sub_signature
#  (\&conjunctive1, );
;
*disjunctive1 = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
         (
          (   ( $pad{I2588} = $pos or 1 ) && 
             (
               (
                (   ( $pad{I2589} = $pos or 1 ) && 
                   do { 
                        my $prior = $::_V6_PRIOR_; 
                        my $match = 
                               $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior; 
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   } ||    ( ( $pos = $pad{I2589} ) && 0 ) )
               || ( $bool = 1 )
               ) 
             &&
                (   ( $pad{I2590} = $pos or 1 ) && 
                 ( ( substr( $s, $pos, 1 ) eq '|' ) 
                     ? ( $pos += 1 or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I2590} ) && 0 ) )
             &&
                (   ( $pad{I2591} = $pos or 1 ) && 
                 do{ 
                     my $pos1 = $pos;
                     do {
                       my $pos = $pos1;
                       my $from = $pos;
                       my @match;
                       my %named;
                       $bool =                            do{ 
                               my $pos1 = $pos;
                               do {
                                 my $pos = $pos1;
                                 my $from = $pos;
                                 my @match;
                                 my %named;
                                 $bool = 0 unless
                                      (   ( $pad{I2592} = $pos or 1 ) && 
                                       ( ( substr( $s, $pos, 1 ) eq '|' ) 
                                           ? ( $pos += 1 or 1 )
                                           : 0
                                       ) ||    ( ( $pos = $pad{I2592} ) && 0 ) );
                                 $bool;
                               };
                           } ? 0 : 1;
                       $bool;
                     };
                 } ||    ( ( $pos = $pad{I2591} ) && 0 ) )
             ) ||    ( ( $pos = $pad{I2588} ) && 0 ) )
         || ( $bool = 1 )
         ) 
       &&
         (
           (   ( $pad{I2593} = $pos or 1 ) && 
             do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                         $grammar->conjunctive1( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'conjunctive1'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2593} ) && 0 ) )
         ) 
       &&
         do { while (
          (   ( $pad{I2594} = $pos or 1 ) && 
             (
                (   ( $pad{I2595} = $pos or 1 ) && 
                 ( ( substr( $s, $pos, 1 ) eq '|' ) 
                     ? ( $pos += 1 or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I2595} ) && 0 ) )
             &&
                (   ( $pad{I2596} = $pos or 1 ) && 
                 do{ 
                     my $pos1 = $pos;
                     do {
                       my $pos = $pos1;
                       my $from = $pos;
                       my @match;
                       my %named;
                       $bool =                            do{ 
                               my $pos1 = $pos;
                               do {
                                 my $pos = $pos1;
                                 my $from = $pos;
                                 my @match;
                                 my %named;
                                 $bool = 0 unless
                                      (   ( $pad{I2597} = $pos or 1 ) && 
                                       ( ( substr( $s, $pos, 1 ) eq '|' ) 
                                           ? ( $pos += 1 or 1 )
                                           : 0
                                       ) ||    ( ( $pos = $pad{I2597} ) && 0 ) );
                                 $bool;
                               };
                           } ? 0 : 1;
                       $bool;
                     };
                 } ||    ( ( $pos = $pad{I2596} ) && 0 ) )
             &&
                (   ( $pad{I2598} = $pos or 1 ) && 
                 do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                             $grammar->conjunctive1( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'conjunctive1'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2598} ) && 0 ) )
             ) ||    ( ( $pos = $pad{I2594} ) && 0 ) )) {}; $bool = 1 }
       &&
          (   ( $pad{I2599} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { 
        my @a = map {  $$_  }  @{ $::_V6_MATCH_->{'conjunctive1'} };
        return { alt1 => \@a ,}  if scalar @a > 1;
        return $a[0];;
 # use v6
;
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I2599} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for disjunctive1
 # Data::Bind->sub_signature
#  (\&disjunctive1, );
;
*conjunctive = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
         (
          (   ( $pad{I2600} = $pos or 1 ) && 
             (
               (
                (   ( $pad{I2601} = $pos or 1 ) && 
                   do { 
                        my $prior = $::_V6_PRIOR_; 
                        my $match = 
                               $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior; 
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   } ||    ( ( $pos = $pad{I2601} ) && 0 ) )
               || ( $bool = 1 )
               ) 
             &&
                (   ( $pad{I2602} = $pos or 1 ) && 
                 ( ( substr( $s, $pos, 1 ) eq '&' ) 
                     ? ( $pos += 1 or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I2602} ) && 0 ) )
             &&
                (   ( $pad{I2603} = $pos or 1 ) && 
                 ( ( substr( $s, $pos, 1 ) eq '&' ) 
                     ? ( $pos += 1 or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I2603} ) && 0 ) )
             ) ||    ( ( $pos = $pad{I2600} ) && 0 ) )
         || ( $bool = 1 )
         ) 
       &&
         (
           (   ( $pad{I2604} = $pos or 1 ) && 
             do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                         $grammar->disjunctive1( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'disjunctive1'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2604} ) && 0 ) )
         ) 
       &&
         do { while (
          (   ( $pad{I2605} = $pos or 1 ) && 
             (
                (   ( $pad{I2606} = $pos or 1 ) && 
                 ( ( substr( $s, $pos, 1 ) eq '&' ) 
                     ? ( $pos += 1 or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I2606} ) && 0 ) )
             &&
                (   ( $pad{I2607} = $pos or 1 ) && 
                 ( ( substr( $s, $pos, 1 ) eq '&' ) 
                     ? ( $pos += 1 or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I2607} ) && 0 ) )
             &&
                (   ( $pad{I2608} = $pos or 1 ) && 
                 do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                             $grammar->disjunctive1( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'disjunctive1'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2608} ) && 0 ) )
             ) ||    ( ( $pos = $pad{I2605} ) && 0 ) )) {}; $bool = 1 }
       &&
          (   ( $pad{I2609} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { 
        my @a = map {  $$_  }  @{ $::_V6_MATCH_->{'disjunctive1'} };
        return { conjunctive => \@a ,}  if scalar @a > 1;
        return $a[0];;
 # use v6
;
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I2609} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for conjunctive
 # Data::Bind->sub_signature
#  (\&conjunctive, );
;
*rule = do { my $rule; $rule = sub {
  
              $_[3] = $_[2]; 
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue} 
        ? $_[3]{p} 
        : ( ( $_[3]{p} || 0 ) .. length( $s ) ) ) {
    my %index; 
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( { 
      str => \$s, from => \(0+$pos), to => \($pos), 
      bool => \$bool, match => \@match, named => \%named, capture => undef, 
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior; 
      $bool = 0 unless
       (
         (
          (   ( $pad{I2610} = $pos or 1 ) && 
             (
               (
                (   ( $pad{I2611} = $pos or 1 ) && 
                   do { 
                        my $prior = $::_V6_PRIOR_; 
                        my $match = 
                               $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior; 
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   } ||    ( ( $pos = $pad{I2611} ) && 0 ) )
               || ( $bool = 1 )
               ) 
             &&
                (   ( $pad{I2612} = $pos or 1 ) && 
                 ( ( substr( $s, $pos, 1 ) eq '|' ) 
                     ? ( $pos += 1 or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I2612} ) && 0 ) )
             &&
                (   ( $pad{I2613} = $pos or 1 ) && 
                 ( ( substr( $s, $pos, 1 ) eq '|' ) 
                     ? ( $pos += 1 or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I2613} ) && 0 ) )
             ) ||    ( ( $pos = $pad{I2610} ) && 0 ) )
         || ( $bool = 1 )
         ) 
       &&
         (
           (   ( $pad{I2614} = $pos or 1 ) && 
             do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                         $grammar->conjunctive( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'conjunctive'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2614} ) && 0 ) )
         ) 
       &&
         do { while (
          (   ( $pad{I2615} = $pos or 1 ) && 
             (
                (   ( $pad{I2616} = $pos or 1 ) && 
                 ( ( substr( $s, $pos, 1 ) eq '|' ) 
                     ? ( $pos += 1 or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I2616} ) && 0 ) )
             &&
                (   ( $pad{I2617} = $pos or 1 ) && 
                 ( ( substr( $s, $pos, 1 ) eq '|' ) 
                     ? ( $pos += 1 or 1 )
                     : 0
                 ) ||    ( ( $pos = $pad{I2617} ) && 0 ) )
             &&
                (   ( $pad{I2618} = $pos or 1 ) && 
                 do { 
                my $prior = $::_V6_PRIOR_; 
                my $match = 
                             $grammar->conjunctive( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior; 
                if ( $match ) { push @{$named{'conjunctive'}}, $match;
                    $pos = $match->to; 
                    1 
                } 
                else { 0 }
            } ||    ( ( $pos = $pad{I2618} ) && 0 ) )
             ) ||    ( ( $pos = $pad{I2615} ) && 0 ) )) {}; $bool = 1 }
       &&
          (   ( $pad{I2619} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub  { 
        my @a = map {  $$_  }  @{ $::_V6_MATCH_->{'conjunctive'} };
        return { alt => \@a ,}  if scalar @a > 1;
        return $a[0];;
 # use v6
;
 } ->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I2619} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub { 
        local $main::_V6_PRIOR_ = $prior; 
        $rule->(@_);
      };
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
;## Signature for rule
 # Data::Bind->sub_signature
#  (\&rule, );
;

; 1;
