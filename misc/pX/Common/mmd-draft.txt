Here is a first-draft description of the new MMD algorithm for S06.


Multi(sub/method) Dispatch

A multi is a set of variants.  Each variant is a Code, with its own
Signature.  A normal call to a multi is handled by the variant whose
signature most closely matches the call's arguments.  If no variant is
unambiguously closer, an error is raised.

Variants incompatible with the call's arguments are ignored.  Among the
rest, closeness is determined by examining parameter positions,
individually, left to right, and comparing the type distances between
the argument, and the parameter of each candidate variant.

However, for any candidate variants with one or more semicolons in the
signature list, parameters after the final semicolon are ignored; i.e.,
they are treated as if they had no constraints on them.

A variant remains a contender for "unambiguously closer" only if it is at
least as close as any other candidate variant is.  If, after all parameters
are examined, exactly one contender remains, that contender handles
the call.  Otherwise, an error is raised.  Named parameters, while
checked for compatibility, do not currently affect closeness.

By default, the set of candidates remains constant, while the set if
contenders is incrementally narrowed.  Candidates which are no longer
contenders act as spoilers - they only affect dispatch if they
establish ambigity.  That is, by having some parameter whose type
distance is either smaller than, or incomparable with, that of a
contender.

However, if at some position, all the contenders have a semi-colon
before the position, then the set of candidates is reduced to just
those contenders.  Otherwise, the spoilers that have a semi-colon
before the position are eliminated from the dispatch.

The distance between two types is the number of steps in the type
compatibility path connecting them.  Distances along unrelated paths
cannot be compared; only when one path is an extension of the other.
A path's distance is a hierarchical quantity.  Most significant is the
total number of implicit conversions required.  Next, the number of
upcasts done (the inheritance distance).  Finally, the number of
subsets encountered.  A junction of types is treated as whichever type
results in the smallest distance.  The same for a conjunction of
types.

------------------------------------------------------------
Backstory and discussion:
