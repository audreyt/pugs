# Copyright (C) 2003-2007, The Perl Foundation.

=pod

=head0 Grammars and Regexes


TODO: This chapter is outdated in some ways

  * It should be explained when we use "rule" and when "regex", and what
    a "subrule" is.
  * The interpolation rules are outdated
  * some of the assertion syntax has changed, for example <foo()> means
    something different now
  * Modifiers: explain :ratchet modifier
  * The match object needs more explanation

Z<CHP-7>

X<regexes;grammars and>
X<grammars and regexes>
X<regular expressions>
Perl 6 "regular expressions" are so far beyond the formal definition
of regular expressions that we don't use that name anymore, but simply
stick to the abbreviation I<Regex>.N<Regular expressions describe regular
languages, and
consist of three primitives and a limited set of operations (three or
so, depending on the formulation). So, even Perl 5 "regular
expressions" weren't formal regular expressions.> 
Perl 6 regexes bring the full power of recursive descent
parsingN<A computer scientist would classify the most common usage of Perl 6
regexes as I<deterministic context-free languages>> to the core of Perl, but are comfortably useful even if you
don't know anything about recursive descent parsing. In the usual
case, all you'll ever need to know is that regexes are X<patterns>
patterns for matching text.

=head1 Using Regexes

Z<CHP-7-SECT-1>

X<regexes;syntax>
Regexes are a language within a language, with their own syntax and
conventions. At the highest level, though, they're just another set of
Perl constructs. So the first thing to learn about regexes is the Perl
"glue" code for creating and using them.

=head2 Immediate Matches

Z<CHP-7-SECT-1.1>

The simplest way to create and use a regex is an immediate match. A regex
defined with the C<m//>X<m// (match) operator> operator always
immediately matches.  Substitutions, defined with the C<s///>
X<s/// (substitution) operator> operator also immediately match.  A
regex defined with the C<//>X</ (slash);//;;(see m// operator)>
operator immediately matches when it's in void, boolean, string, or
numeric context, or the argument of the smart-match operator (C<~~>).
X<~ (tilde);~~ (smart match) operator>

  if $string ~~ m/ \w+ /      {...}
  if $string ~~ s/ \w+ /word/ {...}
  if $string ~~ / \w+ /       {...}

You can substitute other delimiters, like C<#...#>, C<[...]>, and
C<{...}> for the standard C</.../>, though C<?...?> and C<(...)> are
not valid delimiters:

  $string ~~ s/\w+/word/
  $string ~~ s[\w+][word]     # The same
  $string ~~ s{\w+}{word}     # The same
  $string ~~ s#\w+#word#      # The same
  $string ~~ s(\w+)(word)     # Wrong!
  $string ~~ s?\w?word}       # Wrong!

Modifiers now come in front using I<adverb> syntax, so to do multiple
substitutions on the same string is:

  $string ~~ s:g/\w+/word/

Also, if you use brackets on the first part of a substitution, the second
part can be specified as a pseudoassignment:

  $string ~~ s[\w+] = 'word';

This form also allows assignment operators, so if you want to add one to
all the number within a string, you can say:

  $string ~~ s:g[\d+] += 1;

If you want to do some processing on the match, you can call a function
to prepare the replacement text too:

  $string ~~ s:g[\d+] = build_replacement()

=head2 Deferred Matches

Z<CHP-7-SECT-1.2>

Sometimes you want a little more flexibility than an immediate match.
The C<rx//>X<rx// (anonymous regex) operator> operator defines an
anonymous regex that can be executed later.

  $digits = rx/\d+/;

The simple C<//> operator also defines an anonymous regex in all
contexts other than void, boolean, string, or numeric, or as an
argument of C<~~>.

  $digits = /\d+/; # store regex

You can use the unary context forcing operators, C<+>, C<?>, and C<~>,
to force the C<//> operator to match immediately in a context where it
ordinarily wouldn't. For a boolean value of success or failure, force
boolean context with C<?//>. For a count of matches, force numeric
context with C<+//>. For the matched string value, force string
context with C<~//>.

  $truth  = ?/\d+/;       # match $_ and return success
  $count  = +/(\d+\s+)*/; # match $_ and return count
  $string = ~/^\w+/;      # match $_ and return string

Another option for deferred matches is a C<regex> block. The C<regex>
keyword defines a named or anonymous regex, in much the same way that
C<sub> declares a subroutine or C<method> declares a method. But the
code within the block of a C<regex> is regex syntax, not Perl syntax.

  $digits = regex {\d+};

  regex digits {\d+}

There are two more keywords that defines regexes similarly to C<regex>, which
imply slightly different behavior. C<token> introduces a regex that does
not backtrack,N<technically it implies the C<:ratchet> modifier> (more details
on that below; for now it's enough to know that it matches simple regexes
faster), and C<rule> is the same as C<token> except that whitespaces in
regexes also match optional whitespaces in the string.N<it implies both the
C<:ratchet> and the C<:sigspace> modifer>.

To match a named or anonymous regex, call it as a subregex within
another regex. Subregexes, whether they're named regexes or a variable
containing an anonymous regex, are enclosed in assertion delimiters 
C<< <...> >>. You can read more about assertions in A<CHP-7-SECT-2.4>
"Assertions" later in this chapter.

  $string ~~ /\d+/;
  # same as
  $string ~~ /<$digits>/;
  $string ~~ /E<lt>digitsE<gt>/;

A<CHP-7-TABLE-1>Table 7-1 summarizes the basic Perl syntax for
defining rules.

=begin table picture Rules

Z<CHP-7-TABLE-1>

=headrow 

=row 

=cell Syntax

=cell Meaning

=bodyrows 

=row 

=cell C<m/.../>

=cell Match a pattern (immediate execution).

=row 

=cell C<s/.../.../>

=cell Perform a substitution (immediate execution).

=row 

=cell C<rx/.../>

=cell Define an anonymous rule (deferred execution).

=row 

=cell C</.../>

=cell Immediately match or define an anonymous regex, depending on the
context.

=row 

=cell C<regex {...}>

=cell Define an anonymous regex.

=row 

=cell C<regex name {...}>

=cell Define a named regex.

=end table

=head2 Grammars

Z<CHP-7-SECT-1.3>

X<grammars>

A grammar is a collection of regexes, in much the same way that a class is
a collection of methods. In fact, grammars are classes, they're just
classes that inherit from the universal base class C<Regex>X<Regex class>.
This means that grammars can inherit from other grammars, and that they
define a namespace for their regexes.

  grammar Hitchhikers {
      token name { Zaphod | Ford | Arthur }
  
      token id   { \d+ }

      ...
  }

Any regex in the current grammar or in one of its parents can be called
directly, but a regex from an external grammar needs to have its package
specified:

  if $newsrelease ~~ / E<lt>Hitchhikers.nameE<gt> / {
      send_alert($1);
  }

If you want to match against the entire grammar, you can define a regex
C<TOP> in that grammar.

  grammar Hitchhikers {
      regex TOP { <name> <id> }
      ...
  }

  $roster ~~ Hitchhikers;           # Calls Hitchhikers.TOP by default

X<parsing text>
X<text parsing>
Grammars are especially useful for complex text or data parsing. In fact,
overloading grammar rules for the Perl 6 grammar itself is a method to
change the way the program is parsed. Instead of having to create custom
complex source filters like was necessary in Perl 5, we can overload the
rules in the C<Perl6::Grammar> Grammar class to change the very syntax of
Perl 6 on the fly.

=head1 Building Blocks

Z<CHP-7-SECT-2>

Every language has a set of basic components (words or parts of words)
and a set of syntax rules for combining them. The "words" in regexes are
literal characters (or symbols), some X<metacharacters> metacharacters
(or metasymbols),  and X<regexes;escape sequences>X<escape sequences,
regexes> escape sequences, while the combining syntax includes other
metacharacters, X<quantifiers, regexes> X<regexes;quantifiers> quantifiers,
bracketing characters, and assertions.


=head2 Metacharacters

Z<CHP-7-SECT-2.1>

The "word"-like metacharacters are C<.>, C<^>, C<^^>, C<$>, C<$$>. The
C<.> matches any single character, even a newline character. Actually,
Perl 6 has a the notion of a Unicode level, which determines if string
manipulation happens on the byte, codepoint or grapheme level. C<.>
matches a character in the current level, which defaults to grapheme.
The Unicode level can be adjusted with a pragma or with modifiers.
We'll talk more about modifiers in A<CHP-7-SECT-2.5>"Modifiers" later
in this chapter. The C<^> and C<$> metacharacters are zero-width
matches on the beginning and end of a string. They each have doubled
alternates C<^^> and C<$$> that match at the beginning and end of
every line within a string.

The C<|>, C<&>, C<\>, C<#>, and C<:=> metacharacters are all syntax
structure elements. The C<|> is an alternation between two options. The
C<&> matches two patterns simultaneously (the patterns must be the same
length). The C<\> turns literal characters into metacharacters (the
escape sequences) or turns metacharacters into literal characters. The
C<#> marks a comment to the end of the line. Whitespace insensitivity
(the old C</x> modifier) is on by default, so you can start a comment at
any point on any line in a regex. Just make sure you don't comment out
the symbol that terminates the regex. The C<:=>
X<: (colon);:= (binding);in regex> binds a hypothetical variable to
the result of a subregex or grouped pattern. Hypotheticals are covered
in A<CHP-7-SECT-5>"Hypothetical Variables" later in this chapter.

The metacharacters C<()>, C<[]>, C<{}> and C<E<lt>E<gt>> are bracketing
pairs. The pairs always have to be balanced within the regex, unless they
are literal characters (escaped with a C<\>). The brackets C<()> and
C<[]> group patterns to match as a single atom. They're often used to
capture a result, mark the boundaries of an alternation, or mark a group
of patterns with a quantifier, among other things. Parentheses C<()> are
capturing and square brackets C<[]> are non-capturing. The C<{}>
brackets define a section of Perl code (a closure) within a regex. These
closures are always a successful zero-width match, unless the code
explicitly calls the C<fail> function. The C<E<lt>...E<gt>> brackets
mark assertions, which handle a variety of constructs including
character classes and user-defined quantifiers. Assertions are covered
in A<CHP-7-SECT-2.4>"Assertions" later in this chapter.

A<CHP-7-TABLE-2>Table 7-2 summarizes the basic set of metacharacters.

=begin table picture Metacharacters

Z<CHP-7-TABLE-2>

=headrow 

=row 

=cell Symbol

=cell Meaning

=bodyrows 

=row 

=cell C<.>

=cell Match any single character, including a newline.
X<. (dot);. match single character (regexes)>

=row 

=cell C<^>

=cell Match the beginning of a string.
X<^ (caret);^ beginning of string (regexes)>

=row 

=cell C<$>

=cell Match the end of a string.
X<$ (dollar sign);$ end of string (regexes)>

=row 

=cell C<^^>

=cell Match the beginning of a line.
X<^ (caret);^^ beginning of line (regexes)>

=row 

=cell C<$$>

=cell Match the end of a line.
X<$ (dollar sign);$$ end of line (regexes)>

=row 

=cell C<|>

=cell Match alternate patterns (OR).

=row 

=cell C<&>

=cell Match multiple patterns (AND).

=row 

=cell C<\>

=cell Escape a metacharacter to get a literal character, or escape a
literal character to get a metacharacter.
X<\ (backslash);\ escape sequences (regexes)>
X<\ (backslash);\ to escape metacharacters (regexes)>

=row 

=cell C<#>

=cell Mark a comment (to the end of the line).

=row 

=cell C<:=>

=cell Bind the result of a match to a hypothetical variable.
X<: (colon);:= (binding);in regexes>

=row 

=cell C<(...)>

=cell Group patterns and capture the result.

=row 

=cell C<[...]>

=cell Group patterns without capturing.

=row 

=cell C<{...}>

=cell Execute a closure (Perl 6 code) within a regex.

=row 

=cell C<E<lt>...E<gt>>

=cell Match an assertion.

=row

=cell C<< <( >>

=cell Begin of capturing

=row

=cell C<< )> >>

=cell End of capturring

=end table


=head2 Escape Sequences

Z<CHP-7-SECT-2.2>

X<escape sequences, regexes>
X<regexes;escape sequences>
X<\ (backslash);\ escape sequences (regexes)>
The escape sequences are literal characters acting as metacharacters,
marked with the C<\> escape. Some escape sequences represent single
characters that are difficult to represent literally, like C<\t> for
tab, or C<\x[...]> for a character specified by a hexadecimal number.
Some represent limited character classes, like C<\d> for digits or C<\w>
for word characters. Some represent zero-width positions in a match,
like C<\b> for a word boundary. With all the escape sequences that use
brackets, C<()>, C<{}>, and C<E<lt>E<gt>> work in place of C<[]>. 

X<variable interpolation in regexes>
X<regexes;variable interpolation>
Note that since an ordinary variable now interpolates as a literal
string by default, the C<\Q> escape is rarely needed. An interpolated
array is interpreted as an alternation of all array elements.

A<CHP-7-TABLE-3>Table 7-3 shows the escape sequences for regexes. 

=begin table picture Escape sequences

Z<CHP-7-TABLE-3>

=headrow 

=row 

=cell Escape

=cell Meaning

=bodyrows 

=row

=cell  C<'...'>

=cell Tread everyhing between the quotes literally, except the backslash C<\>
and  single quotes C<'>

=row

=cell  C<"...">

=cell Like C<'...'>, but backslash escape sequences and variable interpolation
are enabled

=row 

=cell C<\0[...]>

=cell Match a character given in octal (brackets optional).

=row 

=cell C<\b>

=cell Match a word boundary.

=row 

=cell C<\B>

=cell Match when not on a word boundary.

=row 

=cell C<\c[...]>

=cell Match a named character or control character.

=row 

=cell C<\C[...]>

=cell Match any character except the bracketed named or control character.

=row 

=cell C<\d>

=cell Match a digit.

=row 

=cell C<\D>

=cell Match a non-digit.

=row 

=cell C<\e>

=cell Match an escape character.

=row 

=cell C<\E>

=cell Match anything but an escape character.

=row 

=cell C<\f>

=cell Match the form feed character.

=row 

=cell C<\F>

=cell Match anything but a form feed.

=row 

=cell C<\n>

=cell Match a (logical) newline.

=row 

=cell C<\N>

=cell Match anything but a (logical) newline.

=row 

=cell C<\h>

=cell Match horizontal whitespace.

=row 

=cell C<\H>

=cell Match anything but horizontal whitespace.

=row 

=cell C<\L[...]>

=cell Everything within the brackets is lowercase.

=row 

=cell C<\Q[...]>

=cell All metacharacters within the brackets match as literal characters.

=row 

=cell C<\r>

=cell Match a return.

=row 

=cell C<\R>

=cell Match anything but a return.

=row 

=cell C<\s>

=cell Match any whitespace character.

=row 

=cell C<\S>

=cell Match anything but whitespace.

=row 

=cell C<\t>

=cell Match a tab.

=row 

=cell C<\T>

=cell Match anything but a tab.

=row 

=cell C<\U[...]>

=cell Everything within the brackets is uppercase.

=row 

=cell C<\v>

=cell Match vertical whitespace.

=row 

=cell C<\V>

=cell Match anything but vertical whitespace.

=row 

=cell C<\w>

=cell Match a word character (Unicode alphanumeric plus "_").

=row 

=cell C<\W>

=cell Match anything but a word character.

=row 

=cell C<\x[...]>

=cell Match a character given in hexadecimal (brackets optional).

=row 

=cell C<\X[...]>

=cell Match anything but the character given in hexadecimal (brackets
optional).

=end table


=head2 Quantifiers

Z<CHP-7-SECT-2.3>

Quantifiers specify the number of times an atom (a single character,
metacharacter, escape sequence, grouped pattern, assertion, etc) will
match.

X<. (dot);.. (range);quantifier (regexes)>
X<. (dot);... (infinite range);quantifier (regexes)>
The numeric quantifiers use the C<**> operator followed by the number of
desired matches. For a range of matches you can use a closure that returns
a range (C<a**{2..4}> matches two to four C<a>'s, (C<a**{2..Inf}>) two or
more C<a>'s).

Each quantifier has a minimal alternate form, marked with a trailing
C<?>, that matches the shortest possible sequence first.


A<CHP-7-TABLE-4>Table 7-4 shows the built-in 
X<quantifiers, rules> X<rules;quantifiers> quantifiers.

=begin table picture Quantifiers

Z<CHP-7-TABLE-4>

=headrow 

=row 

=cell Maximal

=cell Minimal

=cell Meaning

=bodyrows 

=row 

=cell C<*>

=cell C<*?>

=cell Match 0 or more times.

=row 

=cell C<+>

=cell C<+?>

=cell Match 1 or more times.

=row 

=cell C<?>

=cell C<??>

=cell Match 0 or 1 times.

=row 

=cell C<**n>

=cell C<**?n>

=cell Match exactly R<n> times.

=row 

=cell C<**n..m>

=cell C<**?n..m>

=cell Match at least R<n> and no more than R<m> times.

=row 

=cell C<**n..*>

=cell C<**?n..*>

=cell Match at least R<n> times.

=end table


=head2 Assertions

Z<CHP-7-SECT-2.4>

X<assertions, regexes>
X<regexes;assertions>
In general, an assertion simply states that some condition or state is
true and the match fails when that assertion is false. Many different
constructs with many different purposes use assertion syntax. 

X<variable interpolation in regexes>
X<rules;variable interpolation>
Assertions match named and anonymous regexes, arrays or hashes containing
anonymous regexes, and subroutines or closures that return anonymous
regexes. You have to enclose a variable in assertion delimiters to get it
to interpolate as an anonymous rule or rules. A bare scalar in a pattern
interpolates as a literal string, while a scalar variable in assertion
brackets interpolates as an anonymous rule. A bare array in a pattern
matches as a series of alternate literal strings, while an array in
assertion brackets interpolates as a series of alternate anonymous
rules. In the simplest case, a bare hash in a pattern matches a word
(C<\w+>) and tries to find that word as one of its keys.N<The effect is
much as if it matched the keys as a series of alternates, but you're
guaranteed to match the longest possible key, instead of just the first
one it hits in random order.>, while a hash in assertion brackets does
the same, but then also matches the associated value as an anonymous
rule.

X<fail keyword>
A bare closure in a pattern always matches (unless it calls C<fail>),
but a closure in assertion brackets C<E<lt>{...}E<gt>> must return an
anonymous rule, which is immediately matched.

An assertion with parentheses C<E<lt>(...)E<gt>> is similar to a bare
closure in a pattern in that it allows you to include straight Perl code
within a rule. The difference is that C<E<lt>(...)E<gt>> evaluates the
return value of the closure in boolean context. The match succeeds if
the return value is true and fails if the return value is false.

Assertions match character classes, both named and enumerated. A named
rule character class is often more accurate than an enumerated character
class. For example, C<E<lt>[a-zA-Z]E<gt>> is commonly used to match
alphabetic characters, but generally what's really needed is the
built-in rule C<E<lt>alphaE<gt>> which matches the full set of Unicode
alphabetic characters.

A<CHP-7-TABLE-5>Table 7-5 shows the syntax for assertions.

=begin table picture Assertions

Z<CHP-7-TABLE-5>

=headrow 

=row 

=cell Syntax

=cell Meaning

=bodyrows 

=row 

=cell C<E<lt>...E<gt>>

=cell Generic assertion delimiter.

=row 

=cell C<E<lt>!...E<gt>>

=cell Negate any assertion.

=cell

=row C<< <.rule> >>

=row Match named rule, wihtout capturing.

=row 

=cell C<E<lt>>R<name>C<E<gt>>

=cell Match a named rule or character class.

=row 

=cell C<E<lt>[...]E<gt>>, C<< <+[...]> >>

=cell Match an enumerated character class.

=row 

=cell C<E<lt>-...E<gt>>

=cell Complement a character class (named or enumerated).

=row 

=cell C<E<lt>$scalarE<gt>>

=cell Match an anonymous rule.

=row 

=cell C<E<lt>@arrayE<gt>>

=cell Match a series of anonymous rules as alternates.

=row 

=cell C<E<lt>%hashE<gt>>

=cell Match a key from the hash, then its value (which is an anonymous
rule).

=row 

=cell C<< <rule(...)> >>

=cell Call a named rule with arguments.

=row 

=cell C<E<lt>{>R<code>C<}E<gt>>

=cell Match an anonymous rule returned by a closure.

=row 

=cell C<E<lt>.E<gt>>

=cell Match any logical grapheme, including combining character sequences.

=end table


=head1 Modifiers

Z<CHP-7-SECT-2.5>

X<modifiers>
X<: (colon);: modifier delimiter in rules>
Modifiers alter the meaning of the pattern syntax. The standard
position for modifiers is at the beginning of the rule, right after
the C<m>, C<s>, or C<rx>, or after the name in a named rule. Modifiers
cannot attach to the outside of a bare C</.../>. For example:

  m:i /marvin/ # case insensitive
  rule names :i { marvin | ford | arthur }

Multiple modifiers can be chained, short and long names can
be mixed:

  m:s :i :g/ zaphod /
  m:sigspace :i :global / zaphod /

Modifiers can be negated with the C<:!pair> notation, so C<:!i> forces
case-sensitive matching.

Most of the modifiers can also go inside the rule, attached to the
rule delimiters or to grouping delimiters. Internal modifiers are
lexically scoped to their enclosing delimiters, so you get a temporary
alteration of the pattern:

  m/:s I saw [:i zaphod] / # only 'zaphod' is case insensitive

The repetition modifiers (C<:R<N>x>, C<:R<N>th>,
C<:global>, and C<:exhaustive>) and the continue modifier (C<:cont>)
can't be lexically scoped, because they alter the return value of the
entire rule.

The C<:R<N>x> modifier matches the rule a counted number of times. If
the modifier expects more matches than the string has, the match fails.
It has an alternate form C<:x(R<N>)> that can take a variable in place
of the number. 

The C<:global> modifier matches as many times as possible. The
C<:exhaustive> modifier also matches as many times as possible, but in
as many different ways as possible.

The C<:R<N>th> modifier preserves one result from a particular counted
match. If the rule matches fewer times than the modifier expects, the
match fails. It has several alternate forms. One form--C<:th(R<N>)>--can
take a variable in place of the number. The other forms--C<:R<N>st>,
C<:R<N>nd>, and C<:R<N>rd>--are for cases where it's more natural to
write C<:1st>, C<:2nd>, C<:3rd> than it is to write C<:1th>, C<:2th>,
C<:3th>. Either way is valid, so pick the one that's most comfortable
for you.

By default, rules ignore literal whitespace within the pattern.  The
C<:s> or C<:sigspace> modifier makes rules sensitive to literal whitespace,
but in an intelligent way. Any cluster of literal whitespace acts like an
explicit C<\s+> when it separates two identifiers and C<\s*> everywhere else.

More specifically any literal whitespace in the regex is translated to
an implict call to C<E<lt>.wsE<gt>>, where the C<ws> rule matches as
mentioned above, but can also be overridden by the user.

There are no modifiers to alter whether the matched string is treated as
a single line or multiple lines. That's why the "beginning of string"
and "end of string" metasymbols have "beginning of line" and "end of
line" counterparts.

A<CHP-7-TABLE-6>Table 7-6 shows the current list of modifiers.

=begin table picture Modifiers

Z<CHP-7-TABLE-6>

=headrow 

=row 

=cell Short

=cell Long

=cell Meaning

=bodyrows 

=row 

=cell C<:i>

=cell C<:ignorecase>

=cell Case-insensitive match.

=row

=cell C<:a>

=cell C<:ignoreaccent>

=cell Ignore accents and other markings on characters.

=row 

=cell C<:c($pos)>

=cell C<:continue($pos)>

=cell Match at position C<$pos> or later. If C<$pos> is ommited, start where

=row

=cell C<:p>

=cell C<:pos>

=cell Match anchored at position C<$pos>. If C<$pos> is ommited, start where
the previous match left off.

=row 

=cell C<:s>

=cell C<:sigspace>

=cell Literal whitespace in the pattern matches as C<\s+>
or C<\s*>.

=row 

=cell 

=cell :R<N>C<x>/C<:x(>R<N>C<)>

=cell Match the pattern R<N> times.

=row 

=cell 

=cell C<:>R<N>C<th>/C<:nth(>R<N>C<)>

=cell Match the R<N>th occurrence of a pattern.

=row 

=cell C<:g>

=cell C<:global>

=cell Match the pattern as many times as possible, but only possibilities
that don't overlap.

=row

=cell C<:ov>

=cell C<:overlap>

=cell Match the pattern as many timies as possible, and allow overlapping
matches, but only one match per starting position.

=row 

=cell C<:ex>

=cell C<:exhaustive>

=cell Match every possible occurrence of a pattern, even overlapping
possibilities.

=row 

=cell 

=cell C<:bytes>

=cell C<.> is a byte.

=row 

=cell 

=cell C<:codes>

=cell C<.> is a Unicode codepoint.

=row 

=cell 

=cell C<:graphs>

=cell C<.> is a Unicode grapheme.

=row 

=cell 

=cell C<:chars>

=cell C<.> matches whatever the current Unicode level corresponds to
(this is the default).

=row

=cell

=cell C<:ratchet>

=cell Imply a C<:> after each atom (see "Backtracking Control" below).

=row 

=cell C<:P5>

=cell C<:Perl5>

=cell The pattern uses Perl 5 regex syntax.

=end table

=head2 Substition Modifiers

Special modifiers are available for substitions that do not make sense
on normal matches.

The C<:samecase>, or short C<:ii> modifier implies the C<:ignorecase>
modifier, but also carries the case information on a
character-by-character base

   my $s = 'The Quick Brown Fox';
   $s ~~ s:ii/brown/blue/;
   say $s;           # The Quick Blue Fox

If the C<:sigspace> modifier is also present, a slightly more
intelligent algorithm is used. If the source string follows one of the
case patterns in $table (XXX: make that a proper cross-link),
that pattern is recognized and applied onto the
substitution string.

   $_ = 'All Words Capialized';
   s:s:ii/.*/other words/;
   .say;             # Other Words

There's a shortcut for C<s:s> named C<ss>, so you could have written the
example above aswidth="348" height="300"
 C<ss:ii/.*/other words/>.

=begin table picture Case patterns for the :samecase modifier

=headrow

=cell Pattern

=cell Corresponding code

=bodyrows

=row

=cell ALL UPPERCASE

=cell C<.uc>

=row

=cell all lowercase

=cell C<.lc>

=row

=cell Every Word Capitalized

=cell C<.lc.capitalize>

=row

=cell First letter upper, rest lower

=cell C<.lc.ucfirst>

=row

=cell fIRST LETTER LOWER, REST UPPER

=cell C<.uc.lcfirst>

=end table

A similar modifier is C<:sameaccent> (short C<:aa>). Instead of carrying
case information, it carries accent and marking information.

   my $stuff = 'Möhre';
   $stuff ~~ s:aa/a/o/;
   say $stuff;          # Mähre

The third substitution modifier is C<:samespace>, short C<:ss>. It preserves
whitespace that is matched by implicit C<E<lt>.wsE<gt>> rules:

   my $s = "Some   white\t\n spaces";
   $s ~~ s:ss/\w+ \w+ \w+/Completely different text/;
   # $s is now "Completely   different\t\n text"

=head1 Built-in Rules

Z<CHP-7-SECT-3>

X<rules;built-in>
A number of named rules are provided by default, including a complete
set of X<POSIX-style classes> POSIX-style classes, and X<Unicode
property classes> Unicode property classes. The list isn't fully
defined yet, but A<CHP-7-TABLE-7>Table 7-7 shows a few you're
likely to see.

The C<E<lt>nullE<gt>> rule matches a zero-width string (so it's always
true) and C<E<lt>priorE<gt>> matches whatever the most recent successful
rule matched. These replace the two behaviors of 
X</ (slash);// invalid null pattern>
X<invalid null pattern //> the Perl 5 null pattern C<//>,
which is no longer valid syntax for rules. 

=begin table picture Built-in rules

Z<CHP-7-TABLE-7>

=headrow 

=row 

=cell Rule

=cell Meaning

=bodyrows 

=row 

=cell C<E<lt>alphaE<gt>>

=cell Match a Unicode alphabetic character.

=row 

=cell C<E<lt>digitE<gt>>

=cell Match a Unicode digit.

=row 

=cell C<E<lt>spE<gt>>

=cell Match a single space character (the same as C<\s>).

=row 

=cell C<E<lt>wsE<gt>>

=cell Match any whitespace (the same as C<\s+>).

=row 

=cell C<E<lt>nullE<gt>>

=cell Match the null string.

=row 

=cell C<E<lt>priorE<gt>>

=cell Match the same thing as the previous match.

=row 

=cell C<E<lt>before ...E<gt>>

=cell Zero-width lookahead. Assert that you're I<before> a pattern.

=row 

=cell C<E<lt>after ...E<gt>>

=cell Zero-width lookbehind. Assert that you're I<after> a pattern.

=end table


=head1 Backtracking Control

Z<CHP-7-SECT-4>

X<backtracking controls>
X<fail keyword> 
Backtracking is triggered whenever part of the pattern fails to match.
You can also explicitly trigger backtracking by calling the C<fail>
function within a closure. A<CHP-7-TABLE-8>Table 7-8 shows some
metacharacters and built-in rules relevant to backtracking.

=begin table picture Backtracking controls

Z<CHP-7-TABLE-8>

=headrow 

=row 

=cell Operator

=cell Meaning

=bodyrows 

=row 

=cell C<:>

=cell Don't retry the previous atom, fail to the next
earlier atom.
X<: (colon);: fail to atom before last (rules)>
X<backtracking controls;: fail to atom before last>

=row 

=cell C<::>

=cell Don't backtrack over this point, fail out of the closest
enclosing group (C<(...)>, C<[...]>, or the rule delimiters).
X<: (colon);:: fail out of group (rules)>
X<backtracking controls;: fail out of group>

=row 

=cell C<:::>

=cell Don't backtrack over this point, fail out of the
current rule or subrule.
X<: (colon);::: fail out of rule (rules)>
X<backtracking controls;: fail out of rule>

=row 

=cell C<E<lt>commitE<gt>>

=cell Don't backtrack over this point, fail out of the
entire match (even from within a subrule).

=row 

=cell C<E<lt>cutE<gt>>

=cell Like C<E<lt>commitE<gt>>, but also cuts the string matched. The
current matching position at this point becomes the new beginning of
the string.

=end table

The C<:ratchet> modifier, which is implied by regexes declared with the
C<token> or C<rule> keyword, disables backtracking in the subrule, which
is the same as adding a C<:> after every atom.

=head1 The Match Object

Z<CHP-7-SECT-5>

X<object;match>
X<rules;captures>

A regex match produces a I<Match> object, which contains all information
about the match, including start and end position, matched string, and all
captures.

The match object is returned from a regex match, and is also stored in
the special variable C<$/>.

   my $match = 'Zaphod Beeblebrox' ~~ m/\w+/;   
   say $match;    # prints Zaphod

In string context it evaluates to the text of the matched part of the
string.

Table A<CHP-7-TABLE-Match> summarises the properties of the match object.

The variables C<$0>, C<$1>, C<$2> etc. are aliases to C<$/[0]>,
C<$/[1]>, C<$/[2]>, and C<$E<lt>nameE<gt>> is an alias to
C<$/E<lt>nameE<gt>>. Likewise an empty C<@()> is the same as C<@($/)>,
and C<%()> stands for C<%($/)>.

Match variables can also store a different scalar object. A closure in a
regex can store such an object by calling C<make>, and can be accessed
by forcing scalar context with C<$( $/ )>:

   regex herd :i :s {
         (\d+)
         (\w+)s?
         {
            make Herd.new(
                  animal => $1.capitalize
                  count  => $0,
                 );
         }
   }
   'Yesterday we saw 4 mooses' ~~ m/ <herd> /;
   # now $($<herd>) contains the new Herd object

This can be used to build object trees directly from regex matches.

=begin table picture Properties of the Match object

Z<CHP-7-TABLE-Match>

=headrow

=cell Property 

=cell Description

=bodyrows

=row

=cell C<?$/>

=cell True if the match was successful.

=row

=cell C<$/.text>

=cell The matched part of the string.

=row

=cell C<$/.from>

=cell Start position of the match.

=row

=cell C<$/.to>

=cell End position of the match.

=row

=cell C<@( $/ )>

=cell List of all positional captures.

=row 

=cell C<%( $/ )>

=cell Hash of all named captures.

=row

=cell C<$/[$n]>

=cell C<$n>th positional capture.

=row

=cell C<$/E<lt>nameE<gt>>

=cell Access to particular named capture.

=end table

Capture variables are always match objects, and contain the information
of their respective sub matches.

   m/ ( a ( geek ) ( passes ) )  ( many tests ) /
      |   |      | |        | |  |            |
      |   $/[0][0] $/[0][1]-+ |  |            |
      |                       |  |            |
      $/[0]-------------------+  $/[1] -------+

If a capturing group is quantified, it automatically becomes an array of
match objects. Subsequent matches are not renumbered:

   '12 45 books' ~~ m:s/ ( \d+ )+ (\w+) /
   say $0[0];     # 12
   say $0[1];     # 45
   say $1;        # books

When a subrule is called with the C<E<lt>subruleE<gt>> syntax, it
produces a named capture of name C<subrule>. That named can be
changed with the C<E<lt>newname=subruleE<gt>> syntax.

   token identifier { \w+ }
   token number     { \d+ }
   $_ = '24 hours'
   if m:s/<number> <unit=identifier> / {
      say "Number: $<number>. Unit: $<unit>";
   }

These variables are also available iin the regex itself:

  "Zaphod saw Zaphod" ~~ m:s/ E<lt>nameE<gt> \w+ $/<name> /;


=cut

# vim: sw=3 ts=3 expandtab ft=pod tw=72
