A ruby transliteration of src/perl6/STD.pm

The release of 1.9.0 (dated late December '07) if required.






NOTES


Regex reminders
  given { <a>+ <b>+ }
  token: /^ <a>+: <b>+: $/
  rule:  /^ <.ws> <a>+: <.ws> <b>+: <.ws> $/
  regex: /^ <a>+ <b>+ $/
which transliterate as
  token:  plusTOK{a} and plusTOK{b}
  rule:   wsp and plusTOK{a} and wsp and plusTOK{b} and wsp  #abstractly
  rule:           plusTOK{a} and wsp and plusTOK{b}          #in practice
  regex:  plusRX(lambda{ a }){ plusRX{ b }}
    # but note, <a> can't be a regex - we won't backtrack into it.

There are lots of regex ruls.  Only the two noted as backtracking in
comments actually do.

Re backtracking,
  plusRX et al, _do not backtrack into their subrules_.
  We are simplifying implementation by noting there are tokens everywhere.
  If there turns out to be a case of a regex with backtracking, containing
  a subrule which is itself a regex with backtracking, then we'll need to
  hand fudge passing a continuation to that subrule.  Very hopefully, the
  case won't arise.
  We're not making a regexp engine, nor a real Grammar.
  We're simply trying to get the ability to parse static p6, but the
  easiest possible development path.


Sources which can be cribbed from:
 v6/v6-KindaPerl6/compiled/ruby-kp6-mp6/kp6_runtime.rb
 misc/pX/Common/redsix/redsix
 misc/pX/Common/yet_another_regex_engine/Regexp_ModuleA.pm (perhaps)
