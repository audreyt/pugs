::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'unit_type',  twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'name',       twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'traits',     twigil => '.', sigil => '@', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'attributes', twigil => '.', sigil => '%', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'methods',    twigil => '.', sigil => '%', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'body',       twigil => '.', sigil => '@', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'CompUnit', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "CompUnit",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Lit::Hash(
                                    hash => [
                                        [ ::Val::Buf( buf => 'unit_type', ),  ::Var( namespace => [], name => 'unit_type',  twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'name', ),       ::Var( namespace => [], name => 'name',       twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'traits', ),     ::Var( namespace => [], name => 'traits',     twigil => '.', sigil => '@', ), ],
                                        [ ::Val::Buf( buf => 'attributes', ), ::Var( namespace => [], name => 'attributes', twigil => '.', sigil => '%', ), ],
                                        [ ::Val::Buf( buf => 'methods', ),    ::Var( namespace => [], name => 'methods',    twigil => '.', sigil => '%', ), ],
                                        [ ::Val::Buf( buf => 'body', ),       ::Var( namespace => [], name => 'body',       twigil => '.', sigil => '@', ), ],
                                    ],
                                ),
                            ],
                            method   => 'new',
                            invocant => ::Proto( name => 'Hash', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "CompUnit",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "CompUnit", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'CompUnit',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'int', twigil => '.', sigil => '$', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Val::Int', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Val::Int",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [ ::Lit::Pair( value => ::Var( namespace => [], name => 'int',  twigil => '.', sigil => '$', ), key        => ::Val::Buf( buf => 'int', ), ), ],
                    sig  => ::Sig( invocant      => ::Var( namespace => [], name => 'self', twigil => '',  sigil => '$', ), positional => [], ),
                    pad  => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Val::Int",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Val::Int", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Val::Int',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'bit', twigil => '.', sigil => '$', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Val::Bit', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Val::Bit",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [ ::Lit::Pair( value => ::Var( namespace => [], name => 'bit',  twigil => '.', sigil => '$', ), key        => ::Val::Buf( buf => 'bit', ), ), ],
                    sig  => ::Sig( invocant      => ::Var( namespace => [], name => 'self', twigil => '',  sigil => '$', ), positional => [], ),
                    pad  => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Val::Bit",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Val::Bit", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Val::Bit',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'num', twigil => '.', sigil => '$', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Val::Num', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Val::Num",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [ ::Lit::Pair( value => ::Var( namespace => [], name => 'num',  twigil => '.', sigil => '$', ), key        => ::Val::Buf( buf => 'num', ), ), ],
                    sig  => ::Sig( invocant      => ::Var( namespace => [], name => 'self', twigil => '',  sigil => '$', ), positional => [], ),
                    pad  => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Val::Num",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Val::Num", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Val::Num',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'buf', twigil => '.', sigil => '$', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Val::Buf', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Val::Buf",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [ ::Lit::Pair( value => ::Var( namespace => [], name => 'buf',  twigil => '.', sigil => '$', ), key        => ::Val::Buf( buf => 'buf', ), ), ],
                    sig  => ::Sig( invocant      => ::Var( namespace => [], name => 'self', twigil => '',  sigil => '$', ), positional => [], ),
                    pad  => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Val::Buf",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'true',
                block => ::Lit::Code(
                    body => [ ::Val::Int( int => '1', ), ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Val::Buf",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Val::Buf", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Val::Buf',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'char', twigil => '.', sigil => '$', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Val::Char', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Val::Char",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [ ::Lit::Pair( value => ::Var( namespace => [], name => 'char', twigil => '.', sigil => '$', ), key        => ::Val::Buf( buf => 'char', ), ), ],
                    sig  => ::Sig( invocant      => ::Var( namespace => [], name => 'self', twigil => '',  sigil => '$', ), positional => [], ),
                    pad  => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Val::Char",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Val::Char", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Val::Char',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Val::Undef', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Val::Undef",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [ ::Call( hyper => '', arguments => [ ::Lit::Hash( hash => [], ), ], method => 'new', invocant => ::Proto( name => 'Hash', ), ), ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Val::Undef",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Val::Undef", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Val::Undef',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'class',  twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'fields', twigil => '.', sigil => '%', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Val::Object', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Val::Object",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Lit::Hash(
                                    hash => [
                                        [ ::Val::Buf( buf => 'class', ),  ::Var( namespace => [], name => 'class',  twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'fields', ), ::Var( namespace => [], name => 'fields', twigil => '.', sigil => '%', ), ],
                                    ],
                                ),
                            ],
                            method   => 'new',
                            invocant => ::Proto( name => 'Hash', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Val::Object",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Val::Object", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Val::Object',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'seq', twigil => '.', sigil => '@', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Lit::Seq', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Lit::Seq",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [ ::Lit::Pair( value => ::Var( namespace => [], name => 'seq',  twigil => '.', sigil => '@', ), key        => ::Val::Buf( buf => 'seq', ), ), ],
                    sig  => ::Sig( invocant      => ::Var( namespace => [], name => 'self', twigil => '',  sigil => '$', ), positional => [], ),
                    pad  => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Lit::Seq",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Lit::Seq", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Lit::Seq',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'array', twigil => '.', sigil => '@', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Lit::Array', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Lit::Array",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [ ::Lit::Pair( value => ::Var( namespace => [], name => 'array', twigil => '.', sigil => '@', ), key        => ::Val::Buf( buf => 'array', ), ), ],
                    sig  => ::Sig( invocant      => ::Var( namespace => [], name => 'self',  twigil => '',  sigil => '$', ), positional => [], ),
                    pad  => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Lit::Array",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Lit::Array", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Lit::Array',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'hash', twigil => '.', sigil => '@', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Lit::Hash', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Lit::Hash",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [ ::Lit::Pair( value => ::Var( namespace => [], name => 'hash', twigil => '.', sigil => '@', ), key        => ::Val::Buf( buf => 'hash', ), ), ],
                    sig  => ::Sig( invocant      => ::Var( namespace => [], name => 'self', twigil => '',  sigil => '$', ), positional => [], ),
                    pad  => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Lit::Hash",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Lit::Hash", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Lit::Hash',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'key',   twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'value', twigil => '.', sigil => '$', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Lit::Pair', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Lit::Pair",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Lit::Hash(
                                    hash => [
                                        [ ::Val::Buf( buf => 'key', ),   ::Var( namespace => [], name => 'key',   twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'value', ), ::Var( namespace => [], name => 'value', twigil => '.', sigil => '$', ), ],
                                    ],
                                ),
                            ],
                            method   => 'new',
                            invocant => ::Proto( name => 'Hash', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Lit::Pair",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Lit::Pair", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Lit::Pair',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'key',                 twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'value',               twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'type',                twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'has_default',         twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'is_named_only',       twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'is_optional',         twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'is_slurpy',           twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'is_multidimensional', twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'is_rw',               twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'is_copy',             twigil => '.', sigil => '$', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Lit::SigArgument', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Lit::SigArgument",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Lit::Hash(
                                    hash => [
                                        [ ::Val::Buf( buf => 'key', ),                 ::Var( namespace => [], name => 'key',                 twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'value', ),               ::Var( namespace => [], name => 'value',               twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'type', ),                ::Var( namespace => [], name => 'type',                twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'has_default', ),         ::Var( namespace => [], name => 'has_default',         twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'is_named_only', ),       ::Var( namespace => [], name => 'is_named_only',       twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'is_optional', ),         ::Var( namespace => [], name => 'is_optional',         twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'is_slurpy', ),           ::Var( namespace => [], name => 'is_slurpy',           twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'is_multidimensional', ), ::Var( namespace => [], name => 'is_multidimensional', twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'is_rw', ),               ::Var( namespace => [], name => 'is_rw',               twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'is_copy', ),             ::Var( namespace => [], name => 'is_copy',             twigil => '.', sigil => '$', ), ],
                                    ],
                                ),
                            ],
                            method   => 'new',
                            invocant => ::Proto( name => 'Hash', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Lit::SigArgument",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Lit::SigArgument", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Lit::SigArgument',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'key',   twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'value', twigil => '.', sigil => '$', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Lit::NamedArgument', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Lit::NamedArgument",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Lit::Hash(
                                    hash => [
                                        [ ::Val::Buf( buf => 'key', ),   ::Var( namespace => [], name => 'key',   twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'value', ), ::Var( namespace => [], name => 'value', twigil => '.', sigil => '$', ), ],
                                    ],
                                ),
                            ],
                            method   => 'new',
                            invocant => ::Proto( name => 'Hash', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Lit::NamedArgument",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Lit::NamedArgument", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Lit::NamedArgument',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'pad',   twigil => '.', sigil => '%', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'state', twigil => '.', sigil => '%', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'sig',   twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'body',  twigil => '.', sigil => '@', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'CATCH', twigil => '.', sigil => '$', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Lit::Code', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Lit::Code",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Lit::Hash(
                                    hash => [
                                        [ ::Val::Buf( buf => 'pad', ),   ::Var( namespace => [], name => 'pad',   twigil => '.', sigil => '%', ), ],
                                        [ ::Val::Buf( buf => 'state', ), ::Var( namespace => [], name => 'state', twigil => '.', sigil => '%', ), ],
                                        [ ::Val::Buf( buf => 'sig', ),   ::Var( namespace => [], name => 'sig',   twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'body', ),  ::Var( namespace => [], name => 'body',  twigil => '.', sigil => '@', ), ],
                                        [ ::Val::Buf( buf => 'CATCH', ), ::Var( namespace => [], name => 'CATCH', twigil => '.', sigil => '$', ), ],
                                    ],
                                ),
                            ],
                            method   => 'new',
                            invocant => ::Proto( name => 'Hash', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Lit::Code",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Lit::Code", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Lit::Code',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'class',  twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'fields', twigil => '.', sigil => '@', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Lit::Object', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Lit::Object",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Lit::Hash(
                                    hash => [
                                        [ ::Val::Buf( buf => 'class', ),  ::Var( namespace => [], name => 'class',  twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'fields', ), ::Var( namespace => [], name => 'fields', twigil => '.', sigil => '%', ), ],
                                    ],
                                ),
                            ],
                            method   => 'new',
                            invocant => ::Proto( name => 'Hash', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Lit::Object",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Lit::Object", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Lit::Object',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'sigil',     twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'twigil',    twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'name',      twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'namespace', twigil => '.', sigil => '$', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Var', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Var",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Lit::Hash(
                                    hash => [
                                        [ ::Val::Buf( buf => 'sigil', ),     ::Var( namespace => [], name => 'sigil',     twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'twigil', ),    ::Var( namespace => [], name => 'twigil',    twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'name', ),      ::Var( namespace => [], name => 'name',      twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'namespace', ), ::Var( namespace => [], name => 'namespace', twigil => '.', sigil => '$', ), ],
                                    ],
                                ),
                            ],
                            method   => 'new',
                            invocant => ::Proto( name => 'Hash', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Var",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Var", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Var',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'parameters', twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'arguments',  twigil => '.', sigil => '$', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Bind', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Bind",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Lit::Hash(
                                    hash => [
                                        [ ::Val::Buf( buf => 'parameters', ), ::Var( namespace => [], name => 'parameters', twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'arguments', ),  ::Var( namespace => [], name => 'arguments',  twigil => '.', sigil => '$', ), ],
                                    ],
                                ),
                            ],
                            method   => 'new',
                            invocant => ::Proto( name => 'Hash', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Bind",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Bind", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Bind',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'parameters', twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'arguments',  twigil => '.', sigil => '$', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Assign', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Assign",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Lit::Hash(
                                    hash => [
                                        [ ::Val::Buf( buf => 'parameters', ), ::Var( namespace => [], name => 'parameters', twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'arguments', ),  ::Var( namespace => [], name => 'arguments',  twigil => '.', sigil => '$', ), ],
                                    ],
                                ),
                            ],
                            method   => 'new',
                            invocant => ::Proto( name => 'Hash', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Assign",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Assign", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Assign',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'name', twigil => '.', sigil => '$', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Proto', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Proto",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [ ::Lit::Pair( value => ::Var( namespace => [], name => 'name', twigil => '.', sigil => '$', ), key        => ::Val::Buf( buf => 'name', ), ), ],
                    sig  => ::Sig( invocant      => ::Var( namespace => [], name => 'self', twigil => '',  sigil => '$', ), positional => [], ),
                    pad  => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Proto",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Proto", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Proto',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'invocant',  twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'hyper',     twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'method',    twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'arguments', twigil => '.', sigil => '@', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Call', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Call",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Lit::Hash(
                                    hash => [
                                        [ ::Val::Buf( buf => 'invocant', ),  ::Var( namespace => [], name => 'invocant',  twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'hyper', ),     ::Var( namespace => [], name => 'hyper',     twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'method', ),    ::Var( namespace => [], name => 'method',    twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'arguments', ), ::Var( namespace => [], name => 'arguments', twigil => '.', sigil => '@', ), ],
                                    ],
                                ),
                            ],
                            method   => 'new',
                            invocant => ::Proto( name => 'Hash', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Call",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Call", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Call',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'code',      twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'arguments', twigil => '.', sigil => '@', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Apply', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Apply",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Lit::Hash(
                                    hash => [
                                        [ ::Val::Buf( buf => 'code', ),      ::Var( namespace => [], name => 'code',      twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'arguments', ), ::Var( namespace => [], name => 'arguments', twigil => '.', sigil => '@', ), ],
                                    ],
                                ),
                            ],
                            method   => 'new',
                            invocant => ::Proto( name => 'Hash', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Apply",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Apply", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Apply',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'result', twigil => '.', sigil => '$', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Return', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Return",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [ ::Lit::Pair( value => ::Var( namespace => [], name => 'result', twigil => '.', sigil => '$', ), key        => ::Val::Buf( buf => 'result', ), ), ],
                    sig  => ::Sig( invocant      => ::Var( namespace => [], name => 'self',   twigil => '',  sigil => '$', ), positional => [], ),
                    pad  => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Return",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Return", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Return',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'cond',      twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'body',      twigil => '.', sigil => '@', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'otherwise', twigil => '.', sigil => '@', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'If', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "If",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Lit::Hash(
                                    hash => [
                                        [ ::Val::Buf( buf => 'cond', ),      ::Var( namespace => [], name => 'cond',      twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'body', ),      ::Var( namespace => [], name => 'body',      twigil => '.', sigil => '@', ), ],
                                        [ ::Val::Buf( buf => 'otherwise', ), ::Var( namespace => [], name => 'otherwise', twigil => '.', sigil => '@', ), ],
                                    ],
                                ),
                            ],
                            method   => 'new',
                            invocant => ::Proto( name => 'Hash', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "If",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "If", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'If',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'cond', twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'body', twigil => '.', sigil => '@', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'While', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "While",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Lit::Hash(
                                    hash => [
                                        [ ::Val::Buf( buf => 'cond', ), ::Var( namespace => [], name => 'cond', twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'body', ), ::Var( namespace => [], name => 'body', twigil => '.', sigil => '@', ), ],
                                    ],
                                ),
                            ],
                            method   => 'new',
                            invocant => ::Proto( name => 'Hash', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "While",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "While", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'While',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'decl', twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'type', twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'var',  twigil => '.', sigil => '$', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Decl', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Decl",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Lit::Hash(
                                    hash => [
                                        [ ::Val::Buf( buf => 'decl', ), ::Var( namespace => [], name => 'decl', twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'type', ), ::Var( namespace => [], name => 'type', twigil => '.', sigil => '@', ), ],
                                        [ ::Val::Buf( buf => 'var', ),  ::Var( namespace => [], name => 'var',  twigil => '.', sigil => '@', ), ],
                                    ],
                                ),
                            ],
                            method   => 'new',
                            invocant => ::Proto( name => 'Hash', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Decl",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Decl", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Decl',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'invocant',   twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'positional', twigil => '.', sigil => '$', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Sig', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Sig",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Lit::Hash(
                                    hash => [
                                        [ ::Val::Buf( buf => 'invocant', ),   ::Var( namespace => [], name => 'invocant',   twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'positional', ), ::Var( namespace => [], name => 'positional', twigil => '.', sigil => '@', ), ],
                                    ],
                                ),
                            ],
                            method   => 'new',
                            invocant => ::Proto( name => 'Hash', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Sig",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Sig", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Sig',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'invocant', twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'array',    twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'hash',     twigil => '.', sigil => '$', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Lit::Capture', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Lit::Capture",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Lit::Hash(
                                    hash => [
                                        [ ::Val::Buf( buf => 'invocant', ), ::Var( namespace => [], name => 'invocant', twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'array', ),    ::Var( namespace => [], name => 'array',    twigil => '.', sigil => '@', ), ],
                                        [ ::Val::Buf( buf => 'hash', ),     ::Var( namespace => [], name => 'hash',     twigil => '.', sigil => '@', ), ],
                                    ],
                                ),
                            ],
                            method   => 'new',
                            invocant => ::Proto( name => 'Hash', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Lit::Capture",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Lit::Capture", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Lit::Capture',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'name',       twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'base_class', twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'block',      twigil => '.', sigil => '$', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Lit::Subset', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Lit::Subset",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Lit::Hash(
                                    hash => [
                                        [ ::Val::Buf( buf => 'name', ),       ::Var( namespace => [], name => 'name',       twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'base_class', ), ::Var( namespace => [], name => 'base_class', twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'block', ),      ::Var( namespace => [], name => 'block',      twigil => '.', sigil => '$', ), ],
                                    ],
                                ),
                            ],
                            method   => 'new',
                            invocant => ::Proto( name => 'Hash', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Lit::Subset",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Lit::Subset", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Lit::Subset',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'name',  twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'block', twigil => '.', sigil => '$', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Method', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Method",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Lit::Hash(
                                    hash => [
                                        [ ::Val::Buf( buf => 'name', ),  ::Var( namespace => [], name => 'name',  twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'block', ), ::Var( namespace => [], name => 'block', twigil => '.', sigil => '$', ), ],
                                    ],
                                ),
                            ],
                            method   => 'new',
                            invocant => ::Proto( name => 'Hash', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Method",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Method", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Method',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'name',  twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'block', twigil => '.', sigil => '@', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Sub', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Sub",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Lit::Hash(
                                    hash => [
                                        [ ::Val::Buf( buf => 'name', ),  ::Var( namespace => [], name => 'name',  twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'block', ), ::Var( namespace => [], name => 'block', twigil => '.', sigil => '$', ), ],
                                    ],
                                ),
                            ],
                            method   => 'new',
                            invocant => ::Proto( name => 'Hash', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Sub",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Sub", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Sub',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'name',  twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'block', twigil => '.', sigil => '@', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Macro', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Macro",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Lit::Hash(
                                    hash => [
                                        [ ::Val::Buf( buf => 'name', ),  ::Var( namespace => [], name => 'name',  twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'block', ), ::Var( namespace => [], name => 'block', twigil => '.', sigil => '$', ), ],
                                    ],
                                ),
                            ],
                            method   => 'new',
                            invocant => ::Proto( name => 'Hash', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Macro",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Macro", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Macro',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'name',  twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'block', twigil => '.', sigil => '@', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Coro', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Coro",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Lit::Hash(
                                    hash => [
                                        [ ::Val::Buf( buf => 'name', ),  ::Var( namespace => [], name => 'name',  twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'block', ), ::Var( namespace => [], name => 'block', twigil => '.', sigil => '$', ), ],
                                    ],
                                ),
                            ],
                            method   => 'new',
                            invocant => ::Proto( name => 'Hash', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Coro",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Coro", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Coro',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'regex', twigil => '.', sigil => '$', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'P5Token', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "P5Token",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [ ::Lit::Pair( value => ::Var( namespace => [], name => 'regex', twigil => '.', sigil => '$', ), key        => ::Val::Buf( buf => 'regex', ), ), ],
                    sig  => ::Sig( invocant      => ::Var( namespace => [], name => 'self',  twigil => '',  sigil => '$', ), positional => [], ),
                    pad  => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "P5Token",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "P5Token", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'P5Token',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'name',  twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'regex', twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'sym',   twigil => '.', sigil => '$', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Token', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Token",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Lit::Hash(
                                    hash => [
                                        [ ::Val::Buf( buf => 'name', ),  ::Var( namespace => [], name => 'name',  twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'regex', ), ::Var( namespace => [], name => 'regex', twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'sym', ),   ::Var( namespace => [], name => 'sym',   twigil => '.', sigil => '$', ), ],
                                    ],
                                ),
                            ],
                            method   => 'new',
                            invocant => ::Proto( name => 'Hash', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Token",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Token", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Token',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'block', twigil => '.', sigil => '@', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Do', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Do",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [ ::Lit::Pair( value => ::Var( namespace => [], name => 'block', twigil => '.', sigil => '@', ), key        => ::Val::Buf( buf => 'block', ), ), ],
                    sig  => ::Sig( invocant      => ::Var( namespace => [], name => 'self',  twigil => '',  sigil => '$', ), positional => [], ),
                    pad  => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Do",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Do", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Do',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'block', twigil => '.', sigil => '@', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'BEGIN', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "BEGIN",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [ ::Lit::Pair( value => ::Var( namespace => [], name => 'block', twigil => '.', sigil => '@', ), key        => ::Val::Buf( buf => 'block', ), ), ],
                    sig  => ::Sig( invocant      => ::Var( namespace => [], name => 'self',  twigil => '',  sigil => '$', ), positional => [], ),
                    pad  => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "BEGIN",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "BEGIN", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'BEGIN',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'mod',   twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'perl5', twigil => '.', sigil => '$', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Use', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Use",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Lit::Hash(
                                    hash => [
                                        [ ::Val::Buf( buf => 'mod', ),   ::Var( namespace => [], name => 'mod',   twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'perl5', ), ::Var( namespace => [], name => 'perl5', twigil => '.', sigil => '$', ), ],
                                    ],
                                ),
                            ],
                            method   => 'new',
                            invocant => ::Proto( name => 'Hash', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Use",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Use", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Use',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Rule', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Rule",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [ ::Call( hyper => '', arguments => [ ::Lit::Hash( hash => [], ), ], method => 'new', invocant => ::Proto( name => 'Hash', ), ), ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Rule",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Rule", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Rule',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'term',   twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'quant',  twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'greedy', twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'ws1',    twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'ws2',    twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'ws3',    twigil => '.', sigil => '$', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Rule::Quantifier', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Rule::Quantifier",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Lit::Hash(
                                    hash => [
                                        [ ::Val::Buf( buf => 'term', ),   ::Var( namespace => [], name => 'term',   twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'quant', ),  ::Var( namespace => [], name => 'quant',  twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'greedy', ), ::Var( namespace => [], name => 'greedy', twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'ws1', ),    ::Var( namespace => [], name => 'ws1',    twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'ws2', ),    ::Var( namespace => [], name => 'ws2',    twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'ws3', ),    ::Var( namespace => [], name => 'ws3',    twigil => '.', sigil => '$', ), ],
                                    ],
                                ),
                            ],
                            method   => 'new',
                            invocant => ::Proto( name => 'Hash', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Rule::Quantifier",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Rule::Quantifier", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Rule::Quantifier',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'or', twigil => '.', sigil => '@', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Rule::Or', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Rule::Or",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [ ::Lit::Pair( value => ::Var( namespace => [], name => 'or',   twigil => '.', sigil => '$', ), key        => ::Val::Buf( buf => 'or', ), ), ],
                    sig  => ::Sig( invocant      => ::Var( namespace => [], name => 'self', twigil => '',  sigil => '$', ), positional => [], ),
                    pad  => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Rule::Or",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Rule::Or", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Rule::Or',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'concat', twigil => '.', sigil => '@', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Rule::Concat', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Rule::Concat",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [ ::Lit::Pair( value => ::Var( namespace => [], name => 'concat', twigil => '.', sigil => '$', ), key        => ::Val::Buf( buf => 'concat', ), ), ],
                    sig  => ::Sig( invocant      => ::Var( namespace => [], name => 'self',   twigil => '',  sigil => '$', ), positional => [], ),
                    pad  => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Rule::Concat",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Rule::Concat", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Rule::Concat',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'metasyntax',       twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'ident',            twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'capture_to_array', twigil => '.', sigil => '$', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Rule::Subrule', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Rule::Subrule",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Lit::Hash(
                                    hash => [
                                        [ ::Val::Buf( buf => 'metasyntax', ),       ::Var( namespace => [], name => 'metasyntax',       twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'ident', ),            ::Var( namespace => [], name => 'ident',            twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'capture_to_array', ), ::Var( namespace => [], name => 'capture_to_array', twigil => '.', sigil => '$', ), ],
                                    ],
                                ),
                            ],
                            method   => 'new',
                            invocant => ::Proto( name => 'Hash', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Rule::Subrule",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Rule::Subrule", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Rule::Subrule',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'metasyntax', twigil => '.', sigil => '$', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Rule::SubruleNoCapture', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Rule::SubruleNoCapture",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [ ::Lit::Pair( value => ::Var( namespace => [], name => 'metasyntax', twigil => '.', sigil => '$', ), key        => ::Val::Buf( buf => 'metasyntax', ), ), ],
                    sig  => ::Sig( invocant      => ::Var( namespace => [], name => 'self',       twigil => '',  sigil => '$', ), positional => [], ),
                    pad  => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Rule::SubruleNoCapture",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Rule::SubruleNoCapture", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Rule::SubruleNoCapture',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'sigil',  twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'twigil', twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'name',   twigil => '.', sigil => '$', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Rule::Var', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Rule::Var",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Lit::Hash(
                                    hash => [
                                        [ ::Val::Buf( buf => 'sigil', ),  ::Var( namespace => [], name => 'sigil',  twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'twigil', ), ::Var( namespace => [], name => 'twigil', twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'name', ),   ::Var( namespace => [], name => 'name',   twigil => '.', sigil => '$', ), ],
                                    ],
                                ),
                            ],
                            method   => 'new',
                            invocant => ::Proto( name => 'Hash', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Rule::Var",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Rule::Var", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Rule::Var',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'constant', twigil => '.', sigil => '$', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Rule::Constant', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Rule::Constant",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [ ::Lit::Pair( value => ::Var( namespace => [], name => 'constant', twigil => '.', sigil => '$', ), key        => ::Val::Buf( buf => 'constant', ), ), ],
                    sig  => ::Sig( invocant      => ::Var( namespace => [], name => 'self',     twigil => '',  sigil => '$', ), positional => [], ),
                    pad  => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Rule::Constant",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Rule::Constant", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Rule::Constant',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Rule::Dot', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Rule::Dot",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [ ::Call( hyper => '', arguments => [ ::Lit::Hash( hash => [], ), ], method => 'new', invocant => ::Proto( name => 'Hash', ), ), ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Rule::Dot",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Rule::Dot", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Rule::Dot',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'char', twigil => '.', sigil => '$', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Rule::SpecialChar', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Rule::SpecialChar",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [ ::Lit::Pair( value => ::Var( namespace => [], name => 'char', twigil => '.', sigil => '$', ), key        => ::Val::Buf( buf => 'char', ), ), ],
                    sig  => ::Sig( invocant      => ::Var( namespace => [], name => 'self', twigil => '',  sigil => '$', ), positional => [], ),
                    pad  => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Rule::SpecialChar",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Rule::SpecialChar", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Rule::SpecialChar',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'closure', twigil => '.', sigil => '$', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Rule::Block', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Rule::Block",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [ ::Lit::Pair( value => ::Var( namespace => [], name => 'closure', twigil => '.', sigil => '$', ), key        => ::Val::Buf( buf => 'closure', ), ), ],
                    sig  => ::Sig( invocant      => ::Var( namespace => [], name => 'self',    twigil => '',  sigil => '$', ), positional => [], ),
                    pad  => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Rule::Block",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Rule::Block", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Rule::Block',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'var', twigil => '.', sigil => '$', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Rule::InterpolateVar', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Rule::InterpolateVar",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [ ::Lit::Pair( value => ::Var( namespace => [], name => 'var',  twigil => '.', sigil => '$', ), key        => ::Val::Buf( buf => 'var', ), ), ],
                    sig  => ::Sig( invocant      => ::Var( namespace => [], name => 'self', twigil => '',  sigil => '$', ), positional => [], ),
                    pad  => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Rule::InterpolateVar",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Rule::InterpolateVar", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Rule::InterpolateVar',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'rule',             twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'ident',            twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'capture_to_array', twigil => '.', sigil => '$', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Rule::NamedCapture', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Rule::NamedCapture",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Lit::Hash(
                                    hash => [
                                        [ ::Val::Buf( buf => 'rule', ),             ::Var( namespace => [], name => 'rule',             twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'ident', ),            ::Var( namespace => [], name => 'ident',            twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'capture_to_array', ), ::Var( namespace => [], name => 'capture_to_array', twigil => '.', sigil => '$', ), ],
                                    ],
                                ),
                            ],
                            method   => 'new',
                            invocant => ::Proto( name => 'Hash', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Rule::NamedCapture",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Rule::NamedCapture", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Rule::NamedCapture',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'rule',               twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'assertion_modifier', twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'capture_to_array',   twigil => '.', sigil => '$', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Rule::Before', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Rule::Before",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Lit::Hash(
                                    hash => [
                                        [ ::Val::Buf( buf => 'rule', ),               ::Var( namespace => [], name => 'rule',               twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'capture_to_array', ),   ::Var( namespace => [], name => 'capture_to_array',   twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'assertion_modifier', ), ::Var( namespace => [], name => 'assertion_modifier', twigil => '.', sigil => '$', ), ],
                                    ],
                                ),
                            ],
                            method   => 'new',
                            invocant => ::Proto( name => 'Hash', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Rule::Before",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Rule::Before", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Rule::Before',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'rule',               twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'assertion_modifier', twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'capture_to_array',   twigil => '.', sigil => '$', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Rule::After', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Rule::After",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Lit::Hash(
                                    hash => [
                                        [ ::Val::Buf( buf => 'rule', ),               ::Var( namespace => [], name => 'rule',               twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'capture_to_array', ),   ::Var( namespace => [], name => 'capture_to_array',   twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'assertion_modifier', ), ::Var( namespace => [], name => 'assertion_modifier', twigil => '.', sigil => '$', ), ],
                                    ],
                                ),
                            ],
                            method   => 'new',
                            invocant => ::Proto( name => 'Hash', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Rule::After",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Rule::After", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Rule::After',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'chars', twigil => '.', sigil => '$', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Rule::NegateCharClass', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Rule::NegateCharClass",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [ ::Lit::Pair( value => ::Var( namespace => [], name => 'chars', twigil => '.', sigil => '$', ), key        => ::Val::Buf( buf => 'chars', ), ), ],
                    sig  => ::Sig( invocant      => ::Var( namespace => [], name => 'self',  twigil => '',  sigil => '$', ), positional => [], ),
                    pad  => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Rule::NegateCharClass",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Rule::NegateCharClass", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Rule::NegateCharClass',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'chars', twigil => '.', sigil => '$', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Rule::CharClass', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Rule::CharClass",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [ ::Lit::Pair( value => ::Var( namespace => [], name => 'chars', twigil => '.', sigil => '$', ), key        => ::Val::Buf( buf => 'chars', ), ), ],
                    sig  => ::Sig( invocant      => ::Var( namespace => [], name => 'self',  twigil => '',  sigil => '$', ), positional => [], ),
                    pad  => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Rule::CharClass",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Rule::CharClass", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Rule::CharClass',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    ) ::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'rule',             twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'position',         twigil => '.', sigil => '$', ), type => '', ),
            ::Decl( decl => 'has', var => ::Var( namespace => [], name => 'capture_to_array', twigil => '.', sigil => '$', ), type => '', ),
            ::Method(
                name  => 'emit',
                block => ::Lit::Code(
                    body => [
                        ::Apply(
                            arguments => [
                                ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                ::Apply( arguments => [], code => ::Var( namespace => [], name => 'self', twigil => '', sigil => '&', ), ),
                                ::Val::Buf( buf => 'Rule::Capture', ),
                                ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                            ],
                            code => ::Var( namespace => [ 'KindaPerl6', 'Traverse', ], name => 'visit', twigil => '', sigil => '&', ),
                        ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'path', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',       twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'visitor', twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'path',    twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Rule::Capture",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
            ::Method(
                name  => 'attribs',
                block => ::Lit::Code(
                    body => [
                        ::Call(
                            hyper     => '',
                            arguments => [
                                ::Lit::Hash(
                                    hash => [
                                        [ ::Val::Buf( buf => 'rule', ),             ::Var( namespace => [], name => 'rule',             twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'position', ),         ::Var( namespace => [], name => 'position',         twigil => '.', sigil => '$', ), ],
                                        [ ::Val::Buf( buf => 'capture_to_array', ), ::Var( namespace => [], name => 'capture_to_array', twigil => '.', sigil => '$', ), ],
                                    ],
                                ),
                            ],
                            method   => 'new',
                            invocant => ::Proto( name => 'Hash', ),
                        ),
                    ],
                    sig => ::Sig( invocant => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), positional => [], ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'self', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "Rule::Capture",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "Rule::Capture", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'Rule::Capture',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    )
