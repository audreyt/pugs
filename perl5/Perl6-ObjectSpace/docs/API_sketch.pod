
my $Bit = module::signature->new(
    symbol->new('new') => method::signature->new(
        params => method::params->new(
            symbol->new('$class:' => 'Class')
            symbol->new('?$x'     => '<native>')
        ),
        returns => 'Bit'
    ),
    symbol->new('to_bit') => method::signature->new(
        params => method::params->new(symbol->new('$self:' => 'Bit')),
        returns => 'Bit'
    ),
    symbol->new('to_str') => method::signature->new(
        params => method::params->new(symbol->new('$self:' => 'Bit')),
        returns => 'Str'
    ),
    symbol->new('to_num') => method::signature->new(
        params => method::params->new(symbol->new('$self:' => 'Bit')),
        returns => 'Num'
    ),
    symbol->new('not') => method::signature->new(
        params => method::params->new(symbol->new('$self:' => 'Bit')),
        returns => 'Bit'
    ),      
    symbol->new('and') => method::signature->new(
        params => method::params->new(
            symbol->new('$self:' => 'Bit'),
            symbol->new('$block' => 'Block')
        ),
        returns => 'Bit'
    ),                 
    symbol->new('or') => method::signature->new(
        params => method::params->new(
            symbol->new('$self:' => 'Bit'),
            symbol->new('$block' => 'Block')
        ),
        returns => 'Bit'
    ),                             
);

*Bit = module::functor->new('bit' => $BIT);

Bit->new(1);

sub module::functor::native::convert {
    my ($sig, $body) = @_;
    closure->new(
        $e,
        $sig->params,
        sub {
            my $e = shift;
            # extract the args from the environment
            my @args;
            foreach my $param ($sig->params->to_native) {
                my $name = $param->name;
                push @args => $e->get($name->to_native);
            }
            # execute the body of the method
            return $body->(@args);    
            # closure will automatically check the type of the return value ...
        }
    );
}

my $wrapped_or = module::functor::native::convert(
                            $Bit->get_signature(symbol->new('or'))
                            \&bit::or
                        );
