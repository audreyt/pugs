#include <stdlib.h>
#include <assert.h>
#include <stdio.h>
#include <smop.h>
#include <smop_s1p.h>
#include <smop_oo.h>
#include <smop_lowlevel.h>

/*
class p6opaque {
  has $.WHENCE;
  has $.how;
  has Hash of Hash $.storage;
}
*/
SMOP__Object* SMOP__p6opaque__RI;
static SMOP__Object* SMOP__p6opaque_metadata__RI;
typedef struct smop_p6opaque {
  SMOP__Object__BASE
  SMOP__Object* WHENCE;
  SMOP__Object* storage;
  SMOP__Object* how;
} smop_p6opaque;

static SMOP__Object* p6opaque_message(SMOP__Object* interpreter,
                                      SMOP__ResponderInterface* self,
                                      SMOP__Object* identifier,
                                      SMOP__Object* capture) {
  SMOP__Object* ret = SMOP__NATIVE__bool_false;
  SMOP__Object* frame;
  smop_p6opaque* invocant = (smop_p6opaque*) SMOP__NATIVE__capture_invocant(interpreter,capture);
  SMOP__Object* storage = invocant->storage;
  SMOP__Object* how = invocant->how;

  if (identifier == SMOP__ID__REPR_CREATE) {
    invocant->storage = SMOP__S1P__Hash_create();
    invocant->how = SMOP__S1P__Scalar_create(SMOP__NATIVE__bool_false);
  } else if (identifier == SMOP__ID__REPR_how) {
    ret = how;
  } else if (identifier == SMOP__ID__REPR_private_storage) {
    use v6;
    #TODO $storage{$capture.positionals[0]};
  } else {
    {
        use v6;
        #TODO $how.dispatch($identifier,$capture);
    }
    if (identifier == SMOP__ID__DESTROYALL) {
      SMOP_RELEASE(interpreter,storage);
      SMOP_RELEASE(interpreter,how);
    }
  }
  SMOP_RELEASE(interpreter,capture);
  return ret;
}

void smop_p6opaque_init() {
  SMOP__p6opaque__RI = calloc(1,sizeof(SMOP__ResponderInterface));
  ((SMOP__ResponderInterface*)SMOP__p6opaque__RI)->MESSAGE = p6opaque_message;
  ((SMOP__ResponderInterface*)SMOP__p6opaque__RI)->REFERENCE = smop_lowlevel_generic_reference;
  ((SMOP__ResponderInterface*)SMOP__p6opaque__RI)->RELEASE = smop_lowlevel_generic_release;
  ((SMOP__ResponderInterface*)SMOP__p6opaque__RI)->id = "p6opaque";
}

void smop_p6opaque_destr() {
  free(SMOP__p6opaque__RI);
}
