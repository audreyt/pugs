package Perl6in5::Grammar::STD_hand;

use warnings;
#use strict; #haha

use base 'Exporter';
our @EXPORT = qw ( make_parser );

use Perl6in5::Compiler::Trace; # set env var TRACE for trace output

# isa Perl6in5::Grammar someday (to inherit some of the common features below)

use Perl6in5::Grammar ':all'; # heehee; a source filter.
#use P65GL;
use Perl6in5::Compiler::Stream ':all';
use Perl6in5::Compiler::Parser ':all';
use Perl6in5::Compiler::Lexer ':all';

use Data::Dumper;
use Math::BigFloat;

no warnings qw{ reserved closure recursion };
$Data::Dumper::Deparse = 1;

# The identifier of each of your rules must begin with a lowercase letter.   sorry.

#rule someRule sub { debug 'hello world' };


sub make_parser {
    my $input = shift;
    
    my $wS = sub { "" };
    
    my $lexer = iterator_to_stream(make_lexer($input,
    [ 'USEV6'           ,qr/use\s+v6;/        ,                            ],
    [ 'NL'              ,qr/\n+/              ,                            ],
    [ 'ID'              ,qr|[A-Za-z_]\w*|     ,                            ],
    [ 'INT'             ,qr|\d+|              ,                            ],
    # someday soon I'll need to remove whitespace from here and handle it
    # in the parser (not the lexer), since there are so many special rules
    # around ws and unspace.  Actually someday soon, all that should remain
    # here is the 'C' pattern (unfortunately), since there is so much that
    # will need to be redefinable at parse time, the lexing needs to go
    # character by character.  This means that the lexing step will merely
    # generate a sub generator that generates a stream of nested arrayrefs
    # (with the lexer as the tail) that each contain the next character.
    [ 'WS'              ,qr/\s+/              ,$wS                         ],
    [ 'C'               ,qr#.#                ,                            ],

    )); 

    my %VAR;

    # <sigh> these "predeclaration" need to be autogenerated someday, somehow
    my ($base, $expr, $factor, $program, $stmt, $term, $sVar, $stringLit,
        $usev6, $comma, $stmtList, $blockList, $newline, $blkDecl, $blkBare,
        $blkPrmbl, $blkType, $blkRetT, $blkModf, $word, $keyword, $keywords,
        $stmtTrm, $scpDecl, $block, $arg, $blkPrm, $compUnit, $flowCtrl,
        $blkLabl
    );

    my $Base               = parser { $base            ->(@_) };
    my $Expr               = parser { $expr            ->(@_) };
    my $Factor             = parser { $factor          ->(@_) };
    my $Program            = parser { $program         ->(@_) };
    my $Stmt               = parser { $stmt            ->(@_) };
    my $Term               = parser { $term            ->(@_) };
    my $SVar               = parser { $sVar            ->(@_) };
    my $StringLit          = parser { $stringLit       ->(@_) };
    my $Usev6              = parser { $usev6           ->(@_) };
    my $Comma              = parser { $comma           ->(@_) };
    my $StmtList           = parser { $stmtList        ->(@_) };
    my $BlockList          = parser { $blockList       ->(@_) };
    my $Newline            = parser { $newline         ->(@_) };
    my $BlkDecl            = parser { $blkDecl         ->(@_) };
    my $BlkBare            = parser { $blkBare         ->(@_) };
    my $BlkPrmbl           = parser { $blkPrmbl        ->(@_) };
    my $BlkType            = parser { $blkType         ->(@_) };
    my $BlkRetT            = parser { $blkRetT         ->(@_) };
    my $BlkModf            = parser { $blkModf         ->(@_) };
    my $Word               = parser { $word            ->(@_) };
    my $Keyword            = parser { $keyword         ->(@_) };
    my $Keywords           = parser { $keywords        ->(@_) };
    my $StmtTrm            = parser { $stmtTrm         ->(@_) };
    my $ScpDecl            = parser { $scpDecl         ->(@_) };
    my $Block              = parser { $block           ->(@_) };
    my $Arg                = parser { $arg             ->(@_) };
    my $BlkPrms            = parser { $blkPrms         ->(@_) };
    my $FlowCtrl           = parser { $flowCtrl        ->(@_) };
    my $BlkLabl            = parser { $blkLabl         ->(@_) };
    my $CompUnit           = parser { $compUnit        ->(@_) };

    # these hash keys are coderef (addresses)
    our %N = (
        $End_of_Input     => 'EOI',
        $nothing          => 'nothing',
        $Expr             => 'Expr',
        $Term             => 'Term',
        $Factor           => 'Factor',
        $Stmt             => 'Stmt',
        $Base             => 'Base',
        $Program          => 'Program',
        $ScpDecl          => 'ScpDecl',
        $SVar             => 'SVar',
        $StringLit        => 'StringLit',
        $Usev6            => 'Usev6',
        $Comma            => 'Comma',
        $StmtList         => 'StmtList',
        $BlockList        => 'BlockList',
        $Newline          => 'Newline',
        $BlkDecl          => 'BlkDecl',
        $BlkBare          => 'BlkBare',
        $BlkPrmbl         => 'BlkPrmbl',
        $BlkType          => 'BlkType',
        $BlkRetT          => 'BlkRetT',
        $BlkModf          => 'BlkModf',
        $Word             => 'Word',
        $Keyword          => 'Keyword',
        $Keywords         => 'Keywords',
        $StmtTrm          => 'StmtTrm',
        $Block            => 'Block',
        $Arg              => 'Arg',
        $BlkPrms          => 'BlkPrms'
    );
    
    sub execnow (&) { $_[0]->() }

    sub say (@) { print $_."\n" for @_ }

    sub adn (@) { 
        print "Adding AST node: "; # trace
        say join('',map(Dumper($_).' ',@_));
        Dumper([map("$_",@_)]);
    }

    my $handle_say_stmt =
    sub {   adn("say($_[1])");
            1; # someday Bool::True
            };

    my $handle_assignment_stmt =
    sub { # keep a parse-time pad of declared variable names
            adn("assign(@_[0,2])");
            $_[2]; # someday this will set $_ at semantic analysis time.
            };

    sub ch { # parse for a single character.
        my $p;
        $p = l('C',$_[0]);
        $N{$p} = "$_[0]"; # trace
        $p;
    }

    sub w { # look for a wrapped entity.  first parm is split into the wrappers.
        my ($d,$e) = split(//,$_[0]);
        my $p;
        $p = concatenate(ch($d),$_[1],ch($e));
        $N{$p} = "$d ".$N{$_[1]}." $e"; # trace
        $p;
    }
    
    sub keyword {
        my $ins = shift;
        my $p;
        $p = l('ID',$ins);
        $N{$p} = "$ins"; # trace
        $p;
    }
    
    sub keywords {
        my @args = @_;
        my $p;
        $p = alternate(map(keyword($_),@args));
        $N{$p} = join('|',@args); # trace
        $p;
    }
    
    #sub k { goto &keyword }
    
    rule comma {
        ch(',')
    };
    
    sub clist {
        my $ins = shift;
        my $p;
        $p = commalist($ins,$comma->(),', ');
        $N{$p} = "clist($N{$ins}"; # trace
        $p;
    }
    
    sub gt0 { # hit on 1 or more of the contained. (gt0 == greater than zero)
        my $p;
        $p = concatenate($_[0],star($_[0]));
        $N{$p} = ">=1($N{$_[0]})"; # trace
        $p;
    }
    
    sub word {
        my $p;
        $p = concatenate(map(ch($_),split(//, $_[0])));
        $N{$p} = $_[0];
        $p;
    }
    
    my $handle_declarator = 
    sub { bless([$_[0]] => 'Tuple') };

    $sVar = concatenate(ch('$'),l('ID')) >> sub {
            "$_[0]$_[1]";
        };

    my $handle_declaration_stmt =
    sub {   if ($_[0]) {
                warn "declaration of $_[1] masks ".
                "earlier declaration in the same scope" if exists $VAR{$_[1]};
                # keep a parse-time pad of declared variable names..
                # later such checking will be done during analysis
                # (after parsing)
                adn('__PACKAGE__::declare',($_[0],$_[1]))
            } else {
                die "$_[1] has yet to be declared" unless exists $VAR{$_[1]};
            }
            $_[3] = "$_[3]";
            shift;
            trace " \%N size... ".scalar(keys(%N));
            trace "setting $_[0] to $_[2]";
            $VAR{$_[0]} = $_[2];
            trace " \%N size... ".scalar(keys(%N));
            $handle_assignment_stmt->(@_) };

    my $handle_infix_addition =
    sub { my $term = $_[1];
          sub { $_[0] + $term }};

    my $handle_infix_subtraction =
    sub { my $term = $_[1];
          sub { $_[0] - $term }};

    my $handle_infix_multiplication =
    sub { my $factor = $_[1];
          sub { $_[0] * $factor }};
          
    my $handle_infix_division =
    sub { my $factor = $_[1];
          warn "cannot divide by 0." unless $factor;
          $factor ||= 1; #silly, I know; this is only a toy interpreter.
          sub {$_[0] / $factor}};
          
    my $handle_infix_exponentiation_factor = sub { $_[1] };

    my $handle_empty_nothing = sub { 1 };

    my $handle_infix_exponentiation_operation = sub { $_[0] ** $_[1] };

    my $handle_variable_lookup = sub { die "Undeclared variable $_[0]" unless exists $VAR{$_[0]}; "$VAR{$_[0]}"; };

    my $handle_base_value = sub { $_[1] };

    my $handle_cascade =
    sub { my ($first, $rest) = @_;
          for my $f (@$rest) {
              $first = $f->($first);
          } $first};

    my $handle_string_lit = sub { $_[1] };

    my $handle_integer_inst =
    sub { Math::BigFloat->new($_[0]) };
    
    # rule perl5zone {
        # sl(); # grabs anything/everything...
    # }

    rule program {
        # treat everything as Perl 5 by default. haha!
        #o($Perl5zone)        -        # can't slurp "up until" until we're backtracking
                        # I need a function "until($p,$q)" that returns a parser that 
                        # iterates through the stream of tokens, trying $q against the
                        # remaining input at each token, essentially using $q as a stop
                        # phrase, then returns $p's and $q's matches, concatenated.
     #parser { sub {} }
        o($Usev6 - error(o($StmtList))) - o($Newline) - $End_of_Input
        # an optional Perl 5 section # use v6; # error trapper #optional Stmt list
    };
    
    rule usev6 {
        l('USEV6')
    };
    
    rule stmtList {
        (o($Newline) - ($Stmt - o($StmtTrm - o($StmtList | $BlockList)) - o($Newline)))
        | (o($Newline) - $BlockList)
        # the first Stmt in the list  # 0 or more Terminator-Stmt
        # since Block-NewLine includes its own implied following terminator...
    };

    rule blockList {
        $Block - o(($Newline | $StmtTrm) - o($StmtList)) - o($Newline)
    };

    rule newline {
        l('NL')
    };

    rule blkDecl { 
        ($BlkPrmbl - $BlkBare)
    };
    
    rule blkBare {
        w('{}',$StmtList)
    };
    
    rule block {
        $BlkDecl | $BlkBare
    };
    
    rule blkPrmbl { # block preamble
        (o($BlkModf) - o($ScpDecl - $BlkRetT) - $BlkType - o(l('ID')) - o(w('()',$BlkPrms)) #- o($BlkTrts)
        ) | $CompUnit | $FlowCtrl | $BlkLabl
    };
    
    rule flowCtrl { # Until I die, I would cry unless unless/until were included.
        keywords(qw{ if unless elsif else loop do while until })
    };
    
    rule compUnit {
        keywords(qw{ eval PRE POST ENTER LEAVE KEEP UNDO FIRST 
                     LAST BEGIN END INIT CHECK UNITCHECK })
    };
    
    rule blkType {
        keywords(qw{ sub method submethod regex token rule macro })
    };

    rule blkRetT {
        l('ID')  # just take any class/type name for now :)
      #  $Clype    # Class/Type
    };
    
    rule blkLabl {
        l('ID') - ch(':');
    };
    
    rule blkModf {
        keywords(qw{ multi proto only })
    };
    
    rule arg {
        ch('h')
    };
    
    rule blkPrms {
        commalist($Arg)
    };
    
    rule stmtTrm {
        gt0(ch(';'))
    };

    rule scpDecl {
        keywords(qw{ my our })
    };
    
    rule stmt { # or a bare expression (implied $_=Expr)
        (keyword('say') - $Expr
                 >> $handle_say_stmt
               | ((o($ScpDecl) > $handle_declarator) - $sVar - ch('=') - $Expr )
                 >> $handle_declaration_stmt) | $Expr
    };

    rule expr {
    (($Term - (star((ch('+') - $Term) >>  $handle_infix_addition)
             | (ch('-') - $Term >> $handle_infix_subtraction)))
                  >> $handle_cascade) | $Block | $Stmt
    };

    rule term {
        $Factor - star(ch('*') - $Factor >> $handle_infix_multiplication
                     | ch('/') - $Factor >> $handle_infix_division)
                  >> $handle_cascade
    };

    rule factor {
        ($Base - o(word('**') - $Factor >> $handle_infix_exponentiation_factor))
        >> $handle_infix_exponentiation_operation
    };

    rule base {
     (l('INT') > $handle_integer_inst)
          | ($sVar > $handle_variable_lookup)
          | (w('()',$Expr) >> $handle_base_value)
    };

    sub {
        eval { $program->($lexer) };
        if ($@) {
            print "  Syntax Error near: ".Dumper(tail(head(tail($@))));
            return 255;
        } else {
            return 0;
        }
    }
}

1;