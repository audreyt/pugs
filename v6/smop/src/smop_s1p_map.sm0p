#include <stdlib.h>
#include <smop.h>
#include <math.h>
#include <smop_lowlevel.h>
#include <smop_s1p.h>
#include <stdio.h>

SMOP__Object* SMOP__S1P__map;

typedef struct smop_s1p_map_iterator_struct {
  SMOP__Object__BASE
  SMOP__Object* input_iterator;
  SMOP__Object* code;
} smop_s1p_array_struct;

static SMOP__Object* map_iterator_consume_mold;

static SMOP__Object* smop_s1p_map_message(SMOP__Object* interpreter,
                                          SMOP__ResponderInterface* self,
                                          SMOP__Object* identifier,
                                          SMOP__Object* capture) {
  ___UNKNOWN_METHOD___;
}


void smop_s1p_map_init() {
  SMOP__S1P__map = calloc(1, sizeof(SMOP__ResponderInterface));
  assert(SMOP__S1P__map);
  ((SMOP__ResponderInterface*)SMOP__S1P__map)->MESSAGE = smop_s1p_map_message;
  ((SMOP__ResponderInterface*)SMOP__S1P__map)->REFERENCE = smop_lowlevel_generic_reference;
  ((SMOP__ResponderInterface*)SMOP__S1P__map)->RELEASE = smop_lowlevel_generic_release;
  ((SMOP__ResponderInterface*)SMOP__S1P__map)->id = "S1P Map Iterator";
}

void smop_s1p_map_mold_init() {

  SMOP__Object* interpreter = SMOP__GlobalInterpreter;
  map_iterator_consume_mold = q:m0ld {
    my $capture;
    my $back;
    my $interpreter;


    my $result;
    my $void = $back."setr"($result);
    $void = $interpreter."goto"($back);
  };

}

void smop_s1p_map_mold_destr() {
  SMOP_RELEASE(SMOP__GlobalInterpreter, map_iterator_consume_mold);
  map_iterator_consume_mold = NULL;
}

void smop_s1p_map_destr() {
  free(SMOP__S1P__map);
}
