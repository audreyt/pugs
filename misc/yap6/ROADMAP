Goals/Milestones of yap6:
1. Generate an AST of STD.pm using handwritten rules.
    (Perl6in5::Grammar::STD_. Don't do type/dependency 
    checking since STD.pm is definitive (:D).
2. Use the generated AST to generate Perl6in5::Grammar 
    rules from STD.pm.  Add any backlooking/lookahead 
    capabilities to the Grammar framework necessary for
    the task.
3. Use the generated Perl6in5::Grammar::STD_auto to
    generate an AST from STD.pm.  Fine tune the process
    until the generated ASTs match exactly.  If it 
    succeeds, this will prove the concept of the 
    recursive descent parser well enough for me....
4. Use the generated Perl6in5::Grammar::STD_auto
    grammar to parse Test.pm.  Either begin to interface
    with elf (by shunting the ASTs that direction) or 
    start writing a (meta)object system for the
    type checker and interpreter runtime.
5. Write emitters targeting Parrot, LLVM, and/or libFIRM