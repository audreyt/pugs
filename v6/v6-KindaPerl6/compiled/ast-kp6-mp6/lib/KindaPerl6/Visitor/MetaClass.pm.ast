::CompUnit(
    body => ::Lit::Code(
        body => [
            ::Method(
                name  => 'visit',
                block => ::Lit::Code(
                    body => [
                        ::If(
                            body => ::Lit::Code(
                                body => [
                                    ::If(
                                        body => ::Lit::Code(
                                            body => [ ::Return( result => ::Val::Undef(), ), ],
                                            sig => ::Sig( invocant => '', positional => [], ),
                                            pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Visitor::MetaClass", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                            CATCH => '',
                                            state => {},
                                        ),
                                        cond => ::Apply(
                                            arguments => [ ::Call( hyper => '', arguments => '', method => 'unit_type', invocant => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ), ), ::Val::Buf( buf => 'module', ), ],
                                            code => ::Var( namespace => [], name => 'infix:<eq>', twigil => '', sigil => '&', ),
                                        ),
                                        otherwise => '',
                                    ),
                                    ::Bind(
                                        parameters => ::Var( namespace => [], name => 'module', twigil => '', sigil => '$', ),
                                        arguments => ::Call( hyper => '', arguments => [ ::Lit::Array( array => [], ), ], method => 'new', invocant => ::Proto( name => 'Array', ), ),
                                    ),
                                    ::If(
                                        body => ::Lit::Code(
                                            body => [
                                                ::Apply(
                                                    arguments => [
                                                        ::Apply( arguments => [ ::Var( namespace => [], name => 'module', twigil => '', sigil => '$', ), ], code => ::Var( namespace => [], name => 'prefix:<@>', twigil => '', sigil => '&', ), ),
                                                        ::Call(
                                                            hyper     => '',
                                                            arguments => [
                                                                ::Lit::Pair( value => ::Val::Buf( buf => '', ), key => ::Val::Buf( buf => 'hyper', ), ),
                                                                ::Lit::Pair(
                                                                    value => ::Call(
                                                                        hyper     => '',
                                                                        arguments => [
                                                                            ::Lit::Array(
                                                                                array => [
                                                                                    ::Call(
                                                                                        hyper     => '',
                                                                                        arguments => [
                                                                                            ::Lit::NamedArgument(
                                                                                                value => ::Call( hyper => '', arguments => '', method => 'name', invocant => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ), ),
                                                                                                key => ::Val::Buf( buf => 'buf', ),
                                                                                            ),
                                                                                        ],
                                                                                        method   => 'new',
                                                                                        invocant => ::Proto( name => 'Val::Buf', ),
                                                                                    ),
                                                                                ],
                                                                            ),
                                                                        ],
                                                                        method   => 'new',
                                                                        invocant => ::Proto( name => 'Array', ),
                                                                    ),
                                                                    key => ::Val::Buf( buf => 'arguments', ),
                                                                ),
                                                                ::Lit::Pair( value => ::Val::Buf( buf => 'new', ), key => ::Val::Buf( buf => 'method', ), ),
                                                                ::Lit::Pair(
                                                                    value => ::Call(
                                                                        hyper     => '',
                                                                        arguments => [ ::Lit::NamedArgument( value => ::Val::Buf( buf => 'KindaPerl6::Role', ), key => ::Val::Buf( buf => 'name', ), ), ],
                                                                        method    => 'new',
                                                                        invocant => ::Proto( name => 'Proto', ),
                                                                    ),
                                                                    key => ::Val::Buf( buf => 'invocant', ),
                                                                ),
                                                            ],
                                                            method   => 'new',
                                                            invocant => ::Proto( name => 'Call', ),
                                                        ),
                                                    ],
                                                    code => ::Var( namespace => [], name => 'push', twigil => '', sigil => '&', ),
                                                ),
                                            ],
                                            sig => ::Sig( invocant => '', positional => [], ),
                                            pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Visitor::MetaClass", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                            CATCH => '',
                                            state => {},
                                        ),
                                        cond => ::Apply(
                                            arguments => [ ::Call( hyper  => '', arguments => '',           method => 'unit_type', invocant => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ), ), ::Val::Buf( buf => 'role', ), ],
                                            code      => ::Var( namespace => [], name      => 'infix:<eq>', twigil => '',          sigil    => '&', ),
                                        ),
                                        otherwise => ::Lit::Code(
                                            body => [
                                                ::Bind( parameters => ::Var( namespace => [], name => 'metaclass', twigil => '', sigil => '$', ), arguments => ::Val::Buf( buf => 'Class', ), ),
                                                ::Var( namespace => [], name => 'trait', twigil => '', sigil => '$', ),
                                                ::If(
                                                    body => ::Lit::Code(
                                                        body => [
                                                            ::Call(
                                                                hyper     => '',
                                                                arguments => [
                                                                    ::Sub(
                                                                        name  => '',
                                                                        block => ::Lit::Code(
                                                                            body => [
                                                                                ::If(
                                                                                    body => ::Lit::Code(
                                                                                        body => [
                                                                                            ::Bind(
                                                                                                parameters => ::Var( namespace => [], name => 'metaclass', twigil => '', sigil => '$', ),
                                                                                                arguments  => ::Call(
                                                                                                    hyper     => '',
                                                                                                    arguments => [ ::Val::Int( int => '1', ), ],
                                                                                                    method    => 'INDEX',
                                                                                                    invocant  => ::Var( namespace => [], name => 'trait', twigil => '', sigil => '$', ),
                                                                                                ),
                                                                                            ),
                                                                                        ],
                                                                                        sig => ::Sig( invocant => '', positional => [], ),
                                                                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Visitor::MetaClass", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                                                        CATCH => '',
                                                                                        state => {},
                                                                                    ),
                                                                                    cond => ::Apply(
                                                                                        arguments => [
                                                                                            ::Call(
                                                                                                hyper     => '',
                                                                                                arguments => [ ::Val::Int( int => '0', ), ],
                                                                                                method    => 'INDEX',
                                                                                                invocant  => ::Var( namespace => [], name => 'trait', twigil => '', sigil => '$', ),
                                                                                            ),
                                                                                            ::Val::Buf( buf => 'meta', ),
                                                                                        ],
                                                                                        code => ::Var( namespace => [], name => 'infix:<eq>', twigil => '', sigil => '&', ),
                                                                                    ),
                                                                                    otherwise => '',
                                                                                ),
                                                                            ],
                                                                            sig => ::Sig(
                                                                                invocant   => ::Val::Undef(),
                                                                                positional => [
                                                                                    ::Lit::SigArgument(
                                                                                        is_multidimensional => ::Val::Bit( bit => '0', ),
                                                                                        has_default         => ::Val::Bit( bit => '0', ),
                                                                                        value               => ::Val::Undef(),
                                                                                        is_slurpy           => ::Val::Bit( bit => '0', ),
                                                                                        is_optional         => ::Val::Bit( bit => '0', ),
                                                                                        key           => ::Var( namespace => [], name => 'trait', twigil => '', sigil => '$', ),
                                                                                        is_copy       => ::Val::Bit( bit  => '0', ),
                                                                                        is_named_only => ::Val::Bit( bit  => '0', ),
                                                                                        type          => '',
                                                                                        is_rw => ::Val::Bit( bit => '0', ),
                                                                                    ),
                                                                                ],
                                                                            ),
                                                                            pad => ::Pad(
                                                                                lexicals => [
                                                                                    ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',     twigil => '', sigil => '@', ), type => '', ),
                                                                                    ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'trait', twigil => '', sigil => '$', ), type => '', )
                                                                                ],
                                                                                namespace => "KindaPerl6::Visitor::MetaClass",
                                                                                parent    => ::Pad(...),
                                                                                evaluator => ::Sub(...),
                                                                            ),
                                                                            CATCH => '',
                                                                            state => {},
                                                                        ),
                                                                    ),
                                                                ],
                                                                method   => 'map',
                                                                invocant => ::Apply(
                                                                    arguments => [ ::Call( hyper  => '', arguments => '',           method => 'traits', invocant => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ), ), ],
                                                                    code      => ::Var( namespace => [], name      => 'prefix:<@>', twigil => '',       sigil    => '&', ),
                                                                ),
                                                            ),
                                                        ],
                                                        sig => ::Sig( invocant => '', positional => [], ),
                                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Visitor::MetaClass", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                        CATCH => '',
                                                        state => {},
                                                    ),
                                                    cond      => ::Call( hyper => '', arguments => '', method => 'traits', invocant => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ), ),
                                                    otherwise => '',
                                                ),
                                                ::Bind(
                                                    parameters => ::Var( namespace => [], name => 'metaobject', twigil => '', sigil => '$', ),
                                                    arguments  => ::Call(
                                                        hyper     => '',
                                                        arguments => [
                                                            ::Lit::Pair( value => ::Val::Buf( buf => '', ), key => ::Val::Buf( buf => 'hyper', ), ),
                                                            ::Lit::Pair(
                                                                value => ::Call(
                                                                    hyper     => '',
                                                                    arguments => [
                                                                        ::Lit::Array(
                                                                            array => [
                                                                                ::Call(
                                                                                    hyper     => '',
                                                                                    arguments => [
                                                                                        ::Lit::NamedArgument(
                                                                                            value => ::Call( hyper   => '', arguments => '', method => 'name', invocant => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ), ),
                                                                                            key   => ::Val::Buf( buf => 'buf', ),
                                                                                        ),
                                                                                    ],
                                                                                    method   => 'new',
                                                                                    invocant => ::Proto( name => 'Val::Buf', ),
                                                                                ),
                                                                            ],
                                                                        ),
                                                                    ],
                                                                    method   => 'new',
                                                                    invocant => ::Proto( name => 'Array', ),
                                                                ),
                                                                key => ::Val::Buf( buf => 'arguments', ),
                                                            ),
                                                            ::Lit::Pair( value => ::Val::Buf( buf => 'new', ), key => ::Val::Buf( buf => 'method', ), ),
                                                            ::Lit::Pair(
                                                                value => ::Call(
                                                                    hyper     => '',
                                                                    arguments => [ ::Lit::NamedArgument( value => ::Var( namespace => [], name => 'metaclass', twigil => '', sigil => '$', ), key => ::Val::Buf( buf => 'name', ), ), ],
                                                                    method    => 'new',
                                                                    invocant => ::Proto( name => 'Proto', ),
                                                                ),
                                                                key => ::Val::Buf( buf => 'invocant', ),
                                                            ),
                                                        ],
                                                        method   => 'new',
                                                        invocant => ::Proto( name => 'Call', ),
                                                    ),
                                                ),
                                                ::Bind(
                                                    parameters => ::Var( namespace => [], name => 'body', twigil => '', sigil => '$', ),
                                                    arguments => ::Call( hyper => '', arguments => '', method => 'body', invocant => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ), ),
                                                ),
                                                ::Var( namespace => [], name => 'pad', twigil => '', sigil => '$', ),
                                                ::If(
                                                    body => ::Lit::Code(
                                                        body => [
                                                            ::Bind(
                                                                parameters => ::Var( namespace => [], name => 'pad', twigil => '', sigil => '$', ),
                                                                arguments => ::Call( hyper => '', arguments => '', method => 'pad', invocant => ::Var( namespace => [], name => 'body', twigil => '', sigil => '$', ), ),
                                                            ),
                                                        ],
                                                        sig => ::Sig( invocant => '', positional => [], ),
                                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Visitor::MetaClass", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                        CATCH => '',
                                                        state => {},
                                                    ),
                                                    cond      => ::Var( namespace => [], name => 'body', twigil => '', sigil => '$', ),
                                                    otherwise => '',
                                                ),
                                                ::Apply(
                                                    arguments => [
                                                        ::Apply( arguments => [ ::Var( namespace => [], name => 'module', twigil => '', sigil => '$', ), ], code => ::Var( namespace => [], name => 'prefix:<@>', twigil => '', sigil => '&', ), ),
                                                        ::Call(
                                                            hyper     => '',
                                                            arguments => [
                                                                ::Lit::NamedArgument(
                                                                    value => ::Call(
                                                                        hyper     => '',
                                                                        arguments => [
                                                                            ::Lit::NamedArgument(
                                                                                value => ::Call(
                                                                                    hyper     => '',
                                                                                    arguments => [
                                                                                        ::Lit::Array(
                                                                                            array => [
                                                                                                ::Call(
                                                                                                    hyper     => '',
                                                                                                    arguments => [
                                                                                                        ::Lit::NamedArgument(
                                                                                                            value => ::Call(
                                                                                                                hyper     => '',
                                                                                                                arguments => '',
                                                                                                                method    => 'name',
                                                                                                                invocant  => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ),
                                                                                                            ),
                                                                                                            key => ::Val::Buf( buf => 'name', ),
                                                                                                        ),
                                                                                                    ],
                                                                                                    method   => 'new',
                                                                                                    invocant => ::Proto( name => 'Proto', ),
                                                                                                ),
                                                                                            ],
                                                                                        ),
                                                                                    ],
                                                                                    method   => 'new',
                                                                                    invocant => ::Proto( name => 'Array', ),
                                                                                ),
                                                                                key => ::Val::Buf( buf => 'arguments', ),
                                                                            ),
                                                                            ::Lit::NamedArgument(
                                                                                value => ::Call(
                                                                                    hyper     => '',
                                                                                    arguments => [
                                                                                        ::Lit::NamedArgument( value => ::Val::Buf( buf => 'VAR_defined', ), key => ::Val::Buf( buf => 'name', ), ),
                                                                                        ::Lit::NamedArgument( value => ::Val::Buf( buf => '', ),            key => ::Val::Buf( buf => 'twigil', ), ),
                                                                                        ::Lit::NamedArgument( value => ::Val::Buf( buf => '&', ),           key => ::Val::Buf( buf => 'sigil', ), ),
                                                                                        ::Lit::NamedArgument(
                                                                                            value => ::Call( hyper   => '', arguments => [ ::Lit::Array( array => [], ), ], method => 'new', invocant => ::Proto( name => 'Array', ), ),
                                                                                            key   => ::Val::Buf( buf => 'namespace', ),
                                                                                        ),
                                                                                    ],
                                                                                    method   => 'new',
                                                                                    invocant => ::Proto( name => 'Var', ),
                                                                                ),
                                                                                key => ::Val::Buf( buf => 'code', ),
                                                                            ),
                                                                        ],
                                                                        method   => 'new',
                                                                        invocant => ::Proto( name => 'Apply', ),
                                                                    ),
                                                                    key => ::Val::Buf( buf => 'cond', ),
                                                                ),
                                                                ::Lit::NamedArgument(
                                                                    value => ::Call(
                                                                        hyper     => '',
                                                                        arguments => [
                                                                            ::Lit::NamedArgument(
                                                                                value => ::Call( hyper   => '', arguments => [ ::Lit::Array( array => [], ), ], method => 'new', invocant => ::Proto( name => 'Array', ), ),
                                                                                key   => ::Val::Buf( buf => 'body', ),
                                                                            ),
                                                                            ::Lit::NamedArgument(
                                                                                value => ::Call(
                                                                                    hyper     => '',
                                                                                    arguments => [
                                                                                        ::Lit::NamedArgument( value => ::Val::Buf( buf => '', ), key => ::Val::Buf( buf => 'invocant', ), ),
                                                                                        ::Lit::NamedArgument(
                                                                                            value => ::Call( hyper   => '', arguments => [ ::Lit::Array( array => [], ), ], method => 'new', invocant => ::Proto( name => 'Array', ), ),
                                                                                            key   => ::Val::Buf( buf => 'positional', ),
                                                                                        ),
                                                                                    ],
                                                                                    method   => 'new',
                                                                                    invocant => ::Proto( name => 'Sig', ),
                                                                                ),
                                                                                key => ::Val::Buf( buf => 'sig', ),
                                                                            ),
                                                                            ::Lit::NamedArgument( value => ::Var( namespace => [], name => 'pad', twigil => '', sigil => '$', ), key => ::Val::Buf( buf => 'pad', ), ),
                                                                            ::Lit::NamedArgument(
                                                                                value => ::Call( hyper   => '', arguments => [ ::Lit::Hash( hash => [], ), ], method => 'new', invocant => ::Proto( name => 'Hash', ), ),
                                                                                key   => ::Val::Buf( buf => 'state', ),
                                                                            ),
                                                                        ],
                                                                        method   => 'new',
                                                                        invocant => ::Proto( name => 'Lit::Code', ),
                                                                    ),
                                                                    key => ::Val::Buf( buf => 'body', ),
                                                                ),
                                                                ::Lit::NamedArgument(
                                                                    value => ::Call(
                                                                        hyper     => '',
                                                                        arguments => [
                                                                            ::Lit::NamedArgument(
                                                                                value => ::Call(
                                                                                    hyper     => '',
                                                                                    arguments => [
                                                                                        ::Lit::Array(
                                                                                            array => [
                                                                                                ::Call(
                                                                                                    hyper     => '',
                                                                                                    arguments => [
                                                                                                        ::Lit::Pair(
                                                                                                            value => ::Call(
                                                                                                                hyper     => '',
                                                                                                                arguments => [
                                                                                                                    ::Lit::NamedArgument(
                                                                                                                        value => ::Call(
                                                                                                                            hyper     => '',
                                                                                                                            arguments => '',
                                                                                                                            method    => 'name',
                                                                                                                            invocant  => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ),
                                                                                                                        ),
                                                                                                                        key => ::Val::Buf( buf => 'name', ),
                                                                                                                    ),
                                                                                                                ],
                                                                                                                method   => 'new',
                                                                                                                invocant => ::Proto( name => 'Proto', ),
                                                                                                            ),
                                                                                                            key => ::Val::Buf( buf => 'parameters', ),
                                                                                                        ),
                                                                                                        ::Lit::Pair(
                                                                                                            value => ::Call(
                                                                                                                hyper     => '',
                                                                                                                arguments => [
                                                                                                                    ::Lit::Pair(
                                                                                                                        value => ::Var( namespace => [], name => 'metaobject', twigil => '', sigil => '$', ),
                                                                                                                        key   => ::Val::Buf( buf  => 'invocant', ),
                                                                                                                    ),
                                                                                                                    ::Lit::Pair( value => ::Val::Buf( buf => 'PROTOTYPE', ), key => ::Val::Buf( buf => 'method', ), ),
                                                                                                                    ::Lit::Pair( value => ::Val::Buf( buf => '', ),          key => ::Val::Buf( buf => 'hyper', ), ),
                                                                                                                ],
                                                                                                                method   => 'new',
                                                                                                                invocant => ::Proto( name => 'Call', ),
                                                                                                            ),
                                                                                                            key => ::Val::Buf( buf => 'arguments', ),
                                                                                                        ),
                                                                                                    ],
                                                                                                    method   => 'new',
                                                                                                    invocant => ::Proto( name => 'Bind', ),
                                                                                                ),
                                                                                            ],
                                                                                        ),
                                                                                    ],
                                                                                    method   => 'new',
                                                                                    invocant => ::Proto( name => 'Array', ),
                                                                                ),
                                                                                key => ::Val::Buf( buf => 'body', ),
                                                                            ),
                                                                            ::Lit::NamedArgument(
                                                                                value => ::Call(
                                                                                    hyper     => '',
                                                                                    arguments => [
                                                                                        ::Lit::NamedArgument( value => ::Val::Buf( buf => '', ), key => ::Val::Buf( buf => 'invocant', ), ),
                                                                                        ::Lit::NamedArgument(
                                                                                            value => ::Call( hyper   => '', arguments => [ ::Lit::Array( array => [], ), ], method => 'new', invocant => ::Proto( name => 'Array', ), ),
                                                                                            key   => ::Val::Buf( buf => 'positional', ),
                                                                                        ),
                                                                                    ],
                                                                                    method   => 'new',
                                                                                    invocant => ::Proto( name => 'Sig', ),
                                                                                ),
                                                                                key => ::Val::Buf( buf => 'sig', ),
                                                                            ),
                                                                            ::Lit::NamedArgument( value => ::Var( namespace => [], name => 'pad', twigil => '', sigil => '$', ), key => ::Val::Buf( buf => 'pad', ), ),
                                                                            ::Lit::NamedArgument(
                                                                                value => ::Call( hyper   => '', arguments => [ ::Lit::Hash( hash => [], ), ], method => 'new', invocant => ::Proto( name => 'Hash', ), ),
                                                                                key   => ::Val::Buf( buf => 'state', ),
                                                                            ),
                                                                        ],
                                                                        method   => 'new',
                                                                        invocant => ::Proto( name => 'Lit::Code', ),
                                                                    ),
                                                                    key => ::Val::Buf( buf => 'otherwise', ),
                                                                ),
                                                            ],
                                                            method   => 'new',
                                                            invocant => ::Proto( name => 'If', ),
                                                        ),
                                                    ],
                                                    code => ::Var( namespace => [], name => 'push', twigil => '', sigil => '&', ),
                                                ),
                                            ],
                                            sig => ::Sig( invocant => '', positional => [], ),
                                            pad => ::Pad(
                                                lexicals => [
                                                    ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'metaclass',  twigil => '', sigil => '$', ), type => '', ),
                                                    ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'trait',      twigil => '', sigil => '$', ), type => '', ),
                                                    ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'metaobject', twigil => '', sigil => '$', ), type => '', ),
                                                    ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'body',       twigil => '', sigil => '$', ), type => '', ),
                                                    ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'pad',        twigil => '', sigil => '$', ), type => '', )
                                                ],
                                                namespace => "KindaPerl6::Visitor::MetaClass",
                                                parent    => ::Pad(...),
                                                evaluator => ::Sub(...),
                                            ),
                                            CATCH => '',
                                            state => {},
                                        ),
                                    ),
                                    ::Var( namespace => [], name => 'trait', twigil => '', sigil => '$', ),
                                    ::If(
                                        body => ::Lit::Code(
                                            body => [
                                                ::Call(
                                                    hyper     => '',
                                                    arguments => [
                                                        ::Sub(
                                                            name  => '',
                                                            block => ::Lit::Code(
                                                                body => [
                                                                    ::If(
                                                                        body => ::Lit::Code(
                                                                            body => [
                                                                                ::Apply(
                                                                                    arguments => [
                                                                                        ::Apply(
                                                                                            arguments => [ ::Var( namespace => [], name => 'module',     twigil => '', sigil => '$', ), ],
                                                                                            code      => ::Var( namespace   => [], name => 'prefix:<@>', twigil => '', sigil => '&', ),
                                                                                        ),
                                                                                        ::Call(
                                                                                            hyper     => '',
                                                                                            arguments => [
                                                                                                ::Lit::Pair( value => ::Val::Buf( buf => '', ), key => ::Val::Buf( buf => 'hyper', ), ),
                                                                                                ::Lit::Pair(
                                                                                                    value => ::Call(
                                                                                                        hyper     => '',
                                                                                                        arguments => [
                                                                                                            ::Lit::Array(
                                                                                                                array => [
                                                                                                                    ::Call(
                                                                                                                        hyper     => '',
                                                                                                                        arguments => [
                                                                                                                            ::Lit::NamedArgument(
                                                                                                                                value => ::Call(
                                                                                                                                    hyper     => '',
                                                                                                                                    arguments => [ ::Val::Int( int => '1', ), ],
                                                                                                                                    method    => 'INDEX',
                                                                                                                                    invocant  => ::Var( namespace => [], name => 'trait', twigil => '', sigil => '$', ),
                                                                                                                                ),
                                                                                                                                key => ::Val::Buf( buf => 'buf', ),
                                                                                                                            ),
                                                                                                                        ],
                                                                                                                        method   => 'new',
                                                                                                                        invocant => ::Proto( name => 'Val::Buf', ),
                                                                                                                    ),
                                                                                                                ],
                                                                                                            ),
                                                                                                        ],
                                                                                                        method   => 'new',
                                                                                                        invocant => ::Proto( name => 'Array', ),
                                                                                                    ),
                                                                                                    key => ::Val::Buf( buf => 'arguments', ),
                                                                                                ),
                                                                                                ::Lit::Pair( value => ::Val::Buf( buf => 'add_role', ), key => ::Val::Buf( buf => 'method', ), ),
                                                                                                ::Lit::Pair(
                                                                                                    value => ::Call(
                                                                                                        hyper     => '',
                                                                                                        arguments => [
                                                                                                            ::Lit::Pair( value => ::Val::Buf( buf => '', ), key => ::Val::Buf( buf => 'hyper', ), ),
                                                                                                            ::Lit::Pair(
                                                                                                                value => ::Call( hyper => '', arguments => [ ::Lit::Array( array => [], ), ], method => 'new', invocant => ::Proto( name => 'Array', ), ),
                                                                                                                key => ::Val::Buf( buf => 'arguments', ),
                                                                                                            ),
                                                                                                            ::Lit::Pair( value => ::Val::Buf( buf => 'HOW', ), key => ::Val::Buf( buf => 'method', ), ),
                                                                                                            ::Lit::Pair(
                                                                                                                value => ::Call(
                                                                                                                    hyper     => '',
                                                                                                                    arguments => [
                                                                                                                        ::Lit::NamedArgument(
                                                                                                                            value => ::Call(
                                                                                                                                hyper     => '',
                                                                                                                                arguments => '',
                                                                                                                                method    => 'name',
                                                                                                                                invocant  => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ),
                                                                                                                            ),
                                                                                                                            key => ::Val::Buf( buf => 'name', ),
                                                                                                                        ),
                                                                                                                    ],
                                                                                                                    method   => 'new',
                                                                                                                    invocant => ::Proto( name => 'Proto', ),
                                                                                                                ),
                                                                                                                key => ::Val::Buf( buf => 'invocant', ),
                                                                                                            ),
                                                                                                        ],
                                                                                                        method   => 'new',
                                                                                                        invocant => ::Proto( name => 'Call', ),
                                                                                                    ),
                                                                                                    key => ::Val::Buf( buf => 'invocant', ),
                                                                                                ),
                                                                                            ],
                                                                                            method   => 'new',
                                                                                            invocant => ::Proto( name => 'Call', ),
                                                                                        ),
                                                                                    ],
                                                                                    code => ::Var( namespace => [], name => 'push', twigil => '', sigil => '&', ),
                                                                                ),
                                                                            ],
                                                                            sig => ::Sig( invocant => '', positional => [], ),
                                                                            pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Visitor::MetaClass", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                                            CATCH => '',
                                                                            state => {},
                                                                        ),
                                                                        cond => ::Apply(
                                                                            arguments => [
                                                                                ::Call(
                                                                                    hyper     => '',
                                                                                    arguments => [ ::Val::Int( int => '0', ), ],
                                                                                    method    => 'INDEX',
                                                                                    invocant  => ::Var( namespace => [], name => 'trait', twigil => '', sigil => '$', ),
                                                                                ),
                                                                                ::Val::Buf( buf => 'does', ),
                                                                            ],
                                                                            code => ::Var( namespace => [], name => 'infix:<eq>', twigil => '', sigil => '&', ),
                                                                        ),
                                                                        otherwise => ::Lit::Code(
                                                                            body => [
                                                                                ::If(
                                                                                    body => ::Lit::Code(
                                                                                        body => [
                                                                                            ::Apply(
                                                                                                arguments => [
                                                                                                    ::Apply(
                                                                                                        arguments => [ ::Var( namespace => [], name => 'module',     twigil => '', sigil => '$', ), ],
                                                                                                        code      => ::Var( namespace   => [], name => 'prefix:<@>', twigil => '', sigil => '&', ),
                                                                                                    ),
                                                                                                    ::Call(
                                                                                                        hyper     => '',
                                                                                                        arguments => [
                                                                                                            ::Lit::Pair( value => ::Val::Buf( buf => '', ), key => ::Val::Buf( buf => 'hyper', ), ),
                                                                                                            ::Lit::Pair(
                                                                                                                value => ::Call(
                                                                                                                    hyper     => '',
                                                                                                                    arguments => [
                                                                                                                        ::Lit::Array(
                                                                                                                            array => [
                                                                                                                                ::Call(
                                                                                                                                    hyper     => '',
                                                                                                                                    arguments => [
                                                                                                                                        ::Lit::Pair( value => ::Val::Buf( buf => '', ), key => ::Val::Buf( buf => 'hyper', ), ),
                                                                                                                                        ::Lit::Pair(
                                                                                                                                            value => ::Call(
                                                                                                                                                hyper     => '',
                                                                                                                                                arguments => [ ::Lit::Array( array => [], ), ],
                                                                                                                                                method    => 'new',
                                                                                                                                                invocant  => ::Proto( name => 'Array', ),
                                                                                                                                            ),
                                                                                                                                            key => ::Val::Buf( buf => 'arguments', ),
                                                                                                                                        ),
                                                                                                                                        ::Lit::Pair( value => ::Val::Buf( buf => 'HOW', ), key => ::Val::Buf( buf => 'method', ), ),
                                                                                                                                        ::Lit::Pair(
                                                                                                                                            value => ::Call(
                                                                                                                                                hyper     => '',
                                                                                                                                                arguments => [
                                                                                                                                                    ::Lit::NamedArgument(
                                                                                                                                                        value => ::Call(
                                                                                                                                                            hyper     => '',
                                                                                                                                                            arguments => [ ::Val::Int( int => '1', ), ],
                                                                                                                                                            method    => 'INDEX',
                                                                                                                                                            invocant  => ::Var( namespace => [], name => 'trait', twigil => '', sigil => '$', ),
                                                                                                                                                        ),
                                                                                                                                                        key => ::Val::Buf( buf => 'name', ),
                                                                                                                                                    ),
                                                                                                                                                ],
                                                                                                                                                method   => 'new',
                                                                                                                                                invocant => ::Proto( name => 'Proto', ),
                                                                                                                                            ),
                                                                                                                                            key => ::Val::Buf( buf => 'invocant', ),
                                                                                                                                        ),
                                                                                                                                    ],
                                                                                                                                    method   => 'new',
                                                                                                                                    invocant => ::Proto( name => 'Call', ),
                                                                                                                                ),
                                                                                                                            ],
                                                                                                                        ),
                                                                                                                    ],
                                                                                                                    method   => 'new',
                                                                                                                    invocant => ::Proto( name => 'Array', ),
                                                                                                                ),
                                                                                                                key => ::Val::Buf( buf => 'arguments', ),
                                                                                                            ),
                                                                                                            ::Lit::Pair( value => ::Val::Buf( buf => 'add_parent', ), key => ::Val::Buf( buf => 'method', ), ),
                                                                                                            ::Lit::Pair(
                                                                                                                value => ::Call(
                                                                                                                    hyper     => '',
                                                                                                                    arguments => [
                                                                                                                        ::Lit::Pair( value => ::Val::Buf( buf => '', ), key => ::Val::Buf( buf => 'hyper', ), ),
                                                                                                                        ::Lit::Pair(
                                                                                                                            value => ::Call(
                                                                                                                                hyper     => '',
                                                                                                                                arguments => [ ::Lit::Array( array => [], ), ],
                                                                                                                                method    => 'new',
                                                                                                                                invocant  => ::Proto( name => 'Array', ),
                                                                                                                            ),
                                                                                                                            key => ::Val::Buf( buf => 'arguments', ),
                                                                                                                        ),
                                                                                                                        ::Lit::Pair( value => ::Val::Buf( buf => 'HOW', ), key => ::Val::Buf( buf => 'method', ), ),
                                                                                                                        ::Lit::Pair(
                                                                                                                            value => ::Call(
                                                                                                                                hyper     => '',
                                                                                                                                arguments => [
                                                                                                                                    ::Lit::NamedArgument(
                                                                                                                                        value => ::Call(
                                                                                                                                            hyper     => '',
                                                                                                                                            arguments => '',
                                                                                                                                            method    => 'name',
                                                                                                                                            invocant  => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ),
                                                                                                                                        ),
                                                                                                                                        key => ::Val::Buf( buf => 'name', ),
                                                                                                                                    ),
                                                                                                                                ],
                                                                                                                                method   => 'new',
                                                                                                                                invocant => ::Proto( name => 'Proto', ),
                                                                                                                            ),
                                                                                                                            key => ::Val::Buf( buf => 'invocant', ),
                                                                                                                        ),
                                                                                                                    ],
                                                                                                                    method   => 'new',
                                                                                                                    invocant => ::Proto( name => 'Call', ),
                                                                                                                ),
                                                                                                                key => ::Val::Buf( buf => 'invocant', ),
                                                                                                            ),
                                                                                                        ],
                                                                                                        method   => 'new',
                                                                                                        invocant => ::Proto( name => 'Call', ),
                                                                                                    ),
                                                                                                ],
                                                                                                code => ::Var( namespace => [], name => 'push', twigil => '', sigil => '&', ),
                                                                                            ),
                                                                                        ],
                                                                                        sig => ::Sig( invocant => '', positional => [], ),
                                                                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Visitor::MetaClass", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                                                        CATCH => '',
                                                                                        state => {},
                                                                                    ),
                                                                                    cond => ::Apply(
                                                                                        arguments => [
                                                                                            ::Call(
                                                                                                hyper     => '',
                                                                                                arguments => [ ::Val::Int( int => '0', ), ],
                                                                                                method    => 'INDEX',
                                                                                                invocant  => ::Var( namespace => [], name => 'trait', twigil => '', sigil => '$', ),
                                                                                            ),
                                                                                            ::Val::Buf( buf => 'is', ),
                                                                                        ],
                                                                                        code => ::Var( namespace => [], name => 'infix:<eq>', twigil => '', sigil => '&', ),
                                                                                    ),
                                                                                    otherwise => ::Lit::Code(
                                                                                        body => [
                                                                                            ::If(
                                                                                                body => ::Lit::Code(
                                                                                                    body  => [],
                                                                                                    sig   => ::Sig( invocant => '', positional => [], ),
                                                                                                    pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Visitor::MetaClass", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                                                                    CATCH => '',
                                                                                                    state => {},
                                                                                                ),
                                                                                                cond => ::Apply(
                                                                                                    arguments => [
                                                                                                        ::Call(
                                                                                                            hyper     => '',
                                                                                                            arguments => [ ::Val::Int( int => '0', ), ],
                                                                                                            method    => 'INDEX',
                                                                                                            invocant  => ::Var( namespace => [], name => 'trait', twigil => '', sigil => '$', ),
                                                                                                        ),
                                                                                                        ::Val::Buf( buf => 'meta', ),
                                                                                                    ],
                                                                                                    code => ::Var( namespace => [], name => 'infix:<eq>', twigil => '', sigil => '&', ),
                                                                                                ),
                                                                                                otherwise => ::Lit::Code(
                                                                                                    body => [
                                                                                                        ::Apply(
                                                                                                            arguments => [
                                                                                                                ::Val::Buf( buf => 'unknown class trait: ', ),
                                                                                                                ::Call(
                                                                                                                    hyper     => '',
                                                                                                                    arguments => [ ::Val::Int( int => '0', ), ],
                                                                                                                    method    => 'INDEX',
                                                                                                                    invocant  => ::Var( namespace => [], name => 'trait', twigil => '', sigil => '$', ),
                                                                                                                ),
                                                                                                            ],
                                                                                                            code => ::Var( namespace => [], name => 'die', twigil => '', sigil => '&', ),
                                                                                                        ),
                                                                                                    ],
                                                                                                    sig => ::Sig( invocant => '', positional => [], ),
                                                                                                    pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Visitor::MetaClass", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                                                                    CATCH => '',
                                                                                                    state => {},
                                                                                                ),
                                                                                            ),
                                                                                        ],
                                                                                        sig => ::Sig( invocant => '', positional => [], ),
                                                                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Visitor::MetaClass", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                                                        CATCH => '',
                                                                                        state => {},
                                                                                    ),
                                                                                ),
                                                                            ],
                                                                            sig => ::Sig( invocant => '', positional => [], ),
                                                                            pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Visitor::MetaClass", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                                            CATCH => '',
                                                                            state => {},
                                                                        ),
                                                                    ),
                                                                ],
                                                                sig => ::Sig(
                                                                    invocant   => ::Val::Undef(),
                                                                    positional => [
                                                                        ::Lit::SigArgument(
                                                                            is_multidimensional => ::Val::Bit( bit => '0', ),
                                                                            has_default         => ::Val::Bit( bit => '0', ),
                                                                            value               => ::Val::Undef(),
                                                                            is_slurpy           => ::Val::Bit( bit => '0', ),
                                                                            is_optional         => ::Val::Bit( bit => '0', ),
                                                                            key           => ::Var( namespace => [], name => 'trait', twigil => '', sigil => '$', ),
                                                                            is_copy       => ::Val::Bit( bit  => '0', ),
                                                                            is_named_only => ::Val::Bit( bit  => '0', ),
                                                                            type          => '',
                                                                            is_rw => ::Val::Bit( bit => '0', ),
                                                                        ),
                                                                    ],
                                                                ),
                                                                pad => ::Pad(
                                                                    lexicals => [
                                                                        ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',     twigil => '', sigil => '@', ), type => '', ),
                                                                        ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'trait', twigil => '', sigil => '$', ), type => '', )
                                                                    ],
                                                                    namespace => "KindaPerl6::Visitor::MetaClass",
                                                                    parent    => ::Pad(...),
                                                                    evaluator => ::Sub(...),
                                                                ),
                                                                CATCH => '',
                                                                state => {},
                                                            ),
                                                        ),
                                                    ],
                                                    method   => 'map',
                                                    invocant => ::Apply(
                                                        arguments => [ ::Call( hyper  => '', arguments => '',           method => 'traits', invocant => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ), ), ],
                                                        code      => ::Var( namespace => [], name      => 'prefix:<@>', twigil => '',       sigil    => '&', ),
                                                    ),
                                                ),
                                            ],
                                            sig => ::Sig( invocant => '', positional => [], ),
                                            pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Visitor::MetaClass", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                            CATCH => '',
                                            state => {},
                                        ),
                                        cond      => ::Call( hyper => '', arguments => '', method => 'traits', invocant => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ), ),
                                        otherwise => '',
                                    ),
                                    ::Var( namespace => [], name => 'item', twigil => '', sigil => '$', ),
                                    ::If(
                                        body => ::Lit::Code(
                                            body => [
                                                ::If(
                                                    body => ::Lit::Code(
                                                        body => [
                                                            ::If(
                                                                body => ::Lit::Code(
                                                                    body => [
                                                                        ::Call(
                                                                            hyper     => '',
                                                                            arguments => [
                                                                                ::Sub(
                                                                                    name  => '',
                                                                                    block => ::Lit::Code(
                                                                                        body => [
                                                                                            ::If(
                                                                                                body => ::Lit::Code(
                                                                                                    body => [
                                                                                                        ::Apply(
                                                                                                            arguments => [
                                                                                                                ::Apply(
                                                                                                                    arguments => [ ::Var( namespace => [], name => 'module',     twigil => '', sigil => '$', ), ],
                                                                                                                    code      => ::Var( namespace   => [], name => 'prefix:<@>', twigil => '', sigil => '&', ),
                                                                                                                ),
                                                                                                                ::Call(
                                                                                                                    hyper     => '',
                                                                                                                    arguments => [
                                                                                                                        ::Lit::Pair( value => ::Val::Buf( buf => '', ), key => ::Val::Buf( buf => 'hyper', ), ),
                                                                                                                        ::Lit::Pair(
                                                                                                                            value => ::Call(
                                                                                                                                hyper     => '',
                                                                                                                                arguments => [
                                                                                                                                    ::Lit::Array(
                                                                                                                                        array => [
                                                                                                                                            ::Call(
                                                                                                                                                hyper     => '',
                                                                                                                                                arguments => [
                                                                                                                                                    ::Lit::NamedArgument(
                                                                                                                                                        value => ::Call(
                                                                                                                                                            hyper     => '',
                                                                                                                                                            arguments => '',
                                                                                                                                                            method    => 'name',
                                                                                                                                                            invocant  => ::Var( namespace => [], name => 'item', twigil => '', sigil => '$', ),
                                                                                                                                                        ),
                                                                                                                                                        key => ::Val::Buf( buf => 'buf', ),
                                                                                                                                                    ),
                                                                                                                                                ],
                                                                                                                                                method   => 'new',
                                                                                                                                                invocant => ::Proto( name => 'Val::Buf', ),
                                                                                                                                            ),
                                                                                                                                            ::Var( namespace => [], name => 'item', twigil => '', sigil => '$', ),
                                                                                                                                        ],
                                                                                                                                    ),
                                                                                                                                ],
                                                                                                                                method   => 'new',
                                                                                                                                invocant => ::Proto( name => 'Array', ),
                                                                                                                            ),
                                                                                                                            key => ::Val::Buf( buf => 'arguments', ),
                                                                                                                        ),
                                                                                                                        ::Lit::Pair( value => ::Val::Buf( buf => 'add_method', ), key => ::Val::Buf( buf => 'method', ), ),
                                                                                                                        ::Lit::Pair(
                                                                                                                            value => ::Call(
                                                                                                                                hyper     => '',
                                                                                                                                arguments => [
                                                                                                                                    ::Lit::Pair( value => ::Val::Buf( buf => '', ), key => ::Val::Buf( buf => 'hyper', ), ),
                                                                                                                                    ::Lit::Pair(
                                                                                                                                        value => ::Call(
                                                                                                                                            hyper     => '',
                                                                                                                                            arguments => [ ::Lit::Array( array => [], ), ],
                                                                                                                                            method    => 'new',
                                                                                                                                            invocant  => ::Proto( name => 'Array', ),
                                                                                                                                        ),
                                                                                                                                        key => ::Val::Buf( buf => 'arguments', ),
                                                                                                                                    ),
                                                                                                                                    ::Lit::Pair( value => ::Val::Buf( buf => 'HOW', ), key => ::Val::Buf( buf => 'method', ), ),
                                                                                                                                    ::Lit::Pair(
                                                                                                                                        value => ::Call(
                                                                                                                                            hyper     => '',
                                                                                                                                            arguments => [
                                                                                                                                                ::Lit::NamedArgument(
                                                                                                                                                    value => ::Call(
                                                                                                                                                        hyper     => '',
                                                                                                                                                        arguments => '',
                                                                                                                                                        method    => 'name',
                                                                                                                                                        invocant  => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ),
                                                                                                                                                    ),
                                                                                                                                                    key => ::Val::Buf( buf => 'name', ),
                                                                                                                                                ),
                                                                                                                                            ],
                                                                                                                                            method   => 'new',
                                                                                                                                            invocant => ::Proto( name => 'Proto', ),
                                                                                                                                        ),
                                                                                                                                        key => ::Val::Buf( buf => 'invocant', ),
                                                                                                                                    ),
                                                                                                                                ],
                                                                                                                                method   => 'new',
                                                                                                                                invocant => ::Proto( name => 'Call', ),
                                                                                                                            ),
                                                                                                                            key => ::Val::Buf( buf => 'invocant', ),
                                                                                                                        ),
                                                                                                                    ],
                                                                                                                    method   => 'new',
                                                                                                                    invocant => ::Proto( name => 'Call', ),
                                                                                                                ),
                                                                                                            ],
                                                                                                            code => ::Var( namespace => [], name => 'push', twigil => '', sigil => '&', ),
                                                                                                        ),
                                                                                                    ],
                                                                                                    sig => ::Sig( invocant => '', positional => [], ),
                                                                                                    pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Visitor::MetaClass", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                                                                    CATCH => '',
                                                                                                    state => {},
                                                                                                ),
                                                                                                cond => ::Call(
                                                                                                    hyper     => '',
                                                                                                    arguments => [ ::Val::Buf( buf => 'Method', ), ],
                                                                                                    method    => 'isa',
                                                                                                    invocant  => ::Var( namespace => [], name => 'item', twigil => '', sigil => '$', ),
                                                                                                ),
                                                                                                otherwise => '',
                                                                                            ),
                                                                                            ::If(
                                                                                                body => ::Lit::Code(
                                                                                                    body => [
                                                                                                        ::Apply(
                                                                                                            arguments => [
                                                                                                                ::Apply(
                                                                                                                    arguments => [ ::Var( namespace => [], name => 'module',     twigil => '', sigil => '$', ), ],
                                                                                                                    code      => ::Var( namespace   => [], name => 'prefix:<@>', twigil => '', sigil => '&', ),
                                                                                                                ),
                                                                                                                ::Call(
                                                                                                                    hyper     => '',
                                                                                                                    arguments => [
                                                                                                                        ::Lit::Pair( value => ::Val::Buf( buf => '', ), key => ::Val::Buf( buf => 'hyper', ), ),
                                                                                                                        ::Lit::Pair(
                                                                                                                            value => ::Call(
                                                                                                                                hyper     => '',
                                                                                                                                arguments => [
                                                                                                                                    ::Lit::Array(
                                                                                                                                        array => [
                                                                                                                                            ::Call(
                                                                                                                                                hyper     => '',
                                                                                                                                                arguments => [
                                                                                                                                                    ::Lit::NamedArgument(
                                                                                                                                                        value => ::Call(
                                                                                                                                                            hyper     => '',
                                                                                                                                                            arguments => '',
                                                                                                                                                            method    => 'name',
                                                                                                                                                            invocant  => ::Call(
                                                                                                                                                                hyper     => '',
                                                                                                                                                                arguments => '',
                                                                                                                                                                method    => 'var',
                                                                                                                                                                invocant  => ::Var( namespace => [], name => 'item', twigil => '', sigil => '$', ),
                                                                                                                                                            ),
                                                                                                                                                        ),
                                                                                                                                                        key => ::Val::Buf( buf => 'buf', ),
                                                                                                                                                    ),
                                                                                                                                                ],
                                                                                                                                                method   => 'new',
                                                                                                                                                invocant => ::Proto( name => 'Val::Buf', ),
                                                                                                                                            ),
                                                                                                                                        ],
                                                                                                                                    ),
                                                                                                                                ],
                                                                                                                                method   => 'new',
                                                                                                                                invocant => ::Proto( name => 'Array', ),
                                                                                                                            ),
                                                                                                                            key => ::Val::Buf( buf => 'arguments', ),
                                                                                                                        ),
                                                                                                                        ::Lit::Pair( value => ::Val::Buf( buf => 'add_attribute', ), key => ::Val::Buf( buf => 'method', ), ),
                                                                                                                        ::Lit::Pair(
                                                                                                                            value => ::Call(
                                                                                                                                hyper     => '',
                                                                                                                                arguments => [
                                                                                                                                    ::Lit::Pair( value => ::Val::Buf( buf => '', ), key => ::Val::Buf( buf => 'hyper', ), ),
                                                                                                                                    ::Lit::Pair(
                                                                                                                                        value => ::Call(
                                                                                                                                            hyper     => '',
                                                                                                                                            arguments => [ ::Lit::Array( array => [], ), ],
                                                                                                                                            method    => 'new',
                                                                                                                                            invocant  => ::Proto( name => 'Array', ),
                                                                                                                                        ),
                                                                                                                                        key => ::Val::Buf( buf => 'arguments', ),
                                                                                                                                    ),
                                                                                                                                    ::Lit::Pair( value => ::Val::Buf( buf => 'HOW', ), key => ::Val::Buf( buf => 'method', ), ),
                                                                                                                                    ::Lit::Pair(
                                                                                                                                        value => ::Call(
                                                                                                                                            hyper     => '',
                                                                                                                                            arguments => [
                                                                                                                                                ::Lit::NamedArgument(
                                                                                                                                                    value => ::Call(
                                                                                                                                                        hyper     => '',
                                                                                                                                                        arguments => '',
                                                                                                                                                        method    => 'name',
                                                                                                                                                        invocant  => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ),
                                                                                                                                                    ),
                                                                                                                                                    key => ::Val::Buf( buf => 'name', ),
                                                                                                                                                ),
                                                                                                                                            ],
                                                                                                                                            method   => 'new',
                                                                                                                                            invocant => ::Proto( name => 'Proto', ),
                                                                                                                                        ),
                                                                                                                                        key => ::Val::Buf( buf => 'invocant', ),
                                                                                                                                    ),
                                                                                                                                ],
                                                                                                                                method   => 'new',
                                                                                                                                invocant => ::Proto( name => 'Call', ),
                                                                                                                            ),
                                                                                                                            key => ::Val::Buf( buf => 'invocant', ),
                                                                                                                        ),
                                                                                                                    ],
                                                                                                                    method   => 'new',
                                                                                                                    invocant => ::Proto( name => 'Call', ),
                                                                                                                ),
                                                                                                            ],
                                                                                                            code => ::Var( namespace => [], name => 'push', twigil => '', sigil => '&', ),
                                                                                                        ),
                                                                                                    ],
                                                                                                    sig => ::Sig( invocant => '', positional => [], ),
                                                                                                    pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Visitor::MetaClass", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                                                                    CATCH => '',
                                                                                                    state => {},
                                                                                                ),
                                                                                                cond => ::Apply(
                                                                                                    arguments => [
                                                                                                        ::Call(
                                                                                                            hyper     => '',
                                                                                                            arguments => [ ::Val::Buf( buf => 'Decl', ), ],
                                                                                                            method    => 'isa',
                                                                                                            invocant  => ::Var( namespace => [], name => 'item', twigil => '', sigil => '$', ),
                                                                                                        ),
                                                                                                        ::Apply(
                                                                                                            arguments => [
                                                                                                                ::Call(
                                                                                                                    hyper     => '',
                                                                                                                    arguments => '',
                                                                                                                    method    => 'decl',
                                                                                                                    invocant  => ::Var( namespace => [], name => 'item', twigil => '', sigil => '$', ),
                                                                                                                ),
                                                                                                                ::Val::Buf( buf => 'has', ),
                                                                                                            ],
                                                                                                            code => ::Var( namespace => [], name => 'infix:<eq>', twigil => '', sigil => '&', ),
                                                                                                        ),
                                                                                                    ],
                                                                                                    code => ::Var( namespace => [], name => 'infix:<&&>', twigil => '', sigil => '&', ),
                                                                                                ),
                                                                                                otherwise => '',
                                                                                            ),
                                                                                        ],
                                                                                        sig => ::Sig(
                                                                                            invocant   => ::Val::Undef(),
                                                                                            positional => [
                                                                                                ::Lit::SigArgument(
                                                                                                    is_multidimensional => ::Val::Bit( bit => '0', ),
                                                                                                    has_default         => ::Val::Bit( bit => '0', ),
                                                                                                    value               => ::Val::Undef(),
                                                                                                    is_slurpy           => ::Val::Bit( bit => '0', ),
                                                                                                    is_optional         => ::Val::Bit( bit => '0', ),
                                                                                                    key           => ::Var( namespace => [], name => 'item', twigil => '', sigil => '$', ),
                                                                                                    is_copy       => ::Val::Bit( bit  => '0', ),
                                                                                                    is_named_only => ::Val::Bit( bit  => '0', ),
                                                                                                    type          => '',
                                                                                                    is_rw => ::Val::Bit( bit => '0', ),
                                                                                                ),
                                                                                            ],
                                                                                        ),
                                                                                        pad => ::Pad(
                                                                                            lexicals => [
                                                                                                ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                                                                                                ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'item', twigil => '', sigil => '$', ), type => '', )
                                                                                            ],
                                                                                            namespace => "KindaPerl6::Visitor::MetaClass",
                                                                                            parent    => ::Pad(...),
                                                                                            evaluator => ::Sub(...),
                                                                                        ),
                                                                                        CATCH => '',
                                                                                        state => {},
                                                                                    ),
                                                                                ),
                                                                            ],
                                                                            method   => 'map',
                                                                            invocant => ::Apply(
                                                                                arguments => [
                                                                                    ::Call(
                                                                                        hyper     => '',
                                                                                        arguments => '',
                                                                                        method    => 'body',
                                                                                        invocant  => ::Call( hyper => '', arguments => '', method => 'body', invocant => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ), ),
                                                                                    ),
                                                                                ],
                                                                                code => ::Var( namespace => [], name => 'prefix:<@>', twigil => '', sigil => '&', ),
                                                                            ),
                                                                        ),
                                                                    ],
                                                                    sig => ::Sig( invocant => '', positional => [], ),
                                                                    pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Visitor::MetaClass", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                                    CATCH => '',
                                                                    state => {},
                                                                ),
                                                                cond => ::Call(
                                                                    hyper     => '',
                                                                    arguments => '',
                                                                    method    => 'body',
                                                                    invocant  => ::Call( hyper => '', arguments => '', method => 'body', invocant => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ), ),
                                                                ),
                                                                otherwise => '',
                                                            ),
                                                        ],
                                                        sig => ::Sig( invocant => '', positional => [], ),
                                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Visitor::MetaClass", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                        CATCH => '',
                                                        state => {},
                                                    ),
                                                    cond      => ::Call( hyper => '', arguments => '', method => 'body', invocant => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ), ),
                                                    otherwise => '',
                                                ),
                                            ],
                                            sig => ::Sig( invocant => '', positional => [], ),
                                            pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Visitor::MetaClass", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                            CATCH => '',
                                            state => {},
                                        ),
                                        cond      => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ),
                                        otherwise => '',
                                    ),
                                    ::Var( namespace => [], name => 'item', twigil => '', sigil => '$', ),
                                    ::If(
                                        body => ::Lit::Code(
                                            body => [
                                                ::If(
                                                    body => ::Lit::Code(
                                                        body => [
                                                            ::If(
                                                                body => ::Lit::Code(
                                                                    body => [
                                                                        ::Call(
                                                                            hyper     => '',
                                                                            arguments => [
                                                                                ::Sub(
                                                                                    name  => '',
                                                                                    block => ::Lit::Code(
                                                                                        body => [
                                                                                            ::If(
                                                                                                body => ::Lit::Code(
                                                                                                    body  => [],
                                                                                                    sig   => ::Sig( invocant => '', positional => [], ),
                                                                                                    pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Visitor::MetaClass", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                                                                    CATCH => '',
                                                                                                    state => {},
                                                                                                ),
                                                                                                cond => ::Apply(
                                                                                                    arguments => [
                                                                                                        ::Call(
                                                                                                            hyper     => '',
                                                                                                            arguments => [ ::Val::Buf( buf => 'Method', ), ],
                                                                                                            method    => 'isa',
                                                                                                            invocant  => ::Var( namespace => [], name => 'item', twigil => '', sigil => '$', ),
                                                                                                        ),
                                                                                                        ::Apply(
                                                                                                            arguments => [
                                                                                                                ::Call(
                                                                                                                    hyper     => '',
                                                                                                                    arguments => [ ::Val::Buf( buf => 'Decl', ), ],
                                                                                                                    method    => 'isa',
                                                                                                                    invocant  => ::Var( namespace => [], name => 'item', twigil => '', sigil => '$', ),
                                                                                                                ),
                                                                                                                ::Apply(
                                                                                                                    arguments => [
                                                                                                                        ::Call(
                                                                                                                            hyper     => '',
                                                                                                                            arguments => '',
                                                                                                                            method    => 'decl',
                                                                                                                            invocant  => ::Var( namespace => [], name => 'item', twigil => '', sigil => '$', ),
                                                                                                                        ),
                                                                                                                        ::Val::Buf( buf => 'has', ),
                                                                                                                    ],
                                                                                                                    code => ::Var( namespace => [], name => 'infix:<eq>', twigil => '', sigil => '&', ),
                                                                                                                ),
                                                                                                            ],
                                                                                                            code => ::Var( namespace => [], name => 'infix:<&&>', twigil => '', sigil => '&', ),
                                                                                                        ),
                                                                                                    ],
                                                                                                    code => ::Var( namespace => [], name => 'infix:<||>', twigil => '', sigil => '&', ),
                                                                                                ),
                                                                                                otherwise => ::Lit::Code(
                                                                                                    body => [
                                                                                                        ::If(
                                                                                                            body => ::Lit::Code(
                                                                                                                body => [
                                                                                                                    ::Bind(
                                                                                                                        parameters => ::Var( namespace => [], name => 'module', twigil => '', sigil => '$', ),
                                                                                                                        arguments  => ::Call(
                                                                                                                            hyper     => '',
                                                                                                                            arguments => [ ::Lit::Array( array => [], ), ],
                                                                                                                            method    => 'new',
                                                                                                                            invocant  => ::Proto( name => 'Array', ),
                                                                                                                        ),
                                                                                                                    ),
                                                                                                                ],
                                                                                                                sig => ::Sig( invocant => '', positional => [], ),
                                                                                                                pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Visitor::MetaClass", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                                                                                CATCH => '',
                                                                                                                state => {},
                                                                                                            ),
                                                                                                            cond => ::Apply(
                                                                                                                arguments => [ ::Var( namespace => [], name => 'module',     twigil => '', sigil => '$', ), ],
                                                                                                                code      => ::Var( namespace   => [], name => 'prefix:<!>', twigil => '', sigil => '&', ),
                                                                                                            ),
                                                                                                            otherwise => '',
                                                                                                        ),
                                                                                                        ::Apply(
                                                                                                            arguments => [
                                                                                                                ::Apply(
                                                                                                                    arguments => [ ::Var( namespace => [], name => 'module',     twigil => '', sigil => '$', ), ],
                                                                                                                    code      => ::Var( namespace   => [], name => 'prefix:<@>', twigil => '', sigil => '&', ),
                                                                                                                ),
                                                                                                                ::Var( namespace => [], name => 'item', twigil => '', sigil => '$', ),
                                                                                                            ],
                                                                                                            code => ::Var( namespace => [], name => 'push', twigil => '', sigil => '&', ),
                                                                                                        ),
                                                                                                    ],
                                                                                                    sig => ::Sig( invocant => '', positional => [], ),
                                                                                                    pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Visitor::MetaClass", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                                                                    CATCH => '',
                                                                                                    state => {},
                                                                                                ),
                                                                                            ),
                                                                                        ],
                                                                                        sig => ::Sig(
                                                                                            invocant   => ::Val::Undef(),
                                                                                            positional => [
                                                                                                ::Lit::SigArgument(
                                                                                                    is_multidimensional => ::Val::Bit( bit => '0', ),
                                                                                                    has_default         => ::Val::Bit( bit => '0', ),
                                                                                                    value               => ::Val::Undef(),
                                                                                                    is_slurpy           => ::Val::Bit( bit => '0', ),
                                                                                                    is_optional         => ::Val::Bit( bit => '0', ),
                                                                                                    key           => ::Var( namespace => [], name => 'item', twigil => '', sigil => '$', ),
                                                                                                    is_copy       => ::Val::Bit( bit  => '0', ),
                                                                                                    is_named_only => ::Val::Bit( bit  => '0', ),
                                                                                                    type          => '',
                                                                                                    is_rw => ::Val::Bit( bit => '0', ),
                                                                                                ),
                                                                                            ],
                                                                                        ),
                                                                                        pad => ::Pad(
                                                                                            lexicals => [
                                                                                                ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',    twigil => '', sigil => '@', ), type => '', ),
                                                                                                ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'item', twigil => '', sigil => '$', ), type => '', )
                                                                                            ],
                                                                                            namespace => "KindaPerl6::Visitor::MetaClass",
                                                                                            parent    => ::Pad(...),
                                                                                            evaluator => ::Sub(...),
                                                                                        ),
                                                                                        CATCH => '',
                                                                                        state => {},
                                                                                    ),
                                                                                ),
                                                                            ],
                                                                            method   => 'map',
                                                                            invocant => ::Apply(
                                                                                arguments => [
                                                                                    ::Call(
                                                                                        hyper     => '',
                                                                                        arguments => '',
                                                                                        method    => 'body',
                                                                                        invocant  => ::Call( hyper => '', arguments => '', method => 'body', invocant => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ), ),
                                                                                    ),
                                                                                ],
                                                                                code => ::Var( namespace => [], name => 'prefix:<@>', twigil => '', sigil => '&', ),
                                                                            ),
                                                                        ),
                                                                    ],
                                                                    sig => ::Sig( invocant => '', positional => [], ),
                                                                    pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Visitor::MetaClass", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                                    CATCH => '',
                                                                    state => {},
                                                                ),
                                                                cond => ::Call(
                                                                    hyper     => '',
                                                                    arguments => '',
                                                                    method    => 'body',
                                                                    invocant  => ::Call( hyper => '', arguments => '', method => 'body', invocant => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ), ),
                                                                ),
                                                                otherwise => '',
                                                            ),
                                                        ],
                                                        sig => ::Sig( invocant => '', positional => [], ),
                                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Visitor::MetaClass", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                        CATCH => '',
                                                        state => {},
                                                    ),
                                                    cond      => ::Call( hyper => '', arguments => '', method => 'body', invocant => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ), ),
                                                    otherwise => '',
                                                ),
                                                ::Bind(
                                                    parameters => ::Var( namespace => [], name => 'body', twigil => '', sigil => '$', ),
                                                    arguments => ::Call( hyper => '', arguments => '', method => 'body', invocant => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ), ),
                                                ),
                                                ::Var( namespace => [], name => 'pad', twigil => '', sigil => '$', ),
                                                ::If(
                                                    body => ::Lit::Code(
                                                        body => [
                                                            ::Bind(
                                                                parameters => ::Var( namespace => [], name => 'pad', twigil => '', sigil => '$', ),
                                                                arguments => ::Call( hyper => '', arguments => '', method => 'pad', invocant => ::Var( namespace => [], name => 'body', twigil => '', sigil => '$', ), ),
                                                            ),
                                                        ],
                                                        sig => ::Sig( invocant => '', positional => [], ),
                                                        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Visitor::MetaClass", parent => ::Pad(...), evaluator => ::Sub(...), ),
                                                        CATCH => '',
                                                        state => {},
                                                    ),
                                                    cond      => ::Var( namespace => [], name => 'body', twigil => '', sigil => '$', ),
                                                    otherwise => '',
                                                ),
                                                ::Return(
                                                    result => ::Call(
                                                        hyper     => '',
                                                        arguments => [
                                                            ::Lit::NamedArgument( value => ::Val::Buf( buf => 'module', ), key => ::Val::Buf( buf => 'unit_type', ), ),
                                                            ::Lit::NamedArgument(
                                                                value => ::Call( hyper   => '', arguments => '', method => 'name', invocant => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ), ),
                                                                key   => ::Val::Buf( buf => 'name', ),
                                                            ),
                                                            ::Lit::NamedArgument(
                                                                value => ::Call(
                                                                    hyper     => '',
                                                                    arguments => [
                                                                        ::Lit::NamedArgument( value => ::Var( namespace => [], name => 'pad', twigil => '', sigil => '$', ), key => ::Val::Buf( buf => 'pad', ), ),
                                                                        ::Lit::NamedArgument(
                                                                            value => ::Call( hyper   => '', arguments => [ ::Lit::Hash( hash => [], ), ], method => 'new', invocant => ::Proto( name => 'Hash', ), ),
                                                                            key   => ::Val::Buf( buf => 'state', ),
                                                                        ),
                                                                        ::Lit::NamedArgument(
                                                                            value => ::Call(
                                                                                hyper     => '',
                                                                                arguments => [
                                                                                    ::Lit::Pair( value => ::Val::Undef(), key => ::Val::Buf( buf => 'invocant', ), ),
                                                                                    ::Lit::Pair(
                                                                                        value => ::Call( hyper   => '', arguments => [ ::Lit::Array( array => [], ), ], method => 'new', invocant => ::Proto( name => 'Array', ), ),
                                                                                        key   => ::Val::Buf( buf => 'positional', ),
                                                                                    ),
                                                                                ],
                                                                                method   => 'new',
                                                                                invocant => ::Proto( name => 'Sig', ),
                                                                            ),
                                                                            key => ::Val::Buf( buf => 'sig', ),
                                                                        ),
                                                                        ::Lit::NamedArgument( value => ::Var( namespace => [], name => 'module', twigil => '', sigil => '$', ), key => ::Val::Buf( buf => 'body', ), ),
                                                                    ],
                                                                    method   => 'new',
                                                                    invocant => ::Proto( name => 'Lit::Code', ),
                                                                ),
                                                                key => ::Val::Buf( buf => 'body', ),
                                                            ),
                                                        ],
                                                        method   => 'new',
                                                        invocant => ::Proto( name => 'CompUnit', ),
                                                    ),
                                                ),
                                            ],
                                            sig => ::Sig( invocant => '', positional => [], ),
                                            pad => ::Pad(
                                                lexicals => [
                                                    ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'body', twigil => '', sigil => '$', ), type => '', ),
                                                    ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'pad',  twigil => '', sigil => '$', ), type => '', )
                                                ],
                                                namespace => "KindaPerl6::Visitor::MetaClass",
                                                parent    => ::Pad(...),
                                                evaluator => ::Sub(...),
                                            ),
                                            CATCH => '',
                                            state => {},
                                        ),
                                        cond      => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ),
                                        otherwise => '',
                                    ),
                                ],
                                sig => ::Sig( invocant => '', positional => [], ),
                                pad => ::Pad(
                                    lexicals => [
                                        ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'module', twigil => '', sigil => '$', ), type => '', ),
                                        ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'trait',  twigil => '', sigil => '$', ), type => '', ),
                                        ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'item',   twigil => '', sigil => '$', ), type => '', )
                                    ],
                                    namespace => "KindaPerl6::Visitor::MetaClass",
                                    parent    => ::Pad(...),
                                    evaluator => ::Sub(...),
                                ),
                                CATCH => '',
                                state => {},
                            ),
                            cond => ::Apply(
                                arguments => [ ::Var( namespace => [], name => 'node_name',  twigil => '', sigil => '$', ), ::Val::Buf( buf => 'CompUnit', ), ],
                                code      => ::Var( namespace   => [], name => 'infix:<eq>', twigil => '', sigil => '&', ),
                            ),
                            otherwise => '',
                        ),
                        ::Return( result => ::Val::Undef(), ),
                    ],
                    sig => ::Sig(
                        invocant   => '',
                        positional => [
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'node', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                            ::Lit::SigArgument(
                                is_multidimensional => ::Val::Bit( bit => '0', ),
                                has_default         => ::Val::Bit( bit => '0', ),
                                value               => ::Val::Undef(),
                                is_slurpy           => ::Val::Bit( bit => '0', ),
                                is_optional         => ::Val::Bit( bit => '0', ),
                                key           => ::Var( namespace => [], name => 'node_name', twigil => '', sigil => '$', ),
                                is_copy       => ::Val::Bit( bit  => '0', ),
                                is_named_only => ::Val::Bit( bit  => '0', ),
                                type          => '',
                                is_rw => ::Val::Bit( bit => '0', ),
                            ),
                        ],
                    ),
                    pad => ::Pad(
                        lexicals => [
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => '_',         twigil => '', sigil => '@', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'node',      twigil => '', sigil => '$', ), type => '', ),
                            ::Decl( decl => 'my', var => ::Var( namespace => [], name => 'node_name', twigil => '', sigil => '$', ), type => '', )
                        ],
                        namespace => "KindaPerl6::Visitor::MetaClass",
                        parent    => ::Pad(...),
                        evaluator => ::Sub(...),
                    ),
                    CATCH => '',
                    state => {},
                ),
            ),
        ],
        sig => ::Sig( invocant => '', positional => [], ),
        pad   => ::Pad( lexicals => [], namespace => "KindaPerl6::Visitor::MetaClass", parent => ::Pad(...), evaluator => ::Sub(...), ),
        CATCH => '',
        state => {},
    ),
    methods    => {},
    name       => 'KindaPerl6::Visitor::MetaClass',
    attributes => {},
    traits     => [],
    unit_type  => 'class',
    )
