This is yet another rules engine implementation attempt.

$ prove t/re_tests.t
$ prove t/rx.t
... 95.21% okay.
... 75.00% okay.
$ perl -w Regexp_ModuleA.pm --test
$ perl -w Regexp_ModuleA.pm --test6
... more informative than prove, but no prove-like summary at the end.
$ perl -w Regexp_ModuleA.pm --repl
$ perl -w Regexp_ModuleA.pm --repl6
... interactive.

Regards forking:

  When you want to do an experimental fork, you usually have to do it
  off line, where no one else can see or play with it.  That, or
  duplicate a big directory tree.

  Not here.  Just copy Regexp_Module.pm to Whatever.pm.

  To test:   RE_TESTS_MODULE=Whatever prove t/re_tests.t

Ways you can help:

  * Explore and explain to me how to hook a new p6 regex engine into
    pugs.  I believe pugs is currently using perl5/Pugs-Compiler-Rule?
  * Are there any better p6 regexp grammars than
    misc/Grammars/rx_grammar.pm?
  *...

Objective:

  Create a fast p6 rules implementation in p5 which we can use for
  perl6 parser development.

Intent:

  * supports p5 and p6 regex
  * complete coverage, well tested
  * fast
  * quick development
  * written in p5 (so it can be used with pugs, v6.pm, and pil2js)
  * hardwired grammars - spec'ed extensibility deferred.

Architecture:

  Uses the core Regexp::Parser::ReentrantEngine.pm emitters (fast and
  tested), repackaged to use a new ast (no Regexp::Parser dependency),
  with p5 and p6 grammars expressed as m-expressions (bootstrap both
  not needed, and easily done), and a minimized ast (lean on the perl5
  engine, avoid unnecessary nodes and work).  With compilation looking
  like: some_regexp -> matcher for regexp grammar -> Match tree ->
  m-expr tree -> ast -> matcher for some_regexp.

Plan:

  * Update Plan, Budget.
  * Get p5 regexp working:
     Add backref_or_char node.
     Debug using re_tests.
     Tidy up.
    Objective is a 100% okay on the re_tests p5 regexp test suite.
    Or as close as the underlying p5 implementation version comes.
    Except where it is easy, we won't try to do better than that.
    Keeping track of what test is failing and why is more trouble than
    doing ~100% now rather than later, no?
  * Get p6 regex working.
    100% test pass on parrot rx_ tests.
    Scavange more tests from... somewhere.
     Regexp::Parser::ConvertToSix re_tests to p6?
  * Flesh out the p6 implementation.
  * Declare success.

 Mission creep:
  * Finish separating ast ("compile-time") from "runtime".
  * Source filter. PCR equivalent.

Bugs: (some among many)

  * \10 handling

Budgeting:

  3 days to p5 test suite passing.
    Roughly 1 day writing, 1 day debugging hell, 1 day to get tests green.
  1 day to get p6 test framework.
  1 day for simple p6 rules support.
  1+fuzzy day for fleshing out rules support.

So 6+ days.  Likely spread over February '07.

Budget blown.

Risks:

  * P6 rule spec is big.  I always underestimate this.  The "1+fuzzy"
    current estimate is silly. -> Schedule blow out.  Mitigation:
    Break functionality into chunks (eg, related to implementations -
    eg, everything pge/PCR has); Re-budget; Downscale objective (eg,
    go for pge or pcr equivalence).

  * Engine oddities, perlbug tickling. -> Exploding debug cost.
    Mitigation: perl version restriction.  Still worrisome.

  * Does this version of the engine already support commits? ->
    significant engine change, unexpected debugging hell.  Mitigation:
    Check; Scavenge if necessary (before initial debugging pass or
    after? - after - minimum path to get-it-working - worth the hit).

  * P6 rule interaction with lexical variables - have plan, but it's
    still raw.  -> rathole.  Mitigation: Flesh out plan; Punt, restricting
    interaction to symbol table.

  * Match objects are non-spec. -> non-specness.  Mitigation: I don't
    care; Might be easily fixed.

  * Implementation of grammars and rules, using packages and subs, is
    new development.  -> schedule creep, non-specness.  Mitigation:
    Don't really care how it's implemented, as long as it can support
    p6 parser development; Can even punt to flat namespace; Whatever
    is easy; Re non-spec, don't care unless there are tests.

  * Mission creep, eg, everything for everyone cpan rules module.
    Mitigation: don't; Budget separately.

  - Performance.  As of 2007-Jan-31, performance is very poor.  6 min
    to run re_test.  Cause unexplored.  Perhaps nested expressions
    producing really large parse trees?  -> potential slow speed,
    unusable for parser?  Mitigation: Look into performance; flatten
    grammars.  RESOLVED: use overload; in Match was a 100x performance
    hit.

History:

  2007-02-27 Converted captures from a hack "everything is an array"
  to spec.  Minor other rx_ test progress.  re_tests.t 96%, 15 sec;
  rx.t 84%, 12 sec.  Cost: 1 day.

  2007-02-25 Engine debugging.  Pondered how this module will fit into
  the pugs development world.  Wrote some thought pieces and
  infrastructure for same. Cost 2 days.

  2007-Feb-20 Assorted engine and p6 grammar work.  Some rx test jig fixes.
  re_tests.t 95%, 13 sec; rx.t 75%, 11 sec. Cost: 1 day.

  2007-Feb-19 REPL is now easier to use with different dialects.
  Commit bugfix.  Began P6 captures.  P5 grammar rule names changed to
  mirror p6 grammar.  rx.pl bugfix.  Began P6 support.
  re_tests.t 95%, 13 sec; rx.t 36%, 12 sec. Cost: 1 day.

  2007-Feb-18
  2007-Feb-1? More commit, but untested.  Some bug fixes.  Started
  adding a p6 test suite. 12 sec. 95% ok. 3% ok6.  Cost: 1 day.

  2007-Feb-08
  2007-Feb-06 Some cleanup.  Started commit.  Rx's are now method-like.
  Added externally defined post actions. A bugfix.  Started P5WithSubrules.
  11 sec. 92% okay. Cost: 2 days.

  2007-Feb-03 Some cleanup.  Added nodes.  Performance improved (7 min
  -> 12 sec by avoiding "use overload" when possible).  12 sec.  92% okay.
  Cost: 1 day.

  2007-Feb-01 Began backrefs.  Bugfixes.  Dropped in copies of the
  missing nodes which need to be adapted to the new ast.  400 sec.
  82.00% okay.  Cost: 1/4 day.

  2007-Jan-31 Added non-greedy quant, and non-capturing group
  Performance problems (re_tests now takes 6 min).  80% okay.
  Cost: 1/8 day.

  2007-Jan-30 --text and prove can now both be used.  Added interactive
  repl.  Added ast initialization phase.  Began captures, flags. 60% okay.
  Cost: 1/2 day.

  2007-Jan-29 Engine now running.  Perlbug in v5.8.8 was disappearing
  a lexical (adding an extra use "fixed").  P5 grammar tweaked.  Match
  tree to ast converter begun.  First light (ie, first time through
  the entire "p5 re pattern -> match tree -> ast -> matcher -> matcher
  works" path).  P5 re_tests added.  29.66% okay.  Cost: 1/2 day.

  2007-Jan-28 Started.  Repackaged engine around new ast, emitters, and
  m-expr dsl.  First draft of p5 rules grammar.  Engine is currently
  broken from the repackaging.  Cost: 1 day.

Misc Notes:

  With my v5.8.8, only Devel::DProfLB didn't fail.  Its granularity is
  very poor.


#; Local Variables:
#; mode: text
#; End:
