#!/usr/bin/perl
# A script to make running STD5.pm easier,
# by providing it input, and isolating it's Match yaml output.
use strict;
use warnings;

sub print_usage_and_exit {
    print STDERR <<"END"; exit(2);
$0 GRAMMAR_RULE [ INPUT_FILE | -e INPUT ]

Examples:
  $0 noun -e 42
END
}
sub main {
    print_usage_and_exit if @ARGV < 2 || $ARGV[0] eq '--help';
    my $rule = shift(@ARGV);
    print_usage_and_exit if $rule !~ /^\w+$/;
    my $input;
    if($ARGV[0] eq '-e') {
	shift(@ARGV);
	print_usage_and_exit if not @ARGV;
	$input = shift(@ARGV);
	$input = 'q{'.quotemeta($input).'}';
    }
    else {
	my $fn = shift(@ARGV);
	print_usage_and_exit if !-f $fn;
	$input = "`cat $fn`";
    }
    if(-e 'STD.pm' and -e 'cheat') { # We're in the right place.
	# pretend we're 'make'
	if(!-e 'STD5.pm' or
		-M 'STD5.pm' > -M 'STD.pm' or
		-M 'STD5.pm' > -M 'cheat' or
		-M 'STD5.pm' > -M 'gimme5') {
	    system("./cheat STD.pm | ./gimme5 >STD5.pm");
	    system("rm -f lex/*");
	}
    }
    my $cmd = "perl -w -I . -MSTD5 -e 'Perl->new(orig=>$input)->${rule}([]);'";
    print STDERR "# ",$cmd,"\n";
    unlink('STD5_run.out');
    open(F,"$cmd |") or die "$cmd\npipe open failed: $!\n";
    my $out = join("",<F>); close(F);
    $out =~ /.*\n(---.+)$/s or do {
	open(OUT, ">STD5_run.out"); 
	print OUT $out;
	close OUT;
	die "bug: couldn't find yaml in STD5 output";
    };
    my $yaml = $1;
    print $yaml;
}
main;

__END__
