Perl6regex on Perl5regex

### Note: This Document is a Draft

------------------
Introduction:

"Perl6regex-on-Perl5regex" is a "Perl 6 regex engine" that uses Perl 5 regexes to implement the matching, and Perl 5 code to implement the OO "Match" structure.

The implementation so far is compatible with Perl 5.8.8.


------------------
The compilation is implemented as follows:

- a regex Grammar is run on the Perl 6 regex source code, and returns an AST

- the AST is annotated for positional capture numbering, and for "capture to array" flags

- the Perl 5 regexes and the Perl 5 methods are emitted


------------------
At runtime:

- while the regex is matching, it generates a linked list of operations

- the operation list is rolled-back on backtracking.
"Safe-backtracking" is implemented with "local" redeclarations inside the Perl 5 regex (see [1], [2]).

- after the match finishes, the operations are interpreted, and the result is a Match object.
The interpreter is implemented on a subroutine in the Match class.


------------------
The operations mini-language is implemented like this:

op-list
... TODO ...

------------------
Differences from the Perl 6 specification

* <after> only matches fixed-width patterns,
because that's how Perl 5 "(?<=pattern)" works.
There is no fix for this problem yet.

------------------
Fixable Differences from the Perl 6 specification

* <?after> and <?before> do not create a lexical scope:
this means that <?before (.) > wrongly does a positional capture.
This is fixable, by adding a discard_capture operation.

* return() in blocks don't cause the regex to succeed, and don't terminate the regex.
The Perl 5.10 version should use (*ACCEPT).

* The $/ inside regex closures is a copy of the matching $/.
This means that modifying $/ inside a closure does not modify the match.
This can be fixed with some magic in the Match class.

------------------
TODO list:

* longest-token and multi-regex

* the Match class needs some tweaks to follow the MOP calling convention better
** hash, array, from, to should be Perl 6 objects; autoboxing can fix that

* backtracking controls; token/rule/regex

* in order to support Matcher methods, the $_ and $/ scopes need to be fixed (implement OUTER::<...>)

* rule/subrule parameters; 

* calling subrules in other grammars
** there should probably be a method that returns the regex, because directly accessing the $_regex_name variable doesn't work with inheritance.
** code blocks should probably be installed as methods, because regexes are inlined as string, which breaks lexical scoping, package names, and inheritance.

* <at()>

* infix:<~~>

* variable interpolation 

------------------
Blogs:

http://pugs.blogs.com/pugs/2007/07/perl6-regex-on-.html

------------------
References:

[1] http://www.justatheory.com/computers/programming/perl/regex_named_captures.html

[2] perldoc perlre
