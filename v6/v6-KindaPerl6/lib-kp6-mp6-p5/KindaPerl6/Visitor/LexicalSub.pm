# Do not edit this file - Generated by MiniPerl6
use v5;
use strict;
use MiniPerl6::Perl5::Runtime;
use MiniPerl6::Perl5::Match;
package KindaPerl6::Visitor::LexicalSub;
sub new { shift; bless { @_ }, "KindaPerl6::Visitor::LexicalSub" }
sub visit { my $self = shift; my $List__ = \@_; my $node; do {  $node = $List__->[0]; [$node] }; do { if ((Main::isa($node, 'Sub') && ($node->name() ne ''))) { return(Bind->new( 'parameters' => Decl->new( 'decl' => 'our','var' => Var->new( 'name' => $node->name(),'twigil' => '','sigil' => '&','namespace' => [], ),'type' => '', ),'arguments' => Sub->new( 'name' => '','block' => $node->block(), ), )) } else {  } }; do { if ((Main::isa($node, 'Apply') && (Main::isa($node->code(), 'Str') && ((($node->code() eq 'my') || ($node->code() eq 'our')) && Main::isa($node->arguments()->[0], 'Sub'))))) { return(Bind->new( 'parameters' => Decl->new( 'decl' => $node->code(),'var' => Var->new( 'name' => $node->arguments()->[0]->name(),'twigil' => '','sigil' => '&','namespace' => [], ),'type' => '', ),'arguments' => Sub->new( 'name' => '','block' => $node->arguments()->[0]->block(), ), )) } else {  } }; do { if ((Main::isa($node, 'Apply') && Main::isa($node->code(), 'Str'))) { return(Apply->new( 'arguments' => $node->arguments(),'code' => Var->new( 'name' => $node->code(),'twigil' => '','sigil' => '&','namespace' => [], ), )) } else {  } }; return((undef)) }


;
1;
