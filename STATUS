This document contains terse status information on major portions of Pugs.
Because development is rapid and anarchistic, details are omitted.  If you
would like current details, please ask on irc.freenode.net #perl6.


= Backends

- Haskell-Old  Working (delta general pugs bugs)
- Haskell-PIL  Started 2005-08-09
- Java         Nonexistant; metamodel implementation in progress nonetheless
- JavaScript   Passes almost 90% of the test suite; missing P6 regexen, some
               builtins, state (needs PIL1 fixes), full OO (needs PIL2)
- Perl 5       Restarted; currently implementing OO, standard types, run core
- PIR          Stalled; waiting for Parrot leo-ctx5 branch to merge


= PIL Transition

* autrijus redesigned PIL format (now 'PIL2') in late 2005-07 through 2005-08
* PIL2 infrastructure code in progress as of 2005-08-09
* PIL2 required for full OO, including packages, class declarations, and full
  use of metamodel
* iblech using old PIL format for JavaScript backend until PIL2 is ready
* The PIL-Run team (putter and fglock) does the same


= Perl 6 Object Metamodel

* Completion level varies by backend -- each requires its own variant of
  the metamodel implemented in the backend language:
-- Java        In early stages
-- JavaScript  Integrated into JS backend but not bootstrapped like P5 version,
               and unable to work fully because old PIL still in use
-- Perl 5      Mostly complete, used by PIL-Run
-- Perl 6      Requires complete rewrite
* stevan working on MetalModel 2.0, based on MiniMetaModel, as of 2005-08-22
* MM2 designed to be cleaner, and as minimalist as possible internally, without
  significant changes to user-facing MM1 API
* MM2 used by PIL-Run


= Embedding

- Perl 5   Works, except that it leaks heavily (refcounts inc but never dec),
           and exports don't happen -- workaround for latter is to use
           our &method1 := Perl5::Module::Name.can('method1')
               or
           our &method2 := eval('\&Perl5::Module::Name::method', :lang<perl5>)
- Parrot   Works with Parrot 0.2.3, but may break with head / leo-ctx5 merge,
           which is needed for progress on PIR backend


= Laziness

* Laziness doesn't currently work, but is in rapid implementation as of
  2005-08-10
* Some lazy functions do exist (e.g. gather/take), but are actually non-lazy
* The Perl 5 backend (PIL-Run) supports laziness very well.


= Rules

- Perl 5 regexen
** Work well in default backend, handled by PCRE
** Mostly working in JS
** Specified via perl5 modifier, as in rx:perl5/\Afoo/

- Perl 6 rules
** Current handled by parrot's PGE, under development; much works, but:
*** Rule names are global
*** No support for aliases
*** No support for embedded closures
*** Rules do not always behave correctly
** Other implementations in progress; putter working on several variations,
   currently blocked on ability to return a Rul (default class that does Rule)

- Modifiers
** Most are unimplemented; the working ones are:
  :g (mostly), :i :m :s :x (yes? p5-only), :w (p6-only)


= Test Suite

* Currently over 10100 tests, including module tests
* This is known to be only a small percentage of the total needed to cover
  the currently available Perl 6 design
* putter merged make targets for various testing methods on different backends
  (test-perl5, test-js, smoke-perl5, etc.)
