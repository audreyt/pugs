# Do not edit this file - Generated by MiniPerl6
use v5;
use strict;
use MiniPerl6::Perl5::Runtime;
use MiniPerl6::Perl5::Match;
package KindaPerl6::Visitor::EmitLisp;
sub new { shift; bless { @_ }, "KindaPerl6::Visitor::EmitLisp" }
sub visit { my $self = shift; my $List__ = \@_; my $node; do {  $node = $List__->[0]; [$node] }; $node->emit_lisp($self->{visitor_args}->{'secure'}) }


;
package CompUnit;
sub new { shift; bless { @_ }, "CompUnit" }
sub set_secure_mode { my $List__ = \@_; my $args_secure; do {  $args_secure = $List__->[0]; [$args_secure] }; my  $value = 'nil'; do { if (($args_secure != 0)) { return(('(pushnew :kp6-cl-secure *features*)' . Main::newline())) } else {  } }; return('') };
sub emit_lisp { my $self = shift; my $List__ = \@_; my $args_secure; do {  $args_secure = $List__->[0]; [$args_secure] }; (';; Do not edit this file - Lisp generated by ' . ($Main::_V6_COMPILER_NAME . (Main::newline() . ('(in-package #:cl-user)' . (Main::newline() . (set_secure_mode($args_secure) . ('(load (compile-file "lib/KindaPerl6/Runtime/Lisp/Runtime.lisp"))' . (Main::newline() . ('(defpackage #:' . ($self->{name} . (Main::newline() . ('  (:use #:cl #:kp6-cl))' . (Main::newline() . ('(in-package #:' . ($self->{name} . (')' . (Main::newline() . ('(defun Main () (with-kp6-package "GLOBAL"' . (Main::newline() . ($self->{body}->emit_lisp() . ('))' . (Main::newline() . ('(Main::Main)' . Main::newline()))))))))))))))))))))))) }


;
package Val::Int;
sub new { shift; bless { @_ }, "Val::Int" }
sub emit_lisp { my $self = shift; my $List__ = \@_; do { [] }; ('(make-instance \'kp6-Int :value ' . ($self->{int} . (')' . Main::newline()))) }


;
package Val::Bit;
sub new { shift; bless { @_ }, "Val::Bit" }
sub emit_lisp { my $self = shift; my $List__ = \@_; do { [] }; ('(make-instance \'kp6-Bit :value ' . ($self->{bit} . (')' . Main::newline()))) }


;
package Val::Num;
sub new { shift; bless { @_ }, "Val::Num" }
sub emit_lisp { my $self = shift; my $List__ = \@_; do { [] }; ('(make-instance \'kp6-Num :value ' . ($self->{num} . (')' . Main::newline()))) }


;
package Val::Buf;
sub new { shift; bless { @_ }, "Val::Buf" }
sub emit_lisp { my $self = shift; my $List__ = \@_; do { [] }; ('(make-instance \'kp6-Str :value ' . ('"' . (Main::mangle_string($self->{buf}) . ('"' . (')' . Main::newline()))))) }


;
package Val::Char;
sub new { shift; bless { @_ }, "Val::Char" }
sub emit_lisp { my $self = shift; my $List__ = \@_; do { [] }; ('(make-instance \'kp6-Char :value (code-char ' . ($self->{char} . '))')) }


;
package Val::Undef;
sub new { shift; bless { @_ }, "Val::Undef" }
sub emit_lisp { my $self = shift; my $List__ = \@_; do { [] }; ('(make-instance \'kp6-Undef)' . Main::newline()) }


;
package Val::Object;
sub new { shift; bless { @_ }, "Val::Object" }
sub emit_lisp { my $self = shift; my $List__ = \@_; do { [] }; die('Emitting of Val::Object not implemented') }


;
package Native::Buf;
sub new { shift; bless { @_ }, "Native::Buf" }
sub emit_lisp { my $self = shift; my $List__ = \@_; do { [] }; die('Emitting of Native::Buf not implemented') }


;
package Lit::Seq;
sub new { shift; bless { @_ }, "Lit::Seq" }
sub emit_lisp { my $self = shift; my $List__ = \@_; do { [] }; ('(list ' . (Main::join([ map { $_->emit_lisp() } @{ $self->{seq} } ], ' ') . ')')) }


;
package Lit::Array;
sub new { shift; bless { @_ }, "Lit::Array" }
sub emit_lisp { my $self = shift; my $List__ = \@_; do { [] }; ('(make-instance \'kp6-Array :value (list ' . (Main::join([ map { $_->emit_lisp() } @{ $self->{array} } ], ' ') . ('))' . Main::newline()))) }


;
package Lit::Hash;
sub new { shift; bless { @_ }, "Lit::Hash" }
sub emit_lisp { my $self = shift; my $List__ = \@_; do { [] }; my  $fields = $self->{hash}; my  $str = ''; my  $field; do { for my $field ( @{$fields} ) { $str = ($str . ('  (kp6-STORE hash ' . ($field->[0]->emit_lisp() . (' ' . ($field->[1]->emit_lisp() . (')' . Main::newline())))))) } }; ('(let ((hash (make-instance \'kp6-Hash)))' . (Main::newline() . ($str . (' hash)' . Main::newline())))) }


;
package Lit::Pair;
sub new { shift; bless { @_ }, "Lit::Pair" }
sub emit_lisp { my $self = shift; my $List__ = \@_; do { [] }; ('(make-instance \'kp6-pair :key ' . ($self->{key}->emit_lisp() . (' :value ' . ($self->{value}->emit_lisp() . (')' . Main::newline()))))) }


;
package Lit::NamedArgument;
sub new { shift; bless { @_ }, "Lit::NamedArgument" }
sub emit_lisp { my $self = shift; my $List__ = \@_; do { [] }; ('(make-instance \'kp6-named-argument :_argument_name_ ' . ($self->{key}->emit_lisp() . (' :value ' . ($self->{value}->emit_lisp() . (')' . Main::newline()))))) }


;
package Lit::Code;
sub new { shift; bless { @_ }, "Lit::Code" }
sub emit_lisp { my $self = shift; my $List__ = \@_; do { [] }; ($self->emit_declarations() . $self->emit_body()) };
sub emit_body { my $self = shift; my $List__ = \@_; do { [] }; Main::join([ map { $_->emit_lisp() } @{ $self->{body} } ], ' ') };
sub emit_signature { my $self = shift; my $List__ = \@_; do { [] }; $self->{sig}->emit_lisp() };
sub emit_declarations { my $self = shift; my $List__ = \@_; do { [] }; my  $s; my  $name; do { for my $name ( @{$self->{pad}->variable_names()} ) { my  $decl = Decl->new( 'decl' => 'my','type' => '','var' => Var->new( 'sigil' => '','twigil' => '','name' => $name,'namespace' => [], ), );$s = ($s . ($name->emit_lisp() . (' ' . Main::newline()))) } }; return($s) };
sub emit_arguments { my $self = shift; my $List__ = \@_; do { [] }; my  $array_ = Var->new( 'sigil' => '@','twigil' => '','name' => '_','namespace' => [], ); my  $hash_ = Var->new( 'sigil' => '%','twigil' => '','name' => '_','namespace' => [], ); my  $CAPTURE = Var->new( 'sigil' => '$','twigil' => '','name' => 'CAPTURE','namespace' => [], ); my  $CAPTURE_decl = Decl->new( 'decl' => 'my','type' => '','var' => $CAPTURE, ); my  $str = ''; $str = ($str . $CAPTURE_decl->emit_lisp()); $str = ($str . '::DISPATCH_VAR($CAPTURE,"STORE",::CAPTURIZE(\@_));'); my  $bind_ = Bind->new( 'parameters' => $array_,'arguments' => Call->new( 'invocant' => $CAPTURE,'method' => 'array','arguments' => [], ), ); $str = ($str . ($bind_->emit_lisp() . ' ')); my  $bind_hash = Bind->new( 'parameters' => $hash_,'arguments' => Call->new( 'invocant' => $CAPTURE,'method' => 'hash','arguments' => [], ), ); $str = ($str . ($bind_hash->emit_lisp() . ' ')); my  $i = 0; my  $field; do { for my $field ( @{$self->{sig}->positional()} ) { my  $bind = Bind->new( 'parameters' => $field,'arguments' => Index->new( 'obj' => $array_,'index' => Val::Int->new( 'int' => $i, ), ), );$str = ($str . ($bind->emit_lisp() . ' '));$i = ($i + 1) } }; return($str) }


;
package Lit::Object;
sub new { shift; bless { @_ }, "Lit::Object" }
sub emit_lisp { my $self = shift; my $List__ = \@_; do { [] }; my  $fields = $self->{fields}; my  $str = ''; my  $field; do { for my $field ( @{$fields} ) { $str = ($str . ($field->[0]->emit_lisp() . (' => ' . ($field->[1]->emit_lisp() . ',')))) } }; ('(kp6-new \'kp6-' . ($self->{class} . (' ' . ($str . (')' . Main::newline()))))) }


;
package Index;
sub new { shift; bless { @_ }, "Index" }
sub emit_lisp { my $self = shift; my $List__ = \@_; do { [] }; ('(kp6-index \'' . ($self->{obj}->emit_lisp() . (' ' . ($self->{index}->emit_lisp() . (')' . Main::newline()))))) }


;
package Lookup;
sub new { shift; bless { @_ }, "Lookup" }
sub emit_lisp { my $self = shift; my $List__ = \@_; do { [] }; ('(kp6-lookup ' . ($self->{obj}->emit_lisp() . (' (perl->cl ' . ($self->{index}->emit_lisp() . '))')))) }


;
package Assign;
sub new { shift; bless { @_ }, "Assign" }
sub emit_lisp { my $self = shift; my $List__ = \@_; do { [] }; my  $node = $self->{parameters}; do { if ((Main::isa($node, 'Var') && @{$node->namespace()})) { $node = Apply->new( 'code' => Var->new( 'name' => 'ternary:<?? !!>','twigil' => '','sigil' => '&','namespace' => ['GLOBAL'], ),'arguments' => [Apply->new( 'arguments' => [$node],'code' => Var->new( 'name' => 'VAR_defined','twigil' => '','sigil' => '&','namespace' => ['GLOBAL'], ), ), $node, Bind->new( 'parameters' => $node,'arguments' => Call->new( 'invocant' => Var->new( 'name' => '::Scalar','twigil' => '','sigil' => '$','namespace' => [], ),'method' => 'new','hyper' => '', ), )], ) } else {  } }; ('(setf ' . ($node->emit_lisp() . (' ' . ($self->{arguments}->emit_lisp() . ')')))) }


;
package Var;
sub new { shift; bless { @_ }, "Var" }
sub emit_lisp { my $self = shift; my $List__ = \@_; do { [] }; my  $table = { '$' => 'kp6-','@' => 'kp6-List_','%' => 'kp6-Hash_','&' => 'kp6-Code_', }; do { if (($self->{twigil} eq '.')) { return(('::DISPATCH( $self, "' . ($self->{name} . ('" )' . Main::newline())))) } else {  } }; do { if (($self->{name} eq '/')) { return(($table->{$self->{sigil}} . 'MATCH')) } else {  } }; my  $namespace = $self->{namespace}; do { if ((@{$namespace} ? 0 : 1)) { return(('(kp6-lookup (kp6-lookup *kp6-packages* "GLOBAL") (kp6-generate-variable "' . ($self->{sigil} . ('" "' . ($self->{name} . '"))'))))) } else {  } }; return(('(kp6-lookup (kp6-lookup *kp6-packages* "' . (join('::', @{$namespace}) . ('") (kp6-generate-variable "' . ($self->{sigil} . ('" "' . ($self->{name} . '"))'))))))) };
sub perl { my $self = shift; my $List__ = \@_; do { [] }; ('(kp6-new \'signature-item ' . ('sigil: \'' . ($self->{sigil} . ('\', ' . ('twigil: \'' . ($self->{twigil} . ('\', ' . ('name: \'' . ($self->{name} . ('\', ' . ('namespace: [ ], ' . (')' . Main::newline())))))))))))) }


;
package Bind;
sub new { shift; bless { @_ }, "Bind" }
sub emit_lisp { my $self = shift; my $List__ = \@_; do { [] }; do { if (Main::isa($self->{parameters}, 'Call')) { return(Assign->new( 'parameters' => $self->{parameters},'arguments' => $self->{arguments}, )->emit_lisp()) } else {  } }; do { if (Main::isa($self->{parameters}, 'Lookup')) { return(Assign->new( 'parameters' => $self->{parameters},'arguments' => $self->{arguments}, )->emit_lisp()) } else {  } }; do { if (Main::isa($self->{parameters}, 'Index')) { return(Assign->new( 'parameters' => $self->{parameters},'arguments' => $self->{arguments}, )->emit_lisp()) } else {  } }; my  $str = ''; $str = ($str . ('(setf ' . ($self->{parameters}->emit_lisp() . (' ' . ($self->{arguments}->emit_lisp() . ')'))))); return($str) }


;
package Proto;
sub new { shift; bless { @_ }, "Proto" }
sub emit_lisp { my $self = shift; my $List__ = \@_; do { [] }; return(('\'' . $self->{name})) }


;
package Call;
sub new { shift; bless { @_ }, "Call" }
sub emit_lisp { my $self = shift; my $List__ = \@_; do { [] }; my  $invocant; do { if (Main::isa($self->{invocant}, 'Proto')) { do { if (($self->{invocant}->name() eq 'self')) { $invocant = '$self' } else { $invocant = $self->{invocant}->emit_lisp() } } } else { $invocant = $self->{invocant}->emit_lisp() } }; do { if (($invocant eq 'self')) { $invocant = '$self' } else {  } }; my  $meth = $self->{method}; do { if (($meth eq 'postcircumfix:<( )>')) { $meth = '' } else {  } }; my  $call = Main::join([ map { $_->emit_lisp() } @{ $self->{arguments} } ], ' '); do { if ($self->{hyper}) { ('[ map { $_' . ('->' . ($meth . ('(' . ($call . (') } @{ ' . ($invocant . (' } ]' . Main::newline())))))))) } else { do { if (($meth eq '')) { ('(kp6-APPLY \'' . ($invocant . (' (list ' . ($call . ('))' . Main::newline()))))) } else { ('(' . ($meth . (' \'' . ($invocant . (' (list ' . ($call . ('))' . Main::newline()))))))) } } } } }


;
package Apply;
sub new { shift; bless { @_ }, "Apply" }
sub emit_lisp { my $self = shift; my $List__ = \@_; do { [] }; do { if ((Main::isa($self->{code}, 'Var') && ($self->{code}->name() eq 'self'))) { return('$self') } else {  } }; my  $op = $self->{code}->emit_lisp(); do { if (($op eq '$GLOBAL::Code_infix_58__60__124__124__62_')) { return(('do { do { my $____some__weird___var____ = ' . ($self->{arguments}->[0]->emit_lisp() . ('; ' . ('::DISPATCH($____some__weird___var____,"true")->{_value} && $____some__weird___var____ ' . ('} ||' . ('do { my $____some__weird___var____ = ' . ($self->{arguments}->[1]->emit_lisp() . ('; ' . ('::DISPATCH($____some__weird___var____,"true")->{_value} && $____some__weird___var____ ' . ('} || ::DISPATCH( $::Bit, "new", 0 ) }' . Main::newline()))))))))))) } else {  } }; do { if (($op eq '$GLOBAL::Code_infix_58__60__38__38__62_')) { return(('do { ( ' . ('do { my $____some__weird___var____ = ' . ($self->{arguments}->[0]->emit_lisp() . ('; ' . ('::DISPATCH($____some__weird___var____,"true")->{_value} && $____some__weird___var____ ' . ('} &&' . ('do { my $____some__weird___var____ = ' . ($self->{arguments}->[1]->emit_lisp() . ('; ' . ('::DISPATCH($____some__weird___var____,"true")->{_value} && $____some__weird___var____ ' . ('}) || ::DISPATCH( $::Bit, "new", 0) }' . Main::newline())))))))))))) } else {  } }; return(('(kp6-apply-function (perl->cl ' . ($op . (') (mapcar #\'cl->perl (list ' . (Main::join([ map { $_->emit_lisp() } @{ $self->{arguments} } ], ' ') . (')))' . Main::newline())))))) }


;
package Return;
sub new { shift; bless { @_ }, "Return" }
sub emit_lisp { my $self = shift; my $List__ = \@_; do { [] }; return(('return(' . ($self->{result}->emit_lisp() . (')' . Main::newline())))) }


;
package If;
sub new { shift; bless { @_ }, "If" }
sub emit_lisp { my $self = shift; my $List__ = \@_; do { [] }; ('(if (kp6-bit ' . ($self->{cond}->emit_lisp() . (')' . (($self->{body} ? ('(progn ' . ($self->{body}->emit_lisp() . ') ')) : '(progn)') . (($self->{otherwise} ? (' (progn ' . ($self->{otherwise}->emit_lisp() . ' )')) : '(progn)') . (' )' . Main::newline())))))) }


;
package For;
sub new { shift; bless { @_ }, "For" }
sub emit_lisp { my $self = shift; my $List__ = \@_; do { [] }; my  $cond = $self->{cond}; do { if ((Main::isa($cond, 'Var') && ($cond->sigil() eq '@'))) {  } else { $cond = Apply->new( 'code' => Var->new( 'sigil' => '&','twigil' => '','name' => 'prefix:<@>','namespace' => ['GLOBAL'], ),'arguments' => [$cond], ) } }; ('for ' . ($self->{topic}->emit_lisp() . (' ( @{ ' . ($cond->emit_lisp() . ('->{_value}{_array} } )' . (' { ' . ($self->{body}->emit_lisp() . (' } ' . Main::newline())))))))) }


;
package While;
sub new { shift; bless { @_ }, "While" }
sub emit_lisp { my $self = shift; my $List__ = \@_; do { [] }; my  $cond = $self->{cond}; do { if ((Main::isa($cond, 'Var') && ($cond->sigil() eq '@'))) {  } else { $cond = Apply->new( 'code' => Var->new( 'sigil' => '&','twigil' => '','name' => 'prefix:<@>','namespace' => ['GLOBAL'], ),'arguments' => [$cond], ) } }; ('do { while (::DISPATCH(::DISPATCH(' . ($self->{cond}->emit_lisp() . (',"true"),"p5landish") ) ' . (' { ' . ($self->{body}->emit_lisp() . (' } }' . Main::newline())))))) }


;
package Decl;
sub new { shift; bless { @_ }, "Decl" }
sub emit_lisp { my $self = shift; my $List__ = \@_; do { [] }; my  $decl = $self->{decl}; my  $name = $self->{var}->name(); return(('(kp6-define-package-variable (kp6-generate-variable "' . ($self->{var}->sigil() . ('" "' . ($self->{var}->name() . '"))'))))); do { if (($decl eq 'has')) { return(('sub ' . ($name . (' { ' . ('@_ == 1 ' . ('? ( $_[0]->{' . ($name . ('} ) ' . (': ( $_[0]->{' . ($name . ('} = $_[1] ) ' . '}'))))))))))) } else {  } }; my  $create = (', \'new\', { modified => $_MODIFIED, name => \'' . ($self->{var}->emit_lisp() . '\' } ) ')); do { if (($decl eq 'our')) { my  $s;$s = 'our ';do { if (($self->{var}->sigil() eq '$')) { return(($s . ($self->{var}->emit_lisp() . (' = ::DISPATCH( $::Scalar' . ($create . (' unless defined ' . ($self->{var}->emit_lisp() . ('; ' . ('BEGIN { ' . ($self->{var}->emit_lisp() . (' = ::DISPATCH( $::Scalar' . ($create . (' unless defined ' . ($self->{var}->emit_lisp() . ('; ' . ('}' . Main::newline())))))))))))))))) } else {  } };do { if (($self->{var}->sigil() eq '&')) { return(($s . ($self->{var}->emit_lisp() . (' = ::DISPATCH( $::Routine' . ($create . (';' . Main::newline())))))) } else {  } };do { if (($self->{var}->sigil() eq '%')) { return(($s . ($self->{var}->emit_lisp() . (' = ::DISPATCH( $::Hash' . ($create . (';' . Main::newline())))))) } else {  } };do { if (($self->{var}->sigil() eq '@')) { return(($s . ($self->{var}->emit_lisp() . (' = ::DISPATCH( $::Array' . ($create . (';' . Main::newline())))))) } else {  } };return(($s . ($self->{var}->emit_lisp() . Main::newline()))) } else {  } }; do { if (($self->{var}->sigil() eq '$')) { return(($self->{decl} . (' ' . ($self->{var}->emit_lisp() . ('; ' . ($self->{var}->emit_lisp() . (' = ::DISPATCH( $::Scalar' . ($create . (' unless defined ' . ($self->{var}->emit_lisp() . ('; ' . ('BEGIN { ' . ($self->{var}->emit_lisp() . (' = ::DISPATCH( $::Scalar' . ($create . ('}' . Main::newline())))))))))))))))) } else {  } }; do { if (($self->{var}->sigil() eq '&')) { return(($self->{decl} . (' ' . ($self->{var}->emit_lisp() . ('; ' . ($self->{var}->emit_lisp() . (' = ::DISPATCH( $::Routine' . ($create . (' unless defined ' . ($self->{var}->emit_lisp() . ('; ' . ('BEGIN { ' . ($self->{var}->emit_lisp() . (' = ::DISPATCH( $::Routine' . ($create . ('}' . Main::newline())))))))))))))))) } else {  } }; do { if (($self->{var}->sigil() eq '%')) { return(($self->{decl} . (' ' . (' ' . ($self->{var}->emit_lisp() . (' = ::DISPATCH( $::Hash' . ($create . ('; ' . Main::newline())))))))) } else {  } }; do { if (($self->{var}->sigil() eq '@')) { return(($self->{decl} . (' ' . (' ' . ($self->{var}->emit_lisp() . (' = ::DISPATCH( $::Array' . ($create . ('; ' . Main::newline())))))))) } else {  } }; return(($self->{decl} . (' ' . $self->{var}->emit_lisp()))) }


;
package Sig;
sub new { shift; bless { @_ }, "Sig" }
sub emit_lisp { my $self = shift; my $List__ = \@_; do { [] }; my  $inv = '$::Undef'; do { if (Main::isa($self->{invocant}, 'Var')) { $inv = Main::perl($self->{invocant}, ) } else {  } }; my  $pos; my  $decl; do { for my $decl ( @{$self->{positional}} ) { $pos = ($pos . (Main::perl($decl, ) . ', ')) } }; my  $named = ''; ('(kp6-new \'signature ' . ('invocant: ' . ($inv . (', ' . ('array: ::DISPATCH( $::Array, "new", { _array => [ ' . ($pos . (' ] } ), ' . ('hash: ::DISPATCH( $::Hash,  "new", { _hash  => { ' . ($named . (' } } ), ' . ('return: $::Undef, ' . (')' . Main::newline())))))))))))) }


;
package Capture;
sub new { shift; bless { @_ }, "Capture" }
sub emit_lisp { my $self = shift; my $List__ = \@_; do { [] }; my  $s = '(kp6-new \'capture '; do { if (defined($self->{invocant})) { $s = ($s . ('invocant: ' . ($self->{invocant}->emit_lisp() . ', '))) } else { $s = ($s . 'invocant: $::Undef, ') } }; do { if (defined($self->{array})) { $s = ($s . 'array: ::DISPATCH( $::Array, "new", { _array => [ ');my  $item;do { for my $item ( @{$self->{array}} ) { $s = ($s . ($item->emit_lisp() . ', ')) } };$s = ($s . ' ] } ),') } else {  } }; do { if (defined($self->{hash})) { $s = ($s . 'hash: ::DISPATCH( $::Hash, "new", { _hash => { ');my  $item;do { for my $item ( @{$self->{hash}} ) { $s = ($s . ($item->[0]->emit_lisp() . ('->{_value} => ' . ($item->[1]->emit_lisp() . ', ')))) } };$s = ($s . ' } } ),') } else {  } }; return(($s . (')' . Main::newline()))) }


;
package Subset;
sub new { shift; bless { @_ }, "Subset" }
sub emit_lisp { my $self = shift; my $List__ = \@_; do { [] }; ('(kp6-new \'subset ' . ('base_class: ' . ($self->{base_class}->emit_lisp() . (', ' . ('block: ' . ('sub { local $_ = shift; ' . ($self->{block}->block()->emit_lisp() . (' } ' . (')' . Main::newline()))))))))) }


;
package Method;
sub new { shift; bless { @_ }, "Method" }
sub emit_lisp { my $self = shift; my $List__ = \@_; do { [] }; ('(kp6-new \'code ' . ('code: sub { ' . ($self->{block}->emit_declarations() . ('$self = shift; ' . ($self->{block}->emit_arguments() . ($self->{block}->emit_body() . (' ' . ('signature: ' . ($self->{block}->emit_signature() . (')' . Main::newline())))))))))) }


;
package Sub;
sub new { shift; bless { @_ }, "Sub" }
sub emit_lisp { my $self = shift; my $List__ = \@_; do { [] }; ('(kp6-new \'code ' . ('code: sub { ' . ($self->{block}->emit_declarations() . ($self->{block}->emit_arguments() . ($self->{block}->emit_body() . (' } ' . ('signature: ' . ($self->{block}->emit_signature() . (')' . Main::newline()))))))))) }


;
package Do;
sub new { shift; bless { @_ }, "Do" }
sub emit_lisp { my $self = shift; my $List__ = \@_; do { [] }; ($self->{block}->emit_lisp() . Main::newline()) }


;
package BEGIN;
sub new { shift; bless { @_ }, "BEGIN" }
sub emit_lisp { my $self = shift; my $List__ = \@_; do { [] }; ('BEGIN { ' . ($self->{block}->emit_lisp() . ' }')) }


;
package Use;
sub new { shift; bless { @_ }, "Use" }
sub emit_lisp { my $self = shift; my $List__ = \@_; do { [] }; do { if (($self->{mod} eq 'v6')) { return((Main::newline() . ('#use v6' . Main::newline()))) } else {  } }; do { if ($self->{perl5}) { return(('use ' . ($self->{mod} . (';$::' . ($self->{mod} . ('= KindaPerl6::Runtime::Perl5::Wrap::use5(\'' . ($self->{mod} . '\')'))))))) } else { return(('use ' . $self->{mod})) } } }


;
1;
