#!/usr/bin/pugs

use v6;
require Test;

plan 28;

=pod

Class attributes tests from L<S12/"Attributes">

=cut

# L<S12/"Attributes" /the automatic generation of an accessor method of the same name\./>

eval 'class Foo1 { has $.bar; }';

{
    my $foo = eval 'Foo1.new()';
    todo_eval_ok('$foo ~~ Foo1', '... our Foo instance was created');
    todo_eval_ok('$foo.can("bar")', '.. checking autogenerated accessor existence');
    todo_eval_ok('!defined($foo.bar())', '.. autogenerated accessor works');
    todo_eval_ok('!defined($foo.bar)', '.. autogenerated accessor works w/out parens');    
    # what exactly will happen if we try to set bar()
}

# L<S12/"Attributes" /Pseudo\-assignment to an attribute declaration specifies the default/>

eval 'class Foo2 { has $.bar = "baz"; }';

{
    my $foo = eval 'Foo2.new()';
    todo_eval_ok('$foo ~~ Foo2', '... our Foo instance was created');
    todo_eval_ok('$foo.can("bar")', '.. checking autogenerated accessor existence');
    todo_eval_is('$foo.bar()', "baz", '.. autogenerated accessor works');
    todo_eval_is('$foo.bar', "baz", '.. autogenerated accessor works w/out parens');    
    # what exactly will happen if we try to set bar()
}

# L<S12/"Attributes" /trait causes the generated accessor to be declared C\<rw\>\, making it/>

eval 'class Foo3 { has $.bar is rw; }';

{
    my $foo = eval 'Foo3.new()';
    todo_eval_ok('$foo ~~ Foo3', '... our Foo instance was created');
    todo_eval_ok('$foo.can("bar")', '.. checking autogenerated accessor existence');
    todo_eval_ok('!defined($foo.bar())', '.. autogenerated accessor works');
    todo_eval_ok('$foo.bar = "baz"', '.. autogenerated mutator works as lvalue');    
    todo_eval_is('$foo.bar', "baz", '.. autogenerated mutator as lvalue set the value correctly');    
    todo_eval_ok('$foo.bar("baz2")', '.. autogenerated mutator works as method');    
    todo_eval_is('$foo.bar', "baz2", '.. autogenerated mutator as method set the value correctly');        
}

# L<S12/"Attributes" /Private attributes use a colon to indicate that no public accessor is/>

eval 'class Foo4 { has $:bar = "baz"; }';

{
    my $foo = eval 'Foo4.new()';
    todo_eval_ok('$foo ~~ Foo4', '... our Foo instance was created');
    todo_eval_ok('!$foo.can("bar")', '.. checking autogenerated accessor existence');
}

# L<S12/"Attributes">

eval 'class Foo5 {
  has $.tail is rw;
  has @.legs;
  has $:brain;

  sub set_legs  (@legs) { @.legs = @legs }
  sub inc_brain ()      { $:brain++ }
  sub get_brain ()      { $:brain }
}';

{
    my $foo = eval 'Foo5.new()';
    todo_eval_ok('$foo ~~ Foo5', '... our Foo instance was created');
        
    todo_eval_is '$foo.tail = "a"', "a", "setting a public rw attribute";
    todo_eval_is '$foo.tail',       "a", "getting a public rw attribute";
    
    todo_eval_ok '$foo.set_legs(1,2,3)',       "setting a public ro attribute (1)";
    todo_eval_is '$foo.legs.[1]', 2,           "getting a public ro attribute (1)";
    # ok instead of todo_ok to suppress "unexpected succeeded"-messages
    ok           !eval('$foo.legs = (4,5,6)'), "setting a public ro attribute (2)";
    todo_eval_is '$foo.legs.[1]', 2,           "getting a public ro attribute (2)";
    
    todo_eval_ok '$foo.inc_brain()',  "modifiying a private attribute (1)";
    todo_eval_is '$foo.get_brain', 1, "getting a private attribute (1)";
    todo_eval_ok '$foo.inc_brain()',  "modifiying a private attribute (2)";
    todo_eval_is '$foo.get_brain', 2, "getting a private attribute (2)";
}