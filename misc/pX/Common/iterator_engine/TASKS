pX/Common/iterator_engine/TASKS - fglock

Bootstrapping:
- core rule engine - backtracking, function composition - in Perl 5
- Perl 6 rules in Perl 5 - reuse to write itself
- Perl 6 grammar in Perl 5 - reuse to write itself
- Perl 6 to Perl 5 translator (parse p6, emit p5) - reuse to write itself
- Perl 6 compiler written in p6

Plan sketch:
- rewrite the compiler in p6, and emit the whole compiler to p5
- try to reuse pugs tests

Current tasks:
- #comment - use <p6ws> and <p6ws_star>
- implement 'macro' and '<%hash>', in order to define 'if' as in S04-Statement parsing
- organize grammar categories: statement_control, prefix, infix
- implement operator precedence
- migrate primitives from http://svn.openfoundry.org/pugs/src/Pugs/Prim.hs
- find out more about grammar bootstrapping and the parse/compile/run cycle and BEGIN/CHECK/INIT
- see TODO and XXX notes everywhere
- split Prelude into base-syntax and primitives
- fix Perl 6 syntax errors in Prelude - usage of $<>, ...

More tasks:
- implement syntax options:
  - default parser for macros
  - short operator names infix:<+> === +
- use putter's Match.pm
- bind special variables $0, ...
- see also the 'not implemented' rule list below
- optimize infix:<+> to 'native +' when possible
- mixing boxed/unboxed types (there are several tools available - which one to use?)
- Perl 6 OO - which tools to use? - talk to stevan
- un-source-filter rule return blocks
- un-source-filter macro variable binding
- coroutines

Other interesting things to do (low priority):
- reimplement iterator_engine.pl in 
  - Javascript - I like the 'run in the browser' idea very much
  - Perl 6 - Perl 6 version could be started with a source filter, since the syntax used is very simple
  - Parrot - not so useful - Parrot already has PGE
- test the compiler in Perl 5.5x
- try out Smart::Comments
- move project to a new subdir and give it a name?
- Extract 'Changes' and 'TODO' from README (extract old Changes from svn)
- make rule/grammar a pluggable module (pack for CPAN?)
  how about "Perl6::Grammar", and reuse Parse::RecDescent API?
- make grammars inherit from Grammar; make grammars inheritable
- write an emitter that generates perl5 regexes (or dies)
- implement "Rule|Str" with caching in <$var> rule
- pluggable emitters
- emit Pugs-compatible YAML 
- import Pugs-generated YAML precompiled code
- regex options :w :perl5 ...

Possible difficult problems to fix (all untested):
- package-wide lexical variables (incremental compilation and execution doesn't work with lexicals)
- modifying the grammar from inside a block (incremental compilation is currently disabled inside blocks)
- clonable closures (needed for proper working lazy lists)

