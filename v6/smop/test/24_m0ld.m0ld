my $interpreter;
my $scope;
my $NAMESPACE = ¢SMOP__S1P__RootNamespace;
my $CURLY = "postcircumfix:{ }";
my $OUT = "$*OUT";
#opcodes

my $out_scalar;
$out_scalar = $NAMESPACE.$CURLY($OUT);


my $FETCH = "FETCH";

# testing "inline" my declarations
my $out = $out_scalar.$FETCH();

my $ID_PRINT = "print";
my $void; # we have to store even unused return values somewhere

my $PLAN = "1..4\n";
$void = $out.$ID_PRINT($PLAN);

$void = $out."print"("ok 1 # simple method call\n");

goto label1;
my $NOTOK2 = "not ok 2 # goto dosn't work\n";
$void = $out.$ID_PRINT($NOTOK2);
label1: my $OK2 = "ok 2 # goto works\n";
$void = $out.$ID_PRINT($OK2);

my $TRUE = ¢SMOP__NATIVE__bool_true;
my $FALSE = ¢SMOP__NATIVE__bool_false;

if $TRUE {goto good_jump} else {goto wrong_jump};

my $NOTOK3a = "not ok 3 # br doesn't jump at all";
$void = $out.$ID_PRINT($NOTOK3a);

my $NOTOK3b = "not ok 3 # br jumps to the wrong label";
wrong_jump: $void = $out.$ID_PRINT($NOTOK3b);

# TODO test jump to iffalse
#
my $OK3 = "ok 3 # br works\n";
good_jump: $void = $out.$ID_PRINT($OK3);

my $submold = mold {
    my $out_scalar;
    $out_scalar = ¢SMOP__S1P__RootNamespace."postcircumfix:{ }"("$*OUT");
    my $out = $out_scalar."FETCH"();
    my $void = $out."print"("ok 4 #submold work\n");
};
my $MoldFrame_scalar = ¢SMOP__S1P__RootNamespace."postcircumfix:{ }"("::MoldFrame");
my $MoldFrame = $MoldFrame_scalar."FETCH"();
my $frame = $MoldFrame."new"($submold);
$void = ¢interpreter."goto"($frame);
