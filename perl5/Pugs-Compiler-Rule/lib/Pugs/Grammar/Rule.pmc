# !!! DO NOT EDIT !!!
# This file was generated by util/gen-rule-pmc.pl at Sun Jul  8 15:01:17 2007

package Pugs::Grammar::Rule;
use utf8;
no strict 'refs';
use Pugs::Runtime::Match;
use Pugs::Runtime::Regex;

our %rule_terms;
our %variables;
*pod_begin = ## <global>
do { my $rule; $rule = sub {
  
              $_[3] = $_[2];
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       ## <alt>
       (
           ( $pad{I1325} = $pos or 1 )
           && (
           (
              (   ( $pad{I1326} = $pos or 1 ) && 
               ## <perl5>
               ( ( substr( $s, $pos ) =~ m/^((?:\n\r?|\r\n?))/ )
                   ? ( $pos += length( $1 ) or 1 )
                   : 0
               )
               ## </perl5>
 ||    ( ( $pos = $pad{I1326} ) && 0 ) )
           &&
             ## <constant>
             ( ( substr( $s, $pos, 1 ) eq '=' )
                 ? ( $pos += 1 or 1 )
                 : 0
             )
             ## </constant>

           &&
             ## <constant>
             ( ( substr( $s, $pos, 1 ) eq 'e' )
                 ? ( $pos += 1 or 1 )
                 : 0
             )
             ## </constant>

           &&
             ## <constant>
             ( ( substr( $s, $pos, 1 ) eq 'n' )
                 ? ( $pos += 1 or 1 )
                 : 0
             )
             ## </constant>

           &&
              (   ( $pad{I1327} = $pos or 1 ) && 
               ## <constant>
               ( ( substr( $s, $pos, 1 ) eq 'd' )
                   ? ( $pos += 1 or 1 )
                   : 0
               )
               ## </constant>
 ||    ( ( $pos = $pad{I1327} ) && 0 ) )
           &&
             do { while (
              (   ( $pad{I1328} = $pos or 1 ) && 
                 ## <perl5>
                 ( ( substr( $s, $pos ) =~ m/^((?!\n\r?|\r\n?).)/ )
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 )
                 ## </perl5>
 ||    ( ( $pos = $pad{I1328} ) && 0 ) )) {}; $bool = 1 }
           )
           )
         || (
           ( ( $bool = 1 ) && ( $pos = $pad{I1325} ) or 1 )
           &&            (
              (   ( $pad{I1329} = $pos or 1 ) && 
               ( substr( $s, $pos++, 1 ) ne '' ) ||    ( ( $pos = $pad{I1329} ) && 0 ) )
           &&
             do { while (
              (   ( $pad{I1330} = $pos or 1 ) && 
                 ## <perl5>
                 ( ( substr( $s, $pos ) =~ m/^((?!\n\r?|\r\n?).)/ )
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 )
                 ## </perl5>
 ||    ( ( $pos = $pad{I1330} ) && 0 ) )) {}; $bool = 1 }
           &&
              (   ( $pad{I1331} = $pos or 1 ) && 

               ## <metasyntax>
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match = 
                           $grammar->pod_begin( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    my $bool = (!$match != 1);
                    $pos = $match->to if $bool;
                    $match;
               }
               ## </metasyntax>
 ||    ( ( $pos = $pad{I1331} ) && 0 ) )
           )
         )
       )
## </alt>
;
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
;## Signature for pod_begin
 # Data::Bind->sub_signature
#  (\&pod_begin, );
;
*pod_other = ## <global>
do { my $rule; $rule = sub {
  
              $_[3] = $_[2];
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       ## <alt>
       (
           ( $pad{I1332} = $pos or 1 )
           && (
           (
              (   ( $pad{I1333} = $pos or 1 ) && 
               ## <perl5>
               ( ( substr( $s, $pos ) =~ m/^((?:\n\r?|\r\n?))/ )
                   ? ( $pos += length( $1 ) or 1 )
                   : 0
               )
               ## </perl5>
 ||    ( ( $pos = $pad{I1333} ) && 0 ) )
           &&
             ## <constant>
             ( ( substr( $s, $pos, 1 ) eq '=' )
                 ? ( $pos += 1 or 1 )
                 : 0
             )
             ## </constant>

           &&
             ## <constant>
             ( ( substr( $s, $pos, 1 ) eq 'c' )
                 ? ( $pos += 1 or 1 )
                 : 0
             )
             ## </constant>

           &&
             ## <constant>
             ( ( substr( $s, $pos, 1 ) eq 'u' )
                 ? ( $pos += 1 or 1 )
                 : 0
             )
             ## </constant>

           &&
              (   ( $pad{I1334} = $pos or 1 ) && 
               ## <constant>
               ( ( substr( $s, $pos, 1 ) eq 't' )
                   ? ( $pos += 1 or 1 )
                   : 0
               )
               ## </constant>
 ||    ( ( $pos = $pad{I1334} ) && 0 ) )
           &&
             do { while (
              (   ( $pad{I1335} = $pos or 1 ) && 
                 ## <perl5>
                 ( ( substr( $s, $pos ) =~ m/^((?!\n\r?|\r\n?).)/ )
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 )
                 ## </perl5>
 ||    ( ( $pos = $pad{I1335} ) && 0 ) )) {}; $bool = 1 }
           )
           )
         || (
           ( ( $bool = 1 ) && ( $pos = $pad{I1332} ) or 1 )
           &&            (
              (   ( $pad{I1336} = $pos or 1 ) && 
               ( substr( $s, $pos++, 1 ) ne '' ) ||    ( ( $pos = $pad{I1336} ) && 0 ) )
           &&
             do { while (
              (   ( $pad{I1337} = $pos or 1 ) && 
                 ## <perl5>
                 ( ( substr( $s, $pos ) =~ m/^((?!\n\r?|\r\n?).)/ )
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 )
                 ## </perl5>
 ||    ( ( $pos = $pad{I1337} ) && 0 ) )) {}; $bool = 1 }
           &&
              (   ( $pad{I1338} = $pos or 1 ) && 

               ## <metasyntax>
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match = 
                           $grammar->pod_other( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    my $bool = (!$match != 1);
                    $pos = $match->to if $bool;
                    $match;
               }
               ## </metasyntax>
 ||    ( ( $pos = $pad{I1338} ) && 0 ) )
           )
         )
       )
## </alt>
;
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
;## Signature for pod_other
 # Data::Bind->sub_signature
#  (\&pod_other, );
;
*ws = ## <global>
do { my $rule; $rule = sub {
  
              $_[3] = $_[2];
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       (
        (   ( $pad{I1339} = $pos or 1 ) && 
           ## <alt>
           (
               ( $pad{I1340} = $pos or 1 )
               && (
               (
                  (   ( $pad{I1341} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '#' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1341} ) && 0 ) )
               &&
                 do { while (
                  (   ( $pad{I1342} = $pos or 1 ) && 
                     ## <perl5>
                     ( ( substr( $s, $pos ) =~ m/^((?!\n\r?|\r\n?).)/ )
                         ? ( $pos += length( $1 ) or 1 )
                         : 0
                     )
                     ## </perl5>
 ||    ( ( $pos = $pad{I1342} ) && 0 ) )) {}; $bool = 1 }
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1340} ) or 1 )
               &&                (
                  (   ( $pad{I1343} = $pos or 1 ) && 
                   ## <perl5>
                   ( ( substr( $s, $pos ) =~ m/^((?:\n\r?|\r\n?))/ )
                       ? ( $pos += length( $1 ) or 1 )
                       : 0
                   )
                   ## </perl5>
 ||    ( ( $pos = $pad{I1343} ) && 0 ) )
               &&
                 (
                  (   ( $pad{I1344} = $pos or 1 ) && 
                     (
                        (   ( $pad{I1345} = $pos or 1 ) && 
                         ## <constant>
                         ( ( substr( $s, $pos, 1 ) eq '=' )
                             ? ( $pos += 1 or 1 )
                             : 0
                         )
                         ## </constant>
 ||    ( ( $pos = $pad{I1345} ) && 0 ) )
                     &&
                       (
                        (   ( $pad{I1346} = $pos or 1 ) && 
                           ## <alt>
                           (
                               ( $pad{I1347} = $pos or 1 )
                               && (
                               (
                                  (   ( $pad{I1348} = $pos or 1 ) && 
                                   ## <constant>
                                   ( ( substr( $s, $pos, 1 ) eq 'b' )
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   )
                                   ## </constant>
 ||    ( ( $pos = $pad{I1348} ) && 0 ) )
                               &&
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq 'e' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>

                               &&
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq 'g' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>

                               &&
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq 'i' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>

                               &&
                                  (   ( $pad{I1349} = $pos or 1 ) && 
                                   ## <constant>
                                   ( ( substr( $s, $pos, 1 ) eq 'n' )
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   )
                                   ## </constant>
 ||    ( ( $pos = $pad{I1349} ) && 0 ) )
                               &&
                                  (   ( $pad{I1350} = $pos or 1 ) && 

                                   ## <metasyntax>
                                   do {
                                        my $prior = $::_V6_PRIOR_;
                                        my $match = 
                                               $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior;
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   }
                                   ## </metasyntax>
 ||    ( ( $pos = $pad{I1350} ) && 0 ) )
                               &&
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq 'E' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>

                               &&
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq 'N' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>

                               &&
                                  (   ( $pad{I1351} = $pos or 1 ) && 
                                   ## <constant>
                                   ( ( substr( $s, $pos, 1 ) eq 'D' )
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   )
                                   ## </constant>
 ||    ( ( $pos = $pad{I1351} ) && 0 ) )
                               &&
                                 do { while (
                                  (   ( $pad{I1352} = $pos or 1 ) && 
                                     ## <perl5>
                                     ( ( substr( $s, $pos ) =~ m/^((?!\n\r?|\r\n?).)/ )
                                         ? ( $pos += length( $1 ) or 1 )
                                         : 0
                                     )
                                     ## </perl5>
 ||    ( ( $pos = $pad{I1352} ) && 0 ) )) {}; $bool = 1 }
                               &&
                                 do { while (
                                  (   ( $pad{I1353} = $pos or 1 ) && 
                                     ( substr( $s, $pos++, 1 ) ne '' ) ||    ( ( $pos = $pad{I1353} ) && 0 ) )) {}; $bool = 1 }
                               )
                               )
                             || (
                               ( ( $bool = 1 ) && ( $pos = $pad{I1347} ) or 1 )
                               &&                                (
                                  (   ( $pad{I1354} = $pos or 1 ) && 
                                   ## <constant>
                                   ( ( substr( $s, $pos, 1 ) eq 'b' )
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   )
                                   ## </constant>
 ||    ( ( $pos = $pad{I1354} ) && 0 ) )
                               &&
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq 'e' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>

                               &&
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq 'g' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>

                               &&
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq 'i' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>

                               &&
                                  (   ( $pad{I1355} = $pos or 1 ) && 
                                   ## <constant>
                                   ( ( substr( $s, $pos, 1 ) eq 'n' )
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   )
                                   ## </constant>
 ||    ( ( $pos = $pad{I1355} ) && 0 ) )
                               &&
                                  (   ( $pad{I1356} = $pos or 1 ) && 

                                   ## <metasyntax>
                                   do {
                                        my $prior = $::_V6_PRIOR_;
                                        my $match = 
                                               $grammar->pod_begin( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior;
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   }
                                   ## </metasyntax>
 ||    ( ( $pos = $pad{I1356} ) && 0 ) )
                               )
                               )
                             || (
                               ( ( $bool = 1 ) && ( $pos = $pad{I1347} ) or 1 )
                               &&                                (
                                  (   ( $pad{I1357} = $pos or 1 ) && 
                                   ## <constant>
                                   ( ( substr( $s, $pos, 1 ) eq 'k' )
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   )
                                   ## </constant>
 ||    ( ( $pos = $pad{I1357} ) && 0 ) )
                               &&
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq 'w' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>

                               &&
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq 'i' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>

                               &&
                                  (   ( $pad{I1358} = $pos or 1 ) && 
                                   ## <constant>
                                   ( ( substr( $s, $pos, 1 ) eq 'd' )
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   )
                                   ## </constant>
 ||    ( ( $pos = $pad{I1358} ) && 0 ) )
                               &&
                                  (   ( $pad{I1359} = $pos or 1 ) && 

                                   ## <metasyntax>
                                   do {
                                        my $prior = $::_V6_PRIOR_;
                                        my $match = 
                                               $grammar->pod_other( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior;
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   }
                                   ## </metasyntax>
 ||    ( ( $pos = $pad{I1359} ) && 0 ) )
                               )
                               )
                             || (
                               ( ( $bool = 1 ) && ( $pos = $pad{I1347} ) or 1 )
                               &&                                (
                                  (   ( $pad{I1360} = $pos or 1 ) && 
                                   ## <constant>
                                   ( ( substr( $s, $pos, 1 ) eq 'p' )
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   )
                                   ## </constant>
 ||    ( ( $pos = $pad{I1360} ) && 0 ) )
                               &&
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq 'o' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>

                               &&
                                  (   ( $pad{I1361} = $pos or 1 ) && 
                                   ## <constant>
                                   ( ( substr( $s, $pos, 1 ) eq 'd' )
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   )
                                   ## </constant>
 ||    ( ( $pos = $pad{I1361} ) && 0 ) )
                               &&
                                  (   ( $pad{I1362} = $pos or 1 ) && 

                                   ## <metasyntax>
                                   do {
                                        my $prior = $::_V6_PRIOR_;
                                        my $match = 
                                               $grammar->pod_other( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior;
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   }
                                   ## </metasyntax>
 ||    ( ( $pos = $pad{I1362} ) && 0 ) )
                               )
                               )
                             || (
                               ( ( $bool = 1 ) && ( $pos = $pad{I1347} ) or 1 )
                               &&                                (
                                  (   ( $pad{I1363} = $pos or 1 ) && 
                                   ## <constant>
                                   ( ( substr( $s, $pos, 1 ) eq 'f' )
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   )
                                   ## </constant>
 ||    ( ( $pos = $pad{I1363} ) && 0 ) )
                               &&
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq 'o' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>

                               &&
                                  (   ( $pad{I1364} = $pos or 1 ) && 
                                   ## <constant>
                                   ( ( substr( $s, $pos, 1 ) eq 'r' )
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   )
                                   ## </constant>
 ||    ( ( $pos = $pad{I1364} ) && 0 ) )
                               &&
                                  (   ( $pad{I1365} = $pos or 1 ) && 

                                   ## <metasyntax>
                                   do {
                                        my $prior = $::_V6_PRIOR_;
                                        my $match = 
                                               $grammar->pod_other( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior;
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   }
                                   ## </metasyntax>
 ||    ( ( $pos = $pad{I1365} ) && 0 ) )
                               )
                               )
                             || (
                               ( ( $bool = 1 ) && ( $pos = $pad{I1347} ) or 1 )
                               &&                                (
                                  (   ( $pad{I1366} = $pos or 1 ) && 
                                   ## <constant>
                                   ( ( substr( $s, $pos, 1 ) eq 'h' )
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   )
                                   ## </constant>
 ||    ( ( $pos = $pad{I1366} ) && 0 ) )
                               &&
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq 'e' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>

                               &&
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq 'a' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>

                               &&
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq 'd' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>

                               &&
                                  (   ( $pad{I1367} = $pos or 1 ) && 
                                   ## <constant>
                                   ( ( substr( $s, $pos, 1 ) eq '1' )
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   )
                                   ## </constant>
 ||    ( ( $pos = $pad{I1367} ) && 0 ) )
                               &&
                                  (   ( $pad{I1368} = $pos or 1 ) && 

                                   ## <metasyntax>
                                   do {
                                        my $prior = $::_V6_PRIOR_;
                                        my $match = 
                                               $grammar->pod_other( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior;
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   }
                                   ## </metasyntax>
 ||    ( ( $pos = $pad{I1368} ) && 0 ) )
                               )
                             )
                           )
## </alt>
 ||    ( ( $pos = $pad{I1346} ) && 0 ) )
                       || ( $bool = 1 )
                       ) 
                     ) ||    ( ( $pos = $pad{I1344} ) && 0 ) )
                 || ( $bool = 1 )
                 ) 
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1340} ) or 1 )
               &&                 (   ( $pad{I1369} = $pos or 1 ) && 
                 ## <perl5>
                 ( ( substr( $s, $pos ) =~ m/^(\s)/ )
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 )
                 ## </perl5>
 ||    ( ( $pos = $pad{I1369} ) && 0 ) )
             )
           )
## </alt>
 ||    ( ( $pos = $pad{I1339} ) && 0 ) )
       && do { while (
        (   ( $pad{I1339} = $pos or 1 ) && 
           ## <alt>
           (
               ( $pad{I1340} = $pos or 1 )
               && (
               (
                  (   ( $pad{I1341} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '#' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1341} ) && 0 ) )
               &&
                 do { while (
                  (   ( $pad{I1342} = $pos or 1 ) && 
                     ## <perl5>
                     ( ( substr( $s, $pos ) =~ m/^((?!\n\r?|\r\n?).)/ )
                         ? ( $pos += length( $1 ) or 1 )
                         : 0
                     )
                     ## </perl5>
 ||    ( ( $pos = $pad{I1342} ) && 0 ) )) {}; $bool = 1 }
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1340} ) or 1 )
               &&                (
                  (   ( $pad{I1343} = $pos or 1 ) && 
                   ## <perl5>
                   ( ( substr( $s, $pos ) =~ m/^((?:\n\r?|\r\n?))/ )
                       ? ( $pos += length( $1 ) or 1 )
                       : 0
                   )
                   ## </perl5>
 ||    ( ( $pos = $pad{I1343} ) && 0 ) )
               &&
                 (
                  (   ( $pad{I1344} = $pos or 1 ) && 
                     (
                        (   ( $pad{I1345} = $pos or 1 ) && 
                         ## <constant>
                         ( ( substr( $s, $pos, 1 ) eq '=' )
                             ? ( $pos += 1 or 1 )
                             : 0
                         )
                         ## </constant>
 ||    ( ( $pos = $pad{I1345} ) && 0 ) )
                     &&
                       (
                        (   ( $pad{I1346} = $pos or 1 ) && 
                           ## <alt>
                           (
                               ( $pad{I1347} = $pos or 1 )
                               && (
                               (
                                  (   ( $pad{I1348} = $pos or 1 ) && 
                                   ## <constant>
                                   ( ( substr( $s, $pos, 1 ) eq 'b' )
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   )
                                   ## </constant>
 ||    ( ( $pos = $pad{I1348} ) && 0 ) )
                               &&
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq 'e' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>

                               &&
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq 'g' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>

                               &&
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq 'i' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>

                               &&
                                  (   ( $pad{I1349} = $pos or 1 ) && 
                                   ## <constant>
                                   ( ( substr( $s, $pos, 1 ) eq 'n' )
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   )
                                   ## </constant>
 ||    ( ( $pos = $pad{I1349} ) && 0 ) )
                               &&
                                  (   ( $pad{I1350} = $pos or 1 ) && 

                                   ## <metasyntax>
                                   do {
                                        my $prior = $::_V6_PRIOR_;
                                        my $match = 
                                               $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior;
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   }
                                   ## </metasyntax>
 ||    ( ( $pos = $pad{I1350} ) && 0 ) )
                               &&
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq 'E' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>

                               &&
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq 'N' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>

                               &&
                                  (   ( $pad{I1351} = $pos or 1 ) && 
                                   ## <constant>
                                   ( ( substr( $s, $pos, 1 ) eq 'D' )
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   )
                                   ## </constant>
 ||    ( ( $pos = $pad{I1351} ) && 0 ) )
                               &&
                                 do { while (
                                  (   ( $pad{I1352} = $pos or 1 ) && 
                                     ## <perl5>
                                     ( ( substr( $s, $pos ) =~ m/^((?!\n\r?|\r\n?).)/ )
                                         ? ( $pos += length( $1 ) or 1 )
                                         : 0
                                     )
                                     ## </perl5>
 ||    ( ( $pos = $pad{I1352} ) && 0 ) )) {}; $bool = 1 }
                               &&
                                 do { while (
                                  (   ( $pad{I1353} = $pos or 1 ) && 
                                     ( substr( $s, $pos++, 1 ) ne '' ) ||    ( ( $pos = $pad{I1353} ) && 0 ) )) {}; $bool = 1 }
                               )
                               )
                             || (
                               ( ( $bool = 1 ) && ( $pos = $pad{I1347} ) or 1 )
                               &&                                (
                                  (   ( $pad{I1354} = $pos or 1 ) && 
                                   ## <constant>
                                   ( ( substr( $s, $pos, 1 ) eq 'b' )
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   )
                                   ## </constant>
 ||    ( ( $pos = $pad{I1354} ) && 0 ) )
                               &&
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq 'e' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>

                               &&
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq 'g' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>

                               &&
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq 'i' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>

                               &&
                                  (   ( $pad{I1355} = $pos or 1 ) && 
                                   ## <constant>
                                   ( ( substr( $s, $pos, 1 ) eq 'n' )
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   )
                                   ## </constant>
 ||    ( ( $pos = $pad{I1355} ) && 0 ) )
                               &&
                                  (   ( $pad{I1356} = $pos or 1 ) && 

                                   ## <metasyntax>
                                   do {
                                        my $prior = $::_V6_PRIOR_;
                                        my $match = 
                                               $grammar->pod_begin( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior;
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   }
                                   ## </metasyntax>
 ||    ( ( $pos = $pad{I1356} ) && 0 ) )
                               )
                               )
                             || (
                               ( ( $bool = 1 ) && ( $pos = $pad{I1347} ) or 1 )
                               &&                                (
                                  (   ( $pad{I1357} = $pos or 1 ) && 
                                   ## <constant>
                                   ( ( substr( $s, $pos, 1 ) eq 'k' )
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   )
                                   ## </constant>
 ||    ( ( $pos = $pad{I1357} ) && 0 ) )
                               &&
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq 'w' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>

                               &&
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq 'i' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>

                               &&
                                  (   ( $pad{I1358} = $pos or 1 ) && 
                                   ## <constant>
                                   ( ( substr( $s, $pos, 1 ) eq 'd' )
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   )
                                   ## </constant>
 ||    ( ( $pos = $pad{I1358} ) && 0 ) )
                               &&
                                  (   ( $pad{I1359} = $pos or 1 ) && 

                                   ## <metasyntax>
                                   do {
                                        my $prior = $::_V6_PRIOR_;
                                        my $match = 
                                               $grammar->pod_other( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior;
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   }
                                   ## </metasyntax>
 ||    ( ( $pos = $pad{I1359} ) && 0 ) )
                               )
                               )
                             || (
                               ( ( $bool = 1 ) && ( $pos = $pad{I1347} ) or 1 )
                               &&                                (
                                  (   ( $pad{I1360} = $pos or 1 ) && 
                                   ## <constant>
                                   ( ( substr( $s, $pos, 1 ) eq 'p' )
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   )
                                   ## </constant>
 ||    ( ( $pos = $pad{I1360} ) && 0 ) )
                               &&
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq 'o' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>

                               &&
                                  (   ( $pad{I1361} = $pos or 1 ) && 
                                   ## <constant>
                                   ( ( substr( $s, $pos, 1 ) eq 'd' )
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   )
                                   ## </constant>
 ||    ( ( $pos = $pad{I1361} ) && 0 ) )
                               &&
                                  (   ( $pad{I1362} = $pos or 1 ) && 

                                   ## <metasyntax>
                                   do {
                                        my $prior = $::_V6_PRIOR_;
                                        my $match = 
                                               $grammar->pod_other( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior;
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   }
                                   ## </metasyntax>
 ||    ( ( $pos = $pad{I1362} ) && 0 ) )
                               )
                               )
                             || (
                               ( ( $bool = 1 ) && ( $pos = $pad{I1347} ) or 1 )
                               &&                                (
                                  (   ( $pad{I1363} = $pos or 1 ) && 
                                   ## <constant>
                                   ( ( substr( $s, $pos, 1 ) eq 'f' )
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   )
                                   ## </constant>
 ||    ( ( $pos = $pad{I1363} ) && 0 ) )
                               &&
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq 'o' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>

                               &&
                                  (   ( $pad{I1364} = $pos or 1 ) && 
                                   ## <constant>
                                   ( ( substr( $s, $pos, 1 ) eq 'r' )
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   )
                                   ## </constant>
 ||    ( ( $pos = $pad{I1364} ) && 0 ) )
                               &&
                                  (   ( $pad{I1365} = $pos or 1 ) && 

                                   ## <metasyntax>
                                   do {
                                        my $prior = $::_V6_PRIOR_;
                                        my $match = 
                                               $grammar->pod_other( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior;
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   }
                                   ## </metasyntax>
 ||    ( ( $pos = $pad{I1365} ) && 0 ) )
                               )
                               )
                             || (
                               ( ( $bool = 1 ) && ( $pos = $pad{I1347} ) or 1 )
                               &&                                (
                                  (   ( $pad{I1366} = $pos or 1 ) && 
                                   ## <constant>
                                   ( ( substr( $s, $pos, 1 ) eq 'h' )
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   )
                                   ## </constant>
 ||    ( ( $pos = $pad{I1366} ) && 0 ) )
                               &&
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq 'e' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>

                               &&
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq 'a' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>

                               &&
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq 'd' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>

                               &&
                                  (   ( $pad{I1367} = $pos or 1 ) && 
                                   ## <constant>
                                   ( ( substr( $s, $pos, 1 ) eq '1' )
                                       ? ( $pos += 1 or 1 )
                                       : 0
                                   )
                                   ## </constant>
 ||    ( ( $pos = $pad{I1367} ) && 0 ) )
                               &&
                                  (   ( $pad{I1368} = $pos or 1 ) && 

                                   ## <metasyntax>
                                   do {
                                        my $prior = $::_V6_PRIOR_;
                                        my $match = 
                                               $grammar->pod_other( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                        $::_V6_PRIOR_ = $prior;
                                        my $bool = (!$match != 1);
                                        $pos = $match->to if $bool;
                                        $match;
                                   }
                                   ## </metasyntax>
 ||    ( ( $pos = $pad{I1368} ) && 0 ) )
                               )
                             )
                           )
## </alt>
 ||    ( ( $pos = $pad{I1346} ) && 0 ) )
                       || ( $bool = 1 )
                       ) 
                     ) ||    ( ( $pos = $pad{I1344} ) && 0 ) )
                 || ( $bool = 1 )
                 ) 
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1340} ) or 1 )
               &&                 (   ( $pad{I1369} = $pos or 1 ) && 
                 ## <perl5>
                 ( ( substr( $s, $pos ) =~ m/^(\s)/ )
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 )
                 ## </perl5>
 ||    ( ( $pos = $pad{I1369} ) && 0 ) )
             )
           )
## </alt>
 ||    ( ( $pos = $pad{I1339} ) && 0 ) )) {}; $bool = 1 }
       ) ;
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
;## Signature for ws
 # Data::Bind->sub_signature
#  (\&ws, );
;
*ident = ## <global>
do { my $rule; $rule = sub {
  
              $_[3] = $_[2];
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       (
        (   ( $pad{I1370} = $pos or 1 ) && 
           ## <alt>
           (
               ( $pad{I1371} = $pos or 1 )
               && (
                (   ( $pad{I1372} = $pos or 1 ) && 

                 ## <metasyntax>
                 do {
                      my $prior = $::_V6_PRIOR_;
                      my $match = 
                             $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                      $::_V6_PRIOR_ = $prior;
                      my $bool = (!$match != 1);
                      $pos = $match->to if $bool;
                      $match;
                 }
                 ## </metasyntax>
 ||    ( ( $pos = $pad{I1372} ) && 0 ) )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1371} ) or 1 )
               &&                 (   ( $pad{I1373} = $pos or 1 ) && 
                 ## <constant>
                 ( ( substr( $s, $pos, 1 ) eq '_' )
                     ? ( $pos += 1 or 1 )
                     : 0
                 )
                 ## </constant>
 ||    ( ( $pos = $pad{I1373} ) && 0 ) )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1371} ) or 1 )
               &&                 (   ( $pad{I1374} = $pos or 1 ) && 
                 ## <constant>
                 ( ( substr( $s, $pos, 2 ) eq '::' )
                     ? ( $pos += 2 or 1 )
                     : 0
                 )
                 ## </constant>
 ||    ( ( $pos = $pad{I1374} ) && 0 ) )
             )
           )
## </alt>
 ||    ( ( $pos = $pad{I1370} ) && 0 ) )
       && do { while (
        (   ( $pad{I1370} = $pos or 1 ) && 
           ## <alt>
           (
               ( $pad{I1371} = $pos or 1 )
               && (
                (   ( $pad{I1372} = $pos or 1 ) && 

                 ## <metasyntax>
                 do {
                      my $prior = $::_V6_PRIOR_;
                      my $match = 
                             $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                      $::_V6_PRIOR_ = $prior;
                      my $bool = (!$match != 1);
                      $pos = $match->to if $bool;
                      $match;
                 }
                 ## </metasyntax>
 ||    ( ( $pos = $pad{I1372} ) && 0 ) )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1371} ) or 1 )
               &&                 (   ( $pad{I1373} = $pos or 1 ) && 
                 ## <constant>
                 ( ( substr( $s, $pos, 1 ) eq '_' )
                     ? ( $pos += 1 or 1 )
                     : 0
                 )
                 ## </constant>
 ||    ( ( $pos = $pad{I1373} ) && 0 ) )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1371} ) or 1 )
               &&                 (   ( $pad{I1374} = $pos or 1 ) && 
                 ## <constant>
                 ( ( substr( $s, $pos, 2 ) eq '::' )
                     ? ( $pos += 2 or 1 )
                     : 0
                 )
                 ## </constant>
 ||    ( ( $pos = $pad{I1374} ) && 0 ) )
             )
           )
## </alt>
 ||    ( ( $pos = $pad{I1370} ) && 0 ) )) {}; $bool = 1 }
       ) ;
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
;## Signature for ident
 # Data::Bind->sub_signature
#  (\&ident, );
;
*alnum = ## <global>
do { my $rule; $rule = sub {
  
              $_[3] = $_[2];
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
        (   ( $pad{I1375} = $pos or 1 ) && 
         ## <perl5>
         ( ( substr( $s, $pos ) =~ m/^((?:(?=[0-9a-zA-Z]))\X)/ )
             ? ( $pos += length( $1 ) or 1 )
             : 0
         )
         ## </perl5>
 ||    ( ( $pos = $pad{I1375} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
;## Signature for alnum
 # Data::Bind->sub_signature
#  (\&alnum, );
;
*alpha = ## <global>
do { my $rule; $rule = sub {
  
              $_[3] = $_[2];
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
        (   ( $pad{I1376} = $pos or 1 ) && 
         ## <perl5>
         ( ( substr( $s, $pos ) =~ m/^((?:(?=[a-zA-Z]))\X)/ )
             ? ( $pos += length( $1 ) or 1 )
             : 0
         )
         ## </perl5>
 ||    ( ( $pos = $pad{I1376} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
;## Signature for alpha
 # Data::Bind->sub_signature
#  (\&alpha, );
;
*digit = ## <global>
do { my $rule; $rule = sub {
  
              $_[3] = $_[2];
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
        (   ( $pad{I1377} = $pos or 1 ) && 
         ## <perl5>
         ( ( substr( $s, $pos ) =~ m/^((?:(?=[0-9]))\X)/ )
             ? ( $pos += length( $1 ) or 1 )
             : 0
         )
         ## </perl5>
 ||    ( ( $pos = $pad{I1377} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
;## Signature for digit
 # Data::Bind->sub_signature
#  (\&digit, );
;
*special_char = ## <global>
do { my $rule; $rule = sub {
  
              $_[3] = $_[2];
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       ## <alt>
       (
           ( $pad{I1378} = $pos or 1 )
           && (
           (
              (   ( $pad{I1379} = $pos or 1 ) && 
               do{
                   my $hash = do {
                     my $bool = 1;
                     my $from = $pos;
                     my @match;
                     my %named;
                     $bool = 0 unless
                       ## <alt>
                       (
                           ( $pad{I1380} = $pos or 1 )
                           && (
                            (   ( $pad{I1381} = $pos or 1 ) && 
                             ## <constant>
                             ( ( substr( $s, $pos, 1 ) eq 'c' )
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             )
                             ## </constant>
 ||    ( ( $pos = $pad{I1381} ) && 0 ) )
                           )
                         || (
                           ( ( $bool = 1 ) && ( $pos = $pad{I1380} ) or 1 )
                           &&                             (   ( $pad{I1382} = $pos or 1 ) && 
                             ## <constant>
                             ( ( substr( $s, $pos, 1 ) eq 'C' )
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             )
                             ## </constant>
 ||    ( ( $pos = $pad{I1382} ) && 0 ) )
                         )
                       )
## </alt>
;
                     { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                   };
                   my $bool = ${$hash->{'bool'}};
                   $match[ 0 ] = Pugs::Runtime::Match->new( $hash );
                   $bool;
               } ||    ( ( $pos = $pad{I1379} ) && 0 ) )
           &&
              (   ( $pad{I1383} = $pos or 1 ) && 
               ## <constant>
               ( ( substr( $s, $pos, 1 ) eq '[' )
                   ? ( $pos += 1 or 1 )
                   : 0
               )
               ## </constant>
 ||    ( ( $pos = $pad{I1383} ) && 0 ) )
           &&
              (   ( $pad{I1384} = $pos or 1 ) && 
               do{
                   my $hash = do {
                     my $bool = 1;
                     my $from = $pos;
                     my @match;
                     my %named;
                     $bool = 0 unless
                       (
                        (   ( $pad{I1385} = $pos or 1 ) && 
                           ## <alt>
                           (
                               ( $pad{I1386} = $pos or 1 )
                               && (
                               do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                                           $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { push @{$named{'alnum'}}, $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            }
                               )
                             || (
                               ( ( $bool = 1 ) && ( $pos = $pad{I1386} ) or 1 )
                               &&                                ## <perl5>
                               ( ( substr( $s, $pos ) =~ m/^(\s)/ )
                                   ? ( $pos += length( $1 ) or 1 )
                                   : 0
                               )
                               ## </perl5>

                               )
                             || (
                               ( ( $bool = 1 ) && ( $pos = $pad{I1386} ) or 1 )
                               &&                                 (   ( $pad{I1387} = $pos or 1 ) && 
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq ';' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>
 ||    ( ( $pos = $pad{I1387} ) && 0 ) )
                               )
                             || (
                               ( ( $bool = 1 ) && ( $pos = $pad{I1386} ) or 1 )
                               &&                                 (   ( $pad{I1388} = $pos or 1 ) && 
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq '(' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>
 ||    ( ( $pos = $pad{I1388} ) && 0 ) )
                               )
                             || (
                               ( ( $bool = 1 ) && ( $pos = $pad{I1386} ) or 1 )
                               &&                                 (   ( $pad{I1389} = $pos or 1 ) && 
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq ')' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>
 ||    ( ( $pos = $pad{I1389} ) && 0 ) )
                               )
                             || (
                               ( ( $bool = 1 ) && ( $pos = $pad{I1386} ) or 1 )
                               &&                                 (   ( $pad{I1390} = $pos or 1 ) && 
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq '-' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>
 ||    ( ( $pos = $pad{I1390} ) && 0 ) )
                             )
                           )
## </alt>
 ||    ( ( $pos = $pad{I1385} ) && 0 ) )
                       && do { while (
                        (   ( $pad{I1385} = $pos or 1 ) && 
                           ## <alt>
                           (
                               ( $pad{I1386} = $pos or 1 )
                               && (
                               do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                                           $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { push @{$named{'alnum'}}, $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            }
                               )
                             || (
                               ( ( $bool = 1 ) && ( $pos = $pad{I1386} ) or 1 )
                               &&                                ## <perl5>
                               ( ( substr( $s, $pos ) =~ m/^(\s)/ )
                                   ? ( $pos += length( $1 ) or 1 )
                                   : 0
                               )
                               ## </perl5>

                               )
                             || (
                               ( ( $bool = 1 ) && ( $pos = $pad{I1386} ) or 1 )
                               &&                                 (   ( $pad{I1387} = $pos or 1 ) && 
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq ';' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>
 ||    ( ( $pos = $pad{I1387} ) && 0 ) )
                               )
                             || (
                               ( ( $bool = 1 ) && ( $pos = $pad{I1386} ) or 1 )
                               &&                                 (   ( $pad{I1388} = $pos or 1 ) && 
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq '(' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>
 ||    ( ( $pos = $pad{I1388} ) && 0 ) )
                               )
                             || (
                               ( ( $bool = 1 ) && ( $pos = $pad{I1386} ) or 1 )
                               &&                                 (   ( $pad{I1389} = $pos or 1 ) && 
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq ')' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>
 ||    ( ( $pos = $pad{I1389} ) && 0 ) )
                               )
                             || (
                               ( ( $bool = 1 ) && ( $pos = $pad{I1386} ) or 1 )
                               &&                                 (   ( $pad{I1390} = $pos or 1 ) && 
                                 ## <constant>
                                 ( ( substr( $s, $pos, 1 ) eq '-' )
                                     ? ( $pos += 1 or 1 )
                                     : 0
                                 )
                                 ## </constant>
 ||    ( ( $pos = $pad{I1390} ) && 0 ) )
                             )
                           )
## </alt>
 ||    ( ( $pos = $pad{I1385} ) && 0 ) )) {}; $bool = 1 }
                       ) ;
                     { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                   };
                   my $bool = ${$hash->{'bool'}};
                   $match[ 1 ] = Pugs::Runtime::Match->new( $hash );
                   $bool;
               } ||    ( ( $pos = $pad{I1384} ) && 0 ) )
           &&
              (   ( $pad{I1391} = $pos or 1 ) && 
               ## <constant>
               ( ( substr( $s, $pos, 1 ) eq ']' )
                   ? ( $pos += 1 or 1 )
                   : 0
               )
               ## </constant>
 ||    ( ( $pos = $pad{I1391} ) && 0 ) )
           &&
              (   ( $pad{I1392} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'special_char' => '\\' . $::_V6_MATCH_->[0] . $::_V6_MATCH_->[1]});
 } }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1392} ) && 0 ) )
           )
           )
         || (
           ( ( $bool = 1 ) && ( $pos = $pad{I1378} ) or 1 )
           &&            (
              (   ( $pad{I1393} = $pos or 1 ) && 
               ## <alt>
               (
                   ( $pad{I1394} = $pos or 1 )
                   && (
                    (   ( $pad{I1395} = $pos or 1 ) && 
                     ## <constant>
                     ( ( substr( $s, $pos, 1 ) eq 'x' )
                         ? ( $pos += 1 or 1 )
                         : 0
                     )
                     ## </constant>
 ||    ( ( $pos = $pad{I1395} ) && 0 ) )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1394} ) or 1 )
                   &&                     (   ( $pad{I1396} = $pos or 1 ) && 
                     ## <constant>
                     ( ( substr( $s, $pos, 1 ) eq 'X' )
                         ? ( $pos += 1 or 1 )
                         : 0
                     )
                     ## </constant>
 ||    ( ( $pos = $pad{I1396} ) && 0 ) )
                 )
               )
## </alt>
 ||    ( ( $pos = $pad{I1393} ) && 0 ) )
           &&
             (
              (   ( $pad{I1397} = $pos or 1 ) && 
                 do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                             $grammar->xdigit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { push @{$named{'xdigit'}}, $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1397} ) && 0 ) )
             && do { while (
              (   ( $pad{I1397} = $pos or 1 ) && 
                 do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                             $grammar->xdigit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { push @{$named{'xdigit'}}, $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1397} ) && 0 ) )) {}; $bool = 1 }
             ) 
           &&
              (   ( $pad{I1398} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'special_char' => '\\' . $::_V6_MATCH_});
 } }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1398} ) && 0 ) )
           )
           )
         || (
           ( ( $bool = 1 ) && ( $pos = $pad{I1378} ) or 1 )
           &&            (
              (   ( $pad{I1399} = $pos or 1 ) && 
               do{
                   my $hash = do {
                     my $bool = 1;
                     my $from = $pos;
                     my @match;
                     my %named;
                     $bool = 0 unless
                       ## <alt>
                       (
                           ( $pad{I1400} = $pos or 1 )
                           && (
                            (   ( $pad{I1401} = $pos or 1 ) && 
                             ## <constant>
                             ( ( substr( $s, $pos, 1 ) eq 'x' )
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             )
                             ## </constant>
 ||    ( ( $pos = $pad{I1401} ) && 0 ) )
                           )
                         || (
                           ( ( $bool = 1 ) && ( $pos = $pad{I1400} ) or 1 )
                           &&                             (   ( $pad{I1402} = $pos or 1 ) && 
                             ## <constant>
                             ( ( substr( $s, $pos, 1 ) eq 'X' )
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             )
                             ## </constant>
 ||    ( ( $pos = $pad{I1402} ) && 0 ) )
                         )
                       )
## </alt>
;
                     { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                   };
                   my $bool = ${$hash->{'bool'}};
                   $match[ 0 ] = Pugs::Runtime::Match->new( $hash );
                   $bool;
               } ||    ( ( $pos = $pad{I1399} ) && 0 ) )
           &&
              (   ( $pad{I1403} = $pos or 1 ) && 
               ## <constant>
               ( ( substr( $s, $pos, 1 ) eq '[' )
                   ? ( $pos += 1 or 1 )
                   : 0
               )
               ## </constant>
 ||    ( ( $pos = $pad{I1403} ) && 0 ) )
           &&
              (   ( $pad{I1404} = $pos or 1 ) && 
               do{
                   my $hash = do {
                     my $bool = 1;
                     my $from = $pos;
                     my @match;
                     my %named;
                     $bool = 0 unless
                       (
                        (   ( $pad{I1405} = $pos or 1 ) && 
                           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                                       $grammar->xdigit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { push @{$named{'xdigit'}}, $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1405} ) && 0 ) )
                       && do { while (
                        (   ( $pad{I1405} = $pos or 1 ) && 
                           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                                       $grammar->xdigit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { push @{$named{'xdigit'}}, $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1405} ) && 0 ) )) {}; $bool = 1 }
                       ) ;
                     { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                   };
                   my $bool = ${$hash->{'bool'}};
                   $match[ 1 ] = Pugs::Runtime::Match->new( $hash );
                   $bool;
               } ||    ( ( $pos = $pad{I1404} ) && 0 ) )
           &&
              (   ( $pad{I1406} = $pos or 1 ) && 
               ## <constant>
               ( ( substr( $s, $pos, 1 ) eq ']' )
                   ? ( $pos += 1 or 1 )
                   : 0
               )
               ## </constant>
 ||    ( ( $pos = $pad{I1406} ) && 0 ) )
           &&
              (   ( $pad{I1407} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'special_char' => '\\' . $::_V6_MATCH_->[0] . $::_V6_MATCH_->[1]});
 } }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1407} ) && 0 ) )
           )
           )
         || (
           ( ( $bool = 1 ) && ( $pos = $pad{I1378} ) or 1 )
           &&            (
              (   ( $pad{I1408} = $pos or 1 ) && 
               ## <alt>
               (
                   ( $pad{I1409} = $pos or 1 )
                   && (
                    (   ( $pad{I1410} = $pos or 1 ) && 
                     ## <constant>
                     ( ( substr( $s, $pos, 1 ) eq 'o' )
                         ? ( $pos += 1 or 1 )
                         : 0
                     )
                     ## </constant>
 ||    ( ( $pos = $pad{I1410} ) && 0 ) )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1409} ) or 1 )
                   &&                     (   ( $pad{I1411} = $pos or 1 ) && 
                     ## <constant>
                     ( ( substr( $s, $pos, 1 ) eq 'O' )
                         ? ( $pos += 1 or 1 )
                         : 0
                     )
                     ## </constant>
 ||    ( ( $pos = $pad{I1411} ) && 0 ) )
                 )
               )
## </alt>
 ||    ( ( $pos = $pad{I1408} ) && 0 ) )
           &&
             (
              (   ( $pad{I1412} = $pos or 1 ) && 
                 ## <perl5>
                 ( ( substr( $s, $pos ) =~ m/^(\d)/ )
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 )
                 ## </perl5>
 ||    ( ( $pos = $pad{I1412} ) && 0 ) )
             && do { while (
              (   ( $pad{I1412} = $pos or 1 ) && 
                 ## <perl5>
                 ( ( substr( $s, $pos ) =~ m/^(\d)/ )
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 )
                 ## </perl5>
 ||    ( ( $pos = $pad{I1412} ) && 0 ) )) {}; $bool = 1 }
             ) 
           &&
              (   ( $pad{I1413} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'special_char' => '\\' . $::_V6_MATCH_});
 } }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1413} ) && 0 ) )
           )
           )
         || (
           ( ( $bool = 1 ) && ( $pos = $pad{I1378} ) or 1 )
           &&            (
              (   ( $pad{I1414} = $pos or 1 ) && 
               do{
                   my $hash = do {
                     my $bool = 1;
                     my $from = $pos;
                     my @match;
                     my %named;
                     $bool = 0 unless
                       ## <alt>
                       (
                           ( $pad{I1415} = $pos or 1 )
                           && (
                            (   ( $pad{I1416} = $pos or 1 ) && 
                             ## <constant>
                             ( ( substr( $s, $pos, 1 ) eq 'o' )
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             )
                             ## </constant>
 ||    ( ( $pos = $pad{I1416} ) && 0 ) )
                           )
                         || (
                           ( ( $bool = 1 ) && ( $pos = $pad{I1415} ) or 1 )
                           &&                             (   ( $pad{I1417} = $pos or 1 ) && 
                             ## <constant>
                             ( ( substr( $s, $pos, 1 ) eq 'O' )
                                 ? ( $pos += 1 or 1 )
                                 : 0
                             )
                             ## </constant>
 ||    ( ( $pos = $pad{I1417} ) && 0 ) )
                         )
                       )
## </alt>
;
                     { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                   };
                   my $bool = ${$hash->{'bool'}};
                   $match[ 0 ] = Pugs::Runtime::Match->new( $hash );
                   $bool;
               } ||    ( ( $pos = $pad{I1414} ) && 0 ) )
           &&
              (   ( $pad{I1418} = $pos or 1 ) && 
               ## <constant>
               ( ( substr( $s, $pos, 1 ) eq '[' )
                   ? ( $pos += 1 or 1 )
                   : 0
               )
               ## </constant>
 ||    ( ( $pos = $pad{I1418} ) && 0 ) )
           &&
              (   ( $pad{I1419} = $pos or 1 ) && 
               do{
                   my $hash = do {
                     my $bool = 1;
                     my $from = $pos;
                     my @match;
                     my %named;
                     $bool = 0 unless
                       (
                        (   ( $pad{I1420} = $pos or 1 ) && 
                           ## <perl5>
                           ( ( substr( $s, $pos ) =~ m/^(\d)/ )
                               ? ( $pos += length( $1 ) or 1 )
                               : 0
                           )
                           ## </perl5>
 ||    ( ( $pos = $pad{I1420} ) && 0 ) )
                       && do { while (
                        (   ( $pad{I1420} = $pos or 1 ) && 
                           ## <perl5>
                           ( ( substr( $s, $pos ) =~ m/^(\d)/ )
                               ? ( $pos += length( $1 ) or 1 )
                               : 0
                           )
                           ## </perl5>
 ||    ( ( $pos = $pad{I1420} ) && 0 ) )) {}; $bool = 1 }
                       ) ;
                     { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                   };
                   my $bool = ${$hash->{'bool'}};
                   $match[ 1 ] = Pugs::Runtime::Match->new( $hash );
                   $bool;
               } ||    ( ( $pos = $pad{I1419} ) && 0 ) )
           &&
              (   ( $pad{I1421} = $pos or 1 ) && 
               ## <constant>
               ( ( substr( $s, $pos, 1 ) eq ']' )
                   ? ( $pos += 1 or 1 )
                   : 0
               )
               ## </constant>
 ||    ( ( $pos = $pad{I1421} ) && 0 ) )
           &&
              (   ( $pad{I1422} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'special_char' => '\\' . $::_V6_MATCH_->[0] . $::_V6_MATCH_->[1]});
 } }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1422} ) && 0 ) )
           )
           )
         || (
           ( ( $bool = 1 ) && ( $pos = $pad{I1378} ) or 1 )
           &&            (
              (   ( $pad{I1423} = $pos or 1 ) && 
               ( substr( $s, $pos++, 1 ) ne '' ) ||    ( ( $pos = $pad{I1423} ) && 0 ) )
           &&
              (   ( $pad{I1424} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'special_char' => '\\' . $::_V6_MATCH_});
 } }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1424} ) && 0 ) )
           )
         )
       )
## </alt>
;
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
;## Signature for special_char
 # Data::Bind->sub_signature
#  (\&special_char, );
;
*literal = ## <global>
do { my $rule; $rule = sub {
  
              $_[3] = $_[2];
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       do { while (
        (   ( $pad{I1425} = $pos or 1 ) && 
           ## <alt>
           (
               ( $pad{I1426} = $pos or 1 )
               && (
               (
                  (   ( $pad{I1427} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '\\' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1427} ) && 0 ) )
               &&
                  (   ( $pad{I1428} = $pos or 1 ) && 
                   do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                               $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { push @{$named{'special_char'}}, $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1428} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1426} ) or 1 )
               &&                 (   ( $pad{I1429} = $pos or 1 ) && 
                 ## <perl5>
                 ( ( substr( $s, $pos ) =~ m/^((?:(?![\']))\X)/ )
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 )
                 ## </perl5>
 ||    ( ( $pos = $pad{I1429} ) && 0 ) )
             )
           )
## </alt>
 ||    ( ( $pos = $pad{I1425} ) && 0 ) )) {}; $bool = 1 };
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
;## Signature for literal
 # Data::Bind->sub_signature
#  (\&literal, );
;
*double_quoted = ## <global>
do { my $rule; $rule = sub {
  
              $_[3] = $_[2];
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       do { while (
        (   ( $pad{I1430} = $pos or 1 ) && 
           ## <alt>
           (
               ( $pad{I1431} = $pos or 1 )
               && (
               (
                  (   ( $pad{I1432} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '\\' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1432} ) && 0 ) )
               &&
                  (   ( $pad{I1433} = $pos or 1 ) && 
                   do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                               $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { push @{$named{'special_char'}}, $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1433} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1431} ) or 1 )
               &&                 (   ( $pad{I1434} = $pos or 1 ) && 
                 do{
                my $match = 
          do {
            our $I1435;
            our $I1435_sizes;
            unless ( $I1435 ) {
                my $hash = \%Pugs::Grammar::Rule::variables;
                my %sizes = map { length($_) => 1 } keys %$hash;
                $I1435_sizes = [ sort { $b <=> $a } keys %sizes ];
                $I1435 = $hash;
            }
            my $match = 0;
            my $key;
            for ( @$I1435_sizes ) {
                $key = ( $pos <= length( $s )
                            ? substr( $s, $pos, $_ )
                            : '' );
                if ( exists $I1435->{$key} ) {
                    #$named{KEY} = $key;
                    #$::_V6_MATCH_ = $m;
                    #print "m: ", Dumper( $::_V6_MATCH_->data )
                    #    if ( $key eq 'until' );
                    $match = Pugs::Runtime::Regex::preprocess_hash( $I1435, $key )->( $s, $grammar, { p => ( $pos + $_ ), positionals => [ ], args => { KEY => $key } }, undef );
                    last if $match;
                }
            }
            if ( $match ) {
                $pos = $match->to;
                #print "match: $key at $pos = ", Dumper( $match->data );
                $bool = 1;
            }; # else { $bool = 0 }
            $match;
          };
                if ( $match ) { push @{$named{'Pugs::Grammar::Rule::variables'}}, $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1434} ) && 0 ) )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1431} ) or 1 )
               &&                 (   ( $pad{I1436} = $pos or 1 ) && 
                 ## <perl5>
                 ( ( substr( $s, $pos ) =~ m/^((?:(?![\"]))\X)/ )
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 )
                 ## </perl5>
 ||    ( ( $pos = $pad{I1436} ) && 0 ) )
             )
           )
## </alt>
 ||    ( ( $pos = $pad{I1430} ) && 0 ) )) {}; $bool = 1 };
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
;## Signature for double_quoted
 # Data::Bind->sub_signature
#  (\&double_quoted, );
;
*metasyntax = ## <global>
do { my $rule; $rule = sub {
  
              $_[3] = $_[2];
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       (
        (   ( $pad{I1437} = $pos or 1 ) && 
           ## <alt>
           (
               ( $pad{I1438} = $pos or 1 )
               && (
               (
                  (   ( $pad{I1439} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '\\' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1439} ) && 0 ) )
               &&
                  (   ( $pad{I1440} = $pos or 1 ) && 
                   do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                               $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { push @{$named{'special_char'}}, $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1440} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1438} ) or 1 )
               &&                (
                  (   ( $pad{I1441} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq chr(39) )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1441} ) && 0 ) )
               &&
                  (   ( $pad{I1442} = $pos or 1 ) && 

                   ## <metasyntax>
                   do {
                        my $prior = $::_V6_PRIOR_;
                        my $match = 
                               $grammar->literal( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior;
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   }
                   ## </metasyntax>
 ||    ( ( $pos = $pad{I1442} ) && 0 ) )
               &&
                  (   ( $pad{I1443} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq chr(39) )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1443} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1438} ) or 1 )
               &&                (
                  (   ( $pad{I1444} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '"' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1444} ) && 0 ) )
               &&
                  (   ( $pad{I1445} = $pos or 1 ) && 

                   ## <metasyntax>
                   do {
                        my $prior = $::_V6_PRIOR_;
                        my $match = 
                               $grammar->double_quoted( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior;
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   }
                   ## </metasyntax>
 ||    ( ( $pos = $pad{I1445} ) && 0 ) )
               &&
                  (   ( $pad{I1446} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '"' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1446} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1438} ) or 1 )
               &&                (
                  (   ( $pad{I1447} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '{' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1447} ) && 0 ) )
               &&
                  (   ( $pad{I1448} = $pos or 1 ) && 

                   ## <metasyntax>
                   do {
                        my $prior = $::_V6_PRIOR_;
                        my $match = 
                               $grammar->string_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior;
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   }
                   ## </metasyntax>
 ||    ( ( $pos = $pad{I1448} ) && 0 ) )
               &&
                  (   ( $pad{I1449} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '}' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1449} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1438} ) or 1 )
               &&                (
                  (   ( $pad{I1450} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '<' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1450} ) && 0 ) )
               &&
                  (   ( $pad{I1451} = $pos or 1 ) && 

                   ## <metasyntax>
                   do {
                        my $prior = $::_V6_PRIOR_;
                        my $match = 
                               $grammar->metasyntax( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior;
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   }
                   ## </metasyntax>
 ||    ( ( $pos = $pad{I1451} ) && 0 ) )
               &&
                  (   ( $pad{I1452} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '>' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1452} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1438} ) or 1 )
               &&                 (   ( $pad{I1453} = $pos or 1 ) && 
                 ## <perl5>
                 ( ( substr( $s, $pos ) =~ m/^((?:(?![\>]))\X)/ )
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 )
                 ## </perl5>
 ||    ( ( $pos = $pad{I1453} ) && 0 ) )
             )
           )
## </alt>
 ||    ( ( $pos = $pad{I1437} ) && 0 ) )
       && do { while (
        (   ( $pad{I1437} = $pos or 1 ) && 
           ## <alt>
           (
               ( $pad{I1438} = $pos or 1 )
               && (
               (
                  (   ( $pad{I1439} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '\\' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1439} ) && 0 ) )
               &&
                  (   ( $pad{I1440} = $pos or 1 ) && 
                   do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                               $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { push @{$named{'special_char'}}, $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1440} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1438} ) or 1 )
               &&                (
                  (   ( $pad{I1441} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq chr(39) )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1441} ) && 0 ) )
               &&
                  (   ( $pad{I1442} = $pos or 1 ) && 

                   ## <metasyntax>
                   do {
                        my $prior = $::_V6_PRIOR_;
                        my $match = 
                               $grammar->literal( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior;
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   }
                   ## </metasyntax>
 ||    ( ( $pos = $pad{I1442} ) && 0 ) )
               &&
                  (   ( $pad{I1443} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq chr(39) )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1443} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1438} ) or 1 )
               &&                (
                  (   ( $pad{I1444} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '"' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1444} ) && 0 ) )
               &&
                  (   ( $pad{I1445} = $pos or 1 ) && 

                   ## <metasyntax>
                   do {
                        my $prior = $::_V6_PRIOR_;
                        my $match = 
                               $grammar->double_quoted( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior;
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   }
                   ## </metasyntax>
 ||    ( ( $pos = $pad{I1445} ) && 0 ) )
               &&
                  (   ( $pad{I1446} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '"' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1446} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1438} ) or 1 )
               &&                (
                  (   ( $pad{I1447} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '{' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1447} ) && 0 ) )
               &&
                  (   ( $pad{I1448} = $pos or 1 ) && 

                   ## <metasyntax>
                   do {
                        my $prior = $::_V6_PRIOR_;
                        my $match = 
                               $grammar->string_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior;
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   }
                   ## </metasyntax>
 ||    ( ( $pos = $pad{I1448} ) && 0 ) )
               &&
                  (   ( $pad{I1449} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '}' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1449} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1438} ) or 1 )
               &&                (
                  (   ( $pad{I1450} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '<' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1450} ) && 0 ) )
               &&
                  (   ( $pad{I1451} = $pos or 1 ) && 

                   ## <metasyntax>
                   do {
                        my $prior = $::_V6_PRIOR_;
                        my $match = 
                               $grammar->metasyntax( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior;
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   }
                   ## </metasyntax>
 ||    ( ( $pos = $pad{I1451} ) && 0 ) )
               &&
                  (   ( $pad{I1452} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '>' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1452} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1438} ) or 1 )
               &&                 (   ( $pad{I1453} = $pos or 1 ) && 
                 ## <perl5>
                 ( ( substr( $s, $pos ) =~ m/^((?:(?![\>]))\X)/ )
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 )
                 ## </perl5>
 ||    ( ( $pos = $pad{I1453} ) && 0 ) )
             )
           )
## </alt>
 ||    ( ( $pos = $pad{I1437} ) && 0 ) )) {}; $bool = 1 }
       ) ;
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
;## Signature for metasyntax
 # Data::Bind->sub_signature
#  (\&metasyntax, );
;
*char_range = ## <global>
do { my $rule; $rule = sub {
  
              $_[3] = $_[2];
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       (
        (   ( $pad{I1454} = $pos or 1 ) && 
           ## <alt>
           (
               ( $pad{I1455} = $pos or 1 )
               && (
               (
                  (   ( $pad{I1456} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '\\' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1456} ) && 0 ) )
               &&
                  (   ( $pad{I1457} = $pos or 1 ) && 
                   do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                               $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { push @{$named{'special_char'}}, $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1457} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1455} ) or 1 )
               &&                 (   ( $pad{I1458} = $pos or 1 ) && 
                 ## <perl5>
                 ( ( substr( $s, $pos ) =~ m/^((?:(?![\]]))\X)/ )
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 )
                 ## </perl5>
 ||    ( ( $pos = $pad{I1458} ) && 0 ) )
             )
           )
## </alt>
 ||    ( ( $pos = $pad{I1454} ) && 0 ) )
       && do { while (
        (   ( $pad{I1454} = $pos or 1 ) && 
           ## <alt>
           (
               ( $pad{I1455} = $pos or 1 )
               && (
               (
                  (   ( $pad{I1456} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '\\' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1456} ) && 0 ) )
               &&
                  (   ( $pad{I1457} = $pos or 1 ) && 
                   do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                               $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { push @{$named{'special_char'}}, $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1457} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1455} ) or 1 )
               &&                 (   ( $pad{I1458} = $pos or 1 ) && 
                 ## <perl5>
                 ( ( substr( $s, $pos ) =~ m/^((?:(?![\]]))\X)/ )
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 )
                 ## </perl5>
 ||    ( ( $pos = $pad{I1458} ) && 0 ) )
             )
           )
## </alt>
 ||    ( ( $pos = $pad{I1454} ) && 0 ) )) {}; $bool = 1 }
       ) ;
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
;## Signature for char_range
 # Data::Bind->sub_signature
#  (\&char_range, );
;
*char_class = ## <global>
do { my $rule; $rule = sub {
  
              $_[3] = $_[2];
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       ## <alt>
       (
           ( $pad{I1459} = $pos or 1 )
           && (
           (
            (   ( $pad{I1460} = $pos or 1 ) && 

               ## <metasyntax>
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match = 
                           $grammar->alpha( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    my $bool = (!$match != 1);
                    $pos = $match->to if $bool;
                    $match;
               }
               ## </metasyntax>
 ||    ( ( $pos = $pad{I1460} ) && 0 ) )
           && do { while (
            (   ( $pad{I1460} = $pos or 1 ) && 

               ## <metasyntax>
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match = 
                           $grammar->alpha( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    my $bool = (!$match != 1);
                    $pos = $match->to if $bool;
                    $match;
               }
               ## </metasyntax>
 ||    ( ( $pos = $pad{I1460} ) && 0 ) )) {}; $bool = 1 }
           ) 
           )
         || (
           ( ( $bool = 1 ) && ( $pos = $pad{I1459} ) or 1 )
           &&            (
              (   ( $pad{I1461} = $pos or 1 ) && 
               ## <constant>
               ( ( substr( $s, $pos, 1 ) eq '[' )
                   ? ( $pos += 1 or 1 )
                   : 0
               )
               ## </constant>
 ||    ( ( $pos = $pad{I1461} ) && 0 ) )
           &&
              (   ( $pad{I1462} = $pos or 1 ) && 

               ## <metasyntax>
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match = 
                           $grammar->char_range( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    my $bool = (!$match != 1);
                    $pos = $match->to if $bool;
                    $match;
               }
               ## </metasyntax>
 ||    ( ( $pos = $pad{I1462} ) && 0 ) )
           &&
              (   ( $pad{I1463} = $pos or 1 ) && 
               ## <constant>
               ( ( substr( $s, $pos, 1 ) eq ']' )
                   ? ( $pos += 1 or 1 )
                   : 0
               )
               ## </constant>
 ||    ( ( $pos = $pad{I1463} ) && 0 ) )
           )
         )
       )
## </alt>
;
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
;## Signature for char_class
 # Data::Bind->sub_signature
#  (\&char_class, );
;
*string_code = ## <global>
do { my $rule; $rule = sub {
  
              $_[3] = $_[2];
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       (
        (   ( $pad{I1464} = $pos or 1 ) && 
           ## <alt>
           (
               ( $pad{I1465} = $pos or 1 )
               && (
               (
                  (   ( $pad{I1466} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '\\' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1466} ) && 0 ) )
               &&
                  (   ( $pad{I1467} = $pos or 1 ) && 
                   do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                               $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { push @{$named{'special_char'}}, $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1467} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1465} ) or 1 )
               &&                (
                  (   ( $pad{I1468} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq chr(39) )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1468} ) && 0 ) )
               &&
                  (   ( $pad{I1469} = $pos or 1 ) && 

                   ## <metasyntax>
                   do {
                        my $prior = $::_V6_PRIOR_;
                        my $match = 
                               $grammar->literal( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior;
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   }
                   ## </metasyntax>
 ||    ( ( $pos = $pad{I1469} ) && 0 ) )
               &&
                  (   ( $pad{I1470} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq chr(39) )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1470} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1465} ) or 1 )
               &&                (
                  (   ( $pad{I1471} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '"' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1471} ) && 0 ) )
               &&
                  (   ( $pad{I1472} = $pos or 1 ) && 

                   ## <metasyntax>
                   do {
                        my $prior = $::_V6_PRIOR_;
                        my $match = 
                               $grammar->double_quoted( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior;
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   }
                   ## </metasyntax>
 ||    ( ( $pos = $pad{I1472} ) && 0 ) )
               &&
                  (   ( $pad{I1473} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '"' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1473} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1465} ) or 1 )
               &&                (
                  (   ( $pad{I1474} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '{' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1474} ) && 0 ) )
               &&
                  (   ( $pad{I1475} = $pos or 1 ) && 
                   ## <alt>
                   (
                       ( $pad{I1476} = $pos or 1 )
                       && (
                        (   ( $pad{I1477} = $pos or 1 ) && 

                         ## <metasyntax>
                         do {
                              my $prior = $::_V6_PRIOR_;
                              my $match = 
                                     $grammar->string_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                              $::_V6_PRIOR_ = $prior;
                              my $bool = (!$match != 1);
                              $pos = $match->to if $bool;
                              $match;
                         }
                         ## </metasyntax>
 ||    ( ( $pos = $pad{I1477} ) && 0 ) )
                       )
                     || (
                       ( ( $bool = 1 ) && ( $pos = $pad{I1476} ) or 1 )
                       &&                         (   ( $pad{I1478} = $pos or 1 ) && 
 1 # null constant
 ||    ( ( $pos = $pad{I1478} ) && 0 ) )
                     )
                   )
## </alt>
 ||    ( ( $pos = $pad{I1475} ) && 0 ) )
               &&
                  (   ( $pad{I1479} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '}' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1479} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1465} ) or 1 )
               &&                (
                  (   ( $pad{I1480} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '(' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1480} ) && 0 ) )
               &&
                  (   ( $pad{I1481} = $pos or 1 ) && 
                   ## <alt>
                   (
                       ( $pad{I1482} = $pos or 1 )
                       && (
                        (   ( $pad{I1483} = $pos or 1 ) && 

                         ## <metasyntax>
                         do {
                              my $prior = $::_V6_PRIOR_;
                              my $match = 
                                     $grammar->string_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                              $::_V6_PRIOR_ = $prior;
                              my $bool = (!$match != 1);
                              $pos = $match->to if $bool;
                              $match;
                         }
                         ## </metasyntax>
 ||    ( ( $pos = $pad{I1483} ) && 0 ) )
                       )
                     || (
                       ( ( $bool = 1 ) && ( $pos = $pad{I1482} ) or 1 )
                       &&                         (   ( $pad{I1484} = $pos or 1 ) && 
 1 # null constant
 ||    ( ( $pos = $pad{I1484} ) && 0 ) )
                     )
                   )
## </alt>
 ||    ( ( $pos = $pad{I1481} ) && 0 ) )
               &&
                  (   ( $pad{I1485} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq ')' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1485} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1465} ) or 1 )
               &&                (
                  (   ( $pad{I1486} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '<' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1486} ) && 0 ) )
               &&
                  (   ( $pad{I1487} = $pos or 1 ) && 
                   ## <alt>
                   (
                       ( $pad{I1488} = $pos or 1 )
                       && (
                        (   ( $pad{I1489} = $pos or 1 ) && 

                         ## <metasyntax>
                         do {
                              my $prior = $::_V6_PRIOR_;
                              my $match = 
                                     $grammar->string_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                              $::_V6_PRIOR_ = $prior;
                              my $bool = (!$match != 1);
                              $pos = $match->to if $bool;
                              $match;
                         }
                         ## </metasyntax>
 ||    ( ( $pos = $pad{I1489} ) && 0 ) )
                       )
                     || (
                       ( ( $bool = 1 ) && ( $pos = $pad{I1488} ) or 1 )
                       &&                         (   ( $pad{I1490} = $pos or 1 ) && 
 1 # null constant
 ||    ( ( $pos = $pad{I1490} ) && 0 ) )
                     )
                   )
## </alt>
 ||    ( ( $pos = $pad{I1487} ) && 0 ) )
               &&
                  (   ( $pad{I1491} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '>' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1491} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1465} ) or 1 )
               &&                (
                  (   ( $pad{I1492} = $pos or 1 ) && 
                   ## <alt>
                   (
                       ( $pad{I1493} = $pos or 1 )
                       && (
                        (   ( $pad{I1494} = $pos or 1 ) && 

                         ## <metasyntax>
                         do {
                              my $prior = $::_V6_PRIOR_;
                              my $match = 
                                     $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                              $::_V6_PRIOR_ = $prior;
                              my $bool = (!$match != 1);
                              $pos = $match->to if $bool;
                              $match;
                         }
                         ## </metasyntax>
 ||    ( ( $pos = $pad{I1494} ) && 0 ) )
                       )
                     || (
                       ( ( $bool = 1 ) && ( $pos = $pad{I1493} ) or 1 )
                       &&                         (   ( $pad{I1495} = $pos or 1 ) && 
                         ## <constant>
                         ( ( substr( $s, $pos, 1 ) eq '>' )
                             ? ( $pos += 1 or 1 )
                             : 0
                         )
                         ## </constant>
 ||    ( ( $pos = $pad{I1495} ) && 0 ) )
                       )
                     || (
                       ( ( $bool = 1 ) && ( $pos = $pad{I1493} ) or 1 )
                       &&                         (   ( $pad{I1496} = $pos or 1 ) && 
                         ## <constant>
                         ( ( substr( $s, $pos, 1 ) eq '=' )
                             ? ( $pos += 1 or 1 )
                             : 0
                         )
                         ## </constant>
 ||    ( ( $pos = $pad{I1496} ) && 0 ) )
                       )
                     || (
                       ( ( $bool = 1 ) && ( $pos = $pad{I1493} ) or 1 )
                       &&                         (   ( $pad{I1497} = $pos or 1 ) && 
                         ## <constant>
                         ( ( substr( $s, $pos, 1 ) eq '-' )
                             ? ( $pos += 1 or 1 )
                             : 0
                         )
                         ## </constant>
 ||    ( ( $pos = $pad{I1497} ) && 0 ) )
                     )
                   )
## </alt>
 ||    ( ( $pos = $pad{I1492} ) && 0 ) )
               &&
                  (   ( $pad{I1498} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '>' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1498} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1465} ) or 1 )
               &&                 (   ( $pad{I1499} = $pos or 1 ) && 

                 ## <metasyntax>
                 do {
                      my $prior = $::_V6_PRIOR_;
                      my $match = 
                             $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                      $::_V6_PRIOR_ = $prior;
                      my $bool = (!$match != 1);
                      $pos = $match->to if $bool;
                      $match;
                 }
                 ## </metasyntax>
 ||    ( ( $pos = $pad{I1499} ) && 0 ) )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1465} ) or 1 )
               &&                 (   ( $pad{I1500} = $pos or 1 ) && 
                 ## <perl5>
                 ( ( substr( $s, $pos ) =~ m/^((?:(?![\}\)\>]))\X)/ )
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 )
                 ## </perl5>
 ||    ( ( $pos = $pad{I1500} ) && 0 ) )
             )
           )
## </alt>
 ||    ( ( $pos = $pad{I1464} ) && 0 ) )
       && do { while (
        (   ( $pad{I1464} = $pos or 1 ) && 
           ## <alt>
           (
               ( $pad{I1465} = $pos or 1 )
               && (
               (
                  (   ( $pad{I1466} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '\\' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1466} ) && 0 ) )
               &&
                  (   ( $pad{I1467} = $pos or 1 ) && 
                   do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                               $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { push @{$named{'special_char'}}, $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1467} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1465} ) or 1 )
               &&                (
                  (   ( $pad{I1468} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq chr(39) )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1468} ) && 0 ) )
               &&
                  (   ( $pad{I1469} = $pos or 1 ) && 

                   ## <metasyntax>
                   do {
                        my $prior = $::_V6_PRIOR_;
                        my $match = 
                               $grammar->literal( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior;
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   }
                   ## </metasyntax>
 ||    ( ( $pos = $pad{I1469} ) && 0 ) )
               &&
                  (   ( $pad{I1470} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq chr(39) )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1470} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1465} ) or 1 )
               &&                (
                  (   ( $pad{I1471} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '"' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1471} ) && 0 ) )
               &&
                  (   ( $pad{I1472} = $pos or 1 ) && 

                   ## <metasyntax>
                   do {
                        my $prior = $::_V6_PRIOR_;
                        my $match = 
                               $grammar->double_quoted( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior;
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   }
                   ## </metasyntax>
 ||    ( ( $pos = $pad{I1472} ) && 0 ) )
               &&
                  (   ( $pad{I1473} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '"' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1473} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1465} ) or 1 )
               &&                (
                  (   ( $pad{I1474} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '{' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1474} ) && 0 ) )
               &&
                  (   ( $pad{I1475} = $pos or 1 ) && 
                   ## <alt>
                   (
                       ( $pad{I1476} = $pos or 1 )
                       && (
                        (   ( $pad{I1477} = $pos or 1 ) && 

                         ## <metasyntax>
                         do {
                              my $prior = $::_V6_PRIOR_;
                              my $match = 
                                     $grammar->string_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                              $::_V6_PRIOR_ = $prior;
                              my $bool = (!$match != 1);
                              $pos = $match->to if $bool;
                              $match;
                         }
                         ## </metasyntax>
 ||    ( ( $pos = $pad{I1477} ) && 0 ) )
                       )
                     || (
                       ( ( $bool = 1 ) && ( $pos = $pad{I1476} ) or 1 )
                       &&                         (   ( $pad{I1478} = $pos or 1 ) && 
 1 # null constant
 ||    ( ( $pos = $pad{I1478} ) && 0 ) )
                     )
                   )
## </alt>
 ||    ( ( $pos = $pad{I1475} ) && 0 ) )
               &&
                  (   ( $pad{I1479} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '}' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1479} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1465} ) or 1 )
               &&                (
                  (   ( $pad{I1480} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '(' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1480} ) && 0 ) )
               &&
                  (   ( $pad{I1481} = $pos or 1 ) && 
                   ## <alt>
                   (
                       ( $pad{I1482} = $pos or 1 )
                       && (
                        (   ( $pad{I1483} = $pos or 1 ) && 

                         ## <metasyntax>
                         do {
                              my $prior = $::_V6_PRIOR_;
                              my $match = 
                                     $grammar->string_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                              $::_V6_PRIOR_ = $prior;
                              my $bool = (!$match != 1);
                              $pos = $match->to if $bool;
                              $match;
                         }
                         ## </metasyntax>
 ||    ( ( $pos = $pad{I1483} ) && 0 ) )
                       )
                     || (
                       ( ( $bool = 1 ) && ( $pos = $pad{I1482} ) or 1 )
                       &&                         (   ( $pad{I1484} = $pos or 1 ) && 
 1 # null constant
 ||    ( ( $pos = $pad{I1484} ) && 0 ) )
                     )
                   )
## </alt>
 ||    ( ( $pos = $pad{I1481} ) && 0 ) )
               &&
                  (   ( $pad{I1485} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq ')' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1485} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1465} ) or 1 )
               &&                (
                  (   ( $pad{I1486} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '<' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1486} ) && 0 ) )
               &&
                  (   ( $pad{I1487} = $pos or 1 ) && 
                   ## <alt>
                   (
                       ( $pad{I1488} = $pos or 1 )
                       && (
                        (   ( $pad{I1489} = $pos or 1 ) && 

                         ## <metasyntax>
                         do {
                              my $prior = $::_V6_PRIOR_;
                              my $match = 
                                     $grammar->string_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                              $::_V6_PRIOR_ = $prior;
                              my $bool = (!$match != 1);
                              $pos = $match->to if $bool;
                              $match;
                         }
                         ## </metasyntax>
 ||    ( ( $pos = $pad{I1489} ) && 0 ) )
                       )
                     || (
                       ( ( $bool = 1 ) && ( $pos = $pad{I1488} ) or 1 )
                       &&                         (   ( $pad{I1490} = $pos or 1 ) && 
 1 # null constant
 ||    ( ( $pos = $pad{I1490} ) && 0 ) )
                     )
                   )
## </alt>
 ||    ( ( $pos = $pad{I1487} ) && 0 ) )
               &&
                  (   ( $pad{I1491} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '>' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1491} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1465} ) or 1 )
               &&                (
                  (   ( $pad{I1492} = $pos or 1 ) && 
                   ## <alt>
                   (
                       ( $pad{I1493} = $pos or 1 )
                       && (
                        (   ( $pad{I1494} = $pos or 1 ) && 

                         ## <metasyntax>
                         do {
                              my $prior = $::_V6_PRIOR_;
                              my $match = 
                                     $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                              $::_V6_PRIOR_ = $prior;
                              my $bool = (!$match != 1);
                              $pos = $match->to if $bool;
                              $match;
                         }
                         ## </metasyntax>
 ||    ( ( $pos = $pad{I1494} ) && 0 ) )
                       )
                     || (
                       ( ( $bool = 1 ) && ( $pos = $pad{I1493} ) or 1 )
                       &&                         (   ( $pad{I1495} = $pos or 1 ) && 
                         ## <constant>
                         ( ( substr( $s, $pos, 1 ) eq '>' )
                             ? ( $pos += 1 or 1 )
                             : 0
                         )
                         ## </constant>
 ||    ( ( $pos = $pad{I1495} ) && 0 ) )
                       )
                     || (
                       ( ( $bool = 1 ) && ( $pos = $pad{I1493} ) or 1 )
                       &&                         (   ( $pad{I1496} = $pos or 1 ) && 
                         ## <constant>
                         ( ( substr( $s, $pos, 1 ) eq '=' )
                             ? ( $pos += 1 or 1 )
                             : 0
                         )
                         ## </constant>
 ||    ( ( $pos = $pad{I1496} ) && 0 ) )
                       )
                     || (
                       ( ( $bool = 1 ) && ( $pos = $pad{I1493} ) or 1 )
                       &&                         (   ( $pad{I1497} = $pos or 1 ) && 
                         ## <constant>
                         ( ( substr( $s, $pos, 1 ) eq '-' )
                             ? ( $pos += 1 or 1 )
                             : 0
                         )
                         ## </constant>
 ||    ( ( $pos = $pad{I1497} ) && 0 ) )
                     )
                   )
## </alt>
 ||    ( ( $pos = $pad{I1492} ) && 0 ) )
               &&
                  (   ( $pad{I1498} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '>' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1498} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1465} ) or 1 )
               &&                 (   ( $pad{I1499} = $pos or 1 ) && 

                 ## <metasyntax>
                 do {
                      my $prior = $::_V6_PRIOR_;
                      my $match = 
                             $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                      $::_V6_PRIOR_ = $prior;
                      my $bool = (!$match != 1);
                      $pos = $match->to if $bool;
                      $match;
                 }
                 ## </metasyntax>
 ||    ( ( $pos = $pad{I1499} ) && 0 ) )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1465} ) or 1 )
               &&                 (   ( $pad{I1500} = $pos or 1 ) && 
                 ## <perl5>
                 ( ( substr( $s, $pos ) =~ m/^((?:(?![\}\)\>]))\X)/ )
                     ? ( $pos += length( $1 ) or 1 )
                     : 0
                 )
                 ## </perl5>
 ||    ( ( $pos = $pad{I1500} ) && 0 ) )
             )
           )
## </alt>
 ||    ( ( $pos = $pad{I1464} ) && 0 ) )) {}; $bool = 1 }
       ) ;
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
;## Signature for string_code
 # Data::Bind->sub_signature
#  (\&string_code, );
;
*parsed_code = ## <global>
do { my $rule; $rule = sub {
  
              $_[3] = $_[2];
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       (
          (   ( $pad{I1501} = $pos or 1 ) && 

           ## <metasyntax>
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->string_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                my $bool = (!$match != 1);
                $pos = $match->to if $bool;
                $match;
           }
           ## </metasyntax>
 ||    ( ( $pos = $pad{I1501} ) && 0 ) )
       &&
          (   ( $pad{I1502} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return('{' . $::_V6_MATCH_ . '}');
 } }->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1502} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
;## Signature for parsed_code
 # Data::Bind->sub_signature
#  (\&parsed_code, );
;
*named_capture_body = ## <global>
do { my $rule; $rule = sub {
  
              $_[3] = $_[2];
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       ## <alt>
       (
           ( $pad{I1503} = $pos or 1 )
           && (
           (
              (   ( $pad{I1504} = $pos or 1 ) && 
               ## <constant>
               ( ( substr( $s, $pos, 1 ) eq '(' )
                   ? ( $pos += 1 or 1 )
                   : 0
               )
               ## </constant>
 ||    ( ( $pos = $pad{I1504} ) && 0 ) )
           &&
              (   ( $pad{I1505} = $pos or 1 ) && 
               do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                           $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1505} ) && 0 ) )
           &&
              (   ( $pad{I1506} = $pos or 1 ) && 
               ## <constant>
               ( ( substr( $s, $pos, 1 ) eq ')' )
                   ? ( $pos += 1 or 1 )
                   : 0
               )
               ## </constant>
 ||    ( ( $pos = $pad{I1506} ) && 0 ) )
           &&
              (   ( $pad{I1507} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'capturing_group' => ${ $::_V6_MATCH_->{'rule'}}});
 } }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1507} ) && 0 ) )
           )
           )
         || (
           ( ( $bool = 1 ) && ( $pos = $pad{I1503} ) or 1 )
           &&            (
              (   ( $pad{I1508} = $pos or 1 ) && 
               ## <constant>
               ( ( substr( $s, $pos, 1 ) eq '[' )
                   ? ( $pos += 1 or 1 )
                   : 0
               )
               ## </constant>
 ||    ( ( $pos = $pad{I1508} ) && 0 ) )
           &&
              (   ( $pad{I1509} = $pos or 1 ) && 
               do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                           $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1509} ) && 0 ) )
           &&
              (   ( $pad{I1510} = $pos or 1 ) && 
               ## <constant>
               ( ( substr( $s, $pos, 1 ) eq ']' )
                   ? ( $pos += 1 or 1 )
                   : 0
               )
               ## </constant>
 ||    ( ( $pos = $pad{I1510} ) && 0 ) )
           &&
              (   ( $pad{I1511} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return(${ $::_V6_MATCH_->{'rule'}});
 } }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1511} ) && 0 ) )
           )
           )
         || (
           ( ( $bool = 1 ) && ( $pos = $pad{I1503} ) or 1 )
           &&            (
              (   ( $pad{I1512} = $pos or 1 ) && 
               ## <constant>
               ( ( substr( $s, $pos, 1 ) eq '<' )
                   ? ( $pos += 1 or 1 )
                   : 0
               )
               ## </constant>
 ||    ( ( $pos = $pad{I1512} ) && 0 ) )
           &&
              (   ( $pad{I1513} = $pos or 1 ) && 
               do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                           $grammar->parse_metasyntax( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'parse_metasyntax'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1513} ) && 0 ) )
           &&
              (   ( $pad{I1514} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return(${ $::_V6_MATCH_->{'parse_metasyntax'}});
 } }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1514} ) && 0 ) )
           )
           )
         || (
           ( ( $bool = 1 ) && ( $pos = $pad{I1503} ) or 1 )
           &&            (
              (   ( $pad{I1515} = $pos or 1 ) && 
               ## <constant>
               ( ( substr( $s, $pos, 1 ) eq chr(39) )
                   ? ( $pos += 1 or 1 )
                   : 0
               )
               ## </constant>
 ||    ( ( $pos = $pad{I1515} ) && 0 ) )
           &&
              (   ( $pad{I1516} = $pos or 1 ) && 

               ## <metasyntax>
               do {
                    my $prior = $::_V6_PRIOR_;
                    my $match = 
                           $grammar->literal( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                    $::_V6_PRIOR_ = $prior;
                    my $bool = (!$match != 1);
                    $pos = $match->to if $bool;
                    $match;
               }
               ## </metasyntax>
 ||    ( ( $pos = $pad{I1516} ) && 0 ) )
           &&
              (   ( $pad{I1517} = $pos or 1 ) && 
               ## <constant>
               ( ( substr( $s, $pos, 1 ) eq chr(39) )
                   ? ( $pos += 1 or 1 )
                   : 0
               )
               ## </constant>
 ||    ( ( $pos = $pad{I1517} ) && 0 ) )
           &&
              (   ( $pad{I1518} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'metasyntax' => {'metasyntax' =>  "" . ${$::_V6_MATCH_}}});
 } }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1518} ) && 0 ) )
           )
           )
         || (
           ( ( $bool = 1 ) && ( $pos = $pad{I1503} ) or 1 )
           &&             (   ( $pad{I1519} = $pos or 1 ) && 
             do { 
               local $::_V6_SUCCEED = 1;
               $::_V6_MATCH_ = $m;
               sub { my $_V6_SELF = shift;  { die("invalid alias syntax");
 } }->( $m );
               1;
             } ||    ( ( $pos = $pad{I1519} ) && 0 ) )
         )
       )
## </alt>
;
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
;## Signature for named_capture_body
 # Data::Bind->sub_signature
#  (\&named_capture_body, );
;
*parse_metasyntax = ## <global>
do { my $rule; $rule = sub {
  
              $_[3] = $_[2];
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       (
          (   ( $pad{I1520} = $pos or 1 ) && 
           do{
                my $from = $pos;
                my $bool =                    ## <alt>
                   (
                       ( $pad{I1521} = $pos or 1 )
                       && (
                        (   ( $pad{I1522} = $pos or 1 ) && 
                         ## <constant>
                         ( ( substr( $s, $pos, 1 ) eq '!' )
                             ? ( $pos += 1 or 1 )
                             : 0
                         )
                         ## </constant>
 ||    ( ( $pos = $pad{I1522} ) && 0 ) )
                       )
                     || (
                       ( ( $bool = 1 ) && ( $pos = $pad{I1521} ) or 1 )
                       &&                         (   ( $pad{I1523} = $pos or 1 ) && 
                         ## <constant>
                         ( ( substr( $s, $pos, 1 ) eq '?' )
                             ? ( $pos += 1 or 1 )
                             : 0
                         )
                         ## </constant>
 ||    ( ( $pos = $pad{I1523} ) && 0 ) )
                       )
                     || (
                       ( ( $bool = 1 ) && ( $pos = $pad{I1521} ) or 1 )
                       &&                         (   ( $pad{I1524} = $pos or 1 ) && 
 1 # null constant
 ||    ( ( $pos = $pad{I1524} ) && 0 ) )
                     )
                   )
## </alt>
;
                my $match = Pugs::Runtime::Match->new(
                    { str => \$s, from => \$from, match => [], named => {}, bool => \1, to => \(0+$pos), capture => undef }
                ); $named{'modifier'} = $match;
                $bool
            } ||    ( ( $pos = $pad{I1520} ) && 0 ) )
       &&
          (   ( $pad{I1525} = $pos or 1 ) && 
           ## <alt>
           (
               ( $pad{I1526} = $pos or 1 )
               && (
               (
                  (   ( $pad{I1527} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '{' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1527} ) && 0 ) )
               &&
                  (   ( $pad{I1528} = $pos or 1 ) && 
                   do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                               $grammar->parsed_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'parsed_code'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1528} ) && 0 ) )
               &&
                  (   ( $pad{I1529} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 2 ) eq '}>' )
                       ? ( $pos += 2 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1529} ) && 0 ) )
               &&
                  (   ( $pad{I1530} = $pos or 1 ) && 
                   do { 
                     local $::_V6_SUCCEED = 1;
                     $::_V6_MATCH_ = $m;
                     $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'closure' => {'closure' => ${ $::_V6_MATCH_->{'parsed_code'}}, 'modifier' => ${ $::_V6_MATCH_->{'modifier'}}}});
 } }->( $m ) ); 
                     $bool = $::_V6_SUCCEED;
                     $::_V6_MATCH_ = $m if $bool; 
                     return $m if $bool; 
                   } ||    ( ( $pos = $pad{I1530} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1526} ) or 1 )
               &&                (
                  (   ( $pad{I1531} = $pos or 1 ) && 
                   do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                               $grammar->char_class( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'char_class'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1531} ) && 0 ) )
               &&
                 (
                  (   ( $pad{I1532} = $pos or 1 ) && 
                     do{
                         my $hash = do {
                           my $bool = 1;
                           my $from = $pos;
                           my @match;
                           my %named;
                           $bool = 0 unless
                             (
                                (   ( $pad{I1533} = $pos or 1 ) && 
                                 ## <perl5>
                                 ( ( substr( $s, $pos ) =~ m/^((?:(?=[+-]))\X)/ )
                                     ? ( $pos += length( $1 ) or 1 )
                                     : 0
                                 )
                                 ## </perl5>
 ||    ( ( $pos = $pad{I1533} ) && 0 ) )
                             &&
                                (   ( $pad{I1534} = $pos or 1 ) && 
                                 do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                                             $grammar->char_class( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'char_class'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1534} ) && 0 ) )
                             );
                           { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                         };
                         my $bool = ${$hash->{'bool'}};
                         if ( $bool ) {
                             push @{ $match[ 0 ] }, Pugs::Runtime::Match->new( $hash );
                         }
                         $bool;
                     } ||    ( ( $pos = $pad{I1532} ) && 0 ) )
                 && do { while (
                  (   ( $pad{I1532} = $pos or 1 ) && 
                     do{
                         my $hash = do {
                           my $bool = 1;
                           my $from = $pos;
                           my @match;
                           my %named;
                           $bool = 0 unless
                             (
                                (   ( $pad{I1533} = $pos or 1 ) && 
                                 ## <perl5>
                                 ( ( substr( $s, $pos ) =~ m/^((?:(?=[+-]))\X)/ )
                                     ? ( $pos += length( $1 ) or 1 )
                                     : 0
                                 )
                                 ## </perl5>
 ||    ( ( $pos = $pad{I1533} ) && 0 ) )
                             &&
                                (   ( $pad{I1534} = $pos or 1 ) && 
                                 do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                                             $grammar->char_class( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'char_class'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1534} ) && 0 ) )
                             );
                           { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                         };
                         my $bool = ${$hash->{'bool'}};
                         if ( $bool ) {
                             push @{ $match[ 0 ] }, Pugs::Runtime::Match->new( $hash );
                         }
                         $bool;
                     } ||    ( ( $pos = $pad{I1532} ) && 0 ) )) {}; $bool = 1 }
                 ) 
               &&
                  (   ( $pad{I1535} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '>' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1535} ) && 0 ) )
               &&
                  (   ( $pad{I1536} = $pos or 1 ) && 
                   do { 
                     local $::_V6_SUCCEED = 1;
                     $::_V6_MATCH_ = $m;
                     $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { if(${ $::_V6_MATCH_->{'modifier'}} eq '!') { return({'negate' => {'char_class' => ['+' .  $::_V6_MATCH_->{'char_class'},
@{($::_V6_MATCH_->[0])}]}});
 } 
;
return({'char_class' => ['+' .  $::_V6_MATCH_->{'char_class'},
@{($::_V6_MATCH_->[0])}]});
 } }->( $m ) ); 
                     $bool = $::_V6_SUCCEED;
                     $::_V6_MATCH_ = $m if $bool; 
                     return $m if $bool; 
                   } ||    ( ( $pos = $pad{I1536} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1526} ) or 1 )
               &&                (
                  (   ( $pad{I1537} = $pos or 1 ) && 
                   do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                               $grammar->ident( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'ident'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1537} ) && 0 ) )
               &&
                  (   ( $pad{I1538} = $pos or 1 ) && 
                   ## <alt>
                   (
                       ( $pad{I1539} = $pos or 1 )
                       && (
                       (
                          (   ( $pad{I1540} = $pos or 1 ) && 

                           ## <metasyntax>
                           do {
                                my $prior = $::_V6_PRIOR_;
                                my $match = 
                                       $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                $::_V6_PRIOR_ = $prior;
                                my $bool = (!$match != 1);
                                $pos = $match->to if $bool;
                                $match;
                           }
                           ## </metasyntax>
 ||    ( ( $pos = $pad{I1540} ) && 0 ) )
                       &&
                          (   ( $pad{I1541} = $pos or 1 ) && 
                           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1541} ) && 0 ) )
                       &&
                          (   ( $pad{I1542} = $pos or 1 ) && 
                           ## <constant>
                           ( ( substr( $s, $pos, 1 ) eq '>' )
                               ? ( $pos += 1 or 1 )
                               : 0
                           )
                           ## </constant>
 ||    ( ( $pos = $pad{I1542} ) && 0 ) )
                       &&
                          (   ( $pad{I1543} = $pos or 1 ) && 
                           do { 
                             local $::_V6_SUCCEED = 1;
                             $::_V6_MATCH_ = $m;
                             $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { if((${ $::_V6_MATCH_->{'ident'}} eq 'before' || ${ $::_V6_MATCH_->{'ident'}} eq 'after')) { return({${ $::_V6_MATCH_->{'ident'}} => {'rule' => ${ $::_V6_MATCH_->{'rule'}}, 'modifier' => ${ $::_V6_MATCH_->{'modifier'}}}});
 } 
;
return({'metasyntax' => {'metasyntax' => ${ $::_V6_MATCH_->{'ident'}}, 'rule' => ${ $::_V6_MATCH_->{'rule'}}, 'modifier' => ${ $::_V6_MATCH_->{'modifier'}}}});
 } }->( $m ) ); 
                             $bool = $::_V6_SUCCEED;
                             $::_V6_MATCH_ = $m if $bool; 
                             return $m if $bool; 
                           } ||    ( ( $pos = $pad{I1543} ) && 0 ) )
                       )
                       )
                     || (
                       ( ( $bool = 1 ) && ( $pos = $pad{I1539} ) or 1 )
                       &&                        (
                          (   ( $pad{I1544} = $pos or 1 ) && 
                           ## <constant>
                           ( ( substr( $s, $pos, 1 ) eq ':' )
                               ? ( $pos += 1 or 1 )
                               : 0
                           )
                           ## </constant>
 ||    ( ( $pos = $pad{I1544} ) && 0 ) )
                       &&
                         (
                          (   ( $pad{I1545} = $pos or 1 ) && 

                             ## <metasyntax>
                             do {
                                  my $prior = $::_V6_PRIOR_;
                                  my $match = 
                                         $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                  $::_V6_PRIOR_ = $prior;
                                  my $bool = (!$match != 1);
                                  $pos = $match->to if $bool;
                                  $match;
                             }
                             ## </metasyntax>
 ||    ( ( $pos = $pad{I1545} ) && 0 ) )
                         || ( $bool = 1 )
                         ) 
                       &&
                          (   ( $pad{I1546} = $pos or 1 ) && 
                           do{
                my $from = $pos;
                my $bool =                                    do { while (
                                    (   ( $pad{I1547} = $pos or 1 ) && 
                                       ## <alt>
                                       (
                                           ( $pad{I1548} = $pos or 1 )
                                           && (
                                           (
                                              (   ( $pad{I1549} = $pos or 1 ) && 
                                               ## <constant>
                                               ( ( substr( $s, $pos, 1 ) eq '\\' )
                                                   ? ( $pos += 1 or 1 )
                                                   : 0
                                               )
                                               ## </constant>
 ||    ( ( $pos = $pad{I1549} ) && 0 ) )
                                           &&
                                              (   ( $pad{I1550} = $pos or 1 ) && 
                                               do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                                                           $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { push @{$named{'special_char'}}, $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1550} ) && 0 ) )
                                           )
                                           )
                                         || (
                                           ( ( $bool = 1 ) && ( $pos = $pad{I1548} ) or 1 )
                                           &&                                             (   ( $pad{I1551} = $pos or 1 ) && 
                                             do{
                my $match = 
          do {
            our $I1552;
            our $I1552_sizes;
            unless ( $I1552 ) {
                my $hash = \%Pugs::Grammar::Rule::variables;
                my %sizes = map { length($_) => 1 } keys %$hash;
                $I1552_sizes = [ sort { $b <=> $a } keys %sizes ];
                $I1552 = $hash;
            }
            my $match = 0;
            my $key;
            for ( @$I1552_sizes ) {
                $key = ( $pos <= length( $s )
                            ? substr( $s, $pos, $_ )
                            : '' );
                if ( exists $I1552->{$key} ) {
                    #$named{KEY} = $key;
                    #$::_V6_MATCH_ = $m;
                    #print "m: ", Dumper( $::_V6_MATCH_->data )
                    #    if ( $key eq 'until' );
                    $match = Pugs::Runtime::Regex::preprocess_hash( $I1552, $key )->( $s, $grammar, { p => ( $pos + $_ ), positionals => [ ], args => { KEY => $key } }, undef );
                    last if $match;
                }
            }
            if ( $match ) {
                $pos = $match->to;
                #print "match: $key at $pos = ", Dumper( $match->data );
                $bool = 1;
            }; # else { $bool = 0 }
            $match;
          };
                if ( $match ) { push @{$named{'Pugs::Grammar::Rule::variables'}}, $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1551} ) && 0 ) )
                                           )
                                         || (
                                           ( ( $bool = 1 ) && ( $pos = $pad{I1548} ) or 1 )
                                           &&                                             (   ( $pad{I1553} = $pos or 1 ) && 
                                             ## <perl5>
                                             ( ( substr( $s, $pos ) =~ m/^((?:(?![\>]))\X)/ )
                                                 ? ( $pos += length( $1 ) or 1 )
                                                 : 0
                                             )
                                             ## </perl5>
 ||    ( ( $pos = $pad{I1553} ) && 0 ) )
                                         )
                                       )
## </alt>
 ||    ( ( $pos = $pad{I1547} ) && 0 ) )) {}; $bool = 1 };
                my $match = Pugs::Runtime::Match->new(
                    { str => \$s, from => \$from, match => [], named => {}, bool => \1, to => \(0+$pos), capture => undef }
                ); $named{'str'} = $match;
                $bool
            } ||    ( ( $pos = $pad{I1546} ) && 0 ) )
                       &&
                          (   ( $pad{I1554} = $pos or 1 ) && 
                           ## <constant>
                           ( ( substr( $s, $pos, 1 ) eq '>' )
                               ? ( $pos += 1 or 1 )
                               : 0
                           )
                           ## </constant>
 ||    ( ( $pos = $pad{I1554} ) && 0 ) )
                       &&
                          (   ( $pad{I1555} = $pos or 1 ) && 
                           do { 
                             local $::_V6_SUCCEED = 1;
                             $::_V6_MATCH_ = $m;
                             $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { if((${ $::_V6_MATCH_->{'ident'}} eq 'before' || ${ $::_V6_MATCH_->{'ident'}} eq 'after')) { return({${ $::_V6_MATCH_->{'ident'}} => {'rule' => {'metasyntax' => {'metasyntax' => '\'' . ${ $::_V6_MATCH_->{'str'}} . '\''}}, 'modifier' => ${ $::_V6_MATCH_->{'modifier'}}}});
 } 
;
return({'metasyntax' => {'metasyntax' => ${ $::_V6_MATCH_->{'ident'}}, 'string' => ${ $::_V6_MATCH_->{'str'}}, 'modifier' => ${ $::_V6_MATCH_->{'modifier'}}}});
 } }->( $m ) ); 
                             $bool = $::_V6_SUCCEED;
                             $::_V6_MATCH_ = $m if $bool; 
                             return $m if $bool; 
                           } ||    ( ( $pos = $pad{I1555} ) && 0 ) )
                       )
                       )
                     || (
                       ( ( $bool = 1 ) && ( $pos = $pad{I1539} ) or 1 )
                       &&                        (
                          (   ( $pad{I1556} = $pos or 1 ) && 
                           ## <constant>
                           ( ( substr( $s, $pos, 1 ) eq '(' )
                               ? ( $pos += 1 or 1 )
                               : 0
                           )
                           ## </constant>
 ||    ( ( $pos = $pad{I1556} ) && 0 ) )
                       &&
                          (   ( $pad{I1557} = $pos or 1 ) && 
                           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                                       $grammar->parsed_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'parsed_code'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1557} ) && 0 ) )
                       &&
                          (   ( $pad{I1558} = $pos or 1 ) && 
                           ## <constant>
                           ( ( substr( $s, $pos, 1 ) eq ')' )
                               ? ( $pos += 1 or 1 )
                               : 0
                           )
                           ## </constant>
 ||    ( ( $pos = $pad{I1558} ) && 0 ) )
                       &&
                          (   ( $pad{I1559} = $pos or 1 ) && 
                           ## <constant>
                           ( ( substr( $s, $pos, 1 ) eq '>' )
                               ? ( $pos += 1 or 1 )
                               : 0
                           )
                           ## </constant>
 ||    ( ( $pos = $pad{I1559} ) && 0 ) )
                       &&
                          (   ( $pad{I1560} = $pos or 1 ) && 
                           do { 
                             local $::_V6_SUCCEED = 1;
                             $::_V6_MATCH_ = $m;
                             $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'call' => {'method' => ${ $::_V6_MATCH_->{'ident'}}, 'params' => ${ $::_V6_MATCH_->{'parsed_code'}}, 'modifier' => ${ $::_V6_MATCH_->{'modifier'}}}});
 } }->( $m ) ); 
                             $bool = $::_V6_SUCCEED;
                             $::_V6_MATCH_ = $m if $bool; 
                             return $m if $bool; 
                           } ||    ( ( $pos = $pad{I1560} ) && 0 ) )
                       )
                     )
                   )
## </alt>
 ||    ( ( $pos = $pad{I1538} ) && 0 ) )
               )
               )
             || (
               ( ( $bool = 1 ) && ( $pos = $pad{I1526} ) or 1 )
               &&                (
                  (   ( $pad{I1561} = $pos or 1 ) && 
                   do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                               $grammar->metasyntax( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'metasyntax'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1561} ) && 0 ) )
               &&
                  (   ( $pad{I1562} = $pos or 1 ) && 
                   ## <constant>
                   ( ( substr( $s, $pos, 1 ) eq '>' )
                       ? ( $pos += 1 or 1 )
                       : 0
                   )
                   ## </constant>
 ||    ( ( $pos = $pad{I1562} ) && 0 ) )
               &&
                  (   ( $pad{I1563} = $pos or 1 ) && 
                   do { 
                     local $::_V6_SUCCEED = 1;
                     $::_V6_MATCH_ = $m;
                     $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'metasyntax' => {'metasyntax' =>  "" . ${ $::_V6_MATCH_->{'metasyntax'}}, 'modifier' => ${ $::_V6_MATCH_->{'modifier'}}}});
 } }->( $m ) ); 
                     $bool = $::_V6_SUCCEED;
                     $::_V6_MATCH_ = $m if $bool; 
                     return $m if $bool; 
                   } ||    ( ( $pos = $pad{I1563} ) && 0 ) )
               )
             )
           )
## </alt>
 ||    ( ( $pos = $pad{I1525} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
;## Signature for parse_metasyntax
 # Data::Bind->sub_signature
#  (\&parse_metasyntax, );
;
%variables = ('$<' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       (
          (   ( $pad{I1564} = $pos or 1 ) && 
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->ident( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'ident'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1564} ) && 0 ) )
       &&
          (   ( $pad{I1565} = $pos or 1 ) && 
           ## <constant>
           ( ( substr( $s, $pos, 1 ) eq '>' )
               ? ( $pos += 1 or 1 )
               : 0
           )
           ## </constant>
 ||    ( ( $pos = $pad{I1565} ) && 0 ) )
       &&
          (   ( $pad{I1566} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'match_variable' => '$' .  $::_V6_MATCH_->{'ident'}});
 } }->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1566} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
,
'$' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       ## <alt>
       (
           ( $pad{I1567} = $pos or 1 )
           && (
           (
             (
              (   ( $pad{I1568} = $pos or 1 ) && 

                 ## <metasyntax>
                 do {
                      my $prior = $::_V6_PRIOR_;
                      my $match = 
                             $grammar->digit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                      $::_V6_PRIOR_ = $prior;
                      my $bool = (!$match != 1);
                      $pos = $match->to if $bool;
                      $match;
                 }
                 ## </metasyntax>
 ||    ( ( $pos = $pad{I1568} ) && 0 ) )
             && do { while (
              (   ( $pad{I1568} = $pos or 1 ) && 

                 ## <metasyntax>
                 do {
                      my $prior = $::_V6_PRIOR_;
                      my $match = 
                             $grammar->digit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                      $::_V6_PRIOR_ = $prior;
                      my $bool = (!$match != 1);
                      $pos = $match->to if $bool;
                      $match;
                 }
                 ## </metasyntax>
 ||    ( ( $pos = $pad{I1568} ) && 0 ) )) {}; $bool = 1 }
             ) 
           &&
              (   ( $pad{I1569} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'match_variable' => '$' . $::_V6_MATCH_});
 } }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1569} ) && 0 ) )
           )
           )
         || (
           ( ( $bool = 1 ) && ( $pos = $pad{I1567} ) or 1 )
           &&            (
             (
              (   ( $pad{I1570} = $pos or 1 ) && 
                 ## <constant>
                 ( ( substr( $s, $pos, 1 ) eq '^' )
                     ? ( $pos += 1 or 1 )
                     : 0
                 )
                 ## </constant>
 ||    ( ( $pos = $pad{I1570} ) && 0 ) )
             || ( $bool = 1 )
             ) 
           &&
             (
              (   ( $pad{I1571} = $pos or 1 ) && 
                 ## <alt>
                 (
                     ( $pad{I1572} = $pos or 1 )
                     && (
                      (   ( $pad{I1573} = $pos or 1 ) && 

                       ## <metasyntax>
                       do {
                            my $prior = $::_V6_PRIOR_;
                            my $match = 
                                   $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                            $::_V6_PRIOR_ = $prior;
                            my $bool = (!$match != 1);
                            $pos = $match->to if $bool;
                            $match;
                       }
                       ## </metasyntax>
 ||    ( ( $pos = $pad{I1573} ) && 0 ) )
                     )
                   || (
                     ( ( $bool = 1 ) && ( $pos = $pad{I1572} ) or 1 )
                     &&                       (   ( $pad{I1574} = $pos or 1 ) && 
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '_' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
 ||    ( ( $pos = $pad{I1574} ) && 0 ) )
                     )
                   || (
                     ( ( $bool = 1 ) && ( $pos = $pad{I1572} ) or 1 )
                     &&                      (
                        (   ( $pad{I1575} = $pos or 1 ) && 
                         ## <constant>
                         ( ( substr( $s, $pos, 1 ) eq ':' )
                             ? ( $pos += 1 or 1 )
                             : 0
                         )
                         ## </constant>
 ||    ( ( $pos = $pad{I1575} ) && 0 ) )
                     &&
                        (   ( $pad{I1576} = $pos or 1 ) && 
                         ## <constant>
                         ( ( substr( $s, $pos, 1 ) eq ':' )
                             ? ( $pos += 1 or 1 )
                             : 0
                         )
                         ## </constant>
 ||    ( ( $pos = $pad{I1576} ) && 0 ) )
                     )
                   )
                 )
## </alt>
 ||    ( ( $pos = $pad{I1571} ) && 0 ) )
             && do { while (
              (   ( $pad{I1571} = $pos or 1 ) && 
                 ## <alt>
                 (
                     ( $pad{I1572} = $pos or 1 )
                     && (
                      (   ( $pad{I1573} = $pos or 1 ) && 

                       ## <metasyntax>
                       do {
                            my $prior = $::_V6_PRIOR_;
                            my $match = 
                                   $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                            $::_V6_PRIOR_ = $prior;
                            my $bool = (!$match != 1);
                            $pos = $match->to if $bool;
                            $match;
                       }
                       ## </metasyntax>
 ||    ( ( $pos = $pad{I1573} ) && 0 ) )
                     )
                   || (
                     ( ( $bool = 1 ) && ( $pos = $pad{I1572} ) or 1 )
                     &&                       (   ( $pad{I1574} = $pos or 1 ) && 
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '_' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
 ||    ( ( $pos = $pad{I1574} ) && 0 ) )
                     )
                   || (
                     ( ( $bool = 1 ) && ( $pos = $pad{I1572} ) or 1 )
                     &&                      (
                        (   ( $pad{I1575} = $pos or 1 ) && 
                         ## <constant>
                         ( ( substr( $s, $pos, 1 ) eq ':' )
                             ? ( $pos += 1 or 1 )
                             : 0
                         )
                         ## </constant>
 ||    ( ( $pos = $pad{I1575} ) && 0 ) )
                     &&
                        (   ( $pad{I1576} = $pos or 1 ) && 
                         ## <constant>
                         ( ( substr( $s, $pos, 1 ) eq ':' )
                             ? ( $pos += 1 or 1 )
                             : 0
                         )
                         ## </constant>
 ||    ( ( $pos = $pad{I1576} ) && 0 ) )
                     )
                   )
                 )
## </alt>
 ||    ( ( $pos = $pad{I1571} ) && 0 ) )) {}; $bool = 1 }
             ) 
           &&
              (   ( $pad{I1577} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'variable' => '$' . $::_V6_MATCH_});
 } }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1577} ) && 0 ) )
           )
         )
       )
## </alt>
;
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
,
'@' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       ## <alt>
       (
           ( $pad{I1578} = $pos or 1 )
           && (
           (
             (
              (   ( $pad{I1579} = $pos or 1 ) && 

                 ## <metasyntax>
                 do {
                      my $prior = $::_V6_PRIOR_;
                      my $match = 
                             $grammar->digit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                      $::_V6_PRIOR_ = $prior;
                      my $bool = (!$match != 1);
                      $pos = $match->to if $bool;
                      $match;
                 }
                 ## </metasyntax>
 ||    ( ( $pos = $pad{I1579} ) && 0 ) )
             && do { while (
              (   ( $pad{I1579} = $pos or 1 ) && 

                 ## <metasyntax>
                 do {
                      my $prior = $::_V6_PRIOR_;
                      my $match = 
                             $grammar->digit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                      $::_V6_PRIOR_ = $prior;
                      my $bool = (!$match != 1);
                      $pos = $match->to if $bool;
                      $match;
                 }
                 ## </metasyntax>
 ||    ( ( $pos = $pad{I1579} ) && 0 ) )) {}; $bool = 1 }
             ) 
           &&
              (   ( $pad{I1580} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'match_variable' => '@' . $::_V6_MATCH_});
 } }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1580} ) && 0 ) )
           )
           )
         || (
           ( ( $bool = 1 ) && ( $pos = $pad{I1578} ) or 1 )
           &&            (
             (
              (   ( $pad{I1581} = $pos or 1 ) && 
                 ## <constant>
                 ( ( substr( $s, $pos, 1 ) eq '^' )
                     ? ( $pos += 1 or 1 )
                     : 0
                 )
                 ## </constant>
 ||    ( ( $pos = $pad{I1581} ) && 0 ) )
             || ( $bool = 1 )
             ) 
           &&
             (
              (   ( $pad{I1582} = $pos or 1 ) && 
                 ## <alt>
                 (
                     ( $pad{I1583} = $pos or 1 )
                     && (
                      (   ( $pad{I1584} = $pos or 1 ) && 

                       ## <metasyntax>
                       do {
                            my $prior = $::_V6_PRIOR_;
                            my $match = 
                                   $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                            $::_V6_PRIOR_ = $prior;
                            my $bool = (!$match != 1);
                            $pos = $match->to if $bool;
                            $match;
                       }
                       ## </metasyntax>
 ||    ( ( $pos = $pad{I1584} ) && 0 ) )
                     )
                   || (
                     ( ( $bool = 1 ) && ( $pos = $pad{I1583} ) or 1 )
                     &&                       (   ( $pad{I1585} = $pos or 1 ) && 
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '_' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
 ||    ( ( $pos = $pad{I1585} ) && 0 ) )
                     )
                   || (
                     ( ( $bool = 1 ) && ( $pos = $pad{I1583} ) or 1 )
                     &&                      (
                        (   ( $pad{I1586} = $pos or 1 ) && 
                         ## <constant>
                         ( ( substr( $s, $pos, 1 ) eq ':' )
                             ? ( $pos += 1 or 1 )
                             : 0
                         )
                         ## </constant>
 ||    ( ( $pos = $pad{I1586} ) && 0 ) )
                     &&
                        (   ( $pad{I1587} = $pos or 1 ) && 
                         ## <constant>
                         ( ( substr( $s, $pos, 1 ) eq ':' )
                             ? ( $pos += 1 or 1 )
                             : 0
                         )
                         ## </constant>
 ||    ( ( $pos = $pad{I1587} ) && 0 ) )
                     )
                   )
                 )
## </alt>
 ||    ( ( $pos = $pad{I1582} ) && 0 ) )
             && do { while (
              (   ( $pad{I1582} = $pos or 1 ) && 
                 ## <alt>
                 (
                     ( $pad{I1583} = $pos or 1 )
                     && (
                      (   ( $pad{I1584} = $pos or 1 ) && 

                       ## <metasyntax>
                       do {
                            my $prior = $::_V6_PRIOR_;
                            my $match = 
                                   $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                            $::_V6_PRIOR_ = $prior;
                            my $bool = (!$match != 1);
                            $pos = $match->to if $bool;
                            $match;
                       }
                       ## </metasyntax>
 ||    ( ( $pos = $pad{I1584} ) && 0 ) )
                     )
                   || (
                     ( ( $bool = 1 ) && ( $pos = $pad{I1583} ) or 1 )
                     &&                       (   ( $pad{I1585} = $pos or 1 ) && 
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '_' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
 ||    ( ( $pos = $pad{I1585} ) && 0 ) )
                     )
                   || (
                     ( ( $bool = 1 ) && ( $pos = $pad{I1583} ) or 1 )
                     &&                      (
                        (   ( $pad{I1586} = $pos or 1 ) && 
                         ## <constant>
                         ( ( substr( $s, $pos, 1 ) eq ':' )
                             ? ( $pos += 1 or 1 )
                             : 0
                         )
                         ## </constant>
 ||    ( ( $pos = $pad{I1586} ) && 0 ) )
                     &&
                        (   ( $pad{I1587} = $pos or 1 ) && 
                         ## <constant>
                         ( ( substr( $s, $pos, 1 ) eq ':' )
                             ? ( $pos += 1 or 1 )
                             : 0
                         )
                         ## </constant>
 ||    ( ( $pos = $pad{I1587} ) && 0 ) )
                     )
                   )
                 )
## </alt>
 ||    ( ( $pos = $pad{I1582} ) && 0 ) )) {}; $bool = 1 }
             ) 
           &&
              (   ( $pad{I1588} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'variable' => '@' . $::_V6_MATCH_});
 } }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1588} ) && 0 ) )
           )
         )
       )
## </alt>
;
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
,
'%' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       ## <alt>
       (
           ( $pad{I1589} = $pos or 1 )
           && (
           (
             (
              (   ( $pad{I1590} = $pos or 1 ) && 

                 ## <metasyntax>
                 do {
                      my $prior = $::_V6_PRIOR_;
                      my $match = 
                             $grammar->digit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                      $::_V6_PRIOR_ = $prior;
                      my $bool = (!$match != 1);
                      $pos = $match->to if $bool;
                      $match;
                 }
                 ## </metasyntax>
 ||    ( ( $pos = $pad{I1590} ) && 0 ) )
             && do { while (
              (   ( $pad{I1590} = $pos or 1 ) && 

                 ## <metasyntax>
                 do {
                      my $prior = $::_V6_PRIOR_;
                      my $match = 
                             $grammar->digit( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                      $::_V6_PRIOR_ = $prior;
                      my $bool = (!$match != 1);
                      $pos = $match->to if $bool;
                      $match;
                 }
                 ## </metasyntax>
 ||    ( ( $pos = $pad{I1590} ) && 0 ) )) {}; $bool = 1 }
             ) 
           &&
              (   ( $pad{I1591} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'match_variable' => '%' . $::_V6_MATCH_});
 } }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1591} ) && 0 ) )
           )
           )
         || (
           ( ( $bool = 1 ) && ( $pos = $pad{I1589} ) or 1 )
           &&            (
             (
              (   ( $pad{I1592} = $pos or 1 ) && 
                 ## <constant>
                 ( ( substr( $s, $pos, 1 ) eq '^' )
                     ? ( $pos += 1 or 1 )
                     : 0
                 )
                 ## </constant>
 ||    ( ( $pos = $pad{I1592} ) && 0 ) )
             || ( $bool = 1 )
             ) 
           &&
             (
              (   ( $pad{I1593} = $pos or 1 ) && 
                 ## <alt>
                 (
                     ( $pad{I1594} = $pos or 1 )
                     && (
                      (   ( $pad{I1595} = $pos or 1 ) && 

                       ## <metasyntax>
                       do {
                            my $prior = $::_V6_PRIOR_;
                            my $match = 
                                   $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                            $::_V6_PRIOR_ = $prior;
                            my $bool = (!$match != 1);
                            $pos = $match->to if $bool;
                            $match;
                       }
                       ## </metasyntax>
 ||    ( ( $pos = $pad{I1595} ) && 0 ) )
                     )
                   || (
                     ( ( $bool = 1 ) && ( $pos = $pad{I1594} ) or 1 )
                     &&                       (   ( $pad{I1596} = $pos or 1 ) && 
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '_' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
 ||    ( ( $pos = $pad{I1596} ) && 0 ) )
                     )
                   || (
                     ( ( $bool = 1 ) && ( $pos = $pad{I1594} ) or 1 )
                     &&                      (
                        (   ( $pad{I1597} = $pos or 1 ) && 
                         ## <constant>
                         ( ( substr( $s, $pos, 1 ) eq ':' )
                             ? ( $pos += 1 or 1 )
                             : 0
                         )
                         ## </constant>
 ||    ( ( $pos = $pad{I1597} ) && 0 ) )
                     &&
                        (   ( $pad{I1598} = $pos or 1 ) && 
                         ## <constant>
                         ( ( substr( $s, $pos, 1 ) eq ':' )
                             ? ( $pos += 1 or 1 )
                             : 0
                         )
                         ## </constant>
 ||    ( ( $pos = $pad{I1598} ) && 0 ) )
                     )
                   )
                 )
## </alt>
 ||    ( ( $pos = $pad{I1593} ) && 0 ) )
             && do { while (
              (   ( $pad{I1593} = $pos or 1 ) && 
                 ## <alt>
                 (
                     ( $pad{I1594} = $pos or 1 )
                     && (
                      (   ( $pad{I1595} = $pos or 1 ) && 

                       ## <metasyntax>
                       do {
                            my $prior = $::_V6_PRIOR_;
                            my $match = 
                                   $grammar->alnum( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                            $::_V6_PRIOR_ = $prior;
                            my $bool = (!$match != 1);
                            $pos = $match->to if $bool;
                            $match;
                       }
                       ## </metasyntax>
 ||    ( ( $pos = $pad{I1595} ) && 0 ) )
                     )
                   || (
                     ( ( $bool = 1 ) && ( $pos = $pad{I1594} ) or 1 )
                     &&                       (   ( $pad{I1596} = $pos or 1 ) && 
                       ## <constant>
                       ( ( substr( $s, $pos, 1 ) eq '_' )
                           ? ( $pos += 1 or 1 )
                           : 0
                       )
                       ## </constant>
 ||    ( ( $pos = $pad{I1596} ) && 0 ) )
                     )
                   || (
                     ( ( $bool = 1 ) && ( $pos = $pad{I1594} ) or 1 )
                     &&                      (
                        (   ( $pad{I1597} = $pos or 1 ) && 
                         ## <constant>
                         ( ( substr( $s, $pos, 1 ) eq ':' )
                             ? ( $pos += 1 or 1 )
                             : 0
                         )
                         ## </constant>
 ||    ( ( $pos = $pad{I1597} ) && 0 ) )
                     &&
                        (   ( $pad{I1598} = $pos or 1 ) && 
                         ## <constant>
                         ( ( substr( $s, $pos, 1 ) eq ':' )
                             ? ( $pos += 1 or 1 )
                             : 0
                         )
                         ## </constant>
 ||    ( ( $pos = $pad{I1598} ) && 0 ) )
                     )
                   )
                 )
## </alt>
 ||    ( ( $pos = $pad{I1593} ) && 0 ) )) {}; $bool = 1 }
             ) 
           &&
              (   ( $pad{I1599} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'variable' => '%' . $::_V6_MATCH_});
 } }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1599} ) && 0 ) )
           )
         )
       )
## </alt>
;
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
);
%rule_terms = ('{*}' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
        (   ( $pad{I1600} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'metasyntax' => {'metasyntax' => 'null'}});
 } }->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I1600} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
,
'\'' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       (
          (   ( $pad{I1601} = $pos or 1 ) && 

           ## <metasyntax>
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->literal( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                my $bool = (!$match != 1);
                $pos = $match->to if $bool;
                $match;
           }
           ## </metasyntax>
 ||    ( ( $pos = $pad{I1601} ) && 0 ) )
       &&
          (   ( $pad{I1602} = $pos or 1 ) && 
           ## <constant>
           ( ( substr( $s, $pos, 1 ) eq chr(39) )
               ? ( $pos += 1 or 1 )
               : 0
           )
           ## </constant>
 ||    ( ( $pos = $pad{I1602} ) && 0 ) )
       &&
          (   ( $pad{I1603} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'metasyntax' => {'metasyntax' => '\'' . ${$::_V6_MATCH_}}});
 } }->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1603} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
,
'(' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       (
          (   ( $pad{I1604} = $pos or 1 ) && 
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1604} ) && 0 ) )
       &&
          (   ( $pad{I1605} = $pos or 1 ) && 
           ## <constant>
           ( ( substr( $s, $pos, 1 ) eq ')' )
               ? ( $pos += 1 or 1 )
               : 0
           )
           ## </constant>
 ||    ( ( $pos = $pad{I1605} ) && 0 ) )
       &&
          (   ( $pad{I1606} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'capturing_group' => ${ $::_V6_MATCH_->{'rule'}}});
 } }->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1606} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
,
'<(' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       (
          (   ( $pad{I1607} = $pos or 1 ) && 
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1607} ) && 0 ) )
       &&
          (   ( $pad{I1608} = $pos or 1 ) && 
           ## <constant>
           ( ( substr( $s, $pos, 2 ) eq ')>' )
               ? ( $pos += 2 or 1 )
               : 0
           )
           ## </constant>
 ||    ( ( $pos = $pad{I1608} ) && 0 ) )
       &&
          (   ( $pad{I1609} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'capture_as_result' => ${ $::_V6_MATCH_->{'rule'}}});
 } }->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1609} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
,
'<+' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       (
          (   ( $pad{I1610} = $pos or 1 ) && 
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->char_class( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'char_class'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1610} ) && 0 ) )
       &&
         do { while (
          (   ( $pad{I1611} = $pos or 1 ) && 
             do{
                 my $hash = do {
                   my $bool = 1;
                   my $from = $pos;
                   my @match;
                   my %named;
                   $bool = 0 unless
                     (
                        (   ( $pad{I1612} = $pos or 1 ) && 
                         ## <perl5>
                         ( ( substr( $s, $pos ) =~ m/^((?:(?=[+-]))\X)/ )
                             ? ( $pos += length( $1 ) or 1 )
                             : 0
                         )
                         ## </perl5>
 ||    ( ( $pos = $pad{I1612} ) && 0 ) )
                     &&
                        (   ( $pad{I1613} = $pos or 1 ) && 
                         do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                                     $grammar->char_class( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'char_class'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1613} ) && 0 ) )
                     );
                   { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                 };
                 my $bool = ${$hash->{'bool'}};
                 if ( $bool ) {
                     push @{ $match[ 0 ] }, Pugs::Runtime::Match->new( $hash );
                 }
                 $bool;
             } ||    ( ( $pos = $pad{I1611} ) && 0 ) )) {}; $bool = 1 }
       &&
          (   ( $pad{I1614} = $pos or 1 ) && 
           ## <constant>
           ( ( substr( $s, $pos, 1 ) eq '>' )
               ? ( $pos += 1 or 1 )
               : 0
           )
           ## </constant>
 ||    ( ( $pos = $pad{I1614} ) && 0 ) )
       &&
          (   ( $pad{I1615} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'char_class' => ['+' .  $::_V6_MATCH_->{'char_class'},
@{($::_V6_MATCH_->[0])}]});
 } }->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1615} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
,
'<-' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       (
          (   ( $pad{I1616} = $pos or 1 ) && 
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->char_class( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'char_class'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1616} ) && 0 ) )
       &&
         do { while (
          (   ( $pad{I1617} = $pos or 1 ) && 
             do{
                 my $hash = do {
                   my $bool = 1;
                   my $from = $pos;
                   my @match;
                   my %named;
                   $bool = 0 unless
                     (
                        (   ( $pad{I1618} = $pos or 1 ) && 
                         ## <perl5>
                         ( ( substr( $s, $pos ) =~ m/^((?:(?=[+-]))\X)/ )
                             ? ( $pos += length( $1 ) or 1 )
                             : 0
                         )
                         ## </perl5>
 ||    ( ( $pos = $pad{I1618} ) && 0 ) )
                     &&
                        (   ( $pad{I1619} = $pos or 1 ) && 
                         do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                                     $grammar->char_class( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'char_class'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1619} ) && 0 ) )
                     );
                   { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                 };
                 my $bool = ${$hash->{'bool'}};
                 if ( $bool ) {
                     push @{ $match[ 0 ] }, Pugs::Runtime::Match->new( $hash );
                 }
                 $bool;
             } ||    ( ( $pos = $pad{I1617} ) && 0 ) )) {}; $bool = 1 }
       &&
          (   ( $pad{I1620} = $pos or 1 ) && 
           ## <constant>
           ( ( substr( $s, $pos, 1 ) eq '>' )
               ? ( $pos += 1 or 1 )
               : 0
           )
           ## </constant>
 ||    ( ( $pos = $pad{I1620} ) && 0 ) )
       &&
          (   ( $pad{I1621} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'char_class' => ['-' .  $::_V6_MATCH_->{'char_class'},
@{($::_V6_MATCH_->[0])}]});
 } }->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1621} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
,
'<[' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       (
          (   ( $pad{I1622} = $pos or 1 ) && 
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->char_range( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'char_range'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1622} ) && 0 ) )
       &&
          (   ( $pad{I1623} = $pos or 1 ) && 
           ## <constant>
           ( ( substr( $s, $pos, 1 ) eq ']' )
               ? ( $pos += 1 or 1 )
               : 0
           )
           ## </constant>
 ||    ( ( $pos = $pad{I1623} ) && 0 ) )
       &&
         do { while (
          (   ( $pad{I1624} = $pos or 1 ) && 
             do{
                 my $hash = do {
                   my $bool = 1;
                   my $from = $pos;
                   my @match;
                   my %named;
                   $bool = 0 unless
                     (
                        (   ( $pad{I1625} = $pos or 1 ) && 
                         ## <perl5>
                         ( ( substr( $s, $pos ) =~ m/^((?:(?=[+-]))\X)/ )
                             ? ( $pos += length( $1 ) or 1 )
                             : 0
                         )
                         ## </perl5>
 ||    ( ( $pos = $pad{I1625} ) && 0 ) )
                     &&
                        (   ( $pad{I1626} = $pos or 1 ) && 
                         do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                                     $grammar->char_class( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'char_class'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1626} ) && 0 ) )
                     );
                   { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                 };
                 my $bool = ${$hash->{'bool'}};
                 if ( $bool ) {
                     push @{ $match[ 0 ] }, Pugs::Runtime::Match->new( $hash );
                 }
                 $bool;
             } ||    ( ( $pos = $pad{I1624} ) && 0 ) )) {}; $bool = 1 }
       &&
          (   ( $pad{I1627} = $pos or 1 ) && 
           ## <constant>
           ( ( substr( $s, $pos, 1 ) eq '>' )
               ? ( $pos += 1 or 1 )
               : 0
           )
           ## </constant>
 ||    ( ( $pos = $pad{I1627} ) && 0 ) )
       &&
          (   ( $pad{I1628} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'char_class' => ['+[' .  $::_V6_MATCH_->{'char_range'} . ']',
@{($::_V6_MATCH_->[0])}]});
 } }->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1628} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
,
'<' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       (
          (   ( $pad{I1629} = $pos or 1 ) && 
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->parse_metasyntax( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'parse_metasyntax'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1629} ) && 0 ) )
       &&
          (   ( $pad{I1630} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return(${ $::_V6_MATCH_->{'parse_metasyntax'}});
 } }->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1630} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
,
'{' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       (
          (   ( $pad{I1631} = $pos or 1 ) && 
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->parsed_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'parsed_code'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1631} ) && 0 ) )
       &&
          (   ( $pad{I1632} = $pos or 1 ) && 
           ## <constant>
           ( ( substr( $s, $pos, 1 ) eq '}' )
               ? ( $pos += 1 or 1 )
               : 0
           )
           ## </constant>
 ||    ( ( $pos = $pad{I1632} ) && 0 ) )
       &&
          (   ( $pad{I1633} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'closure' => {'closure' => ${ $::_V6_MATCH_->{'parsed_code'}}, 'modifier' => 'plain'}});
 } }->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1633} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
,
'\\' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       (
          (   ( $pad{I1634} = $pos or 1 ) && 
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->special_char( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'special_char'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1634} ) && 0 ) )
       &&
          (   ( $pad{I1635} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return(${ $::_V6_MATCH_->{'special_char'}});
 } }->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1635} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
,
'.' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
        (   ( $pad{I1636} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'dot' => 1});
 } }->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I1636} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
,
'[' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       (
          (   ( $pad{I1637} = $pos or 1 ) && 
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1637} ) && 0 ) )
       &&
          (   ( $pad{I1638} = $pos or 1 ) && 
           ## <constant>
           ( ( substr( $s, $pos, 1 ) eq ']' )
               ? ( $pos += 1 or 1 )
               : 0
           )
           ## </constant>
 ||    ( ( $pos = $pad{I1638} ) && 0 ) )
       &&
          (   ( $pad{I1639} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return(${ $::_V6_MATCH_->{'rule'}});
 } }->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1639} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
,
':::' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
        (   ( $pad{I1640} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'colon' => ':::'});
 } }->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I1640} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
,
':?' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
        (   ( $pad{I1641} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'colon' => ':?'});
 } }->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I1641} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
,
':+' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
        (   ( $pad{I1642} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'colon' => ':+'});
 } }->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I1642} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
,
'::' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
        (   ( $pad{I1643} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'colon' => '::'});
 } }->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I1643} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
,
':' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
        (   ( $pad{I1644} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'colon' => ':'});
 } }->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I1644} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
,
'$$' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
        (   ( $pad{I1645} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'colon' => '$$'});
 } }->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I1645} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
,
'$' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
        (   ( $pad{I1646} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'colon' => '$'});
 } }->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I1646} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
,
'^^' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
        (   ( $pad{I1647} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'colon' => '^^'});
 } }->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I1647} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
,
'^' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
        (   ( $pad{I1648} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'colon' => '^'});
 } }->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I1648} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
,
'>>' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
        (   ( $pad{I1649} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'colon' => '>>'});
 } }->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I1649} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
,
'»' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
        (   ( $pad{I1650} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'colon' => '>>'});
 } }->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I1650} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
,
'<<' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
        (   ( $pad{I1651} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'colon' => '<<'});
 } }->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I1651} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
,
'«' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
        (   ( $pad{I1652} = $pos or 1 ) && 
         do { 
           local $::_V6_SUCCEED = 1;
           $::_V6_MATCH_ = $m;
           $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'colon' => '<<'});
 } }->( $m ) ); 
           $bool = $::_V6_SUCCEED;
           $::_V6_MATCH_ = $m if $bool; 
           return $m if $bool; 
         } ||    ( ( $pos = $pad{I1652} ) && 0 ) );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
,
':i' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       (
          (   ( $pad{I1653} = $pos or 1 ) && 

           ## <metasyntax>
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                my $bool = (!$match != 1);
                $pos = $match->to if $bool;
                $match;
           }
           ## </metasyntax>
 ||    ( ( $pos = $pad{I1653} ) && 0 ) )
       &&
          (   ( $pad{I1654} = $pos or 1 ) && 
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1654} ) && 0 ) )
       &&
          (   ( $pad{I1655} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'modifier' => {'modifier' => 'ignorecase', 'rule'=>${ $::_V6_MATCH_->{ qw(rule) }}}});
 } }->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1655} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
,
':ignorecase' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       (
          (   ( $pad{I1656} = $pos or 1 ) && 

           ## <metasyntax>
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                my $bool = (!$match != 1);
                $pos = $match->to if $bool;
                $match;
           }
           ## </metasyntax>
 ||    ( ( $pos = $pad{I1656} ) && 0 ) )
       &&
          (   ( $pad{I1657} = $pos or 1 ) && 
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1657} ) && 0 ) )
       &&
          (   ( $pad{I1658} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'modifier' => {'modifier' => 'ignorecase', 'rule'=>${ $::_V6_MATCH_->{ qw(rule) }}}});
 } }->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1658} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
,
':s' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       (
          (   ( $pad{I1659} = $pos or 1 ) && 

           ## <metasyntax>
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                my $bool = (!$match != 1);
                $pos = $match->to if $bool;
                $match;
           }
           ## </metasyntax>
 ||    ( ( $pos = $pad{I1659} ) && 0 ) )
       &&
          (   ( $pad{I1660} = $pos or 1 ) && 
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1660} ) && 0 ) )
       &&
          (   ( $pad{I1661} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'modifier' => 'sigspace', 'rule'=>${ $::_V6_MATCH_->{ qw(rule) }}});
 } }->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1661} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
,
':sigspace' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       (
          (   ( $pad{I1662} = $pos or 1 ) && 

           ## <metasyntax>
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                my $bool = (!$match != 1);
                $pos = $match->to if $bool;
                $match;
           }
           ## </metasyntax>
 ||    ( ( $pos = $pad{I1662} ) && 0 ) )
       &&
          (   ( $pad{I1663} = $pos or 1 ) && 
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1663} ) && 0 ) )
       &&
          (   ( $pad{I1664} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'modifier' => 'sigspace', 'rule'=>${ $::_V6_MATCH_->{ qw(rule) }}});
 } }->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1664} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
,
':P5' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       (
          (   ( $pad{I1665} = $pos or 1 ) && 

           ## <metasyntax>
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                my $bool = (!$match != 1);
                $pos = $match->to if $bool;
                $match;
           }
           ## </metasyntax>
 ||    ( ( $pos = $pad{I1665} ) && 0 ) )
       &&
          (   ( $pad{I1666} = $pos or 1 ) && 
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1666} ) && 0 ) )
       &&
          (   ( $pad{I1667} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'modifier' => 'Perl5', 'rule'=>${ $::_V6_MATCH_->{ qw(rule) }}});
 } }->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1667} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
,
':Perl5' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       (
          (   ( $pad{I1668} = $pos or 1 ) && 

           ## <metasyntax>
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                my $bool = (!$match != 1);
                $pos = $match->to if $bool;
                $match;
           }
           ## </metasyntax>
 ||    ( ( $pos = $pad{I1668} ) && 0 ) )
       &&
          (   ( $pad{I1669} = $pos or 1 ) && 
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1669} ) && 0 ) )
       &&
          (   ( $pad{I1670} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'modifier' => 'Perl5', 'rule'=>${ $::_V6_MATCH_->{ qw(rule) }}});
 } }->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1670} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
,
':bytes' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       (
          (   ( $pad{I1671} = $pos or 1 ) && 

           ## <metasyntax>
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                my $bool = (!$match != 1);
                $pos = $match->to if $bool;
                $match;
           }
           ## </metasyntax>
 ||    ( ( $pos = $pad{I1671} ) && 0 ) )
       &&
          (   ( $pad{I1672} = $pos or 1 ) && 
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1672} ) && 0 ) )
       &&
          (   ( $pad{I1673} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'modifier' => 'bytes', 'rule'=>${ $::_V6_MATCH_->{ qw(rule) }}});
 } }->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1673} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
,
':codes' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       (
          (   ( $pad{I1674} = $pos or 1 ) && 

           ## <metasyntax>
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                my $bool = (!$match != 1);
                $pos = $match->to if $bool;
                $match;
           }
           ## </metasyntax>
 ||    ( ( $pos = $pad{I1674} ) && 0 ) )
       &&
          (   ( $pad{I1675} = $pos or 1 ) && 
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1675} ) && 0 ) )
       &&
          (   ( $pad{I1676} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'modifier' => 'codes', 'rule'=>${ $::_V6_MATCH_->{ qw(rule) }}});
 } }->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1676} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
,
':graphs' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       (
          (   ( $pad{I1677} = $pos or 1 ) && 

           ## <metasyntax>
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                my $bool = (!$match != 1);
                $pos = $match->to if $bool;
                $match;
           }
           ## </metasyntax>
 ||    ( ( $pos = $pad{I1677} ) && 0 ) )
       &&
          (   ( $pad{I1678} = $pos or 1 ) && 
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1678} ) && 0 ) )
       &&
          (   ( $pad{I1679} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'modifier' => 'graphs', 'rule'=>${ $::_V6_MATCH_->{ qw(rule) }}});
 } }->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1679} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
,
':langs' => ## <global>
do { my $rule; $rule = sub {
  
              my $s       = $_[0] || '';
              my $grammar = $_[1] || __PACKAGE__;
              $_[3] = $_[2];
              $_[2] = undef;
            
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       (
          (   ( $pad{I1680} = $pos or 1 ) && 

           ## <metasyntax>
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                my $bool = (!$match != 1);
                $pos = $match->to if $bool;
                $match;
           }
           ## </metasyntax>
 ||    ( ( $pos = $pad{I1680} ) && 0 ) )
       &&
          (   ( $pad{I1681} = $pos or 1 ) && 
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1681} ) && 0 ) )
       &&
          (   ( $pad{I1682} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'modifier' => 'langs', 'rule'=>${ $::_V6_MATCH_->{ qw(rule) }}});
 } }->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1682} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
);
*term = ## <global>
do { my $rule; $rule = sub {
  
              $_[3] = $_[2];
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       ## <alt>
       (
           ( $pad{I1683} = $pos or 1 )
           && (
           (
              (   ( $pad{I1684} = $pos or 1 ) && 
               do{
                my $match = 
          do {
            our $I1685;
            our $I1685_sizes;
            unless ( $I1685 ) {
                my $hash = \%Pugs::Grammar::Rule::variables;
                my %sizes = map { length($_) => 1 } keys %$hash;
                $I1685_sizes = [ sort { $b <=> $a } keys %sizes ];
                $I1685 = $hash;
            }
            my $match = 0;
            my $key;
            for ( @$I1685_sizes ) {
                $key = ( $pos <= length( $s )
                            ? substr( $s, $pos, $_ )
                            : '' );
                if ( exists $I1685->{$key} ) {
                    #$named{KEY} = $key;
                    #$::_V6_MATCH_ = $m;
                    #print "m: ", Dumper( $::_V6_MATCH_->data )
                    #    if ( $key eq 'until' );
                    $match = Pugs::Runtime::Regex::preprocess_hash( $I1685, $key )->( $s, $grammar, { p => ( $pos + $_ ), positionals => [ ], args => { KEY => $key } }, undef );
                    last if $match;
                }
            }
            if ( $match ) {
                $pos = $match->to;
                #print "match: $key at $pos = ", Dumper( $match->data );
                $bool = 1;
            }; # else { $bool = 0 }
            $match;
          };
                if ( $match ) { $named{'Pugs::Grammar::Rule::variables'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1684} ) && 0 ) )
           &&
              (   ( $pad{I1686} = $pos or 1 ) && 
               ## <alt>
               (
                   ( $pad{I1687} = $pos or 1 )
                   && (
                   (
                     (
                      (   ( $pad{I1688} = $pos or 1 ) && 

                         ## <metasyntax>
                         do {
                              my $prior = $::_V6_PRIOR_;
                              my $match = 
                                     $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                              $::_V6_PRIOR_ = $prior;
                              my $bool = (!$match != 1);
                              $pos = $match->to if $bool;
                              $match;
                         }
                         ## </metasyntax>
 ||    ( ( $pos = $pad{I1688} ) && 0 ) )
                     || ( $bool = 1 )
                     ) 
                   &&
                      (   ( $pad{I1689} = $pos or 1 ) && 
                       ## <constant>
                       ( ( substr( $s, $pos, 2 ) eq ':=' )
                           ? ( $pos += 2 or 1 )
                           : 0
                       )
                       ## </constant>
 ||    ( ( $pos = $pad{I1689} ) && 0 ) )
                   &&
                     (
                      (   ( $pad{I1690} = $pos or 1 ) && 

                         ## <metasyntax>
                         do {
                              my $prior = $::_V6_PRIOR_;
                              my $match = 
                                     $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                              $::_V6_PRIOR_ = $prior;
                              my $bool = (!$match != 1);
                              $pos = $match->to if $bool;
                              $match;
                         }
                         ## </metasyntax>
 ||    ( ( $pos = $pad{I1690} ) && 0 ) )
                     || ( $bool = 1 )
                     ) 
                   &&
                      (   ( $pad{I1691} = $pos or 1 ) && 
                       do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                                   $grammar->named_capture_body( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'named_capture_body'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1691} ) && 0 ) )
                   &&
                      (   ( $pad{I1692} = $pos or 1 ) && 
                       do { 
                         local $::_V6_SUCCEED = 1;
                         $::_V6_MATCH_ = $m;
                         $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'named_capture' => {'rule' => ${ $::_V6_MATCH_->{'named_capture_body'}}, 'ident' => ${ $::_V6_MATCH_->{'Pugs::Grammar::Rule::variables'}}}});
 } }->( $m ) ); 
                         $bool = $::_V6_SUCCEED;
                         $::_V6_MATCH_ = $m if $bool; 
                         return $m if $bool; 
                       } ||    ( ( $pos = $pad{I1692} ) && 0 ) )
                   )
                   )
                 || (
                   ( ( $bool = 1 ) && ( $pos = $pad{I1687} ) or 1 )
                   &&                     (   ( $pad{I1693} = $pos or 1 ) && 
                     do { 
                       local $::_V6_SUCCEED = 1;
                       $::_V6_MATCH_ = $m;
                       $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return(${ $::_V6_MATCH_->{'Pugs::Grammar::Rule::variables'}});
 } }->( $m ) ); 
                       $bool = $::_V6_SUCCEED;
                       $::_V6_MATCH_ = $m if $bool; 
                       return $m if $bool; 
                     } ||    ( ( $pos = $pad{I1693} ) && 0 ) )
                 )
               )
## </alt>
 ||    ( ( $pos = $pad{I1686} ) && 0 ) )
           )
           )
         || (
           ( ( $bool = 1 ) && ( $pos = $pad{I1683} ) or 1 )
           &&            (
              (   ( $pad{I1694} = $pos or 1 ) && 
               do{
                my $match = 
          do {
            our $I1695;
            our $I1695_sizes;
            unless ( $I1695 ) {
                my $hash = \%Pugs::Grammar::Rule::rule_terms;
                my %sizes = map { length($_) => 1 } keys %$hash;
                $I1695_sizes = [ sort { $b <=> $a } keys %sizes ];
                $I1695 = $hash;
            }
            my $match = 0;
            my $key;
            for ( @$I1695_sizes ) {
                $key = ( $pos <= length( $s )
                            ? substr( $s, $pos, $_ )
                            : '' );
                if ( exists $I1695->{$key} ) {
                    #$named{KEY} = $key;
                    #$::_V6_MATCH_ = $m;
                    #print "m: ", Dumper( $::_V6_MATCH_->data )
                    #    if ( $key eq 'until' );
                    $match = Pugs::Runtime::Regex::preprocess_hash( $I1695, $key )->( $s, $grammar, { p => ( $pos + $_ ), positionals => [ ], args => { KEY => $key } }, undef );
                    last if $match;
                }
            }
            if ( $match ) {
                $pos = $match->to;
                #print "match: $key at $pos = ", Dumper( $match->data );
                $bool = 1;
            }; # else { $bool = 0 }
            $match;
          };
                if ( $match ) { $named{'Pugs::Grammar::Rule::rule_terms'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1694} ) && 0 ) )
           &&
              (   ( $pad{I1696} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return(${ $::_V6_MATCH_->{'Pugs::Grammar::Rule::rule_terms'}});
 } }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1696} ) && 0 ) )
           )
           )
         || (
           ( ( $bool = 1 ) && ( $pos = $pad{I1683} ) or 1 )
           &&            (
              (   ( $pad{I1697} = $pos or 1 ) && 
               ## <perl5>
               ( ( substr( $s, $pos ) =~ m/^((?:(?![\]\}\)\>\:\?\+\*\|\&]))\X)/ )
                   ? ( $pos += length( $1 ) or 1 )
                   : 0
               )
               ## </perl5>
 ||    ( ( $pos = $pad{I1697} ) && 0 ) )
           &&
              (   ( $pad{I1698} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'constant' => ${$::_V6_MATCH_}});
 } }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1698} ) && 0 ) )
           )
         )
       )
## </alt>
;
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
;## Signature for term
 # Data::Bind->sub_signature
#  (\&term, );
;
*quant = ## <global>
do { my $rule; $rule = sub {
  
              $_[3] = $_[2];
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       ## <alt>
       (
           ( $pad{I1699} = $pos or 1 )
           && (
           (
              (   ( $pad{I1700} = $pos or 1 ) && 
               ## <constant>
               ( ( substr( $s, $pos, 2 ) eq '**' )
                   ? ( $pos += 2 or 1 )
                   : 0
               )
               ## </constant>
 ||    ( ( $pos = $pad{I1700} ) && 0 ) )
           &&
             (
              (   ( $pad{I1701} = $pos or 1 ) && 

                 ## <metasyntax>
                 do {
                      my $prior = $::_V6_PRIOR_;
                      my $match = 
                             $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                      $::_V6_PRIOR_ = $prior;
                      my $bool = (!$match != 1);
                      $pos = $match->to if $bool;
                      $match;
                 }
                 ## </metasyntax>
 ||    ( ( $pos = $pad{I1701} ) && 0 ) )
             || ( $bool = 1 )
             ) 
           &&
              (   ( $pad{I1702} = $pos or 1 ) && 
               ## <constant>
               ( ( substr( $s, $pos, 1 ) eq '{' )
                   ? ( $pos += 1 or 1 )
                   : 0
               )
               ## </constant>
 ||    ( ( $pos = $pad{I1702} ) && 0 ) )
           &&
              (   ( $pad{I1703} = $pos or 1 ) && 
               do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                           $grammar->parsed_code( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'parsed_code'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1703} ) && 0 ) )
           &&
              (   ( $pad{I1704} = $pos or 1 ) && 
               ## <constant>
               ( ( substr( $s, $pos, 1 ) eq '}' )
                   ? ( $pos += 1 or 1 )
                   : 0
               )
               ## </constant>
 ||    ( ( $pos = $pad{I1704} ) && 0 ) )
           &&
              (   ( $pad{I1705} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'closure' => ${ $::_V6_MATCH_->{'parsed_code'}}});
 } }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1705} ) && 0 ) )
           )
           )
         || (
           ( ( $bool = 1 ) && ( $pos = $pad{I1699} ) or 1 )
           &&            (
            (   ( $pad{I1706} = $pos or 1 ) && 
               ## <perl5>
               ( ( substr( $s, $pos ) =~ m/^((?:(?=[\?\*\+]))\X)/ )
                   ? ( $pos += length( $1 ) or 1 )
                   : 0
               )
               ## </perl5>
 ||    ( ( $pos = $pad{I1706} ) && 0 ) )
           || ( $bool = 1 )
           ) 
         )
       )
## </alt>
;
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
;## Signature for quant
 # Data::Bind->sub_signature
#  (\&quant, );
;
*quantifier = ## <global>
do { my $rule; $rule = sub {
  
              $_[3] = $_[2];
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       (
          (   ( $pad{I1707} = $pos or 1 ) && 
           do{
                my $match = Pugs::Runtime::Match->new( do {
                    my $bool = 1;
                    my $from = $pos;
                    my @match;
                    my %named;
                    $bool = 0 unless                    do{
                       my $hash = do {
                         my $bool = 1;
                         my $from = $pos;
                         my @match;
                         my %named;
                         $bool = 0 unless
                           (
                            (   ( $pad{I1708} = $pos or 1 ) && 

                               ## <metasyntax>
                               do {
                                    my $prior = $::_V6_PRIOR_;
                                    my $match = 
                                           $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                    $::_V6_PRIOR_ = $prior;
                                    my $bool = (!$match != 1);
                                    $pos = $match->to if $bool;
                                    $match;
                               }
                               ## </metasyntax>
 ||    ( ( $pos = $pad{I1708} ) && 0 ) )
                           || ( $bool = 1 )
                           ) ;
                         { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                       };
                       my $bool = ${$hash->{'bool'}};
                       $match[ 0 ] = Pugs::Runtime::Match->new( $hash );
                       $bool;
                   };
                    { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                } );
                if ( $match ) { $named{'ws1'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1707} ) && 0 ) )
       &&
          (   ( $pad{I1709} = $pos or 1 ) && 
           do{
               my $pos1 = $pos;
               do {
                 my $pos = $pos1;
                 my $from = $pos;
                 my @match;
                 my %named;
                 $bool =                      do{
                         my $pos1 = $pos;
                         do {
                           my $pos = $pos1;
                           my $from = $pos;
                           my @match;
                           my %named;
                           $bool = 0 unless
                                (   ( $pad{I1710} = $pos or 1 ) && 
                                 ## <perl5>
                                 ( ( substr( $s, $pos ) =~ m/^((?:(?=[\}\]\)]))\X)/ )
                                     ? ( $pos += length( $1 ) or 1 )
                                     : 0
                                 )
                                 ## </perl5>
 ||    ( ( $pos = $pad{I1710} ) && 0 ) );
                           $bool;
                         };
                     } ? 0 : 1;
                 $bool;
               };
           } ||    ( ( $pos = $pad{I1709} ) && 0 ) )
       &&
          (   ( $pad{I1711} = $pos or 1 ) && 
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->term( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'term'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1711} ) && 0 ) )
       &&
          (   ( $pad{I1712} = $pos or 1 ) && 
           do{
                my $match = Pugs::Runtime::Match->new( do {
                    my $bool = 1;
                    my $from = $pos;
                    my @match;
                    my %named;
                    $bool = 0 unless                    do{
                       my $hash = do {
                         my $bool = 1;
                         my $from = $pos;
                         my @match;
                         my %named;
                         $bool = 0 unless
                           (
                            (   ( $pad{I1713} = $pos or 1 ) && 

                               ## <metasyntax>
                               do {
                                    my $prior = $::_V6_PRIOR_;
                                    my $match = 
                                           $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                    $::_V6_PRIOR_ = $prior;
                                    my $bool = (!$match != 1);
                                    $pos = $match->to if $bool;
                                    $match;
                               }
                               ## </metasyntax>
 ||    ( ( $pos = $pad{I1713} ) && 0 ) )
                           || ( $bool = 1 )
                           ) ;
                         { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                       };
                       my $bool = ${$hash->{'bool'}};
                       $match[ 0 ] = Pugs::Runtime::Match->new( $hash );
                       $bool;
                   };
                    { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                } );
                if ( $match ) { $named{'ws2'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1712} ) && 0 ) )
       &&
          (   ( $pad{I1714} = $pos or 1 ) && 
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->quant( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'quant'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1714} ) && 0 ) )
       &&
          (   ( $pad{I1715} = $pos or 1 ) && 
           do{
                my $match = Pugs::Runtime::Match->new( do {
                    my $bool = 1;
                    my $from = $pos;
                    my @match;
                    my %named;
                    $bool = 0 unless                    do{
                       my $hash = do {
                         my $bool = 1;
                         my $from = $pos;
                         my @match;
                         my %named;
                         $bool = 0 unless
                           (
                            (   ( $pad{I1716} = $pos or 1 ) && 
                               ## <perl5>
                               ( ( substr( $s, $pos ) =~ m/^((?:(?=[\?\+]))\X)/ )
                                   ? ( $pos += length( $1 ) or 1 )
                                   : 0
                               )
                               ## </perl5>
 ||    ( ( $pos = $pad{I1716} ) && 0 ) )
                           || ( $bool = 1 )
                           ) ;
                         { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                       };
                       my $bool = ${$hash->{'bool'}};
                       $match[ 0 ] = Pugs::Runtime::Match->new( $hash );
                       $bool;
                   };
                    { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                } );
                if ( $match ) { $named{'greedy'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1715} ) && 0 ) )
       &&
          (   ( $pad{I1717} = $pos or 1 ) && 
           do{
                my $match = Pugs::Runtime::Match->new( do {
                    my $bool = 1;
                    my $from = $pos;
                    my @match;
                    my %named;
                    $bool = 0 unless                    do{
                       my $hash = do {
                         my $bool = 1;
                         my $from = $pos;
                         my @match;
                         my %named;
                         $bool = 0 unless
                           (
                            (   ( $pad{I1718} = $pos or 1 ) && 

                               ## <metasyntax>
                               do {
                                    my $prior = $::_V6_PRIOR_;
                                    my $match = 
                                           $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                                    $::_V6_PRIOR_ = $prior;
                                    my $bool = (!$match != 1);
                                    $pos = $match->to if $bool;
                                    $match;
                               }
                               ## </metasyntax>
 ||    ( ( $pos = $pad{I1718} ) && 0 ) )
                           || ( $bool = 1 )
                           ) ;
                         { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                       };
                       my $bool = ${$hash->{'bool'}};
                       $match[ 0 ] = Pugs::Runtime::Match->new( $hash );
                       $bool;
                   };
                    { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
                } );
                if ( $match ) { $named{'ws3'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1717} ) && 0 ) )
       &&
          (   ( $pad{I1719} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { if((${ $::_V6_MATCH_->{'quant'}} eq '' && (${ $::_V6_MATCH_->{'greedy'}} eq '' && (${ $::_V6_MATCH_->{'ws1'}} eq '' && (${ $::_V6_MATCH_->{'ws2'}} eq '' && ${ $::_V6_MATCH_->{'ws3'}} eq ''))))) { return(${ $::_V6_MATCH_->{'term'}});
 } 
;
return({'quant' => {'term' => ${ $::_V6_MATCH_->{'term'}}, 'quant' => ${ $::_V6_MATCH_->{'quant'}}, 'greedy' => ${ $::_V6_MATCH_->{'greedy'}}, 'ws1' => ${ $::_V6_MATCH_->{'ws1'}}, 'ws2' => ${ $::_V6_MATCH_->{'ws2'}}, 'ws3' => ${ $::_V6_MATCH_->{'ws3'}}}});
 } }->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1719} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
;## Signature for quantifier
 # Data::Bind->sub_signature
#  (\&quantifier, );
;
*concat = ## <global>
do { my $rule; $rule = sub {
  
              $_[3] = $_[2];
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       (
         (
          (   ( $pad{I1720} = $pos or 1 ) && 
             do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                         $grammar->quantifier( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { push @{$named{'quantifier'}}, $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1720} ) && 0 ) )
         && do { while (
          (   ( $pad{I1720} = $pos or 1 ) && 
             do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                         $grammar->quantifier( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { push @{$named{'quantifier'}}, $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1720} ) && 0 ) )) {}; $bool = 1 }
         ) 
       &&
          (   ( $pad{I1721} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { 
        my @a = map {  $_->()  }  @{ $::_V6_MATCH_->{'quantifier'} };
        return { concat => \@a ,}  if scalar @a > 1;
        return $a[0];;
 # use v6
;
 } }->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1721} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
;## Signature for concat
 # Data::Bind->sub_signature
#  (\&concat, );
;
*conjunctive1 = ## <global>
do { my $rule; $rule = sub {
  
              $_[3] = $_[2];
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       (
         (
          (   ( $pad{I1722} = $pos or 1 ) && 
             (
               (
                (   ( $pad{I1723} = $pos or 1 ) && 

                   ## <metasyntax>
                   do {
                        my $prior = $::_V6_PRIOR_;
                        my $match = 
                               $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior;
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   }
                   ## </metasyntax>
 ||    ( ( $pos = $pad{I1723} ) && 0 ) )
               || ( $bool = 1 )
               ) 
             &&
                (   ( $pad{I1724} = $pos or 1 ) && 
                 ## <constant>
                 ( ( substr( $s, $pos, 1 ) eq '&' )
                     ? ( $pos += 1 or 1 )
                     : 0
                 )
                 ## </constant>
 ||    ( ( $pos = $pad{I1724} ) && 0 ) )
             &&
                (   ( $pad{I1725} = $pos or 1 ) && 
                 do{
                     my $pos1 = $pos;
                     do {
                       my $pos = $pos1;
                       my $from = $pos;
                       my @match;
                       my %named;
                       $bool =                            do{
                               my $pos1 = $pos;
                               do {
                                 my $pos = $pos1;
                                 my $from = $pos;
                                 my @match;
                                 my %named;
                                 $bool = 0 unless
                                      (   ( $pad{I1726} = $pos or 1 ) && 
                                       ## <constant>
                                       ( ( substr( $s, $pos, 1 ) eq '&' )
                                           ? ( $pos += 1 or 1 )
                                           : 0
                                       )
                                       ## </constant>
 ||    ( ( $pos = $pad{I1726} ) && 0 ) );
                                 $bool;
                               };
                           } ? 0 : 1;
                       $bool;
                     };
                 } ||    ( ( $pos = $pad{I1725} ) && 0 ) )
             ) ||    ( ( $pos = $pad{I1722} ) && 0 ) )
         || ( $bool = 1 )
         ) 
       &&
         (
           (   ( $pad{I1727} = $pos or 1 ) && 
             do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                         $grammar->concat( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { push @{$named{'concat'}}, $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1727} ) && 0 ) )
         ) 
       &&
         do { while (
          (   ( $pad{I1728} = $pos or 1 ) && 
             (
                (   ( $pad{I1729} = $pos or 1 ) && 
                 ## <constant>
                 ( ( substr( $s, $pos, 1 ) eq '&' )
                     ? ( $pos += 1 or 1 )
                     : 0
                 )
                 ## </constant>
 ||    ( ( $pos = $pad{I1729} ) && 0 ) )
             &&
                (   ( $pad{I1730} = $pos or 1 ) && 
                 do{
                     my $pos1 = $pos;
                     do {
                       my $pos = $pos1;
                       my $from = $pos;
                       my @match;
                       my %named;
                       $bool =                            do{
                               my $pos1 = $pos;
                               do {
                                 my $pos = $pos1;
                                 my $from = $pos;
                                 my @match;
                                 my %named;
                                 $bool = 0 unless
                                      (   ( $pad{I1731} = $pos or 1 ) && 
                                       ## <constant>
                                       ( ( substr( $s, $pos, 1 ) eq '&' )
                                           ? ( $pos += 1 or 1 )
                                           : 0
                                       )
                                       ## </constant>
 ||    ( ( $pos = $pad{I1731} ) && 0 ) );
                                 $bool;
                               };
                           } ? 0 : 1;
                       $bool;
                     };
                 } ||    ( ( $pos = $pad{I1730} ) && 0 ) )
             &&
                (   ( $pad{I1732} = $pos or 1 ) && 
                 do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                             $grammar->concat( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { push @{$named{'concat'}}, $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1732} ) && 0 ) )
             ) ||    ( ( $pos = $pad{I1728} ) && 0 ) )) {}; $bool = 1 }
       &&
          (   ( $pad{I1733} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { 
        my @a = map {  $$_  }  @{ $::_V6_MATCH_->{'concat'} };
        return { conjunctive1 => \@a ,}  if scalar @a > 1;
        return $a[0];;
 # use v6
;
 } }->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1733} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
;## Signature for conjunctive1
 # Data::Bind->sub_signature
#  (\&conjunctive1, );
;
*disjunctive1 = ## <global>
do { my $rule; $rule = sub {
  
              $_[3] = $_[2];
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       (
         (
          (   ( $pad{I1734} = $pos or 1 ) && 
             (
               (
                (   ( $pad{I1735} = $pos or 1 ) && 

                   ## <metasyntax>
                   do {
                        my $prior = $::_V6_PRIOR_;
                        my $match = 
                               $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior;
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   }
                   ## </metasyntax>
 ||    ( ( $pos = $pad{I1735} ) && 0 ) )
               || ( $bool = 1 )
               ) 
             &&
                (   ( $pad{I1736} = $pos or 1 ) && 
                 ## <constant>
                 ( ( substr( $s, $pos, 1 ) eq '|' )
                     ? ( $pos += 1 or 1 )
                     : 0
                 )
                 ## </constant>
 ||    ( ( $pos = $pad{I1736} ) && 0 ) )
             &&
                (   ( $pad{I1737} = $pos or 1 ) && 
                 do{
                     my $pos1 = $pos;
                     do {
                       my $pos = $pos1;
                       my $from = $pos;
                       my @match;
                       my %named;
                       $bool =                            do{
                               my $pos1 = $pos;
                               do {
                                 my $pos = $pos1;
                                 my $from = $pos;
                                 my @match;
                                 my %named;
                                 $bool = 0 unless
                                      (   ( $pad{I1738} = $pos or 1 ) && 
                                       ## <constant>
                                       ( ( substr( $s, $pos, 1 ) eq '|' )
                                           ? ( $pos += 1 or 1 )
                                           : 0
                                       )
                                       ## </constant>
 ||    ( ( $pos = $pad{I1738} ) && 0 ) );
                                 $bool;
                               };
                           } ? 0 : 1;
                       $bool;
                     };
                 } ||    ( ( $pos = $pad{I1737} ) && 0 ) )
             ) ||    ( ( $pos = $pad{I1734} ) && 0 ) )
         || ( $bool = 1 )
         ) 
       &&
         (
           (   ( $pad{I1739} = $pos or 1 ) && 
             do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                         $grammar->conjunctive1( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { push @{$named{'conjunctive1'}}, $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1739} ) && 0 ) )
         ) 
       &&
         do { while (
          (   ( $pad{I1740} = $pos or 1 ) && 
             (
                (   ( $pad{I1741} = $pos or 1 ) && 
                 ## <constant>
                 ( ( substr( $s, $pos, 1 ) eq '|' )
                     ? ( $pos += 1 or 1 )
                     : 0
                 )
                 ## </constant>
 ||    ( ( $pos = $pad{I1741} ) && 0 ) )
             &&
                (   ( $pad{I1742} = $pos or 1 ) && 
                 do{
                     my $pos1 = $pos;
                     do {
                       my $pos = $pos1;
                       my $from = $pos;
                       my @match;
                       my %named;
                       $bool =                            do{
                               my $pos1 = $pos;
                               do {
                                 my $pos = $pos1;
                                 my $from = $pos;
                                 my @match;
                                 my %named;
                                 $bool = 0 unless
                                      (   ( $pad{I1743} = $pos or 1 ) && 
                                       ## <constant>
                                       ( ( substr( $s, $pos, 1 ) eq '|' )
                                           ? ( $pos += 1 or 1 )
                                           : 0
                                       )
                                       ## </constant>
 ||    ( ( $pos = $pad{I1743} ) && 0 ) );
                                 $bool;
                               };
                           } ? 0 : 1;
                       $bool;
                     };
                 } ||    ( ( $pos = $pad{I1742} ) && 0 ) )
             &&
                (   ( $pad{I1744} = $pos or 1 ) && 
                 do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                             $grammar->conjunctive1( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { push @{$named{'conjunctive1'}}, $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1744} ) && 0 ) )
             ) ||    ( ( $pos = $pad{I1740} ) && 0 ) )) {}; $bool = 1 }
       &&
          (   ( $pad{I1745} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { 
        my @a = map {  $$_  }  @{ $::_V6_MATCH_->{'conjunctive1'} };
        return { alt1 => \@a ,}  if scalar @a > 1;
        return $a[0];;
 # use v6
;
 } }->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1745} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
;## Signature for disjunctive1
 # Data::Bind->sub_signature
#  (\&disjunctive1, );
;
*conjunctive = ## <global>
do { my $rule; $rule = sub {
  
              $_[3] = $_[2];
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       (
         (
          (   ( $pad{I1746} = $pos or 1 ) && 
             (
               (
                (   ( $pad{I1747} = $pos or 1 ) && 

                   ## <metasyntax>
                   do {
                        my $prior = $::_V6_PRIOR_;
                        my $match = 
                               $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior;
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   }
                   ## </metasyntax>
 ||    ( ( $pos = $pad{I1747} ) && 0 ) )
               || ( $bool = 1 )
               ) 
             &&
                (   ( $pad{I1748} = $pos or 1 ) && 
                 ## <constant>
                 ( ( substr( $s, $pos, 1 ) eq '&' )
                     ? ( $pos += 1 or 1 )
                     : 0
                 )
                 ## </constant>
 ||    ( ( $pos = $pad{I1748} ) && 0 ) )
             &&
                (   ( $pad{I1749} = $pos or 1 ) && 
                 ## <constant>
                 ( ( substr( $s, $pos, 1 ) eq '&' )
                     ? ( $pos += 1 or 1 )
                     : 0
                 )
                 ## </constant>
 ||    ( ( $pos = $pad{I1749} ) && 0 ) )
             ) ||    ( ( $pos = $pad{I1746} ) && 0 ) )
         || ( $bool = 1 )
         ) 
       &&
         (
           (   ( $pad{I1750} = $pos or 1 ) && 
             do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                         $grammar->disjunctive1( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { push @{$named{'disjunctive1'}}, $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1750} ) && 0 ) )
         ) 
       &&
         do { while (
          (   ( $pad{I1751} = $pos or 1 ) && 
             (
                (   ( $pad{I1752} = $pos or 1 ) && 
                 ## <constant>
                 ( ( substr( $s, $pos, 1 ) eq '&' )
                     ? ( $pos += 1 or 1 )
                     : 0
                 )
                 ## </constant>
 ||    ( ( $pos = $pad{I1752} ) && 0 ) )
             &&
                (   ( $pad{I1753} = $pos or 1 ) && 
                 ## <constant>
                 ( ( substr( $s, $pos, 1 ) eq '&' )
                     ? ( $pos += 1 or 1 )
                     : 0
                 )
                 ## </constant>
 ||    ( ( $pos = $pad{I1753} ) && 0 ) )
             &&
                (   ( $pad{I1754} = $pos or 1 ) && 
                 do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                             $grammar->disjunctive1( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { push @{$named{'disjunctive1'}}, $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1754} ) && 0 ) )
             ) ||    ( ( $pos = $pad{I1751} ) && 0 ) )) {}; $bool = 1 }
       &&
          (   ( $pad{I1755} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { 
        my @a = map {  $$_  }  @{ $::_V6_MATCH_->{'disjunctive1'} };
        return { conjunctive => \@a ,}  if scalar @a > 1;
        return $a[0];;
 # use v6
;
 } }->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1755} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
;## Signature for conjunctive
 # Data::Bind->sub_signature
#  (\&conjunctive, );
;
*rule = ## <global>
do { my $rule; $rule = sub {
  
              $_[3] = $_[2];
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       (
         (
          (   ( $pad{I1756} = $pos or 1 ) && 
             (
               (
                (   ( $pad{I1757} = $pos or 1 ) && 

                   ## <metasyntax>
                   do {
                        my $prior = $::_V6_PRIOR_;
                        my $match = 
                               $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior;
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   }
                   ## </metasyntax>
 ||    ( ( $pos = $pad{I1757} ) && 0 ) )
               || ( $bool = 1 )
               ) 
             &&
                (   ( $pad{I1758} = $pos or 1 ) && 
                 ## <constant>
                 ( ( substr( $s, $pos, 1 ) eq '|' )
                     ? ( $pos += 1 or 1 )
                     : 0
                 )
                 ## </constant>
 ||    ( ( $pos = $pad{I1758} ) && 0 ) )
             &&
                (   ( $pad{I1759} = $pos or 1 ) && 
                 ## <constant>
                 ( ( substr( $s, $pos, 1 ) eq '|' )
                     ? ( $pos += 1 or 1 )
                     : 0
                 )
                 ## </constant>
 ||    ( ( $pos = $pad{I1759} ) && 0 ) )
             ) ||    ( ( $pos = $pad{I1756} ) && 0 ) )
         || ( $bool = 1 )
         ) 
       &&
         (
           (   ( $pad{I1760} = $pos or 1 ) && 
             do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                         $grammar->conjunctive( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { push @{$named{'conjunctive'}}, $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1760} ) && 0 ) )
         ) 
       &&
         do { while (
          (   ( $pad{I1761} = $pos or 1 ) && 
             (
                (   ( $pad{I1762} = $pos or 1 ) && 
                 ## <constant>
                 ( ( substr( $s, $pos, 1 ) eq '|' )
                     ? ( $pos += 1 or 1 )
                     : 0
                 )
                 ## </constant>
 ||    ( ( $pos = $pad{I1762} ) && 0 ) )
             &&
                (   ( $pad{I1763} = $pos or 1 ) && 
                 ## <constant>
                 ( ( substr( $s, $pos, 1 ) eq '|' )
                     ? ( $pos += 1 or 1 )
                     : 0
                 )
                 ## </constant>
 ||    ( ( $pos = $pad{I1763} ) && 0 ) )
             &&
                (   ( $pad{I1764} = $pos or 1 ) && 
                 do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                             $grammar->conjunctive( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { push @{$named{'conjunctive'}}, $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1764} ) && 0 ) )
             ) ||    ( ( $pos = $pad{I1761} ) && 0 ) )) {}; $bool = 1 }
       &&
          (   ( $pad{I1765} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { 
        my @a = map {  $$_  }  @{ $::_V6_MATCH_->{'conjunctive'} };
        return { alt => \@a ,}  if scalar @a > 1;
        return $a[0];;
 # use v6
;
 } }->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1765} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
;## Signature for rule
 # Data::Bind->sub_signature
#  (\&rule, );
;
*named_regex = ## <global>
do { my $rule; $rule = sub {
  
              $_[3] = $_[2];
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       (
          (   ( $pad{I1766} = $pos or 1 ) && 
           do{
               my $hash = do {
                 my $bool = 1;
                 my $from = $pos;
                 my @match;
                 my %named;
                 $bool = 0 unless
                   ## <alt>
                   (
                       ( $pad{I1767} = $pos or 1 )
                       && (
                        (   ( $pad{I1768} = $pos or 1 ) && 
                         ## <constant>
                         ( ( substr( $s, $pos, 5 ) eq 'token' )
                             ? ( $pos += 5 or 1 )
                             : 0
                         )
                         ## </constant>
 ||    ( ( $pos = $pad{I1768} ) && 0 ) )
                       )
                     || (
                       ( ( $bool = 1 ) && ( $pos = $pad{I1767} ) or 1 )
                       &&                         (   ( $pad{I1769} = $pos or 1 ) && 
                         ## <constant>
                         ( ( substr( $s, $pos, 5 ) eq 'regex' )
                             ? ( $pos += 5 or 1 )
                             : 0
                         )
                         ## </constant>
 ||    ( ( $pos = $pad{I1769} ) && 0 ) )
                       )
                     || (
                       ( ( $bool = 1 ) && ( $pos = $pad{I1767} ) or 1 )
                       &&                         (   ( $pad{I1770} = $pos or 1 ) && 
                         ## <constant>
                         ( ( substr( $s, $pos, 4 ) eq 'rule' )
                             ? ( $pos += 4 or 1 )
                             : 0
                         )
                         ## </constant>
 ||    ( ( $pos = $pad{I1770} ) && 0 ) )
                     )
                   )
## </alt>
;
                 { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
               };
               my $bool = ${$hash->{'bool'}};
               $match[ 0 ] = Pugs::Runtime::Match->new( $hash );
               $bool;
           } ||    ( ( $pos = $pad{I1766} ) && 0 ) )
       &&
          (   ( $pad{I1771} = $pos or 1 ) && 

           ## <metasyntax>
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                my $bool = (!$match != 1);
                $pos = $match->to if $bool;
                $match;
           }
           ## </metasyntax>
 ||    ( ( $pos = $pad{I1771} ) && 0 ) )
       &&
          (   ( $pad{I1772} = $pos or 1 ) && 
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->ident( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'ident'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1772} ) && 0 ) )
       &&
         (
          (   ( $pad{I1773} = $pos or 1 ) && 

             ## <metasyntax>
             do {
                  my $prior = $::_V6_PRIOR_;
                  my $match = 
                         $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                  $::_V6_PRIOR_ = $prior;
                  my $bool = (!$match != 1);
                  $pos = $match->to if $bool;
                  $match;
             }
             ## </metasyntax>
 ||    ( ( $pos = $pad{I1773} ) && 0 ) )
         || ( $bool = 1 )
         ) 
       &&
          (   ( $pad{I1774} = $pos or 1 ) && 
           ## <constant>
           ( ( substr( $s, $pos, 1 ) eq '{' )
               ? ( $pos += 1 or 1 )
               : 0
           )
           ## </constant>
 ||    ( ( $pos = $pad{I1774} ) && 0 ) )
       &&
         (
          (   ( $pad{I1775} = $pos or 1 ) && 

             ## <metasyntax>
             do {
                  my $prior = $::_V6_PRIOR_;
                  my $match = 
                         $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                  $::_V6_PRIOR_ = $prior;
                  my $bool = (!$match != 1);
                  $pos = $match->to if $bool;
                  $match;
             }
             ## </metasyntax>
 ||    ( ( $pos = $pad{I1775} ) && 0 ) )
         || ( $bool = 1 )
         ) 
       &&
          (   ( $pad{I1776} = $pos or 1 ) && 
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->rule( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'rule'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1776} ) && 0 ) )
       &&
          (   ( $pad{I1777} = $pos or 1 ) && 
           ## <constant>
           ( ( substr( $s, $pos, 1 ) eq '}' )
               ? ( $pos += 1 or 1 )
               : 0
           )
           ## </constant>
 ||    ( ( $pos = $pad{I1777} ) && 0 ) )
       &&
         (
          (   ( $pad{I1778} = $pos or 1 ) && 
             ## <constant>
             ( ( substr( $s, $pos, 1 ) eq ';' )
                 ? ( $pos += 1 or 1 )
                 : 0
             )
             ## </constant>
 ||    ( ( $pos = $pad{I1778} ) && 0 ) )
         || ( $bool = 1 )
         ) 
       &&
          (   ( $pad{I1779} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'type' => ${$::_V6_MATCH_->[0]}, 'name' => ${ $::_V6_MATCH_->{'ident'}}, 'ast' => ${ $::_V6_MATCH_->{'rule'}}});
 } }->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1779} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
;## Signature for named_regex
 # Data::Bind->sub_signature
#  (\&named_regex, );
;
*verbatim = ## <global>
do { my $rule; $rule = sub {
  
              $_[3] = $_[2];
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       (
          (   ( $pad{I1780} = $pos or 1 ) && 
           ## <constant>
           ( ( substr( $s, $pos, 2 ) eq '%{' )
               ? ( $pos += 2 or 1 )
               : 0
           )
           ## </constant>
 ||    ( ( $pos = $pad{I1780} ) && 0 ) )
       &&
          (   ( $pad{I1781} = $pos or 1 ) && 
           do{
               my $hash = do {
                 my $bool = 1;
                 my $from = $pos;
                 my @match;
                 my %named;
                 $bool = 0 unless
                   do { while (
                    (   ( $pad{I1782} = $pos or 1 ) && 
                       (
                          (   ( $pad{I1783} = $pos or 1 ) && 
                           do{
                               my $pos1 = $pos;
                               do {
                                 my $pos = $pos1;
                                 my $from = $pos;
                                 my @match;
                                 my %named;
                                 $bool =                                      do{
                                         my $pos1 = $pos;
                                         do {
                                           my $pos = $pos1;
                                           my $from = $pos;
                                           my @match;
                                           my %named;
                                           $bool = 0 unless
                                               ## <constant>
                                               ( ( substr( $s, $pos, 2 ) eq '%}' )
                                                   ? ( $pos += 2 or 1 )
                                                   : 0
                                               )
                                               ## </constant>
;
                                           $bool;
                                         };
                                     } ? 0 : 1;
                                 $bool;
                               };
                           } ||    ( ( $pos = $pad{I1783} ) && 0 ) )
                       &&
                          (   ( $pad{I1784} = $pos or 1 ) && 
                           ( substr( $s, $pos++, 1 ) ne '' ) ||    ( ( $pos = $pad{I1784} ) && 0 ) )
                       ) ||    ( ( $pos = $pad{I1782} ) && 0 ) )) {}; $bool = 1 };
                 { str => \$s, from => \$from, match => \@match, named => \%named, bool => \$bool, to => \(0+$pos), capture => undef }
               };
               my $bool = ${$hash->{'bool'}};
               $match[ 0 ] = Pugs::Runtime::Match->new( $hash );
               $bool;
           } ||    ( ( $pos = $pad{I1781} ) && 0 ) )
       &&
          (   ( $pad{I1785} = $pos or 1 ) && 
           ## <constant>
           ( ( substr( $s, $pos, 2 ) eq '%}' )
               ? ( $pos += 2 or 1 )
               : 0
           )
           ## </constant>
 ||    ( ( $pos = $pad{I1785} ) && 0 ) )
       &&
          (   ( $pad{I1786} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'type' => 'block', 'value' => ${$::_V6_MATCH_->[0]}});
 } }->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1786} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
;## Signature for verbatim
 # Data::Bind->sub_signature
#  (\&verbatim, );
;
*item = ## <global>
do { my $rule; $rule = sub {
  
              $_[3] = $_[2];
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       ## <alt>
       (
           ( $pad{I1787} = $pos or 1 )
           && (
           (
              (   ( $pad{I1788} = $pos or 1 ) && 
               do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                           $grammar->verbatim( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'verbatim'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1788} ) && 0 ) )
           &&
              (   ( $pad{I1789} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return(${ $::_V6_MATCH_->{'verbatim'}});
 } }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1789} ) && 0 ) )
           )
           )
         || (
           ( ( $bool = 1 ) && ( $pos = $pad{I1787} ) or 1 )
           &&            (
              (   ( $pad{I1790} = $pos or 1 ) && 
               do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                           $grammar->named_regex( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'named_regex'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1790} ) && 0 ) )
           &&
              (   ( $pad{I1791} = $pos or 1 ) && 
               do { 
                 local $::_V6_SUCCEED = 1;
                 $::_V6_MATCH_ = $m;
                 $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return(${ $::_V6_MATCH_->{'named_regex'}});
 } }->( $m ) ); 
                 $bool = $::_V6_SUCCEED;
                 $::_V6_MATCH_ = $m if $bool; 
                 return $m if $bool; 
               } ||    ( ( $pos = $pad{I1791} ) && 0 ) )
           )
         )
       )
## </alt>
;
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
;## Signature for item
 # Data::Bind->sub_signature
#  (\&item, );
;
*grammar = ## <global>
do { my $rule; $rule = sub {
  
              $_[3] = $_[2];
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       (
         (
          (   ( $pad{I1792} = $pos or 1 ) && 

             ## <metasyntax>
             do {
                  my $prior = $::_V6_PRIOR_;
                  my $match = 
                         $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                  $::_V6_PRIOR_ = $prior;
                  my $bool = (!$match != 1);
                  $pos = $match->to if $bool;
                  $match;
             }
             ## </metasyntax>
 ||    ( ( $pos = $pad{I1792} ) && 0 ) )
         || ( $bool = 1 )
         ) 
       &&
          (   ( $pad{I1793} = $pos or 1 ) && 
           ## <constant>
           ( ( substr( $s, $pos, 7 ) eq 'grammar' )
               ? ( $pos += 7 or 1 )
               : 0
           )
           ## </constant>
 ||    ( ( $pos = $pad{I1793} ) && 0 ) )
       &&
          (   ( $pad{I1794} = $pos or 1 ) && 

           ## <metasyntax>
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                my $bool = (!$match != 1);
                $pos = $match->to if $bool;
                $match;
           }
           ## </metasyntax>
 ||    ( ( $pos = $pad{I1794} ) && 0 ) )
       &&
          (   ( $pad{I1795} = $pos or 1 ) && 
           do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                       $grammar->ident( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { $named{'ident'} = $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1795} ) && 0 ) )
       &&
         (
          (   ( $pad{I1796} = $pos or 1 ) && 

             ## <metasyntax>
             do {
                  my $prior = $::_V6_PRIOR_;
                  my $match = 
                         $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                  $::_V6_PRIOR_ = $prior;
                  my $bool = (!$match != 1);
                  $pos = $match->to if $bool;
                  $match;
             }
             ## </metasyntax>
 ||    ( ( $pos = $pad{I1796} ) && 0 ) )
         || ( $bool = 1 )
         ) 
       &&
          (   ( $pad{I1797} = $pos or 1 ) && 
           ## <constant>
           ( ( substr( $s, $pos, 1 ) eq ';' )
               ? ( $pos += 1 or 1 )
               : 0
           )
           ## </constant>
 ||    ( ( $pos = $pad{I1797} ) && 0 ) )
       &&
         (
          (   ( $pad{I1798} = $pos or 1 ) && 

             ## <metasyntax>
             do {
                  my $prior = $::_V6_PRIOR_;
                  my $match = 
                         $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                  $::_V6_PRIOR_ = $prior;
                  my $bool = (!$match != 1);
                  $pos = $match->to if $bool;
                  $match;
             }
             ## </metasyntax>
 ||    ( ( $pos = $pad{I1798} ) && 0 ) )
         || ( $bool = 1 )
         ) 
       &&
         do { while (
          (   ( $pad{I1799} = $pos or 1 ) && 
             (
                (   ( $pad{I1800} = $pos or 1 ) && 
                 do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                             $grammar->item( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { push @{$named{'item'}}, $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1800} ) && 0 ) )
             &&
               (
                (   ( $pad{I1801} = $pos or 1 ) && 

                   ## <metasyntax>
                   do {
                        my $prior = $::_V6_PRIOR_;
                        my $match = 
                               $grammar->ws( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                        $::_V6_PRIOR_ = $prior;
                        my $bool = (!$match != 1);
                        $pos = $match->to if $bool;
                        $match;
                   }
                   ## </metasyntax>
 ||    ( ( $pos = $pad{I1801} ) && 0 ) )
               || ( $bool = 1 )
               ) 
             ) ||    ( ( $pos = $pad{I1799} ) && 0 ) )) {}; $bool = 1 }
       &&
          (   ( $pad{I1802} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({${ $::_V6_MATCH_->{'ident'}} =>  $::_V6_MATCH_->{'item'}});
 } }->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1802} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
;## Signature for grammar
 # Data::Bind->sub_signature
#  (\&grammar, );
;
*spec = ## <global>
do { my $rule; $rule = sub {
  
              $_[3] = $_[2];
              eval{ $_[2] = undef };
              my $grammar
             = $_[0];
  my $s = $_[1];
  no warnings 'substr', 'uninitialized', 'syntax';
  my %pad;
  my $m;
  for my $pos ( defined $_[3]{p} && ! $_[3]{continue}
        ? $_[3]{p}
        : ( ( $_[3]{p} || pos($_[1]) || 0 ) .. length( $s ) ) ) {
    my %index;
    my @match;
    my %named;
    my $bool = 1;
    $named{KEY} = $_[3]{KEY} if exists $_[3]{KEY};
    $m = Pugs::Runtime::Match->new( {
      str => \$s, from => \(0+$pos), to => \($pos),
      bool => \$bool, match => \@match, named => \%named, capture => undef,
    } );
    {
      my $prior = $::_V6_PRIOR_;
      local $::_V6_PRIOR_ = $prior;
      $bool = 0 unless
       (
         (
          (   ( $pad{I1803} = $pos or 1 ) && 
             do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                         $grammar->verbatim( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { push @{$named{'verbatim'}}, $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1803} ) && 0 ) )
         || ( $bool = 1 )
         ) 
       &&
         do { while (
          (   ( $pad{I1804} = $pos or 1 ) && 
             do {
                my $prior = $::_V6_PRIOR_;
                my $match = 
                         $grammar->grammar( $s, { p => $pos, positionals => [  ], args => {}, }, undef );
                $::_V6_PRIOR_ = $prior;
                if ( $match ) { push @{$named{'grammar'}}, $match;
                    $pos = $match->to;
                    1
                }
                else { 0 }
            } ||    ( ( $pos = $pad{I1804} ) && 0 ) )) {}; $bool = 1 }
       &&
          (   ( $pad{I1805} = $pos or 1 ) && 
           do { 
             local $::_V6_SUCCEED = 1;
             $::_V6_MATCH_ = $m;
             $m->data->{capture} = \( sub { my $_V6_SELF = shift;  { return({'block' =>  $::_V6_MATCH_->{'verbatim'}, 'grammar' =>  $::_V6_MATCH_->{'grammar'}});
 } }->( $m ) ); 
             $bool = $::_V6_SUCCEED;
             $::_V6_MATCH_ = $m if $bool; 
             return $m if $bool; 
           } ||    ( ( $pos = $pad{I1805} ) && 0 ) )
       );
    }
    if ( $bool ) {
      my $prior = $::_V6_PRIOR_;
      $::_V6_PRIOR_ = sub {
        local $main::_V6_PRIOR_ = $prior;
        $rule->(@_);
      };
      #warn "pos2 = ", $pos, "\n";
      pos($_[1]) = $pos if $_[3]{continue};
      last;
    }
  } # /for
  $::_V6_MATCH_ = $m;
  return $m;
} }
## </global>
;## Signature for spec
 # Data::Bind->sub_signature
#  (\&spec, );
;

; 1;
