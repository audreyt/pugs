Here is a zeroth-draft description of the new MMD algorithm for S06.
It needs a much rewrite, but my objective is to dump the concepts of the
current algorithm proposal, before stumbling off to long-delayed sleep.


Multi(sub/method) Dispatch

A multi is a set of variants.  Each variant is a Code, with its own
Signature.  A normal call to a multi is handled by the variant whose
signature most closely matches the call's arguments.  If no variant is
the unambiguous best fit, an error is raised.

There are two phases, compatability and choice.

Variants incompatible with the call's arguments are ignored.

Among the rest, fit is determined by examining parameter positions,
individually, left to right, and comparing the type tightness between
the argument, and the parameter of each candidate variant.  Named
parameters, while checked for compatibility, do not currently affect
fit.

Variants can be in three states: contender for being chosen, spoiler,
and disregarded.  Chosen|spoiler = alive.  All start out as
contenders.  Are disqualified for being chosen, thus becoming
spoilers, by being insufficiently tight in some position, when
compared against all chosen+spoilers.  By two semi-colon related
mechanisms, spoilers can become disregarded.  If there is exactly one
contender left after all the positions are processed, then it is
chosen.  Otherwise an ambiguity error is raised.

Consider a single variant.  We move left to right over positional
arguments.  If we are to be chosen, each parameter examined must be at
least as tight as that of any other alive (ie, non-disregarded)
variant.  Otherwise it ceases to be a contender.  At each semicolon,
if it is the only contender, we are done.  Or equivalently, all
spoilers become disregarded, so nothing can change in subsequent
positions.  Thus, other, already disqualified variants, do not get a
chance to disqualify us on later, "less significant (because after a
semi)", positions.  If we reach our variant's finial semi, which
preceeds the "not at all significant" positions, and we are still not
the only contender, then we cease to be a contender.  We become a
spoiler, but in a bit of oddity, one with subsequent parameter types
treated as Any.  Our only role at this point is to establish ambiguity
[wait, we cant do that as a spoiler], if the contending variants
[... wait, puzzle here.  figure it in the morning].  There are thus
two ways to cease being a contender.

If we cease being a contender due to insufficiently tight (or
incomparable) position fit, then our only role is to disqualify other
contenders, and the only question is how long we can do this before
being disregarded.  We become disregarded the first time we hit one of
our own semis (because the subsequent parameters are "less
significant"), or at any position, if all of the contenders at that
point have a semi.  (Currently called the sepecu and execution rules).
The execution rule is the multiple variant version of the "reach a
semi as only contender" rule.  The motivating idea is to be able to
make one variant into several, disambiguated after the semi, without
opening them up for disqualification from spoilers, who were
disqualified in the single variant case by the "semi as only
contender" rule, which obviously wont fire in the when the there are
two related variants.  If all contender variants have a semi in the
same place, all spoilers become disregarded.  And that's it.

The type fit between two types is: for each type, find the [which?]
type converstion path between them, and make a set of any roles, any
class, all ancestors of the class, any subsets.  A set is tighter if
it has a superset of classes and subsets.  Types which are roles are
considered to be class Any.  If the sets of classes are the same, then
we do the same thing with roles.  If the sets of classes are not the
same, but neither is a superset of the other, then the fits are
incomparable.  But if this happens for rules, the fits are considered
equivalent. [needs a lot of work and description of motivations/impacts]

------------------------------------------------------------
Backstory and discussion:
