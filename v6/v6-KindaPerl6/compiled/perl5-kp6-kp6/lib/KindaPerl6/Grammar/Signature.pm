# Do not edit this file - Generated by MiniPerl6
use v5;
use strict;
use MiniPerl6::Perl5::Runtime;
use MiniPerl6::Perl5::Match;

package KindaPerl6::Grammar;
sub new { shift; bless {@_}, "KindaPerl6::Grammar" }

sub parameter_named_only {
    my $grammar = shift;
    my $List__  = \@_;
    my $str;
    my $pos;
    do { $str = $List__->[0]; $pos = $List__->[1]; [ $str, $pos ] };
    my $MATCH;
    $MATCH = MiniPerl6::Perl5::Match->new( 'str' => $str, 'from' => $pos, 'to' => $pos, 'bool' => 1, );
    $MATCH->bool(
        do {
            my $pos1 = $MATCH->to();
            (   do {
                    (   ( ( ':' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && do {
                            my $ret = sub {
                                my $List__ = \@_;
                                do { [] };
                                do { return (1) };
                                '974^213';
                                }
                                ->();
                            do {
                                if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                else                         { }
                            };
                            1;
                            }
                    );
                    }
                    || do {
                    $MATCH->to($pos1);
                    do {
                        my $ret = sub {
                            my $List__ = \@_;
                            do { [] };
                            do { return (0) };
                            '974^213';
                            }
                            ->();
                        do {
                            if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                            else                         { }
                        };
                        1;
                        }
                    }
            );
            }
    );
    return ($MATCH);
}

sub parameter_optional {
    my $grammar = shift;
    my $List__  = \@_;
    my $str;
    my $pos;
    do { $str = $List__->[0]; $pos = $List__->[1]; [ $str, $pos ] };
    my $MATCH;
    $MATCH = MiniPerl6::Perl5::Match->new( 'str' => $str, 'from' => $pos, 'to' => $pos, 'bool' => 1, );
    $MATCH->bool(
        do {
            my $pos1 = $MATCH->to();
            (   do {
                    (   ( ( '?' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && do {
                            my $ret = sub {
                                my $List__ = \@_;
                                do { [] };
                                do { return (1) };
                                '974^213';
                                }
                                ->();
                            do {
                                if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                else                         { }
                            };
                            1;
                            }
                    );
                    }
                    || do {
                    $MATCH->to($pos1);
                    do {
                        my $ret = sub {
                            my $List__ = \@_;
                            do { [] };
                            do { return (0) };
                            '974^213';
                            }
                            ->();
                        do {
                            if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                            else                         { }
                        };
                        1;
                        }
                    }
            );
            }
    );
    return ($MATCH);
}

sub parameter_slurpy {
    my $grammar = shift;
    my $List__  = \@_;
    my $str;
    my $pos;
    do { $str = $List__->[0]; $pos = $List__->[1]; [ $str, $pos ] };
    my $MATCH;
    $MATCH = MiniPerl6::Perl5::Match->new( 'str' => $str, 'from' => $pos, 'to' => $pos, 'bool' => 1, );
    $MATCH->bool(
        do {
            my $pos1 = $MATCH->to();
            (   do {
                    (   ( ( '*' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && do {
                            my $ret = sub {
                                my $List__ = \@_;
                                do { [] };
                                do { return (1) };
                                '974^213';
                                }
                                ->();
                            do {
                                if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                else                         { }
                            };
                            1;
                            }
                    );
                    }
                    || do {
                    $MATCH->to($pos1);
                    do {
                        my $ret = sub {
                            my $List__ = \@_;
                            do { [] };
                            do { return (0) };
                            '974^213';
                            }
                            ->();
                        do {
                            if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                            else                         { }
                        };
                        1;
                        }
                    }
            );
            }
    );
    return ($MATCH);
}

sub parameter_multidimensional {
    my $grammar = shift;
    my $List__  = \@_;
    my $str;
    my $pos;
    do { $str = $List__->[0]; $pos = $List__->[1]; [ $str, $pos ] };
    my $MATCH;
    $MATCH = MiniPerl6::Perl5::Match->new( 'str' => $str, 'from' => $pos, 'to' => $pos, 'bool' => 1, );
    $MATCH->bool(
        do {
            my $pos1 = $MATCH->to();
            (   do {
                    (   ( ( '@' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && do {
                            my $ret = sub {
                                my $List__ = \@_;
                                do { [] };
                                do { return (1) };
                                '974^213';
                                }
                                ->();
                            do {
                                if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                else                         { }
                            };
                            1;
                            }
                    );
                    }
                    || do {
                    $MATCH->to($pos1);
                    do {
                        my $ret = sub {
                            my $List__ = \@_;
                            do { [] };
                            do { return (0) };
                            '974^213';
                            }
                            ->();
                        do {
                            if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                            else                         { }
                        };
                        1;
                        }
                    }
            );
            }
    );
    return ($MATCH);
}

sub exp_parameter_item {
    my $grammar = shift;
    my $List__  = \@_;
    my $str;
    my $pos;
    do { $str = $List__->[0]; $pos = $List__->[1]; [ $str, $pos ] };
    my $MATCH;
    $MATCH = MiniPerl6::Perl5::Match->new( 'str' => $str, 'from' => $pos, 'to' => $pos, 'bool' => 1, );
    $MATCH->bool(
        do {
            my $pos1 = $MATCH->to();
            (   do {
                    (   do {
                            my $m2 = $grammar->parameter_slurpy( $str, $MATCH->to() );
                            do {
                                if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'parameter_slurpy'} = $m2; 1 }
                                else     {0}
                                }
                            }
                            && (
                            do {
                                my $m2 = $grammar->pair( $str, $MATCH->to() );
                                do {
                                    if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'pair'} = $m2; 1 }
                                    else     {0}
                                    }
                            }
                            && do {
                                my $ret = sub {
                                    my $List__ = \@_;
                                    do { [] };
                                    do { return ( Lit::NamedArgument->new( 'key' => ${ $MATCH->{'pair'} }->[0], 'value' => ${ $MATCH->{'pair'} }->[1], ) ) };
                                    '974^213';
                                    }
                                    ->();
                                do {
                                    if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                    else                         { }
                                };
                                1;
                            }
                            )
                    );
                    }
                    || do {
                    $MATCH->to($pos1);
                    (   do {
                            my $m2 = $grammar->exp( $str, $MATCH->to() );
                            do {
                                if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'exp'} = $m2; 1 }
                                else     {0}
                                }
                            }
                            && do {
                            my $ret = sub {
                                my $List__ = \@_;
                                do { [] };
                                do { return ( ${ $MATCH->{'exp'} } ) };
                                '974^213';
                                }
                                ->();
                            do {
                                if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                else                         { }
                            };
                            1;
                            }
                    );
                    }
            );
            }
    );
    return ($MATCH);
}

sub exp_parameter_list {
    my $grammar = shift;
    my $List__  = \@_;
    my $str;
    my $pos;
    do { $str = $List__->[0]; $pos = $List__->[1]; [ $str, $pos ] };
    my $MATCH;
    $MATCH = MiniPerl6::Perl5::Match->new( 'str' => $str, 'from' => $pos, 'to' => $pos, 'bool' => 1, );
    $MATCH->bool(
        do {
            my $pos1 = $MATCH->to();
            (   do {
                    (   do {
                            my $m2 = $grammar->exp_parameter_item( $str, $MATCH->to() );
                            do {
                                if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'exp_parameter_item'} = $m2; 1 }
                                else     {0}
                                }
                            }
                            && do {
                            my $pos1 = $MATCH->to();
                            (   do {
                                    (   do {
                                            my $m2 = $grammar->opt_ws( $str, $MATCH->to() );
                                            do {
                                                if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                else     {0}
                                                }
                                            }
                                            && (
                                            ( ( ',' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && (
                                                do {
                                                    my $m2 = $grammar->opt_ws( $str, $MATCH->to() );
                                                    do {
                                                        if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                        else     {0}
                                                        }
                                                }
                                                && (do {
                                                        my $m2 = $grammar->exp_parameter_list( $str, $MATCH->to() );
                                                        do {
                                                            if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'exp_parameter_list'} = $m2; 1 }
                                                            else     {0}
                                                            }
                                                    }
                                                    && do {
                                                        my $ret = sub {
                                                            my $List__ = \@_;
                                                            do { [] };
                                                            do { return ( [ ${ $MATCH->{'exp_parameter_item'} }, @{ ${ $MATCH->{'exp_parameter_list'} } } ] ) };
                                                            '974^213';
                                                            }
                                                            ->();
                                                        do {
                                                            if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                                            else                         { }
                                                        };
                                                        1;
                                                    }
                                                )
                                            )
                                            )
                                    );
                                    }
                                    || do {
                                    $MATCH->to($pos1);
                                    (   do {
                                            my $m2 = $grammar->opt_ws( $str, $MATCH->to() );
                                            do {
                                                if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                else     {0}
                                                }
                                            }
                                            && (
                                            do {
                                                my $pos1 = $MATCH->to();
                                                (   do {
                                                        (   ( ( ',' eq substr( $str, $MATCH->to(), 1 ) ) ? ( 1 + $MATCH->to( ( 1 + $MATCH->to() ) ) ) : 0 ) && do {
                                                                my $m2 = $grammar->opt_ws( $str, $MATCH->to() );
                                                                do {
                                                                    if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                                                    else     {0}
                                                                    }
                                                                }
                                                        );
                                                        }
                                                        || do { $MATCH->to($pos1); 1 }
                                                );
                                            }
                                            && do {
                                                my $ret = sub {
                                                    my $List__ = \@_;
                                                    do { [] };
                                                    do { return ( [ ${ $MATCH->{'exp_parameter_item'} } ] ) };
                                                    '974^213';
                                                    }
                                                    ->();
                                                do {
                                                    if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                                    else                         { }
                                                };
                                                1;
                                            }
                                            )
                                    );
                                    }
                            );
                            }
                    );
                    }
                    || do {
                    $MATCH->to($pos1);
                    do {
                        my $ret = sub {
                            my $List__ = \@_;
                            do { [] };
                            do { return ( [] ) };
                            '974^213';
                            }
                            ->();
                        do {
                            if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                            else                         { }
                        };
                        1;
                        }
                    }
            );
            }
    );
    return ($MATCH);
}

sub sig {
    my $grammar = shift;
    my $List__  = \@_;
    my $str;
    my $pos;
    do { $str = $List__->[0]; $pos = $List__->[1]; [ $str, $pos ] };
    my $MATCH;
    $MATCH = MiniPerl6::Perl5::Match->new( 'str' => $str, 'from' => $pos, 'to' => $pos, 'bool' => 1, );
    $MATCH->bool(
        do {
            my $pos1 = $MATCH->to();
            do {
                (   do {
                        my $m2 = $grammar->invocant( $str, $MATCH->to() );
                        do {
                            if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'invocant'} = $m2; 1 }
                            else     {0}
                            }
                        }
                        && (
                        do {
                            my $m2 = $grammar->opt_ws( $str, $MATCH->to() );
                            do {
                                if ($m2) { $MATCH->to( $m2->to() ); 1 }
                                else     {0}
                                }
                        }
                        && (do {
                                my $m2 = $grammar->exp_seq( $str, $MATCH->to() );
                                do {
                                    if ($m2) { $MATCH->to( $m2->to() ); $MATCH->{'exp_seq'} = $m2; 1 }
                                    else     {0}
                                    }
                            }
                            && do {
                                my $ret = sub {
                                    my $List__ = \@_;
                                    do { [] };
                                    do { return ( Sig->new( 'invocant' => ${ $MATCH->{'invocant'} }, 'positional' => ${ $MATCH->{'exp_seq'} }, 'named' => {}, ) ) };
                                    '974^213';
                                    }
                                    ->();
                                do {
                                    if ( ( $ret ne '974^213' ) ) { $MATCH->capture($ret); $MATCH->bool(1); return ($MATCH) }
                                    else                         { }
                                };
                                1;
                            }
                        )
                        )
                );
                }
            }
    );
    return ($MATCH);
}

1;
