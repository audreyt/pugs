{

    package KindaPerl6::Grammar;

    # Do not edit this file - Perl 5 generated by KindaPerl6
    # AUTHORS, COPYRIGHT: Please look at the source file.
    use v5;
    use strict;
    no strict "vars";
    use constant KP6_DISABLE_INSECURE_CODE => 0;
    use KindaPerl6::Runtime::Perl5::Runtime;
    my $_MODIFIED;
    INIT { $_MODIFIED = {} }
    INIT {
        $_ =
          ::DISPATCH( $::Scalar, "new",
            { modified => $_MODIFIED, name => "$_" } );
    }
    do {
        our $Code_declare_parameters =
          ::DISPATCH( $::Routine, 'new',
            { modified => $_MODIFIED, name => '$Code_declare_parameters' } );
        do {
            if (
                ::DISPATCH(
                    ::DISPATCH(
                        ::DISPATCH(
                            (
                                $GLOBAL::Code_VAR_defined =
                                  $GLOBAL::Code_VAR_defined
                                  || ::DISPATCH( $::Routine, "new", )
                            ),
                            'APPLY',
                            $::KindaPerl6::Grammar
                        ),
                        "true"
                    ),
                    "p5landish"
                )
              )
            {
            }
            else {
                do {
                    our $Code_declare_parameters = ::DISPATCH(
                        $::Routine,
                        'new',
                        {
                            modified => $_MODIFIED,
                            name     => '$Code_declare_parameters'
                        }
                    );
                    do {
                        ::MODIFIED($::KindaPerl6::Grammar);
                        $::KindaPerl6::Grammar = ::DISPATCH(
                            ::DISPATCH(
                                $::Class, 'new',
                                ::DISPATCH(
                                    $::Str, 'new', 'KindaPerl6::Grammar'
                                )
                            ),
                            'PROTOTYPE',
                        );
                      }
                  }
            }
        };
        do {
            ::MODIFIED($Code_declare_parameters);
            $Code_declare_parameters = ::DISPATCH(
                $::Code, 'new',
                {
                    code => sub {
                        my $decl;
                        $decl =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$decl' } )
                          unless defined $decl;
                        INIT {
                            $decl =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$decl' } );
                        }
                        my $var;
                        $var =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$var' } )
                          unless defined $var;
                        INIT {
                            $var =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$var' } );
                        }
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        my $env;
                        $env =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$env' } )
                          unless defined $env;
                        INIT {
                            $env =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$env' } );
                        }
                        my $vars;
                        $vars =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$vars' } )
                          unless defined $vars;
                        INIT {
                            $vars =
                              ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$vars' } );
                        }
                        my $CAPTURE;
                        $CAPTURE =
                          ::DISPATCH( $::Scalar, 'new',
                            { modified => $_MODIFIED, name => '$CAPTURE' } )
                          unless defined $CAPTURE;
                        INIT {
                            $CAPTURE = ::DISPATCH( $::Scalar, 'new',
                                { modified => $_MODIFIED, name => '$CAPTURE' }
                            );
                        }
                        my $List__ =
                          ::DISPATCH( $::ArrayContainer, 'new',
                            { modified => $_MODIFIED, name => '$List__' } );
                        ::DISPATCH_VAR( $CAPTURE, "STORE", ::CAPTURIZE( \@_ ) );
                        ::DISPATCH_VAR( $List__, 'STORE',
                            ::DISPATCH( $CAPTURE, 'array', ) );
                        do {
                            ::MODIFIED($Hash__);
                            $Hash__ = ::DISPATCH( $CAPTURE, 'hash', );
                        };
                        {
                            my $_param_index = 0;
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'env' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($env);
                                    $env =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'env' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $env = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                            if (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'vars' )
                                    )
                                )->{_value}
                              )
                            {
                                do {
                                    ::MODIFIED($vars);
                                    $vars =
                                      ::DISPATCH( $Hash__, 'LOOKUP',
                                        ::DISPATCH( $::Str, 'new', 'vars' ) );
                                  }
                            }
                            elsif (
                                ::DISPATCH(
                                    $GLOBAL::Code_exists,
                                    'APPLY',
                                    ::DISPATCH(
                                        $List__, 'INDEX',
                                        ::DISPATCH(
                                            $::Int, 'new', $_param_index
                                        )
                                    )
                                )->{_value}
                              )
                            {
                                $vars = ::DISPATCH(
                                    $List__, 'INDEX',
                                    ::DISPATCH(
                                        $::Int, 'new', $_param_index++
                                    )
                                );
                            }
                        }
                        $decl;
                        $var;
                        ::DISPATCH(
                            ::DISPATCH(
                                (
                                    $GLOBAL::Code_prefix_58__60__64__62_ =
                                      $GLOBAL::Code_prefix_58__60__64__62_
                                      || ::DISPATCH( $::Routine, "new", )
                                ),
                                'APPLY', $vars
                            ),
                            'map',
                            ::DISPATCH(
                                $::Code, 'new',
                                {
                                    code => sub {
                                        my $List__ = ::DISPATCH(
                                            $::ArrayContainer,
                                            'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$List__'
                                            }
                                        );
                                        my $var;
                                        $var = ::DISPATCH(
                                            $::Scalar,
                                            'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$var'
                                            }
                                        ) unless defined $var;
                                        INIT {
                                            $var = ::DISPATCH(
                                                $::Scalar,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$var'
                                                }
                                            );
                                        }
                                        my $CAPTURE;
                                        $CAPTURE = ::DISPATCH(
                                            $::Scalar,
                                            'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$CAPTURE'
                                            }
                                        ) unless defined $CAPTURE;
                                        INIT {
                                            $CAPTURE = ::DISPATCH(
                                                $::Scalar,
                                                'new',
                                                {
                                                    modified => $_MODIFIED,
                                                    name     => '$CAPTURE'
                                                }
                                            );
                                        }
                                        my $List__ = ::DISPATCH(
                                            $::ArrayContainer,
                                            'new',
                                            {
                                                modified => $_MODIFIED,
                                                name     => '$List__'
                                            }
                                        );
                                        ::DISPATCH_VAR( $CAPTURE, "STORE",
                                            ::CAPTURIZE( \@_ ) );
                                        ::DISPATCH_VAR( $List__, 'STORE',
                                            ::DISPATCH( $CAPTURE, 'array', ) );
                                        do {
                                            ::MODIFIED($Hash__);
                                            $Hash__ =
                                              ::DISPATCH( $CAPTURE, 'hash', );
                                        };
                                        {
                                            my $_param_index = 0;
                                            if (
                                                ::DISPATCH(
                                                    $GLOBAL::Code_exists,
                                                    'APPLY',
                                                    ::DISPATCH(
                                                        $Hash__, 'LOOKUP',
                                                        ::DISPATCH(
                                                            $::Str, 'new',
                                                            'var'
                                                        )
                                                    )
                                                )->{_value}
                                              )
                                            {
                                                do {
                                                    ::MODIFIED($var);
                                                    $var = ::DISPATCH(
                                                        $Hash__, 'LOOKUP',
                                                        ::DISPATCH(
                                                            $::Str, 'new',
                                                            'var'
                                                        )
                                                    );
                                                  }
                                            }
                                            elsif (
                                                ::DISPATCH(
                                                    $GLOBAL::Code_exists,
                                                    'APPLY',
                                                    ::DISPATCH(
                                                        $List__, 'INDEX',
                                                        ::DISPATCH(
                                                            $::Int,
                                                            'new',
                                                            $_param_index
                                                        )
                                                    )
                                                )->{_value}
                                              )
                                            {
                                                $var = ::DISPATCH(
                                                    $List__, 'INDEX',
                                                    ::DISPATCH(
                                                        $::Int,
                                                        'new',
                                                        $_param_index++
                                                    )
                                                );
                                            }
                                        }
                                        do {
                                            if (
                                                ::DISPATCH(
                                                    ::DISPATCH(
                                                        ::DISPATCH(
                                                            $var,
                                                            'isa',
                                                            ::DISPATCH(
                                                                $::Str, 'new',
                                                                'Var'
                                                            )
                                                        ),
                                                        "true"
                                                    ),
                                                    "p5landish"
                                                )
                                              )
                                            {
                                                do {
                                                    ::DISPATCH(
                                                        (
                                                            $GLOBAL::Code_push =
                                                              $GLOBAL::Code_push
                                                              || ::DISPATCH(
                                                                $::Routine,
                                                                "new",
                                                              )
                                                        ),
                                                        'APPLY',
                                                        ::DISPATCH(
                                                            (
                                                                $GLOBAL::Code_prefix_58__60__64__62_
                                                                  = $GLOBAL::Code_prefix_58__60__64__62_
                                                                  || ::DISPATCH(
                                                                    $::Routine,
                                                                    "new",
                                                                  )
                                                            ),
                                                            'APPLY',
                                                            $decl
                                                        ),
                                                        ::DISPATCH(
                                                            $::Decl,
                                                            'new',
                                                            ::DISPATCH(
                                                                $::NamedArgument,
                                                                "new",
                                                                {
                                                                    _argument_name_ =>
                                                                      ::DISPATCH(
                                                                        $::Str,
                                                                        'new',
                                                                        'decl'
                                                                      ),
                                                                    value =>
                                                                      ::DISPATCH(
                                                                        $::Str,
                                                                        'new',
                                                                        'my'
                                                                      ),
                                                                }
                                                            ),
                                                            ::DISPATCH(
                                                                $::NamedArgument,
                                                                "new",
                                                                {
                                                                    _argument_name_ =>
                                                                      ::DISPATCH(
                                                                        $::Str,
                                                                        'new',
                                                                        'var'
                                                                      ),
                                                                    value =>
                                                                      $var,
                                                                }
                                                            ),
                                                            ::DISPATCH(
                                                                $::NamedArgument,
                                                                "new",
                                                                {
                                                                    _argument_name_ =>
                                                                      ::DISPATCH(
                                                                        $::Str,
                                                                        'new',
                                                                        'type'
                                                                      ),
                                                                    value =>
                                                                      ::DISPATCH(
                                                                        $::Str,
                                                                        'new',
                                                                        ''
                                                                      ),
                                                                }
                                                            ),
                                                        )
                                                    );
                                                  }
                                            }
                                            else {
                                                ::DISPATCH( $::Bit, "new", 0 );
                                            }
                                          }
                                    },
                                    signature => ::DISPATCH(
                                        $::Signature,
                                        "new",
                                        {
                                            invocant => $::Undef,
                                            array    => ::DISPATCH(
                                                $::List, "new",
                                                {
                                                    _array => [
                                                        ::DISPATCH(
                                                            $::Signature::Item,
                                                            'new',
                                                            {
                                                                sigil  => '$',
                                                                twigil => '',
                                                                name   => 'var',
                                                                value =>
                                                                  $::Undef,
                                                                has_default =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_named_only =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_optional =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_slurpy =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_multidimensional =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_rw =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                                is_copy =>
                                                                  ::DISPATCH(
                                                                    $::Bit,
                                                                    'new',
                                                                    0
                                                                  ),
                                                            }
                                                        ),
                                                    ]
                                                }
                                            ),
                                            return => $::Undef,
                                        }
                                    ),
                                }
                            )
                        );
                        ::DISPATCH( $env, 'add_lexicals', $decl );
                    },
                    signature => ::DISPATCH(
                        $::Signature,
                        "new",
                        {
                            invocant => $::Undef,
                            array    => ::DISPATCH(
                                $::List, "new",
                                {
                                    _array => [
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'env',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                        ::DISPATCH(
                                            $::Signature::Item,
                                            'new',
                                            {
                                                sigil       => '$',
                                                twigil      => '',
                                                name        => 'vars',
                                                value       => $::Undef,
                                                has_default => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_named_only => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_optional => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_slurpy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_multidimensional =>
                                                  ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                  ),
                                                is_rw => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                                is_copy => ::DISPATCH(
                                                    $::Bit, 'new', 0
                                                ),
                                            }
                                        ),
                                    ]
                                }
                            ),
                            return => $::Undef,
                        }
                    ),
                }
            );
        };
        do {
            use vars qw($_rule_exp_parameter_named);
            INIT {
                $_rule_exp_parameter_named = qr 
    (?{ 
        local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; 
        $GLOBAL::_M2 = $GLOBAL::_M; 
    })
    (?:(?:(?:(??{ eval '$_rule_ident' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "ident" ]; }))(?:(??{ eval '$_rule_opt_ws' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; }))=>(?:(??{ eval '$_rule_opt_ws' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; }))(?:(??{ eval '$_rule_exp' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "exp" ]; }))(?{ 
        local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
        Match::from_global_data( $GLOBAL::_M ); 
        $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
        @Match::Matches = (); 
        my $ret = ( sub {
            do {return(::DISPATCH( $::Array, 'new', { _array => [::DISPATCH( $::Val::Buf, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'buf' )
            , value           => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__126__62_ = $GLOBAL::Code_prefix_58__60__126__62_ || ::DISPATCH( $::Routine, "new", )  ) 
            , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'ident' )
             )
             )
            ,  } ),  )
            , ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
            , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp' )
             )
             )
            ] }
             )
            )
            }; "974^213" 
        } )->();
        if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; };
     }))|(?:\:(?:(??{ eval '$_rule_ident' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "ident" ]; }))\<(?:(??{ eval '$_rule_angle_quoted' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "angle_quoted" ]; }))\>(?{ 
        local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
        Match::from_global_data( $GLOBAL::_M ); 
        $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
        @Match::Matches = (); 
        my $ret = ( sub {
            do {return(::DISPATCH( $::Array, 'new', { _array => [::DISPATCH( $::Val::Buf, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'buf' )
            , value           => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__126__62_ = $GLOBAL::Code_prefix_58__60__126__62_ || ::DISPATCH( $::Routine, "new", )  ) 
            , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'ident' )
             )
             )
            ,  } ),  )
            , ::DISPATCH( $::Val::Buf, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'buf' )
            , value           => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__126__62_ = $GLOBAL::Code_prefix_58__60__126__62_ || ::DISPATCH( $::Routine, "new", )  ) 
            , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'angle_quoted' )
             )
             )
            ,  } ),  )
            ] }
             )
            )
            }; "974^213" 
        } )->();
        if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; };
     }))|(?:\:(?:(??{ eval '$_rule_ident' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "ident" ]; }))\((?:(??{ eval '$_rule_opt_ws' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; }))(?:(??{ eval '$_rule_exp' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "exp" ]; }))(?:(??{ eval '$_rule_opt_ws' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; }))\)(?{ 
        local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
        Match::from_global_data( $GLOBAL::_M ); 
        $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
        @Match::Matches = (); 
        my $ret = ( sub {
            do {return(::DISPATCH( $::Array, 'new', { _array => [::DISPATCH( $::Val::Buf, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'buf' )
            , value           => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__126__62_ = $GLOBAL::Code_prefix_58__60__126__62_ || ::DISPATCH( $::Routine, "new", )  ) 
            , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'ident' )
             )
             )
            ,  } ),  )
            , ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
            , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp' )
             )
             )
            ] }
             )
            )
            }; "974^213" 
        } )->();
        if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; };
     }))|(?:\:(?:(??{ eval '$_rule_ident' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "ident" ]; }))(?{ 
        local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
        Match::from_global_data( $GLOBAL::_M ); 
        $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
        @Match::Matches = (); 
        my $ret = ( sub {
            do {return(::DISPATCH( $::Array, 'new', { _array => [::DISPATCH( $::Val::Buf, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'buf' )
            , value           => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__126__62_ = $GLOBAL::Code_prefix_58__60__126__62_ || ::DISPATCH( $::Routine, "new", )  ) 
            , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'ident' )
             )
             )
            ,  } ),  )
            , ::DISPATCH( $::Val::Bit, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'bit' )
            , value           => ::DISPATCH( $::Int, 'new', 1 )
            ,  } ),  )
            ] }
             )
            )
            }; "974^213" 
        } )->();
        if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; };
     }))|(?:\:(?:(??{ eval '$_rule_sigil' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "sigil" ]; }))(?:(??{ eval '$_rule_ident' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "ident" ]; }))(?{ 
        local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
        Match::from_global_data( $GLOBAL::_M ); 
        $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
        @Match::Matches = (); 
        my $ret = ( sub {
            do {return(::DISPATCH( $::Array, 'new', { _array => [::DISPATCH( $::Val::Buf, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'buf' )
            , value           => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__126__62_ = $GLOBAL::Code_prefix_58__60__126__62_ || ::DISPATCH( $::Routine, "new", )  ) 
            , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'ident' )
             )
             )
            ,  } ),  )
            , ::DISPATCH( $::Var, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'sigil' )
            , value           => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__126__62_ = $GLOBAL::Code_prefix_58__60__126__62_ || ::DISPATCH( $::Routine, "new", )  ) 
            , 'APPLY', ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
            , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'sigil' )
             )
             )
             )
            ,  } ), ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'twigil' )
            , value           => ::DISPATCH( $::Str, 'new', '' )
            ,  } ), ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'name' )
            , value           => ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
            , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'ident' )
             )
             )
            ,  } ), ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'namespace' )
            , value           => ::DISPATCH( $::Array, 'new', { _array => [] }
             )
            ,  } ),  )
            ] }
             )
            )
            }; "974^213" 
        } )->();
        if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; };
     })))
    (?{ 
        local $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; 
        $GLOBAL::_M2 = $GLOBAL::_M; 
    })
     x;
            }
            ::DISPATCH(
                ::DISPATCH( $::KindaPerl6::Grammar, "HOW" ),
                "add_method",
                ::DISPATCH( $::Str, "new", "exp_parameter_named" ),
                ::DISPATCH(
                    $::Method,
                    "new",
                    {
                        code => sub {
                            local $GLOBAL::_Class = shift;
                            undef $GLOBAL::_M2;
                            ( ref($_) ? ::DISPATCH( $_, "Str" )->{_value} : $_ )
                              =~ /$_rule_exp_parameter_named/;
                            if ( $GLOBAL::_M2->[1] eq 'to' ) {
                                Match::from_global_data($GLOBAL::_M2);
                                $MATCH = $GLOBAL::MATCH = pop @Match::Matches;
                            }
                            else { $MATCH = $GLOBAL::MATCH = Match->new(); }
                            @Match::Matches = ();
                            return $MATCH;
                          }
                    }
                ),
            );
        };
        do {
            use vars qw($_rule_exp_parameter_item);
            INIT {
                $_rule_exp_parameter_item = qr 
    (?{ 
        local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; 
        $GLOBAL::_M2 = $GLOBAL::_M; 
    })
    (?:(?:(?:(??{ eval '$_rule_exp_parameter_named' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "exp_parameter_named" ]; }))(?{ 
        local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
        Match::from_global_data( $GLOBAL::_M ); 
        $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
        @Match::Matches = (); 
        my $ret = ( sub {
            do {return(::DISPATCH( $::Lit::NamedArgument, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'key' )
            , value           => ::DISPATCH( ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
            , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp_parameter_named' )
             )
             )
            , 'INDEX', ::DISPATCH( $::Int, 'new', 0 )
             )
            ,  } ), ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'value' )
            , value           => ::DISPATCH( ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
            , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp_parameter_named' )
             )
             )
            , 'INDEX', ::DISPATCH( $::Int, 'new', 1 )
             )
            ,  } ),  )
            )
            }; "974^213" 
        } )->();
        if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; };
     }))|(?:(?:(??{ eval '$_rule_pair' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "pair" ]; }))(?{ 
        local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
        Match::from_global_data( $GLOBAL::_M ); 
        $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
        @Match::Matches = (); 
        my $ret = ( sub {
            do {return(::DISPATCH( $::Lit::Pair, 'new', ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'key' )
            , value           => ::DISPATCH( ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
            , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'pair' )
             )
             )
            , 'INDEX', ::DISPATCH( $::Int, 'new', 0 )
             )
            ,  } ), ::DISPATCH( $::NamedArgument, "new", { _argument_name_ => ::DISPATCH( $::Str, 'new', 'value' )
            , value           => ::DISPATCH( ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
            , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'pair' )
             )
             )
            , 'INDEX', ::DISPATCH( $::Int, 'new', 1 )
             )
            ,  } ),  )
            )
            }; "974^213" 
        } )->();
        if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; };
     }))|(?:(?:(??{ eval '$_rule_exp' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "exp" ]; }))(?{ 
        local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
        Match::from_global_data( $GLOBAL::_M ); 
        $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
        @Match::Matches = (); 
        my $ret = ( sub {
            do {return(::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
            , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp' )
             )
             )
            )
            }; "974^213" 
        } )->();
        if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; };
     })))
    (?{ 
        local $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; 
        $GLOBAL::_M2 = $GLOBAL::_M; 
    })
     x;
            }
            ::DISPATCH(
                ::DISPATCH( $::KindaPerl6::Grammar, "HOW" ),
                "add_method",
                ::DISPATCH( $::Str, "new", "exp_parameter_item" ),
                ::DISPATCH(
                    $::Method,
                    "new",
                    {
                        code => sub {
                            local $GLOBAL::_Class = shift;
                            undef $GLOBAL::_M2;
                            ( ref($_) ? ::DISPATCH( $_, "Str" )->{_value} : $_ )
                              =~ /$_rule_exp_parameter_item/;
                            if ( $GLOBAL::_M2->[1] eq 'to' ) {
                                Match::from_global_data($GLOBAL::_M2);
                                $MATCH = $GLOBAL::MATCH = pop @Match::Matches;
                            }
                            else { $MATCH = $GLOBAL::MATCH = Match->new(); }
                            @Match::Matches = ();
                            return $MATCH;
                          }
                    }
                ),
            );
        };
        do {
            use vars qw($_rule_exp_parameter_list);
            INIT {
                $_rule_exp_parameter_list = qr 
    (?{ 
        local $GLOBAL::_M = [ $GLOBAL::_M, 'create', pos(), \$_ ]; 
        $GLOBAL::_M2 = $GLOBAL::_M; 
    })
    (?:(?:(?:(??{ eval '$_rule_exp_parameter_item' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "exp_parameter_item" ]; }))(?:(?:(?:(??{ eval '$_rule_opt_ws' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; }))\,(?:(??{ eval '$_rule_opt_ws' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; }))(?:(??{ eval '$_rule_exp_parameter_list' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "named_capture", "exp_parameter_list" ]; }))(?{ 
        local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
        Match::from_global_data( $GLOBAL::_M ); 
        $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
        @Match::Matches = (); 
        my $ret = ( sub {
            do {return(::DISPATCH( $::Array, 'new', { _array => [::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
            , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp_parameter_item' )
             )
             )
            , ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__64__62_ = $GLOBAL::Code_prefix_58__60__64__62_ || ::DISPATCH( $::Routine, "new", )  ) 
            , 'APPLY', ::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
            , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp_parameter_list' )
             )
             )
             )
            ] }
             )
            )
            }; "974^213" 
        } )->();
        if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; };
     }))|(?:(?:(??{ eval '$_rule_opt_ws' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; }))(?:(?:\,(?:(??{ eval '$_rule_opt_ws' })(?{ local $GLOBAL::_M = [ $GLOBAL::_M, "discard_capture" ]; })))|(?:))(?{ 
        local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
        Match::from_global_data( $GLOBAL::_M ); 
        $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
        @Match::Matches = (); 
        my $ret = ( sub {
            do {return(::DISPATCH( $::Array, 'new', { _array => [::DISPATCH(  ( $GLOBAL::Code_prefix_58__60__36__62_ = $GLOBAL::Code_prefix_58__60__36__62_ || ::DISPATCH( $::Routine, "new", )  ) 
            , 'APPLY', ::DISPATCH( $MATCH, 'LOOKUP', ::DISPATCH( $::Str, 'new', 'exp_parameter_item' )
             )
             )
            ] }
             )
            )
            }; "974^213" 
        } )->();
        if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; };
     }))))|(?:(?{ 
        local $GLOBAL::_M = [ $GLOBAL::_M, "to", pos() ]; 
        Match::from_global_data( $GLOBAL::_M ); 
        $MATCH = $GLOBAL::MATCH = pop @Match::Matches; 
        @Match::Matches = (); 
        my $ret = ( sub {
            do {return(::DISPATCH( $::Array, 'new', { _array => [] }
             )
            )
            }; "974^213" 
        } )->();
        if ( $ret ne "974^213" ) {$GLOBAL::_M = [ [ @$GLOBAL::_M ], "result", $ret ]; };
     })))
    (?{ 
        local $GLOBAL::_M = [ $GLOBAL::_M, 'to', pos() ]; 
        $GLOBAL::_M2 = $GLOBAL::_M; 
    })
     x;
            }
            ::DISPATCH(
                ::DISPATCH( $::KindaPerl6::Grammar, "HOW" ),
                "add_method",
                ::DISPATCH( $::Str, "new", "exp_parameter_list" ),
                ::DISPATCH(
                    $::Method,
                    "new",
                    {
                        code => sub {
                            local $GLOBAL::_Class = shift;
                            undef $GLOBAL::_M2;
                            ( ref($_) ? ::DISPATCH( $_, "Str" )->{_value} : $_ )
                              =~ /$_rule_exp_parameter_list/;
                            if ( $GLOBAL::_M2->[1] eq 'to' ) {
                                Match::from_global_data($GLOBAL::_M2);
                                $MATCH = $GLOBAL::MATCH = pop @Match::Matches;
                            }
                            else { $MATCH = $GLOBAL::MATCH = Match->new(); }
                            @Match::Matches = ();
                            return $MATCH;
                          }
                    }
                ),
            );
          }
    };
    1
}
