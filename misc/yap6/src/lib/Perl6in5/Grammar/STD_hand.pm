package Perl6in5::Grammar::STD_hand;

use warnings;
#use strict; #haha

use base 'Exporter';
our @EXPORT = qw ( make_parser );

use Perl6in5::Compiler::Trace; # set env var TRACE for trace output

# isa Perl6in5::Grammar someday (to inherit some of the common features below)

use Perl6in5::Grammar;
use Perl6in5::Compiler::Stream ':all';
use Perl6in5::Compiler::Parser ':all';
use Perl6in5::Compiler::Lexer ':all';

use Data::Dumper;
$Data::Dumper::Indent = 0;
$Data::Dumper::Terse = 1;
$Data::Dumper::Useqq = 1;
$Data::Dumper::Quotekeys = 0;
#$Data::Dumper::Deparse = 1;

no warnings qw{ reserved closure recursion };

sub make_parser {
    
    my $input = shift;
    
    my $lexer = iterator_to_stream(make_lexer($input,
    [ 'ID'              ,qr|[A-Za-z_]\w*|     ,                            ],
    [ 'INT'             ,qr|\d+|              ,                            ],
    # Actually someday soon, all that should remain
    # here is the "C" pattern (unfortunately?), since there is so much that
    # will need to be redefinable at parse time, the lexing needs to go
    # character by character.  This means that the lexing step will merely
    # generate a sub generator that generates a stream of nested arrayrefs
    # (with the lexer as the tail) that each contain the next character.
    [ "C"               ,qr/./s               ,                            ],

    )); 

    # <sigh> these "predeclaration" need to be autogenerated someday, somehow
    my ($base, $expr, $factor, $program, $term, $sVari, $stringLit, $declare,
        $usev6, $comma, $stmtList, $newline, $blkBare, $blkPrmbl, $nbexpr,
        $blkType, $blkRetT, $blkModf, $stmtTrm, $scpDecl, $block, $arg,
        $blkPrm, $compUnit, $flowCtrl, $blkLabl, $clype, $impor, $assign,
        $op_numaddt, $blkTrait, $pkgDecl, $arrowInv, $prmDecl, $vsblty,
        $invcDecl, $func_say
    );

    my $Op_numaddt         = parser { $op_numaddt      ->(@_) };
    sub op_numaddt () { $Op_numaddt };
    my $Nbexpr             = parser { $nbexpr          ->(@_) };
    sub nbexpr () { $Nbexpr };
    my $Clype              = parser { $clype           ->(@_) };
    sub clype () { $Clype };
    my $Declare            = parser { $declare         ->(@_) };
    sub declare () { $Declare };
    my $Assign             = parser { $assign          ->(@_) };
    sub assign () { $Assign };
    my $Impor              = parser { $impor           ->(@_) };
    sub impor () { $Impor };
    my $Base               = parser { $base            ->(@_) };
    sub base () { $Base };
    my $Expr               = parser { $expr            ->(@_) };
    sub expr () { $Expr };
    my $Factor             = parser { $factor          ->(@_) };
    sub factor () { $Factor };
    my $Program            = parser { $program         ->(@_) };
    sub program () { $Program };
    my $Term               = parser { $term            ->(@_) };
    sub term () { $Term };
    my $SVari              = parser { $sVari           ->(@_) };
    sub sVari () { $SVari };
    my $StringLit          = parser { $stringLit       ->(@_) };
    sub stringLit () { $StringLit };
    my $Usev6              = parser { $usev6           ->(@_) };
    sub usev6 () { $Usev6 };
    my $Comma              = parser { $comma           ->(@_) };
    sub comma () { $Comma };
    my $StmtList           = parser { $stmtList        ->(@_) };
    sub stmtList () { $StmtList };
    my $BlkBare            = parser { $blkBare         ->(@_) };
    sub blkBare () { $BlkBare };
    my $BlkPrmbl           = parser { $blkPrmbl        ->(@_) };
    sub blkPrmbl () { $BlkPrmbl };
    my $BlkType            = parser { $blkType         ->(@_) };
    sub blkType () { $BlkType };
    my $BlkRetT            = parser { $blkRetT         ->(@_) };
    sub blkRetT () { $BlkRetT };
    my $BlkModf            = parser { $blkModf         ->(@_) };
    sub blkModf () { $BlkModf };
    my $StmtTrm            = parser { $stmtTrm         ->(@_) };
    sub stmtTrm () { $StmtTrm };
    my $ScpDecl            = parser { $scpDecl         ->(@_) };
    sub scpDecl () { $ScpDecl };
    my $Block              = parser { $block           ->(@_) };
    sub block () { $Block };
    my $Arg                = parser { $arg             ->(@_) };
    sub arg () { $Arg };
    my $BlkPrms            = parser { $blkPrms         ->(@_) };
    sub blkPrms () { $BlkPrms };
    my $FlowCtrl           = parser { $flowCtrl        ->(@_) };
    sub flowCtrl () { $FlowCtrl };
    my $BlkLabl            = parser { $blkLabl         ->(@_) };
    sub blkLabl () { $BlkLabl };
    my $CompUnit           = parser { $compUnit        ->(@_) };
    sub compUnit () { $CompUnit };
    my $BlkTrait           = parser { $blkTrait        ->(@_) };
    sub blkTrait () { $BlkTrait };
    my $PkgDecl            = parser { $pkgDecl         ->(@_) };
    sub pkgDecl () { $PkgDecl };
    my $ArrowInv           = parser { $arrowInv        ->(@_) };
    sub arrowInv () { $ArrowInv };
    my $PrmDecl            = parser { $prmDecl         ->(@_) };
    sub prmDecl () { $PrmDecl };
    my $Vsblty             = parser { $vsblty          ->(@_) };
    sub vsblty () { $Vsblty };
    my $InvcDecl           = parser { $invcDecl        ->(@_) };
    sub invcDecl () { $InvcDecl };
    my $Func_say           = parser { $func_say        ->(@_) };
    sub func_say () { $Func_say };

    # these hash keys are coderef (addresses)
    our %N = (
        $Expr             => 'Expr',
        $Term             => 'Term',
        $Factor           => 'Factor',
        $Base             => 'Base',
        $Program          => 'Program',
        $ScpDecl          => 'ScpDecl',
        $SVari            => 'SVari',
        $StringLit        => 'StringLit',
        $Usev6            => 'Usev6',
        $Comma            => 'Comma',
        $StmtList         => 'StmtList',
        $BlkBare          => 'BlkBare',
        $BlkPrmbl         => 'BlkPrmbl',
        $BlkType          => 'BlkType',
        $BlkRetT          => 'BlkRetT',
        $BlkModf          => 'BlkModf',
        $StmtTrm          => 'StmtTrm',
        $Block            => 'Block',
        $Arg              => 'Arg',
        $BlkPrms          => 'BlkPrms',
        $FlowCtrl         => 'FlowCtrl',
        $BlkLabl          => 'BlkLabl',
        $CompUnit         => 'CompUnit',
        $Clype            => 'Class/Type',
        $Impor            => 'Import',
        $Assign           => 'Assign',
        $Nbexpr           => 'Nbexpr',
        $Declare          => 'Declare',
        $Op_numaddt       => 'Op_numaddt',
        $BlkTrait         => 'BlkTrait',
        $PkgDecl          => 'PkgDecl',
        $ArrowInv         => 'ArrowInv',
        $PrmDecl          => 'PrmDecl',
        $Vsblty           => 'Vsblty',
        $InvcDecl         => 'InvcDecl',
        $Func_say         => 'Func_say'
    );

    #   Rule Writing
    # Rules that consist at the top level of alternatives (separated by "|")
    # generally represent "classes" of items that are encoded in the
    # source.
    # 
    # Rules that consist at the top level of a sequence (items separated by
    # "-") generally represent items that define the descent into
    # "subcontexts", or areas of the source code where things signify
    # differently from things in a "higher" context.
    # 
    # In order to specifiy precedence levels, just create another
    # level of indirection by creating a rule to represent the 
    # precedence level, and order the possibilities in the order of 
    # 1) whither recursion 2) whether the beginning of a match to
    # rule n is contained in the beginning of the next rule.
    
    # The identifier of each of your rules must begin with a lowercase letter,
    # so that the source filter can transform/generate the grammar properly.

    # The synopses specify that everything before a "use v6;" statement is
    # to be handled as Perl 5 code.
    
    
    # rule perl5zone {
            # sl(); # grabs anything/everything...
    # }

    rule program {
            # everything must start with a use v6; statement until
            # the perl5zone rule is operational.
            -((usev6)--)
          . opt(pkgDecl--)
          . opt(stmtList--)
    };

    rule pkgDecl {
            keyword('package') + hit('ID') . stmtTrm;
    };

    rule usev6 {
                (keyword('use') + keywords(qw{ v6 Perl-6 })
              | keyword('module') + opt(keyword('Main'))
              | keywords(qw{ class v6.0.0 v6 6 }))
          . stmtTrm
    };

    rule sVari {
            '$' . hit('ID')
    };

    rule comma {
            ','
    };

    rule stmtList {
           -((   nbexpr . opt(      stmtTrm          . opt(stmtList) )
              | block . ( stmtTrm | -((ch("\n"))--) ) . opt(stmtList)
            )--)
    };

    rule nbexpr {
           # panic(pkgDecl,"Can't declare a non-block package")
            sVari
          | impor
          | assign
          | func_say
          | blkTrait
          | w('()',expr)
          | op_numaddt
          | hit('INT')
    };
    
    rule func_say {
        keyword('say') + expr
    };
    
    rule op_numaddt {
            term
          - star('+' - term
               | '-' - term)
    };

    rule blkBare {
            w("{}",opt(stmtList))
    };

    rule block {
            opt(blkPrmbl) - blkBare
    };

    rule blkPrmbl {
            opt(blkModf++)
            # this is an example of sometimes having to enumerate various
            # possiblities during a sequence of variously optional terms
            # in order to force the obtaining of the appropriate token set
            # blkType is the only required term in the block preamble
          . (scpDecl + clype + blkType | scpDecl + blkType | blkType )
          . opt(+(opt('^') . sVari)) - opt(+(vsblty)) . opt(+(w('()',opt(blkPrms))))
          . opt(+(blkTrait))
          | compUnit
          | flowCtrl
          | blkLabl
          | arrowInv - opt(',' - opt(blkPrms))
    };

    rule arrowInv {
            word('<-') - prmDecl
    };

    rule blkTrait {
            plus(-(keywords(qw{ is does has }) + prmDecl))
    };

    rule impor {
            keywords(qw{ no use require module class }) + hit('ID') . opt(+nbexpr)
    };

    rule flowCtrl {
            keywords(qw{ loop do while until })
    };

    rule condBlk { # Until I die, I would cry unless unless/until were included.
        # if unless elsif else 
    };

    rule compUnit {
            keywords(qw{ eval PRE POST ENTER LEAVE KEEP UNDO FIRST 
                         LAST BEGIN END INIT CHECK UNITCHECK })
    };

    rule blkType {
            keywords(qw{ sub method submethod regex token rule
                         macro module class package grammar})
    };

    rule blkRetT {
            clype
    };

    rule clype {
            hit('ID')  # just take any class/type name for now :)
            #  $Clype    # Class/Type
    };

    rule blkLabl {
            hit('ID') . ':';
    };

    rule blkModf {
            keywords(qw{ multi proto only })
    };

    rule arg {
            'h'  #obviously this is just a stub.
    };

    # block parameter declaration
    rule blkPrms {
            opt(invcDecl) . plus(-(comma) - (prmDecl)--)
    };
    
    # invocant declaration
    rule invcDecl {
            prmDecl . ':'
    };

    rule prmDecl {
            opt(clype++) . sVari
    };

    rule vsblty {
        keywords(qw{ public private })
    };

    rule stmtTrm {
            plus(-';'--)
    };

    rule scpDecl {
            keywords(qw{ my our })
    };

    rule expr {
            block
          | nbexpr
    };

    rule declare {
            scpDecl + prmDecl
          | keywords(qw{ module class grammar }) + clype
    };

    rule assign {
            opt(scpDecl++) . prmDecl - '=' - expr
    };

    # This is a great example of how to structure an operator level's
    # (recursive) grammar syntax.
    rule term {
            factor - star('*' - factor | '/' - factor )
    };

    rule factor {
            nbexpr - opt(word('**') - factor)
    };

    sub {
        my @results;
        @results = (program->($lexer,eoi));
        if ($@) {
            #warn "syntax error near: ".Dumper(head(tail(head($@))) || head(tail($@)))."\n";
            return 255;
        } else {
            print "parse successful\n";
            trace Dumper(\@results);
            return 0;
        }
    }
}

1;